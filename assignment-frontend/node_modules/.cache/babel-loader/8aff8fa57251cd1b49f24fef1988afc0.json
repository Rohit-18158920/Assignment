{"ast":null,"code":"import { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { isValidShade, getShade, getBackgroundShade } from '../../utilities/color/shades';\nimport { format } from '../../Utilities';\n\nvar ThemeGenerator =\n/** @class */\nfunction () {\n  function ThemeGenerator() {}\n  /**\n   * Sets an IThemeSlotRule to the given color and cascades it to the rest of the theme, updating other IThemeSlotRules\n   * in the theme that inherit from that color.\n   * @param isInverted - whether it's a dark theme or not, which affects the algorithm used to generate shades\n   * @param isCustomization - should be true only if it's a user action, and indicates overwriting the slot's\n   * inheritance (if any)\n   * @param overwriteCustomColor - A slot could have a generated color based on its inheritance rules (isCustomized\n   * is false), or a custom color based on user input (isCustomized is true). This bool tells us whether to override\n   * existing customized colors.\n   */\n\n\n  ThemeGenerator.setSlot = function (rule, color, isInverted, isCustomization, overwriteCustomColor) {\n    if (isInverted === void 0) {\n      isInverted = false;\n    }\n\n    if (isCustomization === void 0) {\n      isCustomization = false;\n    }\n\n    if (overwriteCustomColor === void 0) {\n      overwriteCustomColor = true;\n    }\n\n    if (!rule.color && rule.value) {\n      // not a color rule\n      return;\n    }\n\n    if (overwriteCustomColor) {\n      var colorAsIColor = void 0;\n\n      if (typeof color === 'string') {\n        colorAsIColor = getColorFromString(color); // the ! is a lie here but we'll verify it in the next line\n\n        if (!colorAsIColor) {\n          throw new Error('color is invalid in setSlot(): ' + color);\n        }\n      } else {\n        colorAsIColor = color;\n      }\n\n      ThemeGenerator._setSlot(rule, colorAsIColor, isInverted, isCustomization, overwriteCustomColor);\n    } else if (rule.color) {\n      ThemeGenerator._setSlot(rule, rule.color, isInverted, isCustomization, overwriteCustomColor);\n    }\n  };\n  /**\n   * Sets the color of each slot based on its rule. Slots that don't inherit must have a color already.\n   * If this completes without error, then the theme is ready to use. (All slots will have a color.)\n   * setSlot() can be called before this, but this must be called before getThemeAs*().\n   * Does not override colors of rules where isCustomized is true (i.e. doesn't override existing customizations).\n   */\n\n\n  ThemeGenerator.insureSlots = function (slotRules, isInverted) {\n    // Get all the \"root\" rules, the ones which don't inherit. Then \"set\" them to trigger updating dependent slots.\n    for (var ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        var rule = slotRules[ruleName];\n\n        if (!rule.inherits && !rule.value) {\n          if (!rule.color) {\n            throw new Error('A color slot rule that does not inherit must provide its own color.');\n          }\n\n          ThemeGenerator._setSlot(rule, rule.color, isInverted, false, false);\n        }\n      }\n    }\n  };\n  /**\n   * Gets the JSON-formatted blob that describes the theme, usable with the REST request endpoints:\n   * ```\n   * { [theme slot name as string] : [color as string],\n   *  \"tokenName\": \"#f00f00\",\n   *  \"tokenName2\": \"#ba2ba2\",\n   *   ... }\n   * ```\n   */\n\n\n  ThemeGenerator.getThemeAsJson = function (slotRules) {\n    var theme = {};\n\n    for (var ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        var rule = slotRules[ruleName];\n        theme[rule.name] = rule.color ? rule.color.str : rule.value || '';\n      }\n    }\n\n    return theme;\n  };\n  /**\n   * Gets code-formatted load theme blob that can be copy and pasted.\n   * Only used for the old theme designer, where loadTheme usage is acceptable,\n   * unlike in the new theme designer.\n   */\n\n\n  ThemeGenerator.getThemeAsCode = function (slotRules) {\n    var output = 'loadTheme({\\n  palette: {\\n';\n    return ThemeGenerator._makeRemainingCode(output, slotRules);\n  };\n  /**\n   * Gets code-formatted load theme blob, specifically for the new theme designer,\n   * aka.ms/themedesigner. Shouldn't use loadTheme like the old theme designer since it's deprecated.\n   * We want to use the theme object from createTheme and use the Customizations.applySettings API instead.\n   */\n\n\n  ThemeGenerator.getThemeAsCodeWithCreateTheme = function (slotRules) {\n    var output = 'const myTheme = createTheme({\\n  palette: {\\n';\n    return ThemeGenerator._makeRemainingCode(output, slotRules);\n  };\n  /**\n   * Gets the theme as a list of SASS variables that can be used in code\n   * ```\n   * $tokenName: \"[theme:tokenName, default:#f00f00]\";\n   * $tokenName2: \"[theme:tokenName2, default:#ba2ba2]\";\n   * ...\n   * ```\n   */\n\n\n  ThemeGenerator.getThemeAsSass = function (slotRules) {\n    var sassVarTemplate = '${0}Color: \"[theme: {1}, default: {2}]\";\\n';\n    var output = '';\n\n    for (var ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        var rule = slotRules[ruleName];\n        var camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\n        output += format(sassVarTemplate, camelCasedName, camelCasedName, rule.color ? rule.color.str : rule.value || '');\n      }\n    }\n\n    return output;\n  };\n  /**\n   * Gets the theme formatted for PowerShell scripts\n   * ```\n   * @{\n   * \"tokenName\" = \"#f00f00\";\n   * \"tokenName2\" = \"#ba2ba2\";\n   * ...\n   * }\n   * ```\n   */\n\n\n  ThemeGenerator.getThemeForPowerShell = function (slotRules) {\n    var psVarTemplate = '\"{0}\" = \"{1}\";\\n';\n    var output = '';\n\n    for (var ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        var rule = slotRules[ruleName];\n\n        if (rule.value) {\n          // skip this one, it's not a color\n          continue;\n        }\n\n        var camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\n        var outputColor = rule.color ? '#' + rule.color.hex : rule.value || ''; // powershell endpoint uses the RGBA format\n\n        if (rule.color && rule.color.a && rule.color.a !== 100) {\n          outputColor += String(rule.color.a.toString(16));\n        }\n\n        output += format(psVarTemplate, camelCasedName, outputColor);\n      }\n    }\n\n    return '@{\\n' + output + '}';\n  };\n  /**\n   * Sets the given slot's color to the appropriate color, shading it if necessary.\n   * Then, iterates through all other rules (that are this rule's dependents) to update them accordingly.\n   * @param isCustomization - If true, it's a user-provided color, which should be to that raw color.\n   * If false, the rule it's inheriting from changed, so updated using asShade.\n   */\n\n\n  ThemeGenerator._setSlot = function (rule, color, isInverted, isCustomization, overwriteCustomColor) {\n    if (overwriteCustomColor === void 0) {\n      overwriteCustomColor = true;\n    }\n\n    if (!rule.color && rule.value) {\n      // not a color rule\n      return;\n    }\n\n    if (overwriteCustomColor || !rule.color || !rule.isCustomized || !rule.inherits) {\n      // set the rule's color under these conditions\n      if ((overwriteCustomColor || !rule.isCustomized) && !isCustomization && rule.inherits && isValidShade(rule.asShade)) {\n        // it's inheriting by shade\n        if (rule.isBackgroundShade) {\n          rule.color = getBackgroundShade(color, rule.asShade, isInverted);\n        } else {\n          rule.color = getShade(color, rule.asShade, isInverted);\n        }\n\n        rule.isCustomized = false;\n      } else {\n        rule.color = color;\n        rule.isCustomized = true;\n      } // then update dependent colors\n\n\n      for (var _i = 0, _a = rule.dependentRules; _i < _a.length; _i++) {\n        var ruleToUpdate = _a[_i];\n\n        ThemeGenerator._setSlot(ruleToUpdate, rule.color, isInverted, false, overwriteCustomColor);\n      }\n    }\n  };\n  /**\n   * Makes the rest of the code that's used for the load theme blob in the exported codepens of\n   * both the older sharepoint-specific theme designer and the new theme designer. Takes in\n   * theme rules and converts them to format fitting a list of palette colors and their values.\n   * Resulting output looks like:\n   * ```\n   * const _theme = createTheme({\n   *  palette: {\n   *    themePrimary: '#0078d4',\n   *    themeLighterAlt: '#f3f9fd',\n   *    ...\n   *  }});\n   * ```\n   * The first line is loadTheme instead of createTheme for the old sharepoint theme designer.\n   */\n\n\n  ThemeGenerator._makeRemainingCode = function (output, slotRules) {\n    var attributeTemplate = \"    {0}: '{1}',\\n\";\n\n    for (var ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        var rule = slotRules[ruleName];\n        var camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\n        var outputColor = rule.color ? '#' + rule.color.hex : rule.value || '';\n        output += format(attributeTemplate, camelCasedName, outputColor);\n      }\n    }\n\n    output += '  }});';\n    return output;\n  };\n\n  return ThemeGenerator;\n}();\n\nexport { ThemeGenerator };","map":{"version":3,"sources":["components/ThemeGenerator/ThemeGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import { IColor } from '../../utilities/color/interfaces';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { isValidShade, getShade, getBackgroundShade } from '../../utilities/color/shades';\nimport { format } from '../../Utilities';\n\nimport { IThemeSlotRule } from './IThemeSlotRule';\nimport { IThemeRules } from './IThemeRules';\n\nexport class ThemeGenerator {\n  /**\n   * Sets an IThemeSlotRule to the given color and cascades it to the rest of the theme, updating other IThemeSlotRules\n   * in the theme that inherit from that color.\n   * @param isInverted - whether it's a dark theme or not, which affects the algorithm used to generate shades\n   * @param isCustomization - should be true only if it's a user action, and indicates overwriting the slot's\n   * inheritance (if any)\n   * @param overwriteCustomColor - A slot could have a generated color based on its inheritance rules (isCustomized\n   * is false), or a custom color based on user input (isCustomized is true). This bool tells us whether to override\n   * existing customized colors.\n   */\n  public static setSlot(\n    rule: IThemeSlotRule,\n    color: string | IColor,\n    isInverted = false,\n    isCustomization = false,\n    overwriteCustomColor = true,\n  ) {\n    if (!rule.color && rule.value) {\n      // not a color rule\n      return;\n    }\n\n    if (overwriteCustomColor) {\n      let colorAsIColor: IColor;\n      if (typeof color === 'string') {\n        colorAsIColor = getColorFromString(color)!; // the ! is a lie here but we'll verify it in the next line\n        if (!colorAsIColor) {\n          throw new Error('color is invalid in setSlot(): ' + color);\n        }\n      } else {\n        colorAsIColor = color;\n      }\n      ThemeGenerator._setSlot(rule, colorAsIColor, isInverted, isCustomization, overwriteCustomColor);\n    } else if (rule.color) {\n      ThemeGenerator._setSlot(rule, rule.color, isInverted, isCustomization, overwriteCustomColor);\n    }\n  }\n\n  /**\n   * Sets the color of each slot based on its rule. Slots that don't inherit must have a color already.\n   * If this completes without error, then the theme is ready to use. (All slots will have a color.)\n   * setSlot() can be called before this, but this must be called before getThemeAs*().\n   * Does not override colors of rules where isCustomized is true (i.e. doesn't override existing customizations).\n   */\n  public static insureSlots(slotRules: IThemeRules, isInverted: boolean) {\n    // Get all the \"root\" rules, the ones which don't inherit. Then \"set\" them to trigger updating dependent slots.\n    for (const ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        const rule: IThemeSlotRule = slotRules[ruleName];\n        if (!rule.inherits && !rule.value) {\n          if (!rule.color) {\n            throw new Error('A color slot rule that does not inherit must provide its own color.');\n          }\n          ThemeGenerator._setSlot(rule, rule.color, isInverted, false, false);\n        }\n      }\n    }\n  }\n\n  /**\n   * Gets the JSON-formatted blob that describes the theme, usable with the REST request endpoints:\n   * ```\n   * { [theme slot name as string] : [color as string],\n   *  \"tokenName\": \"#f00f00\",\n   *  \"tokenName2\": \"#ba2ba2\",\n   *   ... }\n   * ```\n   */\n  public static getThemeAsJson(slotRules: IThemeRules): any {\n    const theme: any = {};\n    for (const ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        const rule: IThemeSlotRule = slotRules[ruleName];\n        theme[rule.name] = rule.color ? rule.color.str : rule.value || '';\n      }\n    }\n    return theme;\n  }\n\n  /**\n   * Gets code-formatted load theme blob that can be copy and pasted.\n   * Only used for the old theme designer, where loadTheme usage is acceptable,\n   * unlike in the new theme designer.\n   */\n  public static getThemeAsCode(slotRules: IThemeRules): any {\n    const output = 'loadTheme({\\n  palette: {\\n';\n    return ThemeGenerator._makeRemainingCode(output, slotRules);\n  }\n\n  /**\n   * Gets code-formatted load theme blob, specifically for the new theme designer,\n   * aka.ms/themedesigner. Shouldn't use loadTheme like the old theme designer since it's deprecated.\n   * We want to use the theme object from createTheme and use the Customizations.applySettings API instead.\n   */\n  public static getThemeAsCodeWithCreateTheme(slotRules: IThemeRules): any {\n    const output = 'const myTheme = createTheme({\\n  palette: {\\n';\n    return ThemeGenerator._makeRemainingCode(output, slotRules);\n  }\n\n  /**\n   * Gets the theme as a list of SASS variables that can be used in code\n   * ```\n   * $tokenName: \"[theme:tokenName, default:#f00f00]\";\n   * $tokenName2: \"[theme:tokenName2, default:#ba2ba2]\";\n   * ...\n   * ```\n   */\n  public static getThemeAsSass(slotRules: IThemeRules): any {\n    const sassVarTemplate = '${0}Color: \"[theme: {1}, default: {2}]\";\\n';\n    let output = '';\n\n    for (const ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        const rule: IThemeSlotRule = slotRules[ruleName];\n        const camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\n        output += format(\n          sassVarTemplate,\n          camelCasedName,\n          camelCasedName,\n          rule.color ? rule.color.str : rule.value || '',\n        );\n      }\n    }\n    return output;\n  }\n\n  /**\n   * Gets the theme formatted for PowerShell scripts\n   * ```\n   * @{\n   * \"tokenName\" = \"#f00f00\";\n   * \"tokenName2\" = \"#ba2ba2\";\n   * ...\n   * }\n   * ```\n   */\n  public static getThemeForPowerShell(slotRules: IThemeRules): any {\n    const psVarTemplate = '\"{0}\" = \"{1}\";\\n';\n    let output = '';\n\n    for (const ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        const rule: IThemeSlotRule = slotRules[ruleName];\n        if (rule.value) {\n          // skip this one, it's not a color\n          continue;\n        }\n        const camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\n        let outputColor = rule.color ? '#' + rule.color.hex : rule.value || '';\n        // powershell endpoint uses the RGBA format\n        if (rule.color && rule.color.a && rule.color.a !== 100) {\n          outputColor += String(rule.color.a.toString(16));\n        }\n        output += format(psVarTemplate, camelCasedName, outputColor);\n      }\n    }\n    return '@{\\n' + output + '}';\n  }\n\n  /**\n   * Sets the given slot's color to the appropriate color, shading it if necessary.\n   * Then, iterates through all other rules (that are this rule's dependents) to update them accordingly.\n   * @param isCustomization - If true, it's a user-provided color, which should be to that raw color.\n   * If false, the rule it's inheriting from changed, so updated using asShade.\n   */\n  private static _setSlot(\n    rule: IThemeSlotRule,\n    color: IColor,\n    isInverted: boolean,\n    isCustomization: boolean,\n    overwriteCustomColor = true,\n  ) {\n    if (!rule.color && rule.value) {\n      // not a color rule\n      return;\n    }\n\n    if (overwriteCustomColor || !rule.color || !rule.isCustomized || !rule.inherits) {\n      // set the rule's color under these conditions\n      if (\n        (overwriteCustomColor || !rule.isCustomized) &&\n        !isCustomization &&\n        rule.inherits &&\n        isValidShade(rule.asShade)\n      ) {\n        // it's inheriting by shade\n        if (rule.isBackgroundShade) {\n          rule.color = getBackgroundShade(color, rule.asShade!, isInverted)!;\n        } else {\n          rule.color = getShade(color, rule.asShade!, isInverted)!;\n        }\n        rule.isCustomized = false;\n      } else {\n        rule.color = color;\n        rule.isCustomized = true;\n      }\n\n      // then update dependent colors\n      for (const ruleToUpdate of rule.dependentRules) {\n        ThemeGenerator._setSlot(ruleToUpdate, rule.color, isInverted, false, overwriteCustomColor);\n      }\n    }\n  }\n\n  /**\n   * Makes the rest of the code that's used for the load theme blob in the exported codepens of\n   * both the older sharepoint-specific theme designer and the new theme designer. Takes in\n   * theme rules and converts them to format fitting a list of palette colors and their values.\n   * Resulting output looks like:\n   * ```\n   * const _theme = createTheme({\n   *  palette: {\n   *    themePrimary: '#0078d4',\n   *    themeLighterAlt: '#f3f9fd',\n   *    ...\n   *  }});\n   * ```\n   * The first line is loadTheme instead of createTheme for the old sharepoint theme designer.\n   */\n  private static _makeRemainingCode(output: string, slotRules: IThemeRules) {\n    const attributeTemplate = \"    {0}: '{1}',\\n\";\n    for (const ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        const rule: IThemeSlotRule = slotRules[ruleName];\n        const camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\n        const outputColor = rule.color ? '#' + rule.color.hex : rule.value || '';\n        output += format(attributeTemplate, camelCasedName, outputColor);\n      }\n    }\n    output += '  }});';\n    return output;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}