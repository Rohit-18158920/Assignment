{"ast":null,"code":"/**\n * The helper functions here will make the target element as modal to screen readers, by placing aria-hidden on elements\n * that are siblings to the target element and the target element's ancestors (because aria-hidden gets inherited).\n * That way, all other elements on the page are hidden to the screen reader.\n */\nimport { getDocument } from './dom/getDocument';\n/**\n * Call this on a target element to make it modal to screen readers.\n * Returns a function that undoes the changes it made.\n */\n\nexport function modalize(target) {\n  var _a;\n\n  var affectedNodes = [];\n  var targetDocument = getDocument(target) || document; // start at target, then recurse and do the same for parent, until we reach <body>\n\n  while (target !== targetDocument.body) {\n    // grab all siblings of current element\n    for (var _i = 0, _b = target.parentElement.children; _i < _b.length; _i++) {\n      var sibling = _b[_i]; // but ignore elements that are already aria-hidden\n\n      if (sibling !== target && ((_a = sibling.getAttribute('aria-hidden')) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== 'true') {\n        affectedNodes.push(sibling);\n      }\n    }\n\n    if (!target.parentElement) {\n      break;\n    }\n\n    target = target.parentElement;\n  } // take all those elements and set aria-hidden=true on them\n\n\n  affectedNodes.forEach(function (node) {\n    node.setAttribute('aria-hidden', 'true');\n  });\n  return function () {\n    unmodalize(affectedNodes);\n    affectedNodes = []; // dispose\n  };\n}\n/**\n * Undoes the changes that modalize() did.\n */\n\nfunction unmodalize(affectedNodes) {\n  affectedNodes.forEach(function (node) {\n    // set instead of removing in case other components explicitly set aria-hidden and do ==\"true\" or ==\"false\"\n    node.setAttribute('aria-hidden', 'false');\n  });\n}","map":{"version":3,"sources":["modalize.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,WAAT,QAA4B,mBAA5B;AAEA;;;AAGG;;AACH,OAAM,SAAU,QAAV,CAAmB,MAAnB,EAAsC;;;AAC1C,MAAI,aAAa,GAAkB,EAAnC;AACA,MAAM,cAAc,GAAG,WAAW,CAAC,MAAD,CAAX,IAAuB,QAA9C,CAF0C,CAI1C;;AACA,SAAO,MAAM,KAAK,cAAc,CAAC,IAAjC,EAAuC;AACrC;AACA,SAAsB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAC,MAAM,CAAC,aAAP,CAAsB,QAA7C,EAAsB,EAAA,GAAA,EAAA,CAAA,MAAtB,EAAsB,EAAA,EAAtB,EAAyF;AAApF,UAAM,OAAO,GAAA,EAAA,CAAA,EAAA,CAAb,CAAoF,CACvF;;AACA,UAAI,OAAO,KAAK,MAAZ,IAAsB,CAAA,CAAA,EAAA,GAAA,OAAO,CAAC,YAAR,CAAqB,aAArB,CAAA,MAAmC,IAAnC,IAAmC,EAAA,KAAA,KAAA,CAAnC,GAAmC,KAAA,CAAnC,GAAmC,EAAA,CAAE,WAAF,EAAnC,MAAuD,MAAjF,EAAyF;AACvF,QAAA,aAAa,CAAC,IAAd,CAAmB,OAAnB;AACD;AACF;;AAED,QAAI,CAAC,MAAM,CAAC,aAAZ,EAA2B;AACzB;AACD;;AACD,IAAA,MAAM,GAAG,MAAM,CAAC,aAAhB;AACD,GAlByC,CAoB1C;;;AACA,EAAA,aAAa,CAAC,OAAd,CAAsB,UAAA,IAAA,EAAI;AACxB,IAAA,IAAI,CAAC,YAAL,CAAkB,aAAlB,EAAiC,MAAjC;AACD,GAFD;AAIA,SAAO,YAAA;AACL,IAAA,UAAU,CAAC,aAAD,CAAV;AACA,IAAA,aAAa,GAAG,EAAhB,CAFK,CAEe;AACrB,GAHD;AAID;AAED;;AAEG;;AACH,SAAS,UAAT,CAAoB,aAApB,EAAgD;AAC9C,EAAA,aAAa,CAAC,OAAd,CAAsB,UAAA,IAAA,EAAI;AACxB;AACA,IAAA,IAAI,CAAC,YAAL,CAAkB,aAAlB,EAAiC,OAAjC;AACD,GAHD;AAID","sourcesContent":["/**\n * The helper functions here will make the target element as modal to screen readers, by placing aria-hidden on elements\n * that are siblings to the target element and the target element's ancestors (because aria-hidden gets inherited).\n * That way, all other elements on the page are hidden to the screen reader.\n */\n\nimport { getDocument } from './dom/getDocument';\n\n/**\n * Call this on a target element to make it modal to screen readers.\n * Returns a function that undoes the changes it made.\n */\nexport function modalize(target: HTMLElement): () => void {\n  let affectedNodes: HTMLElement[] = [];\n  const targetDocument = getDocument(target) || document;\n\n  // start at target, then recurse and do the same for parent, until we reach <body>\n  while (target !== targetDocument.body) {\n    // grab all siblings of current element\n    for (const sibling of (target.parentElement!.children as unknown) as Array<HTMLElement>) {\n      // but ignore elements that are already aria-hidden\n      if (sibling !== target && sibling.getAttribute('aria-hidden')?.toLowerCase() !== 'true') {\n        affectedNodes.push(sibling);\n      }\n    }\n\n    if (!target.parentElement) {\n      break;\n    }\n    target = target.parentElement;\n  }\n\n  // take all those elements and set aria-hidden=true on them\n  affectedNodes.forEach(node => {\n    node.setAttribute('aria-hidden', 'true');\n  });\n\n  return () => {\n    unmodalize(affectedNodes);\n    affectedNodes = []; // dispose\n  };\n}\n\n/**\n * Undoes the changes that modalize() did.\n */\nfunction unmodalize(affectedNodes: HTMLElement[]) {\n  affectedNodes.forEach(node => {\n    // set instead of removing in case other components explicitly set aria-hidden and do ==\"true\" or ==\"false\"\n    node.setAttribute('aria-hidden', 'false');\n  });\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}