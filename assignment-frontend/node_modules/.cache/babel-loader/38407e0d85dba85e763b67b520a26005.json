{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, css, getId, getRTL, getRTLSafeKeyCode, warnMutuallyExclusive, initializeComponentRef, Async, on, FocusRects } from '../../Utilities';\nimport { classNamesFunction, getNativeProps, divProperties } from '../../Utilities';\nimport { Label } from '../../Label';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'SliderBase';\nexport var ONKEYDOWN_TIMEOUT_DURATION = 1000;\n\nvar SliderBase =\n/** @class */\nfunction (_super) {\n  __extends(SliderBase, _super);\n\n  function SliderBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._disposables = [];\n    _this._sliderLine = React.createRef();\n    _this._thumb = React.createRef();\n    _this._onKeyDownTimer = -1;\n\n    _this._getAriaValueText = function (value) {\n      var ariaValueText = _this.props.ariaValueText;\n\n      if (value !== undefined) {\n        return ariaValueText ? ariaValueText(value) : value.toString();\n      }\n\n      return undefined;\n    };\n\n    _this._onMouseDownOrTouchStart = function (event) {\n      if (event.type === 'mousedown') {\n        _this._disposables.push(on(window, 'mousemove', _this._onMouseMoveOrTouchMove, true), on(window, 'mouseup', _this._onMouseUpOrTouchEnd, true));\n      } else if (event.type === 'touchstart') {\n        _this._disposables.push(on(window, 'touchmove', _this._onMouseMoveOrTouchMove, true), on(window, 'touchend', _this._onMouseUpOrTouchEnd, true));\n      }\n\n      _this._onMouseMoveOrTouchMove(event, true);\n    };\n\n    _this._onMouseMoveOrTouchMove = function (event, suppressEventCancelation) {\n      if (!_this._sliderLine.current) {\n        return;\n      }\n\n      var _a = _this.props,\n          max = _a.max,\n          min = _a.min,\n          step = _a.step;\n      var steps = (max - min) / step;\n\n      var sliderPositionRect = _this._sliderLine.current.getBoundingClientRect();\n\n      var sliderLength = !_this.props.vertical ? sliderPositionRect.width : sliderPositionRect.height;\n      var stepLength = sliderLength / steps;\n      var currentSteps;\n      var distance;\n\n      if (!_this.props.vertical) {\n        var left = _this._getPosition(event, _this.props.vertical);\n\n        distance = getRTL(_this.props.theme) ? sliderPositionRect.right - left : left - sliderPositionRect.left;\n        currentSteps = distance / stepLength;\n      } else {\n        var bottom = _this._getPosition(event, _this.props.vertical);\n\n        distance = sliderPositionRect.bottom - bottom;\n        currentSteps = distance / stepLength;\n      }\n\n      var currentValue;\n      var renderedValue; // The value shouldn't be bigger than max or be smaller than min.\n\n      if (currentSteps > Math.floor(steps)) {\n        renderedValue = currentValue = max;\n      } else if (currentSteps < 0) {\n        renderedValue = currentValue = min;\n      } else {\n        renderedValue = min + step * currentSteps;\n        currentValue = min + step * Math.round(currentSteps);\n      }\n\n      _this._updateValue(currentValue, renderedValue);\n\n      if (!suppressEventCancelation) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    };\n\n    _this._onMouseUpOrTouchEnd = function (event) {\n      // Disable renderedValue override.\n      _this.setState({\n        renderedValue: undefined\n      });\n\n      if (_this.props.onChanged) {\n        _this.props.onChanged(event, _this.state.value);\n      }\n\n      _this._disposeListeners();\n    };\n\n    _this._disposeListeners = function () {\n      _this._disposables.forEach(function (dispose) {\n        return dispose();\n      });\n\n      _this._disposables = [];\n    };\n\n    _this._onKeyDown = function (event) {\n      var _a = _this.props.value,\n          value = _a === void 0 ? _this.state.value : _a;\n      var _b = _this.props,\n          max = _b.max,\n          min = _b.min,\n          step = _b.step;\n      var diff = 0; // eslint-disable-next-line deprecation/deprecation\n\n      switch (event.which) {\n        case getRTLSafeKeyCode(KeyCodes.left, _this.props.theme):\n        case KeyCodes.down:\n          diff = -step;\n\n          _this._clearOnKeyDownTimer();\n\n          _this._setOnKeyDownTimer(event);\n\n          break;\n\n        case getRTLSafeKeyCode(KeyCodes.right, _this.props.theme):\n        case KeyCodes.up:\n          diff = step;\n\n          _this._clearOnKeyDownTimer();\n\n          _this._setOnKeyDownTimer(event);\n\n          break;\n\n        case KeyCodes.home:\n          value = min;\n          break;\n\n        case KeyCodes.end:\n          value = max;\n          break;\n\n        default:\n          return;\n      }\n\n      var newValue = Math.min(max, Math.max(min, value + diff));\n\n      _this._updateValue(newValue, newValue);\n\n      event.preventDefault();\n      event.stopPropagation(); // Disable renderedValue override.\n\n      _this.setState({\n        renderedValue: undefined\n      });\n    };\n\n    _this._clearOnKeyDownTimer = function () {\n      _this._async.clearTimeout(_this._onKeyDownTimer);\n    };\n\n    _this._setOnKeyDownTimer = function (event) {\n      _this._onKeyDownTimer = _this._async.setTimeout(function () {\n        if (_this.props.onChanged) {\n          _this.props.onChanged(event, _this.state.value);\n        }\n      }, ONKEYDOWN_TIMEOUT_DURATION);\n    };\n\n    _this._async = new Async(_this);\n    initializeComponentRef(_this);\n    warnMutuallyExclusive(COMPONENT_NAME, _this.props, {\n      value: 'defaultValue'\n    });\n    _this._id = getId('Slider');\n    var value = props.value !== undefined ? props.value : props.defaultValue !== undefined ? props.defaultValue : props.min;\n    _this.state = {\n      value: value,\n      renderedValue: undefined\n    };\n    return _this;\n  }\n\n  SliderBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n\n    this._disposeListeners();\n  };\n\n  SliderBase.prototype.render = function () {\n    var _a, _b, _c, _d, _e;\n\n    var _f = this.props,\n        ariaLabel = _f.ariaLabel,\n        className = _f.className,\n        disabled = _f.disabled,\n        label = _f.label,\n        max = _f.max,\n        min = _f.min,\n        showValue = _f.showValue,\n        buttonProps = _f.buttonProps,\n        vertical = _f.vertical,\n        valueFormat = _f.valueFormat,\n        styles = _f.styles,\n        theme = _f.theme,\n        originFromZero = _f.originFromZero;\n    var value = this.value;\n    var renderedValue = this.renderedValue;\n    var thumbOffsetPercent = min === max ? 0 : (renderedValue - min) / (max - min) * 100;\n    var zeroOffsetPercent = min >= 0 ? 0 : -min / (max - min) * 100;\n    var lengthString = vertical ? 'height' : 'width';\n    var onMouseDownProp = disabled ? {} : {\n      onMouseDown: this._onMouseDownOrTouchStart\n    };\n    var onTouchStartProp = disabled ? {} : {\n      onTouchStart: this._onMouseDownOrTouchStart\n    };\n    var onKeyDownProp = disabled ? {} : {\n      onKeyDown: this._onKeyDown\n    };\n    var classNames = getClassNames(styles, {\n      className: className,\n      disabled: disabled,\n      vertical: vertical,\n      showTransitions: renderedValue === value,\n      showValue: showValue,\n      theme: theme\n    });\n    var divButtonProps = buttonProps ? getNativeProps(buttonProps, divProperties) : undefined;\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, label && React.createElement(Label, __assign({\n      className: classNames.titleLabel\n    }, ariaLabel ? {} : {\n      htmlFor: this._id\n    }, {\n      disabled: disabled\n    }), label), React.createElement(\"div\", {\n      className: classNames.container\n    }, React.createElement(\"div\", __assign({\n      id: this._id,\n      \"aria-valuenow\": value,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuetext\": this._getAriaValueText(value),\n      \"aria-label\": ariaLabel || label,\n      \"aria-disabled\": disabled\n    }, onMouseDownProp, onTouchStartProp, onKeyDownProp, divButtonProps, {\n      className: css(classNames.slideBox, buttonProps.className),\n      role: \"slider\",\n      tabIndex: disabled ? undefined : 0,\n      \"data-is-focusable\": !disabled\n    }), React.createElement(\"div\", {\n      ref: this._sliderLine,\n      className: classNames.line\n    }, originFromZero && React.createElement(\"span\", {\n      className: css(classNames.zeroTick),\n      style: this._getStyleUsingOffsetPercent(vertical, zeroOffsetPercent)\n    }), React.createElement(\"span\", {\n      ref: this._thumb,\n      className: classNames.thumb,\n      style: this._getStyleUsingOffsetPercent(vertical, thumbOffsetPercent)\n    }), originFromZero ? React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      className: css(classNames.lineContainer, classNames.inactiveSection),\n      style: (_a = {}, _a[lengthString] = Math.min(thumbOffsetPercent, zeroOffsetPercent) + '%', _a)\n    }), React.createElement(\"span\", {\n      className: css(classNames.lineContainer, classNames.activeSection),\n      style: (_b = {}, _b[lengthString] = Math.abs(zeroOffsetPercent - thumbOffsetPercent) + '%', _b)\n    }), React.createElement(\"span\", {\n      className: css(classNames.lineContainer, classNames.inactiveSection),\n      style: (_c = {}, _c[lengthString] = Math.min(100 - thumbOffsetPercent, 100 - zeroOffsetPercent) + '%', _c)\n    })) : React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      className: css(classNames.lineContainer, classNames.activeSection),\n      style: (_d = {}, _d[lengthString] = thumbOffsetPercent + '%', _d)\n    }), React.createElement(\"span\", {\n      className: css(classNames.lineContainer, classNames.inactiveSection),\n      style: (_e = {}, _e[lengthString] = 100 - thumbOffsetPercent + '%', _e)\n    })))), showValue && React.createElement(Label, {\n      className: classNames.valueLabel,\n      disabled: disabled\n    }, valueFormat ? valueFormat(value) : value)), React.createElement(FocusRects, null));\n  };\n\n  SliderBase.prototype.focus = function () {\n    if (this._thumb.current) {\n      this._thumb.current.focus();\n    }\n  };\n\n  Object.defineProperty(SliderBase.prototype, \"value\", {\n    get: function () {\n      var _a = this.props.value,\n          value = _a === void 0 ? this.state.value : _a;\n\n      if (this.props.min === undefined || this.props.max === undefined || value === undefined) {\n        return undefined;\n      } else {\n        return Math.max(this.props.min, Math.min(this.props.max, value));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SliderBase.prototype, \"renderedValue\", {\n    get: function () {\n      // renderedValue is expected to be defined while user is interacting with control, otherwise `undefined`.\n      // Fall back to `value`.\n      var _a = this.state.renderedValue,\n          renderedValue = _a === void 0 ? this.value : _a;\n      return renderedValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SliderBase.prototype._getStyleUsingOffsetPercent = function (vertical, thumbOffsetPercent) {\n    var _a;\n\n    var direction = vertical ? 'bottom' : getRTL(this.props.theme) ? 'right' : 'left';\n    return _a = {}, _a[direction] = thumbOffsetPercent + '%', _a;\n  };\n\n  SliderBase.prototype._getPosition = function (event, vertical) {\n    var currentPosition;\n\n    switch (event.type) {\n      case 'mousedown':\n      case 'mousemove':\n        currentPosition = !vertical ? event.clientX : event.clientY;\n        break;\n\n      case 'touchstart':\n      case 'touchmove':\n        currentPosition = !vertical ? event.touches[0].clientX : event.touches[0].clientY;\n        break;\n    }\n\n    return currentPosition;\n  };\n\n  SliderBase.prototype._updateValue = function (value, renderedValue) {\n    var _this = this;\n\n    var _a = this.props,\n        step = _a.step,\n        snapToStep = _a.snapToStep;\n    var numDec = 0;\n\n    if (isFinite(step)) {\n      while (Math.round(step * Math.pow(10, numDec)) / Math.pow(10, numDec) !== step) {\n        numDec++;\n      }\n    } // Make sure value has correct number of decimal places based on number of decimals in step\n\n\n    var roundedValue = parseFloat(value.toFixed(numDec));\n    var valueChanged = roundedValue !== this.state.value;\n\n    if (snapToStep) {\n      renderedValue = roundedValue;\n    }\n\n    this.setState({\n      value: roundedValue,\n      renderedValue: renderedValue\n    }, function () {\n      if (valueChanged && _this.props.onChange) {\n        _this.props.onChange(_this.state.value);\n      }\n    });\n  };\n\n  SliderBase.defaultProps = {\n    step: 1,\n    min: 0,\n    max: 10,\n    showValue: true,\n    disabled: false,\n    vertical: false,\n    buttonProps: {},\n    originFromZero: false\n  };\n  return SliderBase;\n}(React.Component);\n\nexport { SliderBase };","map":{"version":3,"sources":["components/Slider/Slider.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  KeyCodes,\n  css,\n  getId,\n  getRTL,\n  getRTLSafeKeyCode,\n  warnMutuallyExclusive,\n  initializeComponentRef,\n  Async,\n  on,\n  FocusRects,\n} from '../../Utilities';\nimport { ISliderProps, ISlider, ISliderStyleProps, ISliderStyles } from './Slider.types';\nimport { classNamesFunction, getNativeProps, divProperties } from '../../Utilities';\nimport { Label } from '../../Label';\n\nexport interface ISliderState {\n  value?: number;\n  renderedValue?: number;\n}\n\nconst getClassNames = classNamesFunction<ISliderStyleProps, ISliderStyles>();\nconst COMPONENT_NAME = 'SliderBase';\nexport const ONKEYDOWN_TIMEOUT_DURATION = 1000;\n\nexport class SliderBase extends React.Component<ISliderProps, ISliderState> implements ISlider {\n  public static defaultProps: ISliderProps = {\n    step: 1,\n    min: 0,\n    max: 10,\n    showValue: true,\n    disabled: false,\n    vertical: false,\n    buttonProps: {},\n    originFromZero: false,\n  };\n\n  private _async: Async;\n  private _disposables: (() => void)[] = [];\n  private _sliderLine = React.createRef<HTMLDivElement>();\n  private _thumb = React.createRef<HTMLSpanElement>();\n  private _id: string;\n  private _onKeyDownTimer = -1;\n\n  constructor(props: ISliderProps) {\n    super(props);\n\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    warnMutuallyExclusive(COMPONENT_NAME, this.props, {\n      value: 'defaultValue',\n    });\n\n    this._id = getId('Slider');\n\n    const value =\n      props.value !== undefined ? props.value : props.defaultValue !== undefined ? props.defaultValue : props.min;\n\n    this.state = {\n      value: value,\n      renderedValue: undefined,\n    };\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n    this._disposeListeners();\n  }\n\n  public render(): React.ReactElement<{}> {\n    const {\n      ariaLabel,\n      className,\n      disabled,\n      label,\n      max,\n      min,\n      showValue,\n      buttonProps,\n      vertical,\n      valueFormat,\n      styles,\n      theme,\n      originFromZero,\n    } = this.props;\n    const value = this.value;\n    const renderedValue = this.renderedValue;\n    const thumbOffsetPercent: number = min === max ? 0 : ((renderedValue! - min!) / (max! - min!)) * 100;\n    const zeroOffsetPercent: number = min! >= 0 ? 0 : (-min! / (max! - min!)) * 100;\n    const lengthString = vertical ? 'height' : 'width';\n    const onMouseDownProp: {} = disabled ? {} : { onMouseDown: this._onMouseDownOrTouchStart };\n    const onTouchStartProp: {} = disabled ? {} : { onTouchStart: this._onMouseDownOrTouchStart };\n    const onKeyDownProp: {} = disabled ? {} : { onKeyDown: this._onKeyDown };\n    const classNames = getClassNames(styles, {\n      className,\n      disabled,\n      vertical,\n      showTransitions: renderedValue === value,\n      showValue,\n      theme: theme!,\n    });\n    const divButtonProps = buttonProps\n      ? getNativeProps<React.HTMLAttributes<HTMLDivElement>>(buttonProps, divProperties)\n      : undefined;\n\n    return (\n      <div className={classNames.root}>\n        {label && (\n          <Label className={classNames.titleLabel} {...(ariaLabel ? {} : { htmlFor: this._id })} disabled={disabled}>\n            {label}\n          </Label>\n        )}\n        <div className={classNames.container}>\n          <div\n            id={this._id}\n            aria-valuenow={value}\n            aria-valuemin={min}\n            aria-valuemax={max}\n            aria-valuetext={this._getAriaValueText(value)}\n            aria-label={ariaLabel || label}\n            aria-disabled={disabled}\n            {...onMouseDownProp}\n            {...onTouchStartProp}\n            {...onKeyDownProp}\n            {...divButtonProps}\n            className={css(classNames.slideBox, buttonProps!.className)}\n            role=\"slider\"\n            tabIndex={disabled ? undefined : 0}\n            data-is-focusable={!disabled}\n          >\n            <div ref={this._sliderLine} className={classNames.line}>\n              {originFromZero && (\n                <span\n                  className={css(classNames.zeroTick)}\n                  style={this._getStyleUsingOffsetPercent(vertical, zeroOffsetPercent)}\n                />\n              )}\n              <span\n                ref={this._thumb}\n                className={classNames.thumb}\n                style={this._getStyleUsingOffsetPercent(vertical, thumbOffsetPercent)}\n              />\n              {originFromZero ? (\n                <>\n                  <span\n                    className={css(classNames.lineContainer, classNames.inactiveSection)}\n                    style={{ [lengthString]: Math.min(thumbOffsetPercent, zeroOffsetPercent) + '%' }}\n                  />\n                  <span\n                    className={css(classNames.lineContainer, classNames.activeSection)}\n                    style={{ [lengthString]: Math.abs(zeroOffsetPercent - thumbOffsetPercent) + '%' }}\n                  />\n                  <span\n                    className={css(classNames.lineContainer, classNames.inactiveSection)}\n                    style={{ [lengthString]: Math.min(100 - thumbOffsetPercent, 100 - zeroOffsetPercent) + '%' }}\n                  />\n                </>\n              ) : (\n                <>\n                  <span\n                    className={css(classNames.lineContainer, classNames.activeSection)}\n                    style={{ [lengthString]: thumbOffsetPercent + '%' }}\n                  />\n                  <span\n                    className={css(classNames.lineContainer, classNames.inactiveSection)}\n                    style={{ [lengthString]: 100 - thumbOffsetPercent + '%' }}\n                  />\n                </>\n              )}\n            </div>\n          </div>\n          {showValue && (\n            <Label className={classNames.valueLabel} disabled={disabled}>\n              {valueFormat ? valueFormat(value!) : value}\n            </Label>\n          )}\n        </div>\n        <FocusRects />\n      </div>\n    ) as React.ReactElement<{}>;\n  }\n\n  public focus(): void {\n    if (this._thumb.current) {\n      this._thumb.current.focus();\n    }\n  }\n\n  public get value(): number | undefined {\n    const { value = this.state.value } = this.props;\n    if (this.props.min === undefined || this.props.max === undefined || value === undefined) {\n      return undefined;\n    } else {\n      return Math.max(this.props.min, Math.min(this.props.max, value));\n    }\n  }\n\n  private get renderedValue(): number | undefined {\n    // renderedValue is expected to be defined while user is interacting with control, otherwise `undefined`.\n    // Fall back to `value`.\n    const { renderedValue = this.value } = this.state;\n    return renderedValue;\n  }\n\n  private _getAriaValueText = (value: number | undefined): string | undefined => {\n    const { ariaValueText } = this.props;\n    if (value !== undefined) {\n      return ariaValueText ? ariaValueText(value) : value.toString();\n    }\n    return undefined;\n  };\n\n  private _getStyleUsingOffsetPercent(vertical: boolean | undefined, thumbOffsetPercent: number): any {\n    const direction: string = vertical ? 'bottom' : getRTL(this.props.theme) ? 'right' : 'left';\n    return {\n      [direction]: thumbOffsetPercent + '%',\n    };\n  }\n\n  private _onMouseDownOrTouchStart = (event: MouseEvent | TouchEvent): void => {\n    if (event.type === 'mousedown') {\n      this._disposables.push(\n        on(window, 'mousemove', this._onMouseMoveOrTouchMove, true),\n        on(window, 'mouseup', this._onMouseUpOrTouchEnd, true),\n      );\n    } else if (event.type === 'touchstart') {\n      this._disposables.push(\n        on(window, 'touchmove', this._onMouseMoveOrTouchMove, true),\n        on(window, 'touchend', this._onMouseUpOrTouchEnd, true),\n      );\n    }\n    this._onMouseMoveOrTouchMove(event, true);\n  };\n\n  private _onMouseMoveOrTouchMove = (event: MouseEvent | TouchEvent, suppressEventCancelation?: boolean): void => {\n    if (!this._sliderLine.current) {\n      return;\n    }\n\n    const { max, min, step } = this.props;\n    const steps: number = (max! - min!) / step!;\n    const sliderPositionRect: ClientRect = this._sliderLine.current.getBoundingClientRect();\n    const sliderLength: number = !this.props.vertical ? sliderPositionRect.width : sliderPositionRect.height;\n    const stepLength: number = sliderLength / steps;\n    let currentSteps: number | undefined;\n    let distance: number | undefined;\n\n    if (!this.props.vertical) {\n      const left: number | undefined = this._getPosition(event, this.props.vertical);\n      distance = getRTL(this.props.theme) ? sliderPositionRect.right - left! : left! - sliderPositionRect.left;\n      currentSteps = distance / stepLength;\n    } else {\n      const bottom: number | undefined = this._getPosition(event, this.props.vertical);\n      distance = sliderPositionRect.bottom - bottom!;\n      currentSteps = distance / stepLength;\n    }\n\n    let currentValue: number | undefined;\n    let renderedValue: number | undefined;\n\n    // The value shouldn't be bigger than max or be smaller than min.\n    if (currentSteps! > Math.floor(steps)) {\n      renderedValue = currentValue = max as number;\n    } else if (currentSteps! < 0) {\n      renderedValue = currentValue = min as number;\n    } else {\n      renderedValue = min! + step! * currentSteps!;\n      currentValue = min! + step! * Math.round(currentSteps!);\n    }\n\n    this._updateValue(currentValue, renderedValue);\n\n    if (!suppressEventCancelation) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  private _getPosition(event: MouseEvent | TouchEvent, vertical: boolean | undefined): number | undefined {\n    let currentPosition: number | undefined;\n    switch (event.type) {\n      case 'mousedown':\n      case 'mousemove':\n        currentPosition = !vertical ? (event as MouseEvent).clientX : (event as MouseEvent).clientY;\n        break;\n      case 'touchstart':\n      case 'touchmove':\n        currentPosition = !vertical\n          ? (event as TouchEvent).touches[0].clientX\n          : (event as TouchEvent).touches[0].clientY;\n        break;\n    }\n    return currentPosition;\n  }\n  private _updateValue(value: number, renderedValue: number): void {\n    const { step, snapToStep } = this.props;\n    let numDec = 0;\n    if (isFinite(step!)) {\n      while (Math.round(step! * Math.pow(10, numDec)) / Math.pow(10, numDec) !== step!) {\n        numDec++;\n      }\n    }\n\n    // Make sure value has correct number of decimal places based on number of decimals in step\n    const roundedValue = parseFloat(value.toFixed(numDec));\n    const valueChanged = roundedValue !== this.state.value;\n\n    if (snapToStep) {\n      renderedValue = roundedValue;\n    }\n\n    this.setState(\n      {\n        value: roundedValue,\n        renderedValue,\n      },\n      () => {\n        if (valueChanged && this.props.onChange) {\n          this.props.onChange(this.state.value as number);\n        }\n      },\n    );\n  }\n\n  private _onMouseUpOrTouchEnd = (event: MouseEvent | TouchEvent): void => {\n    // Disable renderedValue override.\n    this.setState({\n      renderedValue: undefined,\n    });\n\n    if (this.props.onChanged) {\n      this.props.onChanged(event, this.state.value as number);\n    }\n\n    this._disposeListeners();\n  };\n\n  private _disposeListeners = (): void => {\n    this._disposables.forEach(dispose => dispose());\n    this._disposables = [];\n  };\n\n  private _onKeyDown = (event: KeyboardEvent): void => {\n    let { value = this.state.value } = this.props;\n    const { max, min, step } = this.props;\n\n    let diff: number | undefined = 0;\n\n    // eslint-disable-next-line deprecation/deprecation\n    switch (event.which) {\n      case getRTLSafeKeyCode(KeyCodes.left, this.props.theme):\n      case KeyCodes.down:\n        diff = -(step as number);\n\n        this._clearOnKeyDownTimer();\n        this._setOnKeyDownTimer(event);\n\n        break;\n      case getRTLSafeKeyCode(KeyCodes.right, this.props.theme):\n      case KeyCodes.up:\n        diff = step;\n\n        this._clearOnKeyDownTimer();\n        this._setOnKeyDownTimer(event);\n\n        break;\n\n      case KeyCodes.home:\n        value = min;\n        break;\n\n      case KeyCodes.end:\n        value = max;\n        break;\n\n      default:\n        return;\n    }\n\n    const newValue: number = Math.min(max as number, Math.max(min as number, value! + diff!));\n    this._updateValue(newValue, newValue);\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Disable renderedValue override.\n    this.setState({\n      renderedValue: undefined,\n    });\n  };\n\n  private _clearOnKeyDownTimer = (): void => {\n    this._async.clearTimeout(this._onKeyDownTimer);\n  };\n\n  private _setOnKeyDownTimer = (event: KeyboardEvent): void => {\n    this._onKeyDownTimer = this._async.setTimeout(() => {\n      if (this.props.onChanged) {\n        this.props.onChanged(event, this.state.value as number);\n      }\n    }, ONKEYDOWN_TIMEOUT_DURATION);\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}