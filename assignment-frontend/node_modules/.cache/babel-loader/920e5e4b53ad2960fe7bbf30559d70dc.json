{"ast":null,"code":"import { __assign, __extends, __rest, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, getRTL, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\nvar getClassNames = classNamesFunction();\nvar OVERFLOW_KEY = 'overflow';\n\nvar nullFunction = function () {\n  return null;\n};\n\nvar nonActionableItemProps = {\n  styles: function (props) {\n    var theme = props.theme;\n    return {\n      root: {\n        selectors: {\n          '&.is-disabled': {\n            color: theme.semanticColors.bodyText\n          }\n        }\n      }\n    };\n  }\n};\n/**\n * {@docCategory Breadcrumb}\n */\n\nvar BreadcrumbBase =\n/** @class */\nfunction (_super) {\n  __extends(BreadcrumbBase, _super);\n\n  function BreadcrumbBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusZone = React.createRef();\n    /**\n     * Remove the first rendered item past the overlow point and put it and the end the overflow set.\n     */\n\n    _this._onReduceData = function (data) {\n      var renderedItems = data.renderedItems,\n          renderedOverflowItems = data.renderedOverflowItems;\n      var overflowIndex = data.props.overflowIndex;\n      var movedItem = renderedItems[overflowIndex];\n\n      if (!movedItem) {\n        return undefined;\n      }\n\n      renderedItems = __spreadArrays(renderedItems);\n      renderedItems.splice(overflowIndex, 1);\n      renderedOverflowItems = __spreadArrays(renderedOverflowItems, [movedItem]);\n      return __assign(__assign({}, data), {\n        renderedItems: renderedItems,\n        renderedOverflowItems: renderedOverflowItems\n      });\n    };\n    /**\n     * Remove the last item of the overflow set and insert the item as the start of the rendered set past the overflow\n     * point.\n     */\n\n\n    _this._onGrowData = function (data) {\n      var renderedItems = data.renderedItems,\n          renderedOverflowItems = data.renderedOverflowItems;\n      var _a = data.props,\n          overflowIndex = _a.overflowIndex,\n          maxDisplayedItems = _a.maxDisplayedItems;\n      renderedOverflowItems = __spreadArrays(renderedOverflowItems);\n      var movedItem = renderedOverflowItems.pop();\n\n      if (!movedItem || renderedItems.length >= maxDisplayedItems) {\n        return undefined;\n      }\n\n      renderedItems = __spreadArrays(renderedItems);\n      renderedItems.splice(overflowIndex, 0, movedItem);\n      return __assign(__assign({}, data), {\n        renderedItems: renderedItems,\n        renderedOverflowItems: renderedOverflowItems\n      });\n    };\n\n    _this._onRenderBreadcrumb = function (data) {\n      var _a = data.props,\n          ariaLabel = _a.ariaLabel,\n          _b = _a.dividerAs,\n          DividerType = _b === void 0 ? Icon : _b,\n          _c = _a.onRenderItem,\n          onRenderItem = _c === void 0 ? _this._onRenderItem : _c,\n          overflowAriaLabel = _a.overflowAriaLabel,\n          overflowIndex = _a.overflowIndex,\n          onRenderOverflowIcon = _a.onRenderOverflowIcon,\n          overflowButtonAs = _a.overflowButtonAs;\n      var renderedOverflowItems = data.renderedOverflowItems,\n          renderedItems = data.renderedItems;\n      var contextualItems = renderedOverflowItems.map(function (item) {\n        var isActionable = !!(item.onClick || item.href);\n        return {\n          text: item.text,\n          name: item.text,\n          key: item.key,\n          onClick: item.onClick ? _this._onBreadcrumbClicked.bind(_this, item) : null,\n          href: item.href,\n          disabled: !isActionable,\n          itemProps: isActionable ? undefined : nonActionableItemProps\n        };\n      }); // Find index of last rendered item so the divider icon\n      // knows not to render on that item\n\n      var lastItemIndex = renderedItems.length - 1;\n      var hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n      var itemElements = renderedItems.map(function (item, index) {\n        return React.createElement(\"li\", {\n          className: _this._classNames.listItem,\n          key: item.key || String(index)\n        }, onRenderItem(item, _this._onRenderItem), (index !== lastItemIndex || hasOverflowItems && index === overflowIndex - 1) && React.createElement(DividerType, {\n          className: _this._classNames.chevron,\n          iconName: getRTL(_this.props.theme) ? 'ChevronLeft' : 'ChevronRight',\n          item: item\n        }));\n      });\n\n      if (hasOverflowItems) {\n        var iconProps = !onRenderOverflowIcon ? {\n          iconName: 'More'\n        } : {};\n        var onRenderMenuIcon = onRenderOverflowIcon ? onRenderOverflowIcon : nullFunction;\n        var OverflowButton = overflowButtonAs ? overflowButtonAs : IconButton;\n        itemElements.splice(overflowIndex, 0, React.createElement(\"li\", {\n          className: _this._classNames.overflow,\n          key: OVERFLOW_KEY\n        }, React.createElement(OverflowButton, {\n          className: _this._classNames.overflowButton,\n          iconProps: iconProps,\n          role: \"button\",\n          \"aria-haspopup\": \"true\",\n          ariaLabel: overflowAriaLabel,\n          onRenderMenuIcon: onRenderMenuIcon,\n          menuProps: {\n            items: contextualItems,\n            directionalHint: DirectionalHint.bottomLeftEdge\n          }\n        }), overflowIndex !== lastItemIndex + 1 && React.createElement(DividerType, {\n          className: _this._classNames.chevron,\n          iconName: getRTL(_this.props.theme) ? 'ChevronLeft' : 'ChevronRight',\n          item: renderedOverflowItems[renderedOverflowItems.length - 1]\n        })));\n      }\n\n      var nativeProps = getNativeProps(_this.props, htmlElementProperties, ['className']);\n      return React.createElement(\"div\", __assign({\n        className: _this._classNames.root,\n        role: \"navigation\",\n        \"aria-label\": ariaLabel\n      }, nativeProps), React.createElement(FocusZone, __assign({\n        componentRef: _this._focusZone,\n        direction: FocusZoneDirection.horizontal\n      }, _this.props.focusZoneProps), React.createElement(\"ol\", {\n        className: _this._classNames.list\n      }, itemElements)));\n    };\n\n    _this._onRenderItem = function (item) {\n      var as = item.as,\n          href = item.href,\n          onClick = item.onClick,\n          isCurrentItem = item.isCurrentItem,\n          text = item.text,\n          additionalProps = __rest(item, [\"as\", \"href\", \"onClick\", \"isCurrentItem\", \"text\"]);\n\n      if (onClick || href) {\n        return React.createElement(Link, __assign({}, additionalProps, {\n          as: as,\n          className: _this._classNames.itemLink,\n          href: href,\n          \"aria-current\": isCurrentItem ? 'page' : undefined,\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick: _this._onBreadcrumbClicked.bind(_this, item)\n        }), React.createElement(TooltipHost, __assign({\n          content: text,\n          overflowMode: TooltipOverflowMode.Parent\n        }, _this.props.tooltipHostProps), text));\n      } else {\n        var Tag = as || 'span';\n        return React.createElement(Tag, __assign({}, additionalProps, {\n          className: _this._classNames.item\n        }), React.createElement(TooltipHost, __assign({\n          content: text,\n          overflowMode: TooltipOverflowMode.Parent\n        }, _this.props.tooltipHostProps), text));\n      }\n    };\n\n    _this._onBreadcrumbClicked = function (item, ev) {\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n\n    initializeComponentRef(_this);\n\n    _this._validateProps(props);\n\n    return _this;\n  }\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n\n\n  BreadcrumbBase.prototype.focus = function () {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  };\n\n  BreadcrumbBase.prototype.render = function () {\n    this._validateProps(this.props);\n\n    var _a = this.props,\n        _b = _a.onReduceData,\n        onReduceData = _b === void 0 ? this._onReduceData : _b,\n        _c = _a.onGrowData,\n        onGrowData = _c === void 0 ? this._onGrowData : _c,\n        overflowIndex = _a.overflowIndex,\n        maxDisplayedItems = _a.maxDisplayedItems,\n        items = _a.items,\n        className = _a.className,\n        theme = _a.theme,\n        styles = _a.styles;\n\n    var renderedItems = __spreadArrays(items);\n\n    var renderedOverflowItems = renderedItems.splice(overflowIndex, renderedItems.length - maxDisplayedItems);\n    var breadcrumbData = {\n      props: this.props,\n      renderedItems: renderedItems,\n      renderedOverflowItems: renderedOverflowItems\n    };\n    this._classNames = getClassNames(styles, {\n      className: className,\n      theme: theme\n    });\n    return React.createElement(ResizeGroup, {\n      onRenderData: this._onRenderBreadcrumb,\n      onReduceData: onReduceData,\n      onGrowData: onGrowData,\n      data: breadcrumbData\n    });\n  };\n  /**\n   * Validate incoming props\n   * @param props - Props to validate\n   */\n\n\n  BreadcrumbBase.prototype._validateProps = function (props) {\n    var maxDisplayedItems = props.maxDisplayedItems,\n        overflowIndex = props.overflowIndex,\n        items = props.items;\n\n    if (overflowIndex < 0 || maxDisplayedItems > 1 && overflowIndex > maxDisplayedItems - 1 || items.length > 0 && overflowIndex > items.length - 1) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  };\n\n  BreadcrumbBase.defaultProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0\n  };\n  return BreadcrumbBase;\n}(React.Component);\n\nexport { BreadcrumbBase };","map":{"version":3,"sources":["components/Breadcrumb/Breadcrumb.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  initializeComponentRef,\n  getRTL,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties,\n} from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\nimport { IContextualMenuItem, IContextualMenuItemProps } from '../../ContextualMenu';\nimport {\n  IBreadcrumbProps,\n  IBreadcrumbItem,\n  IDividerAsProps,\n  IBreadcrumbData,\n  IBreadcrumbStyleProps,\n  IBreadcrumbStyles,\n} from './Breadcrumb.types';\n\n/** @deprecated Use IBreadcrumbData */\nexport type IBreadCrumbData = IBreadcrumbData;\n\nconst getClassNames = classNamesFunction<IBreadcrumbStyleProps, IBreadcrumbStyles>();\n\nconst OVERFLOW_KEY = 'overflow';\nconst nullFunction = (): null => null;\n\nconst nonActionableItemProps: Partial<IContextualMenuItemProps> = {\n  styles: props => {\n    const { theme } = props;\n    return {\n      root: {\n        selectors: {\n          '&.is-disabled': {\n            color: theme.semanticColors.bodyText,\n          },\n        },\n      },\n    };\n  },\n};\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport class BreadcrumbBase extends React.Component<IBreadcrumbProps, any> {\n  public static defaultProps: IBreadcrumbProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0,\n  };\n\n  private _classNames: IProcessedStyleSet<IBreadcrumbStyles>;\n  private _focusZone = React.createRef<FocusZone>();\n\n  constructor(props: IBreadcrumbProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._validateProps(props);\n  }\n\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n  public focus(): void {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    this._validateProps(this.props);\n\n    const {\n      onReduceData = this._onReduceData,\n      onGrowData = this._onGrowData,\n      overflowIndex,\n      maxDisplayedItems,\n      items,\n      className,\n      theme,\n      styles,\n    } = this.props;\n    const renderedItems = [...items];\n    const renderedOverflowItems = renderedItems.splice(overflowIndex!, renderedItems.length - maxDisplayedItems!);\n    const breadcrumbData: IBreadcrumbData = {\n      props: this.props,\n      renderedItems,\n      renderedOverflowItems,\n    };\n\n    this._classNames = getClassNames(styles, {\n      className,\n      theme: theme!,\n    });\n\n    return (\n      <ResizeGroup\n        onRenderData={this._onRenderBreadcrumb}\n        onReduceData={onReduceData}\n        onGrowData={onGrowData}\n        data={breadcrumbData}\n      />\n    );\n  }\n\n  /**\n   * Remove the first rendered item past the overlow point and put it and the end the overflow set.\n   */\n  private _onReduceData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex } = data.props;\n\n    const movedItem = renderedItems[overflowIndex!];\n\n    if (!movedItem) {\n      return undefined;\n    }\n\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 1);\n\n    renderedOverflowItems = [...renderedOverflowItems, movedItem];\n\n    return { ...data, renderedItems, renderedOverflowItems };\n  };\n\n  /**\n   * Remove the last item of the overflow set and insert the item as the start of the rendered set past the overflow\n   * point.\n   */\n  private _onGrowData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex, maxDisplayedItems } = data.props;\n\n    renderedOverflowItems = [...renderedOverflowItems];\n    const movedItem = renderedOverflowItems.pop();\n\n    if (!movedItem || renderedItems.length >= maxDisplayedItems!) {\n      return undefined;\n    }\n\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 0, movedItem);\n\n    return { ...data, renderedItems, renderedOverflowItems };\n  };\n\n  private _onRenderBreadcrumb = (data: IBreadcrumbData) => {\n    const {\n      ariaLabel,\n      dividerAs: DividerType = Icon as React.ElementType<IDividerAsProps>,\n      onRenderItem = this._onRenderItem,\n      overflowAriaLabel,\n      overflowIndex,\n      onRenderOverflowIcon,\n      overflowButtonAs,\n    } = data.props;\n    const { renderedOverflowItems, renderedItems } = data;\n\n    const contextualItems = renderedOverflowItems.map(\n      (item): IContextualMenuItem => {\n        const isActionable = !!(item.onClick || item.href);\n        return {\n          text: item.text,\n          name: item.text,\n          key: item.key,\n          onClick: item.onClick ? this._onBreadcrumbClicked.bind(this, item) : null,\n          href: item.href,\n          disabled: !isActionable,\n          itemProps: isActionable ? undefined : nonActionableItemProps,\n        };\n      },\n    );\n\n    // Find index of last rendered item so the divider icon\n    // knows not to render on that item\n    const lastItemIndex = renderedItems.length - 1;\n    const hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n\n    const itemElements: JSX.Element[] = renderedItems.map((item, index) => (\n      <li className={this._classNames.listItem} key={item.key || String(index)}>\n        {onRenderItem(item, this._onRenderItem)}\n        {(index !== lastItemIndex || (hasOverflowItems && index === overflowIndex! - 1)) && (\n          <DividerType\n            className={this._classNames.chevron}\n            iconName={getRTL(this.props.theme) ? 'ChevronLeft' : 'ChevronRight'}\n            item={item}\n          />\n        )}\n      </li>\n    ));\n\n    if (hasOverflowItems) {\n      const iconProps = !onRenderOverflowIcon ? { iconName: 'More' } : {};\n      const onRenderMenuIcon = onRenderOverflowIcon ? onRenderOverflowIcon : nullFunction;\n      const OverflowButton = overflowButtonAs ? overflowButtonAs : IconButton;\n\n      itemElements.splice(\n        overflowIndex!,\n        0,\n        <li className={this._classNames.overflow} key={OVERFLOW_KEY}>\n          <OverflowButton\n            className={this._classNames.overflowButton}\n            iconProps={iconProps}\n            role=\"button\"\n            aria-haspopup=\"true\"\n            ariaLabel={overflowAriaLabel}\n            onRenderMenuIcon={onRenderMenuIcon}\n            menuProps={{\n              items: contextualItems,\n              directionalHint: DirectionalHint.bottomLeftEdge,\n            }}\n          />\n          {overflowIndex !== lastItemIndex + 1 && (\n            <DividerType\n              className={this._classNames.chevron}\n              iconName={getRTL(this.props.theme) ? 'ChevronLeft' : 'ChevronRight'}\n              item={renderedOverflowItems[renderedOverflowItems.length - 1]}\n            />\n          )}\n        </li>,\n      );\n    }\n\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, [\n      'className',\n    ]);\n\n    return (\n      <div className={this._classNames.root} role=\"navigation\" aria-label={ariaLabel} {...nativeProps}>\n        <FocusZone\n          componentRef={this._focusZone}\n          direction={FocusZoneDirection.horizontal}\n          {...this.props.focusZoneProps}\n        >\n          <ol className={this._classNames.list}>{itemElements}</ol>\n        </FocusZone>\n      </div>\n    );\n  };\n\n  private _onRenderItem = (item: IBreadcrumbItem) => {\n    const { as, href, onClick, isCurrentItem, text, ...additionalProps } = item;\n\n    if (onClick || href) {\n      return (\n        <Link\n          {...additionalProps}\n          as={as}\n          className={this._classNames.itemLink}\n          href={href}\n          aria-current={isCurrentItem ? 'page' : undefined}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={this._onBreadcrumbClicked.bind(this, item)}\n        >\n          <TooltipHost content={text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {text}\n          </TooltipHost>\n        </Link>\n      );\n    } else {\n      const Tag = as || 'span';\n      return (\n        <Tag {...additionalProps} className={this._classNames.item}>\n          <TooltipHost content={text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {text}\n          </TooltipHost>\n        </Tag>\n      );\n    }\n  };\n\n  private _onBreadcrumbClicked = (item: IBreadcrumbItem, ev: React.MouseEvent<HTMLElement>) => {\n    if (item.onClick) {\n      item.onClick(ev, item);\n    }\n  };\n\n  /**\n   * Validate incoming props\n   * @param props - Props to validate\n   */\n  private _validateProps(props: IBreadcrumbProps): void {\n    const { maxDisplayedItems, overflowIndex, items } = props;\n    if (\n      overflowIndex! < 0 ||\n      (maxDisplayedItems! > 1 && overflowIndex! > maxDisplayedItems! - 1) ||\n      (items.length > 0 && overflowIndex! > items.length - 1)\n    ) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}