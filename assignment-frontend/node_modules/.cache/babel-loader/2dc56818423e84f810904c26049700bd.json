{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { getId, classNamesFunction, mergeAriaAttributeValues, initializeComponentRef, warnMutuallyExclusive, FocusRects } from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { KeytipData } from '../../KeytipData';\nvar getClassNames = classNamesFunction();\n\nvar CheckboxBase =\n/** @class */\nfunction (_super) {\n  __extends(CheckboxBase, _super);\n  /**\n   * Initialize a new instance of the Checkbox\n   * @param props - Props for the component\n   * @param context - Context or initial state for the base component.\n   */\n\n\n  function CheckboxBase(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this._checkBox = React.createRef();\n\n    _this._renderContent = function (checked, indeterminate, keytipAttributes) {\n      if (keytipAttributes === void 0) {\n        keytipAttributes = {};\n      }\n\n      var _a = _this.props,\n          disabled = _a.disabled,\n          inputProps = _a.inputProps,\n          name = _a.name,\n          ariaLabel = _a.ariaLabel,\n          ariaLabelledBy = _a.ariaLabelledBy,\n          ariaDescribedBy = _a.ariaDescribedBy,\n          _b = _a.onRenderLabel,\n          onRenderLabel = _b === void 0 ? _this._onRenderLabel : _b,\n          checkmarkIconProps = _a.checkmarkIconProps,\n          ariaPositionInSet = _a.ariaPositionInSet,\n          ariaSetSize = _a.ariaSetSize,\n          title = _a.title,\n          label = _a.label;\n      return React.createElement(\"div\", {\n        className: _this._classNames.root,\n        title: title\n      }, React.createElement(FocusRects, null), React.createElement(\"input\", __assign({\n        type: \"checkbox\"\n      }, inputProps, {\n        \"data-ktp-execute-target\": keytipAttributes['data-ktp-execute-target'],\n        checked: checked,\n        disabled: disabled,\n        className: _this._classNames.input,\n        ref: _this._checkBox,\n        name: name,\n        id: _this._id,\n        title: title,\n        onChange: _this._onChange,\n        onFocus: _this._onFocus,\n        onBlur: _this._onBlur,\n        \"aria-disabled\": disabled,\n        \"aria-label\": ariaLabel || label,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-describedby\": mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby']),\n        \"aria-posinset\": ariaPositionInSet,\n        \"aria-setsize\": ariaSetSize,\n        \"aria-checked\": indeterminate ? 'mixed' : checked ? 'true' : 'false'\n      })), React.createElement(\"label\", {\n        className: _this._classNames.label,\n        htmlFor: _this._id\n      }, React.createElement(\"div\", {\n        className: _this._classNames.checkbox,\n        \"data-ktp-target\": keytipAttributes['data-ktp-target']\n      }, React.createElement(Icon, __assign({\n        iconName: \"CheckMark\"\n      }, checkmarkIconProps, {\n        className: _this._classNames.checkmark\n      }))), onRenderLabel(_this.props, _this._onRenderLabel)));\n    };\n\n    _this._onFocus = function (ev) {\n      var inputProps = _this.props.inputProps;\n\n      if (inputProps && inputProps.onFocus) {\n        inputProps.onFocus(ev);\n      }\n    };\n\n    _this._onBlur = function (ev) {\n      var inputProps = _this.props.inputProps;\n\n      if (inputProps && inputProps.onBlur) {\n        inputProps.onBlur(ev);\n      }\n    };\n\n    _this._onChange = function (ev) {\n      var onChange = _this.props.onChange;\n      var _a = _this.state,\n          isChecked = _a.isChecked,\n          isIndeterminate = _a.isIndeterminate;\n\n      if (!isIndeterminate) {\n        if (onChange) {\n          onChange(ev, !isChecked);\n        }\n\n        if (_this.props.checked === undefined) {\n          _this.setState({\n            isChecked: !isChecked\n          });\n        }\n      } else {\n        // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if\n        // controlled, lets the consumer know to change it by calling onChange). It doesn't\n        // change the checked state.\n        if (onChange) {\n          onChange(ev, isChecked);\n        }\n\n        if (_this.props.indeterminate === undefined) {\n          _this.setState({\n            isIndeterminate: false\n          });\n        }\n      }\n    };\n\n    _this._onRenderLabel = function (props) {\n      var label = props.label,\n          title = props.title;\n      return label ? React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: _this._classNames.text,\n        title: title\n      }, label) : null;\n    };\n\n    initializeComponentRef(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive('Checkbox', props, {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate'\n      });\n    }\n\n    _this._id = _this.props.id || getId('checkbox-');\n    _this.state = {\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked),\n      isIndeterminate: !!(props.indeterminate !== undefined ? props.indeterminate : props.defaultIndeterminate)\n    };\n    return _this;\n  }\n\n  CheckboxBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var stateUpdate = {};\n\n    if (nextProps.indeterminate !== undefined) {\n      stateUpdate.isIndeterminate = !!nextProps.indeterminate;\n    }\n\n    if (nextProps.checked !== undefined) {\n      stateUpdate.isChecked = !!nextProps.checked;\n    }\n\n    return Object.keys(stateUpdate).length ? stateUpdate : null;\n  };\n  /**\n   * Render the Checkbox based on passed props\n   */\n\n\n  CheckboxBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        className = _a.className,\n        disabled = _a.disabled,\n        boxSide = _a.boxSide,\n        theme = _a.theme,\n        styles = _a.styles,\n        _b = _a.onRenderLabel,\n        onRenderLabel = _b === void 0 ? this._onRenderLabel : _b,\n        keytipProps = _a.keytipProps;\n    var _c = this.state,\n        isChecked = _c.isChecked,\n        isIndeterminate = _c.isIndeterminate;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: boxSide !== 'start',\n      isUsingCustomLabelRender: onRenderLabel !== this._onRenderLabel\n    });\n\n    if (keytipProps) {\n      return React.createElement(KeytipData, {\n        keytipProps: keytipProps,\n        disabled: disabled\n      }, function (keytipAttributes) {\n        return _this._renderContent(isChecked, isIndeterminate, keytipAttributes);\n      });\n    }\n\n    return this._renderContent(isChecked, isIndeterminate);\n  };\n\n  Object.defineProperty(CheckboxBase.prototype, \"indeterminate\", {\n    get: function () {\n      return !!this.state.isIndeterminate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CheckboxBase.prototype, \"checked\", {\n    get: function () {\n      return !!this.state.isChecked;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CheckboxBase.prototype.focus = function () {\n    if (this._checkBox.current) {\n      this._checkBox.current.focus();\n    }\n  };\n\n  CheckboxBase.defaultProps = {\n    boxSide: 'start'\n  };\n  return CheckboxBase;\n}(React.Component);\n\nexport { CheckboxBase };","map":{"version":3,"sources":["components/Checkbox/Checkbox.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  getId,\n  classNamesFunction,\n  mergeAriaAttributeValues,\n  initializeComponentRef,\n  warnMutuallyExclusive,\n  FocusRects,\n} from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { ICheckbox, ICheckboxProps, ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface ICheckboxState {\n  /** Is true when Uncontrolled control is checked. */\n  isChecked?: boolean;\n  isIndeterminate?: boolean;\n}\n\nconst getClassNames = classNamesFunction<ICheckboxStyleProps, ICheckboxStyles>();\n\nexport class CheckboxBase extends React.Component<ICheckboxProps, ICheckboxState> implements ICheckbox {\n  public static defaultProps: ICheckboxProps = {\n    boxSide: 'start',\n  };\n\n  private _checkBox = React.createRef<HTMLInputElement>();\n  private _id: string;\n  private _classNames: { [key in keyof ICheckboxStyles]: string };\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<ICheckboxProps>,\n    prevState: Readonly<ICheckboxState>,\n  ): ICheckboxState | null {\n    const stateUpdate: Partial<ICheckboxState> = {};\n    if (nextProps.indeterminate !== undefined) {\n      stateUpdate.isIndeterminate = !!nextProps.indeterminate;\n    }\n    if (nextProps.checked !== undefined) {\n      stateUpdate.isChecked = !!nextProps.checked;\n    }\n    return Object.keys(stateUpdate).length ? stateUpdate : null;\n  }\n\n  /**\n   * Initialize a new instance of the Checkbox\n   * @param props - Props for the component\n   * @param context - Context or initial state for the base component.\n   */\n  constructor(props: ICheckboxProps, context?: any) {\n    super(props, context);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive('Checkbox', props, {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate',\n      });\n    }\n\n    this._id = this.props.id || getId('checkbox-');\n    this.state = {\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked),\n      isIndeterminate: !!(props.indeterminate !== undefined ? props.indeterminate : props.defaultIndeterminate),\n    };\n  }\n\n  /**\n   * Render the Checkbox based on passed props\n   */\n  public render(): JSX.Element {\n    const {\n      className,\n      disabled,\n      boxSide,\n      theme,\n      styles,\n      onRenderLabel = this._onRenderLabel,\n      keytipProps,\n    } = this.props;\n\n    const { isChecked, isIndeterminate } = this.state;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: boxSide !== 'start',\n      isUsingCustomLabelRender: onRenderLabel !== this._onRenderLabel,\n    });\n\n    if (keytipProps) {\n      return (\n        <KeytipData keytipProps={keytipProps} disabled={disabled}>\n          {(keytipAttributes: any): JSX.Element => this._renderContent(isChecked, isIndeterminate, keytipAttributes)}\n        </KeytipData>\n      );\n    }\n\n    return this._renderContent(isChecked, isIndeterminate);\n  }\n\n  public get indeterminate(): boolean {\n    return !!this.state.isIndeterminate;\n  }\n\n  public get checked(): boolean {\n    return !!this.state.isChecked;\n  }\n\n  public focus(): void {\n    if (this._checkBox.current) {\n      this._checkBox.current.focus();\n    }\n  }\n\n  private _renderContent = (\n    checked: boolean | undefined,\n    indeterminate: boolean | undefined,\n    keytipAttributes: any = {},\n  ): JSX.Element => {\n    const {\n      disabled,\n      inputProps,\n      name,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaDescribedBy,\n      onRenderLabel = this._onRenderLabel,\n      checkmarkIconProps,\n      ariaPositionInSet,\n      ariaSetSize,\n      title,\n      label,\n    } = this.props;\n\n    return (\n      <div className={this._classNames.root} title={title}>\n        <FocusRects />\n        <input\n          type=\"checkbox\"\n          {...inputProps}\n          data-ktp-execute-target={keytipAttributes['data-ktp-execute-target']}\n          checked={checked}\n          disabled={disabled}\n          className={this._classNames.input}\n          ref={this._checkBox}\n          name={name}\n          id={this._id}\n          title={title}\n          onChange={this._onChange}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          aria-disabled={disabled}\n          aria-label={ariaLabel || label}\n          aria-labelledby={ariaLabelledBy}\n          aria-describedby={mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'])}\n          aria-posinset={ariaPositionInSet}\n          aria-setsize={ariaSetSize}\n          aria-checked={indeterminate ? 'mixed' : checked ? 'true' : 'false'}\n        />\n        <label className={this._classNames.label} htmlFor={this._id}>\n          <div className={this._classNames.checkbox} data-ktp-target={keytipAttributes['data-ktp-target']}>\n            <Icon iconName=\"CheckMark\" {...checkmarkIconProps} className={this._classNames.checkmark} />\n          </div>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n        </label>\n      </div>\n    );\n  };\n\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onFocus) {\n      inputProps.onFocus(ev);\n    }\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onBlur) {\n      inputProps.onBlur(ev);\n    }\n  };\n\n  private _onChange = (ev: React.FormEvent<HTMLElement>): void => {\n    const { onChange } = this.props;\n    const { isChecked, isIndeterminate } = this.state;\n\n    if (!isIndeterminate) {\n      if (onChange) {\n        onChange(ev, !isChecked);\n      }\n      if (this.props.checked === undefined) {\n        this.setState({ isChecked: !isChecked });\n      }\n    } else {\n      // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if\n      // controlled, lets the consumer know to change it by calling onChange). It doesn't\n      // change the checked state.\n      if (onChange) {\n        onChange(ev, isChecked);\n      }\n      if (this.props.indeterminate === undefined) {\n        this.setState({ isIndeterminate: false });\n      }\n    }\n  };\n\n  private _onRenderLabel = (props: ICheckboxProps): JSX.Element | null => {\n    const { label, title } = props;\n\n    return label ? (\n      <span aria-hidden=\"true\" className={this._classNames.text} title={title}>\n        {label}\n      </span>\n    ) : null;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}