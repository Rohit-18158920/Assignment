{"ast":null,"code":"export var TextStyles = function (props, theme) {\n  var as = props.as,\n      className = props.className,\n      block = props.block,\n      nowrap = props.nowrap,\n      variant = props.variant;\n  var fonts = theme.fonts;\n  var variantObject = fonts[variant || 'medium'];\n  return {\n    root: [theme.fonts.medium, {\n      display: block ? as === 'td' ? 'table-cell' : 'block' : 'inline',\n      fontFamily: variantObject.fontFamily,\n      fontSize: variantObject.fontSize,\n      fontWeight: variantObject.fontWeight,\n      color: variantObject.color,\n      mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,\n      webkitFontSmoothing: variantObject.WebkitFontSmoothing\n    }, nowrap && {\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis'\n    }, className]\n  };\n};","map":{"version":3,"sources":["components/Text/Text.styles.ts"],"names":[],"mappings":"AAIA,OAAO,IAAM,UAAU,GAA6B,UAAC,KAAD,EAAoB,KAApB,EAAiC;AAC3E,MAAA,EAAA,GAAA,KAAA,CAAA,EAAA;AAAA,MAAI,SAAA,GAAA,KAAA,CAAA,SAAJ;AAAA,MAAe,KAAA,GAAA,KAAA,CAAA,KAAf;AAAA,MAAsB,MAAA,GAAA,KAAA,CAAA,MAAtB;AAAA,MAA8B,OAAA,GAAA,KAAA,CAAA,OAA9B;AACA,MAAA,KAAA,GAAA,KAAA,CAAA,KAAA;AACR,MAAM,aAAa,GAAG,KAAK,CAAC,OAAO,IAAI,QAAZ,CAA3B;AAEA,SAAO;AACL,IAAA,IAAI,EAAE,CACJ,KAAK,CAAC,KAAN,CAAY,MADR,EAEJ;AACE,MAAA,OAAO,EAAE,KAAK,GAAI,EAAE,KAAK,IAAP,GAAc,YAAd,GAA6B,OAAjC,GAA4C,QAD5D;AAEE,MAAA,UAAU,EAAE,aAAa,CAAC,UAF5B;AAGE,MAAA,QAAQ,EAAE,aAAa,CAAC,QAH1B;AAIE,MAAA,UAAU,EAAE,aAAa,CAAC,UAJ5B;AAKE,MAAA,KAAK,EAAE,aAAa,CAAC,KALvB;AAME,MAAA,mBAAmB,EAAE,aAAa,CAAC,mBANrC;AAOE,MAAA,mBAAmB,EAAE,aAAa,CAAC;AAPrC,KAFI,EAWJ,MAAM,IAAI;AACR,MAAA,UAAU,EAAE,QADJ;AAER,MAAA,QAAQ,EAAE,QAFF;AAGR,MAAA,YAAY,EAAE;AAHN,KAXN,EAgBJ,SAhBI;AADD,GAAP;AAoBD,CAzBM","sourcesContent":["import { ITextComponent, ITextStyles, ITextStylesReturnType, ITextProps } from './Text.types';\n\nimport { ITheme } from '../../Styling';\n\nexport const TextStyles: ITextComponent['styles'] = (props: ITextProps, theme: ITheme): ITextStylesReturnType => {\n  const { as, className, block, nowrap, variant } = props;\n  const { fonts } = theme;\n  const variantObject = fonts[variant || 'medium'];\n\n  return {\n    root: [\n      theme.fonts.medium,\n      {\n        display: block ? (as === 'td' ? 'table-cell' : 'block') : 'inline',\n        fontFamily: variantObject.fontFamily,\n        fontSize: variantObject.fontSize,\n        fontWeight: variantObject.fontWeight,\n        color: variantObject.color,\n        mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,\n        webkitFontSmoothing: variantObject.WebkitFontSmoothing,\n      },\n      nowrap && {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      },\n      className,\n    ],\n  } as ITextStyles;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}