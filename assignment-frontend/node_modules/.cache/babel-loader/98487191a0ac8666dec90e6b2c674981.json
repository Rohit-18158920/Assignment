{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * Builds a map of ID to IKeytipProps\n *\n * @param config - IKeytipConfig object\n * @returns Config map\n */\n\nexport function buildKeytipConfigMap(config) {\n  var configMap = {};\n\n  for (var _i = 0, _a = config.keytips; _i < _a.length; _i++) {\n    var keytip = _a[_i];\n    constructKeytip(configMap, [], keytip);\n  }\n\n  return configMap;\n}\n/**\n * Constructs a keytip from an IKeytipConfigItem and puts it in the configMap\n *\n * @param configMap - IKeytipConfigMap to store the keytip in\n * @param parentSequence - string of the parent keytip\n * @param keytip - IKeytipConfigItem data\n */\n\nexport function constructKeytip(configMap, parentSequence, keytip) {\n  // Compute full key sequence\n  var sequence = keytip.sequence ? keytip.sequence : keytip.content.toLocaleLowerCase();\n  var keytipSequence = parentSequence.concat(sequence); // Save props in configMap\n\n  var keytipProps = __assign(__assign({}, keytip.optionalProps), {\n    keySequences: keytipSequence,\n    content: keytip.content\n  });\n\n  configMap[keytip.id] = keytipProps;\n\n  if (keytip.children) {\n    for (var _i = 0, _a = keytip.children; _i < _a.length; _i++) {\n      var child = _a[_i]; // Create keytips for all children\n\n      constructKeytip(configMap, keytipSequence, child);\n    }\n  }\n}","map":{"version":3,"sources":["utilities/keytips/KeytipConfig.ts"],"names":[],"mappings":";AAsCA;;;;;AAKG;;AACH,OAAM,SAAU,oBAAV,CAA+B,MAA/B,EAAoD;AACxD,MAAM,SAAS,GAAqB,EAApC;;AAEA,OAAqB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,OAA5B,EAAqB,EAAA,GAAA,EAAA,CAAA,MAArB,EAAqB,EAAA,EAArB,EAAqC;AAAhC,QAAM,MAAM,GAAA,EAAA,CAAA,EAAA,CAAZ;AACH,IAAA,eAAe,CAAC,SAAD,EAAY,EAAZ,EAAgB,MAAhB,CAAf;AACD;;AAED,SAAO,SAAP;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,eAAV,CACJ,SADI,EAEJ,cAFI,EAGJ,MAHI,EAGqB;AAEzB;AACA,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAP,GAAkB,MAAM,CAAC,QAAzB,GAAoC,MAAM,CAAC,OAAP,CAAe,iBAAf,EAArD;AACA,MAAM,cAAc,GAAG,cAAc,CAAC,MAAf,CAAsB,QAAtB,CAAvB,CAJyB,CAMzB;;AACA,MAAM,WAAW,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAsB,MAAM,CAAC,aAA7B,CAAA,EAA0C;AAAE,IAAA,YAAY,EAAE,cAAhB;AAAgC,IAAA,OAAO,EAAE,MAAM,CAAC;AAAhD,GAA1C,CAAjB;;AACA,EAAA,SAAS,CAAC,MAAM,CAAC,EAAR,CAAT,GAAuB,WAAvB;;AAEA,MAAI,MAAM,CAAC,QAAX,EAAqB;AACnB,SAAoB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,QAA3B,EAAoB,EAAA,GAAA,EAAA,CAAA,MAApB,EAAoB,EAAA,EAApB,EAAqC;AAAhC,UAAM,KAAK,GAAA,EAAA,CAAA,EAAA,CAAX,CAAgC,CACnC;;AACA,MAAA,eAAe,CAAC,SAAD,EAAY,cAAZ,EAA4B,KAA5B,CAAf;AACD;AACF;AACF","sourcesContent":["import { IKeytipProps } from '../../Keytip';\n\nexport interface IKeytipConfig {\n  keytips: IKeytipConfigItem[];\n}\n\nexport interface IKeytipConfigItem {\n  /**\n   * Key Sequence for this keytip only\n   * If sequence is not defined it will be derived from the content string\n   */\n  sequence?: string;\n\n  /**\n   * Content for the keytip\n   */\n  content: string;\n\n  /**\n   * Identifier for the keytip, to be used to access in the configMap\n   */\n  id: string;\n\n  /**\n   * Optional props in IKeytipProps\n   */\n  optionalProps?: Partial<IKeytipProps>;\n\n  /**\n   * Children keytips of this keytip\n   */\n  children?: IKeytipConfigItem[];\n}\n\nexport interface IKeytipConfigMap {\n  [id: string]: IKeytipProps;\n}\n\n/**\n * Builds a map of ID to IKeytipProps\n *\n * @param config - IKeytipConfig object\n * @returns Config map\n */\nexport function buildKeytipConfigMap(config: IKeytipConfig): IKeytipConfigMap {\n  const configMap: IKeytipConfigMap = {};\n\n  for (const keytip of config.keytips) {\n    constructKeytip(configMap, [], keytip);\n  }\n\n  return configMap;\n}\n\n/**\n * Constructs a keytip from an IKeytipConfigItem and puts it in the configMap\n *\n * @param configMap - IKeytipConfigMap to store the keytip in\n * @param parentSequence - string of the parent keytip\n * @param keytip - IKeytipConfigItem data\n */\nexport function constructKeytip(\n  configMap: IKeytipConfigMap,\n  parentSequence: string[],\n  keytip: IKeytipConfigItem,\n): void {\n  // Compute full key sequence\n  const sequence = keytip.sequence ? keytip.sequence : keytip.content.toLocaleLowerCase();\n  const keytipSequence = parentSequence.concat(sequence);\n\n  // Save props in configMap\n  const keytipProps: IKeytipProps = { ...keytip.optionalProps, keySequences: keytipSequence, content: keytip.content };\n  configMap[keytip.id] = keytipProps;\n\n  if (keytip.children) {\n    for (const child of keytip.children) {\n      // Create keytips for all children\n      constructKeytip(configMap, keytipSequence, child);\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}