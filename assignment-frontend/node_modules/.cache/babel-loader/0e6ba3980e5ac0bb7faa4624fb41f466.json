{"ast":null,"code":"import { useRef, useEffect } from 'react';\n/**\n * Hook keeping track of a given value from a previous execution of the component the Hook is used in.\n *\n * See [React Hooks FAQ](https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state)\n */\n\nexport function usePrevious(value) {\n  var ref = useRef();\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}","map":{"version":3,"sources":["usePrevious.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,SAAjB,QAAkC,OAAlC;AAEA;;;;AAIG;;AACH,OAAM,SAAU,WAAV,CAAyB,KAAzB,EAAiC;AACrC,MAAM,GAAG,GAAG,MAAM,EAAlB;AACA,EAAA,SAAS,CAAC,YAAA;AACR,IAAA,GAAG,CAAC,OAAJ,GAAc,KAAd;AACD,GAFQ,CAAT;AAGA,SAAO,GAAG,CAAC,OAAX;AACD","sourcesContent":["import { useRef, useEffect } from 'react';\n\n/**\n * Hook keeping track of a given value from a previous execution of the component the Hook is used in.\n *\n * See [React Hooks FAQ](https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state)\n */\nexport function usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T | undefined>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}