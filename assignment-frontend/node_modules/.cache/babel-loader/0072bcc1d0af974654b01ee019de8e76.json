{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, initializeComponentRef } from '../../Utilities';\nimport { KeytipData } from '../../KeytipData';\nvar getClassNames = classNamesFunction();\n\nvar LinkBase =\n/** @class */\nfunction (_super) {\n  __extends(LinkBase, _super);\n\n  function LinkBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._link = React.createRef();\n\n    _this._renderContent = function (keytipAttributes) {\n      if (keytipAttributes === void 0) {\n        keytipAttributes = {};\n      }\n\n      var _a = _this.props,\n          disabled = _a.disabled,\n          children = _a.children,\n          className = _a.className,\n          href = _a.href,\n          underline = _a.underline,\n          theme = _a.theme,\n          styles = _a.styles;\n      var classNames = getClassNames(styles, {\n        className: className,\n        isButton: !href,\n        isDisabled: disabled,\n        isUnderlined: underline,\n        theme: theme\n      });\n\n      var RootType = _this._getRootType(_this.props);\n\n      return React.createElement(RootType, __assign({}, keytipAttributes, _this._adjustPropsForRootType(RootType, _this.props), {\n        className: classNames.root,\n        onClick: _this._onClick,\n        ref: _this._link,\n        \"aria-disabled\": disabled\n      }), children);\n    };\n\n    _this._onClick = function (ev) {\n      var _a = _this.props,\n          onClick = _a.onClick,\n          disabled = _a.disabled;\n\n      if (disabled) {\n        ev.preventDefault();\n      } else if (onClick) {\n        onClick(ev);\n      }\n    };\n\n    initializeComponentRef(_this);\n    return _this;\n  }\n\n  LinkBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        disabled = _a.disabled,\n        keytipProps = _a.keytipProps;\n\n    if (keytipProps) {\n      return React.createElement(KeytipData, {\n        keytipProps: keytipProps,\n        ariaDescribedBy: this.props['aria-describedby'],\n        disabled: disabled\n      }, function (keytipAttributes) {\n        return _this._renderContent(keytipAttributes);\n      });\n    }\n\n    return this._renderContent();\n  };\n\n  LinkBase.prototype.focus = function () {\n    var current = this._link.current;\n\n    if (current && current.focus) {\n      current.focus();\n    }\n  };\n\n  LinkBase.prototype._adjustPropsForRootType = function (RootType, props) {\n    // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n    // as those will always be removed. We also take some props that are optional\n    // based on the RootType.\n    var children = props.children,\n        as = props.as,\n        disabled = props.disabled,\n        target = props.target,\n        href = props.href,\n        theme = props.theme,\n        getStyles = props.getStyles,\n        styles = props.styles,\n        componentRef = props.componentRef,\n        keytipProps = props.keytipProps,\n        underline = props.underline,\n        restProps = __rest(props, [\"children\", \"as\", \"disabled\", \"target\", \"href\", \"theme\", \"getStyles\", \"styles\", \"componentRef\", \"keytipProps\", \"underline\"]); // RootType will be a string if we're dealing with an html component\n\n\n    if (typeof RootType === 'string') {\n      // Remove the disabled prop for anchor elements\n      if (RootType === 'a') {\n        return __assign({\n          target: target,\n          href: disabled ? undefined : href\n        }, restProps);\n      } // Add the type='button' prop for button elements\n\n\n      if (RootType === 'button') {\n        return __assign({\n          type: 'button',\n          disabled: disabled\n        }, restProps);\n      } // Remove the target and href props for all other non anchor elements\n\n\n      return __assign(__assign({}, restProps), {\n        disabled: disabled\n      });\n    } // Retain all props except 'as' for ReactComponents\n\n\n    return __assign({\n      target: target,\n      href: href,\n      disabled: disabled\n    }, restProps);\n  };\n\n  LinkBase.prototype._getRootType = function (props) {\n    if (props.as) {\n      return props.as;\n    }\n\n    if (props.href) {\n      return 'a';\n    }\n\n    return 'button';\n  };\n\n  return LinkBase;\n}(React.Component);\n\nexport { LinkBase };","map":{"version":3,"sources":["components/Link/Link.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,kBAAT,EAA6B,sBAA7B,QAA2D,iBAA3D;AAEA,SAAS,UAAT,QAA2B,kBAA3B;AAEA,IAAM,aAAa,GAAG,kBAAkB,EAAxC;;AAEA,IAAA,QAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8B,EAAA,SAAA,CAAA,QAAA,EAAA,MAAA,CAAA;;AAG5B,WAAA,QAAA,CAAY,KAAZ,EAA6B;AAA7B,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADd;;AAFQ,IAAA,KAAA,CAAA,KAAA,GAAQ,KAAK,CAAC,SAAN,EAAR;;AAkCA,IAAA,KAAA,CAAA,cAAA,GAAiB,UAAC,gBAAD,EAA2B;AAA1B,UAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,QAAA,gBAAA,GAAA,EAAA;AAA0B;;AAC5C,UAAA,EAAA,GAAA,KAAA,CAAA,KAAA;AAAA,UAAE,QAAA,GAAA,EAAA,CAAA,QAAF;AAAA,UAAY,QAAA,GAAA,EAAA,CAAA,QAAZ;AAAA,UAAsB,SAAA,GAAA,EAAA,CAAA,SAAtB;AAAA,UAAiC,IAAA,GAAA,EAAA,CAAA,IAAjC;AAAA,UAAuC,SAAA,GAAA,EAAA,CAAA,SAAvC;AAAA,UAAkD,KAAA,GAAA,EAAA,CAAA,KAAlD;AAAA,UAAyD,MAAA,GAAA,EAAA,CAAA,MAAzD;AAEN,UAAM,UAAU,GAAG,aAAa,CAAC,MAAD,EAAU;AACxC,QAAA,SAAS,EAAA,SAD+B;AAExC,QAAA,QAAQ,EAAE,CAAC,IAF6B;AAGxC,QAAA,UAAU,EAAE,QAH4B;AAIxC,QAAA,YAAY,EAAE,SAJ0B;AAKxC,QAAA,KAAK,EAAE;AALiC,OAAV,CAAhC;;AAQA,UAAM,QAAQ,GAAG,KAAI,CAAC,YAAL,CAAkB,KAAI,CAAC,KAAvB,CAAjB;;AAEA,aACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS,QAAA,CAAA,EAAA,EACH,gBADG,EAEH,KAAI,CAAC,uBAAL,CAA6B,QAA7B,EAAuC,KAAI,CAAC,KAA5C,CAFG,EAE+C;AACtD,QAAA,SAAS,EAAE,UAAU,CAAC,IADgC;AAEtD,QAAA,OAAO,EAAE,KAAI,CAAC,QAFwC;AAGtD,QAAA,GAAG,EAAE,KAAI,CAAC,KAH4C;AAGvC,yBACA;AAJuC,OAF/C,CAAT,EAQG,QARH,CADF;AAYD,KAzBO;;AA2BA,IAAA,KAAA,CAAA,QAAA,GAAW,UAAC,EAAD,EAA4D;AACvE,UAAA,EAAA,GAAA,KAAA,CAAA,KAAA;AAAA,UAAE,OAAA,GAAA,EAAA,CAAA,OAAF;AAAA,UAAW,QAAA,GAAA,EAAA,CAAA,QAAX;;AAEN,UAAI,QAAJ,EAAc;AACZ,QAAA,EAAE,CAAC,cAAH;AACD,OAFD,MAEO,IAAI,OAAJ,EAAa;AAClB,QAAA,OAAO,CAAC,EAAD,CAAP;AACD;AACF,KARO;;AAxDN,IAAA,sBAAsB,CAAC,KAAD,CAAtB;;AACD;;AAEM,EAAA,QAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACQ,QAAA,EAAA,GAAA,KAAA,KAAA;AAAA,QAAE,QAAA,GAAA,EAAA,CAAA,QAAF;AAAA,QAAY,WAAA,GAAA,EAAA,CAAA,WAAZ;;AAEN,QAAI,WAAJ,EAAiB;AACf,aACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,QAAA,WAAW,EAAE,WADJ;AAET,QAAA,eAAe,EAAG,KAAK,KAAL,CAA8C,kBAA9C,CAFT;AAGT,QAAA,QAAQ,EAAE;AAHD,OAAX,EAKG,UAAC,gBAAD,EAAsB;AAAkB,eAAA,KAAI,CAAC,cAAL,CAAA,gBAAA,CAAA;AAAqC,OALhF,CADF;AASD;;AAED,WAAO,KAAK,cAAL,EAAP;AACD,GAhBM;;AAkBA,EAAA,QAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACU,QAAA,OAAA,GAAA,KAAA,KAAA,CAAA,OAAA;;AAER,QAAI,OAAO,IAAI,OAAO,CAAC,KAAvB,EAA8B;AAC5B,MAAA,OAAO,CAAC,KAAR;AACD;AACF,GANM;;AA6CC,EAAA,QAAA,CAAA,SAAA,CAAA,uBAAA,GAAR,UACE,QADF,EAEE,KAFF,EAEyC;AAEvC;AACA;AACA;AAEE,QAAA,QAAA,GAAA,KAAA,CAAA,QAAA;AAAA,QACA,EAAA,GAAA,KAAA,CAAA,EADA;AAAA,QAEA,QAAA,GAAA,KAAA,CAAA,QAFA;AAAA,QAGA,MAAA,GAAA,KAAA,CAAA,MAHA;AAAA,QAIA,IAAA,GAAA,KAAA,CAAA,IAJA;AAAA,QAKA,KAAA,GAAA,KAAA,CAAA,KALA;AAAA,QAMA,SAAA,GAAA,KAAA,CAAA,SANA;AAAA,QAOA,MAAA,GAAA,KAAA,CAAA,MAPA;AAAA,QAQA,YAAA,GAAA,KAAA,CAAA,YARA;AAAA,QASA,WAAA,GAAA,KAAA,CAAA,WATA;AAAA,QAUA,SAAA,GAAA,KAAA,CAAA,SAVA;AAAA,QAWA,SAAA,GAAA,MAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,IAAA,EAAA,UAAA,EAAA,QAAA,EAAA,MAAA,EAAA,OAAA,EAAA,WAAA,EAAA,QAAA,EAAA,cAAA,EAAA,aAAA,EAAA,WAAA,CAAA,CAXA,CANqC,CAoBvC;;;AACA,QAAI,OAAO,QAAP,KAAoB,QAAxB,EAAkC;AAChC;AACA,UAAI,QAAQ,KAAK,GAAjB,EAAsB;AACpB,eAAA,QAAA,CAAA;AACE,UAAA,MAAM,EAAA,MADR;AAEE,UAAA,IAAI,EAAE,QAAQ,GAAG,SAAH,GAAe;AAF/B,SAAA,EAGK,SAHL,CAAA;AAKD,OAR+B,CAUhC;;;AACA,UAAI,QAAQ,KAAK,QAAjB,EAA2B;AACzB,eAAA,QAAA,CAAA;AACE,UAAA,IAAI,EAAE,QADR;AAEE,UAAA,QAAQ,EAAA;AAFV,SAAA,EAGK,SAHL,CAAA;AAKD,OAjB+B,CAmBhC;;;AACA,aAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAY,SAAZ,CAAA,EAAqB;AAAE,QAAA,QAAQ,EAAA;AAAV,OAArB,CAAA;AACD,KA1CsC,CA4CvC;;;AACA,WAAA,QAAA,CAAA;AAAS,MAAA,MAAM,EAAA,MAAf;AAAiB,MAAA,IAAI,EAAA,IAArB;AAAuB,MAAA,QAAQ,EAAA;AAA/B,KAAA,EAAoC,SAApC,CAAA;AACD,GAhDO;;AAkDA,EAAA,QAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,KAArB,EAAsC;AACpC,QAAI,KAAK,CAAC,EAAV,EAAc;AACZ,aAAO,KAAK,CAAC,EAAb;AACD;;AAED,QAAI,KAAK,CAAC,IAAV,EAAgB;AACd,aAAO,GAAP;AACD;;AAED,WAAO,QAAP;AACD,GAVO;;AAWV,SAAA,QAAA;AAAC,CArID,CAA8B,KAAK,CAAC,SAApC,CAAA","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef } from '../../Utilities';\nimport { ILink, ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\nimport { KeytipData } from '../../KeytipData';\n\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\n\nexport class LinkBase extends React.Component<ILinkProps, {}> implements ILink {\n  private _link = React.createRef<HTMLAnchorElement | HTMLButtonElement | null>();\n\n  constructor(props: ILinkProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const { disabled, keytipProps } = this.props;\n\n    if (keytipProps) {\n      return (\n        <KeytipData\n          keytipProps={keytipProps}\n          ariaDescribedBy={(this.props as { 'aria-describedby': string })['aria-describedby']}\n          disabled={disabled}\n        >\n          {(keytipAttributes: any): JSX.Element => this._renderContent(keytipAttributes)}\n        </KeytipData>\n      );\n    }\n\n    return this._renderContent();\n  }\n\n  public focus() {\n    const { current } = this._link;\n\n    if (current && current.focus) {\n      current.focus();\n    }\n  }\n\n  private _renderContent = (keytipAttributes: any = {}): JSX.Element => {\n    const { disabled, children, className, href, underline, theme, styles } = this.props;\n\n    const classNames = getClassNames(styles!, {\n      className,\n      isButton: !href,\n      isDisabled: disabled,\n      isUnderlined: underline,\n      theme: theme!,\n    });\n\n    const RootType = this._getRootType(this.props);\n\n    return (\n      <RootType\n        {...keytipAttributes}\n        {...this._adjustPropsForRootType(RootType, this.props)}\n        className={classNames.root}\n        onClick={this._onClick}\n        ref={this._link}\n        aria-disabled={disabled}\n      >\n        {children}\n      </RootType>\n    );\n  };\n\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    const { onClick, disabled } = this.props;\n\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  private _adjustPropsForRootType(\n    RootType: string | React.ComponentClass | React.FunctionComponent,\n    props: ILinkProps & { getStyles?: any },\n  ): Partial<ILinkProps> {\n    // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n    // as those will always be removed. We also take some props that are optional\n    // based on the RootType.\n    const {\n      children,\n      as,\n      disabled,\n      target,\n      href,\n      theme,\n      getStyles,\n      styles,\n      componentRef,\n      keytipProps,\n      underline,\n      ...restProps\n    } = props;\n\n    // RootType will be a string if we're dealing with an html component\n    if (typeof RootType === 'string') {\n      // Remove the disabled prop for anchor elements\n      if (RootType === 'a') {\n        return {\n          target,\n          href: disabled ? undefined : href,\n          ...restProps,\n        };\n      }\n\n      // Add the type='button' prop for button elements\n      if (RootType === 'button') {\n        return {\n          type: 'button',\n          disabled,\n          ...restProps,\n        };\n      }\n\n      // Remove the target and href props for all other non anchor elements\n      return { ...restProps, disabled };\n    }\n\n    // Retain all props except 'as' for ReactComponents\n    return { target, href, disabled, ...restProps };\n  }\n\n  private _getRootType(props: ILinkProps): string | React.ComponentClass | React.FunctionComponent {\n    if (props.as) {\n      return props.as;\n    }\n\n    if (props.href) {\n      return 'a';\n    }\n\n    return 'button';\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}