{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, classNamesFunction, getId, getNativeProps, divProperties, css, initializeComponentRef } from '../../Utilities';\nimport { Calendar, DayOfWeek } from '../../Calendar';\nimport { FirstWeekOfYear } from '../../utilities/dateValues/DateValues';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { TextField } from '../../TextField';\nimport { compareDates, compareDatePart } from '../../utilities/dateMath/DateMath';\nimport { FocusTrapZone } from '../../FocusTrapZone';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_STRINGS = {\n  months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  goToToday: 'Go to today',\n  prevMonthAriaLabel: 'Go to previous month',\n  nextMonthAriaLabel: 'Go to next month',\n  prevYearAriaLabel: 'Go to previous year',\n  nextYearAriaLabel: 'Go to next year',\n  prevYearRangeAriaLabel: 'Previous year range',\n  nextYearRangeAriaLabel: 'Next year range',\n  closeButtonAriaLabel: 'Close date picker',\n  weekNumberFormatString: 'Week number {0}'\n};\n\nvar DatePickerBase =\n/** @class */\nfunction (_super) {\n  __extends(DatePickerBase, _super);\n\n  function DatePickerBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._calendar = React.createRef();\n    _this._datePickerDiv = React.createRef();\n    _this._textField = React.createRef();\n\n    _this._onSelectDate = function (date) {\n      var _a = _this.props,\n          formatDate = _a.formatDate,\n          onSelectDate = _a.onSelectDate;\n\n      if (_this.props.calendarProps && _this.props.calendarProps.onSelectDate) {\n        _this.props.calendarProps.onSelectDate(date);\n      }\n\n      _this.setState({\n        selectedDate: date,\n        formattedDate: formatDate && date ? formatDate(date) : ''\n      });\n\n      if (onSelectDate) {\n        onSelectDate(date);\n      }\n\n      _this._calendarDismissed();\n    };\n\n    _this._onCalloutPositioned = function () {\n      var shouldFocus = true; // If the user has specified that the callout shouldn't use initial focus, then respect\n      // that and don't attempt to set focus. That will default to true within the callout\n      // so we need to check if it's undefined here.\n\n      if (_this.props.calloutProps && _this.props.calloutProps.setInitialFocus !== undefined) {\n        shouldFocus = _this.props.calloutProps.setInitialFocus;\n      }\n\n      if (_this._calendar.current && shouldFocus) {\n        _this._calendar.current.focus();\n      }\n    };\n\n    _this._onTextFieldFocus = function (ev) {\n      if (_this.props.disableAutoFocus) {\n        return;\n      }\n\n      if (!_this.props.allowTextInput) {\n        if (!_this._preventFocusOpeningPicker) {\n          _this._showDatePickerPopup();\n        } else {\n          _this._preventFocusOpeningPicker = false;\n        }\n      }\n    };\n\n    _this._onTextFieldBlur = function (ev) {\n      _this._validateTextInput();\n    };\n\n    _this._onTextFieldChanged = function (ev, newValue) {\n      var _a = _this.props,\n          allowTextInput = _a.allowTextInput,\n          textField = _a.textField;\n\n      if (allowTextInput) {\n        if (_this.state.isDatePickerShown) {\n          _this._dismissDatePickerPopup();\n        }\n\n        var _b = _this.props,\n            isRequired = _b.isRequired,\n            strings = _b.strings;\n\n        _this.setState({\n          errorMessage: isRequired && !newValue ? strings.isRequiredErrorMessage || ' ' : undefined,\n          formattedDate: newValue\n        });\n      }\n\n      if (textField && textField.onChange) {\n        textField.onChange(ev, newValue);\n      }\n    };\n\n    _this._onTextFieldKeyDown = function (ev) {\n      switch (ev.which) {\n        case KeyCodes.enter:\n          ev.preventDefault();\n          ev.stopPropagation();\n\n          if (!_this.state.isDatePickerShown) {\n            _this._validateTextInput();\n\n            _this._showDatePickerPopup();\n          } else {\n            // When DatePicker allows input date string directly,\n            // it is expected to hit another enter to close the popup\n            if (_this.props.allowTextInput) {\n              _this._dismissDatePickerPopup();\n            }\n          }\n\n          break;\n\n        case KeyCodes.escape:\n          _this._handleEscKey(ev);\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this._onTextFieldClick = function (ev) {\n      if (!_this.props.disableAutoFocus && !_this.state.isDatePickerShown && !_this.props.disabled) {\n        _this._showDatePickerPopup();\n\n        return;\n      }\n\n      if (_this.props.allowTextInput) {\n        _this._dismissDatePickerPopup();\n      }\n    };\n\n    _this._onIconClick = function (ev) {\n      ev.stopPropagation();\n\n      if (!_this.state.isDatePickerShown && !_this.props.disabled) {\n        _this._showDatePickerPopup();\n      } else if (_this.props.allowTextInput) {\n        _this._dismissDatePickerPopup();\n      }\n    };\n\n    _this._dismissDatePickerPopup = function () {\n      if (_this.state.isDatePickerShown) {\n        _this.setState({\n          isDatePickerShown: false\n        }, function () {\n          // setState is async, so we must call validate in a callback\n          _this._validateTextInput();\n        });\n      }\n    };\n    /**\n     * Callback for closing the calendar callout\n     */\n\n\n    _this._calendarDismissed = function () {\n      _this._preventFocusOpeningPicker = true;\n\n      _this._dismissDatePickerPopup(); // don't need to focus the text box, if necessary the focusTrapZone will do it\n\n    };\n\n    _this._handleEscKey = function (ev) {\n      if (_this.state.isDatePickerShown) {\n        ev.stopPropagation();\n      }\n\n      _this._calendarDismissed();\n    };\n\n    _this._validateTextInput = function () {\n      var _a = _this.props,\n          isRequired = _a.isRequired,\n          allowTextInput = _a.allowTextInput,\n          strings = _a.strings,\n          parseDateFromString = _a.parseDateFromString,\n          onSelectDate = _a.onSelectDate,\n          formatDate = _a.formatDate,\n          minDate = _a.minDate,\n          maxDate = _a.maxDate;\n      var inputValue = _this.state.formattedDate; // Do validation only if DatePicker's popup is dismissed\n\n      if (_this.state.isDatePickerShown) {\n        return;\n      }\n\n      if (allowTextInput) {\n        var date = null;\n\n        if (inputValue) {\n          // Don't parse if the selected date has the same formatted string as what we're about to parse.\n          // The formatted string might be ambiguous (ex: \"1/2/3\" or \"New Year Eve\") and the parser might\n          // not be able to come up with the exact same date.\n          if (_this.state.selectedDate && !_this.state.errorMessage && formatDate && formatDate(_this.state.selectedDate) === inputValue) {\n            return;\n          }\n\n          date = parseDateFromString(inputValue); // Check if date is null, or date is Invalid Date\n\n          if (!date || isNaN(date.getTime())) {\n            // Reset invalid input field, if formatting is available\n            if (formatDate) {\n              date = _this.state.selectedDate;\n\n              _this.setState({\n                formattedDate: formatDate(date).toString()\n              });\n            }\n\n            _this.setState({\n              errorMessage: strings.invalidInputErrorMessage || ' '\n            });\n          } else {\n            // Check against optional date boundaries\n            if (_this._isDateOutOfBounds(date, minDate, maxDate)) {\n              _this.setState({\n                errorMessage: strings.isOutOfBoundsErrorMessage || ' '\n              });\n            } else {\n              _this.setState({\n                selectedDate: date,\n                errorMessage: ''\n              }); // When formatting is available:\n              // If formatted date is valid, but is different from input, update with formatted date.\n              // This occurs when an invalid date is entered twice.\n\n\n              if (formatDate && formatDate(date) !== inputValue) {\n                _this.setState({\n                  formattedDate: formatDate(date).toString()\n                });\n              }\n            }\n          }\n        } else {\n          // Only show error for empty inputValue if it is a required field\n          _this.setState({\n            errorMessage: isRequired ? strings.isRequiredErrorMessage || ' ' : ''\n          });\n        } // Execute onSelectDate callback\n\n\n        if (onSelectDate) {\n          // If no input date string or input date string is invalid\n          // date variable will be null, callback should expect null value for this case\n          onSelectDate(date);\n        }\n      } else if (isRequired && !inputValue) {\n        // Check when DatePicker is a required field but has NO input value\n        _this.setState({\n          errorMessage: strings.isRequiredErrorMessage || ' '\n        });\n      } else {\n        // Cleanup the error message\n        _this.setState({\n          errorMessage: ''\n        });\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this.state = _this._getDefaultState();\n    _this._id = props.id || getId('DatePicker');\n    _this._preventFocusOpeningPicker = false;\n    return _this;\n  }\n\n  DatePickerBase.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n    var formatDate = nextProps.formatDate,\n        value = nextProps.value;\n\n    if (compareDates(this.props.minDate, nextProps.minDate) && compareDates(this.props.maxDate, nextProps.maxDate) && this.props.isRequired === nextProps.isRequired && compareDates(this.state.selectedDate, value) && this.props.formatDate === formatDate) {\n      // if the props we care about haven't changed, don't run validation or updates\n      return;\n    }\n\n    this._setErrorMessage(true, nextProps);\n\n    this._id = nextProps.id || this._id; // Issue# 1274: Check if the date value changed from old value, i.e., if indeed a new date is being\n    // passed in or if the formatting function was modified. We only update the selected date if either of these\n    // had a legit change. Note tha the bug will still repro when only the formatDate was passed in props and this\n    // is the result of the onSelectDate callback, but this should be a rare scenario.\n\n    var oldValue = this.state.selectedDate;\n\n    if (!compareDates(oldValue, value) || this.props.formatDate !== formatDate) {\n      this.setState({\n        selectedDate: value || undefined,\n        formattedDate: formatDate && value ? formatDate(value) : ''\n      });\n    }\n  };\n\n  DatePickerBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (prevState.isDatePickerShown && !this.state.isDatePickerShown) {\n      // If DatePicker's menu (Calendar) is closed, run onAfterMenuDismiss\n      if (this.props.onAfterMenuDismiss) {\n        this.props.onAfterMenuDismiss();\n      }\n    }\n  };\n\n  DatePickerBase.prototype.render = function () {\n    var _a = this.props,\n        firstDayOfWeek = _a.firstDayOfWeek,\n        strings = _a.strings,\n        label = _a.label,\n        theme = _a.theme,\n        className = _a.className,\n        styles = _a.styles,\n        initialPickerDate = _a.initialPickerDate,\n        isRequired = _a.isRequired,\n        disabled = _a.disabled,\n        ariaLabel = _a.ariaLabel,\n        pickerAriaLabel = _a.pickerAriaLabel,\n        placeholder = _a.placeholder,\n        allowTextInput = _a.allowTextInput,\n        borderless = _a.borderless,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        showCloseButton = _a.showCloseButton,\n        calendarProps = _a.calendarProps,\n        calloutProps = _a.calloutProps,\n        textFieldProps = _a.textField,\n        underlined = _a.underlined,\n        allFocusable = _a.allFocusable,\n        _b = _a.calendarAs,\n        CalendarType = _b === void 0 ? Calendar : _b,\n        tabIndex = _a.tabIndex;\n    var _c = this.state,\n        isDatePickerShown = _c.isDatePickerShown,\n        formattedDate = _c.formattedDate,\n        selectedDate = _c.selectedDate;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      label: !!label,\n      isDatePickerShown: isDatePickerShown\n    });\n    var calloutId = getId('DatePicker-Callout');\n    var nativeProps = getNativeProps(this.props, divProperties, ['value']);\n    var iconProps = textFieldProps && textFieldProps.iconProps;\n    return React.createElement(\"div\", __assign({}, nativeProps, {\n      className: classNames.root\n    }), React.createElement(\"div\", {\n      ref: this._datePickerDiv,\n      \"aria-haspopup\": \"true\",\n      \"aria-owns\": isDatePickerShown ? calloutId : undefined,\n      className: classNames.wrapper\n    }, React.createElement(TextField, __assign({\n      role: \"combobox\",\n      label: label,\n      \"aria-expanded\": isDatePickerShown,\n      ariaLabel: ariaLabel,\n      \"aria-controls\": isDatePickerShown ? calloutId : undefined,\n      required: isRequired,\n      disabled: disabled,\n      errorMessage: this._getErrorMessage(),\n      placeholder: placeholder,\n      borderless: borderless,\n      value: formattedDate,\n      componentRef: this._textField,\n      underlined: underlined,\n      tabIndex: tabIndex,\n      readOnly: !allowTextInput\n    }, textFieldProps, {\n      id: this._id + '-label',\n      className: css(classNames.textField, textFieldProps && textFieldProps.className),\n      iconProps: __assign(__assign({\n        iconName: 'Calendar'\n      }, iconProps), {\n        className: css(classNames.icon, iconProps && iconProps.className),\n        onClick: this._onIconClick\n      }),\n      onKeyDown: this._onTextFieldKeyDown,\n      onFocus: this._onTextFieldFocus,\n      onBlur: this._onTextFieldBlur,\n      onClick: this._onTextFieldClick,\n      onChange: this._onTextFieldChanged\n    }))), isDatePickerShown && React.createElement(Callout, __assign({\n      id: calloutId,\n      role: \"dialog\",\n      ariaLabel: pickerAriaLabel,\n      isBeakVisible: false,\n      gapSpace: 0,\n      doNotLayer: false,\n      target: this._datePickerDiv.current,\n      directionalHint: DirectionalHint.bottomLeftEdge\n    }, calloutProps, {\n      className: css(classNames.callout, calloutProps && calloutProps.className),\n      onDismiss: this._calendarDismissed,\n      onPositioned: this._onCalloutPositioned\n    }), React.createElement(FocusTrapZone, {\n      isClickableOutsideFocusTrap: true,\n      disableFirstFocus: this.props.disableAutoFocus,\n      forceFocusInsideTrap: false\n    }, React.createElement(CalendarType, __assign({}, calendarProps, {\n      onSelectDate: this._onSelectDate,\n      onDismiss: this._calendarDismissed,\n      isMonthPickerVisible: this.props.isMonthPickerVisible,\n      showMonthPickerAsOverlay: this.props.showMonthPickerAsOverlay,\n      today: this.props.today,\n      value: selectedDate || initialPickerDate,\n      firstDayOfWeek: firstDayOfWeek,\n      strings: strings,\n      highlightCurrentMonth: this.props.highlightCurrentMonth,\n      highlightSelectedMonth: this.props.highlightSelectedMonth,\n      showWeekNumbers: this.props.showWeekNumbers,\n      firstWeekOfYear: this.props.firstWeekOfYear,\n      showGoToToday: this.props.showGoToToday,\n      dateTimeFormatter: this.props.dateTimeFormatter,\n      minDate: minDate,\n      maxDate: maxDate,\n      componentRef: this._calendar,\n      showCloseButton: showCloseButton,\n      allFocusable: allFocusable\n    })))));\n  };\n\n  DatePickerBase.prototype.focus = function () {\n    if (this._textField.current) {\n      this._textField.current.focus();\n    }\n  };\n\n  DatePickerBase.prototype.reset = function () {\n    this.setState(this._getDefaultState());\n  };\n\n  DatePickerBase.prototype._setErrorMessage = function (setState, nextProps) {\n    var _a = nextProps || this.props,\n        isRequired = _a.isRequired,\n        strings = _a.strings,\n        value = _a.value,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        initialPickerDate = _a.initialPickerDate;\n\n    var errorMessage = !initialPickerDate && isRequired && !value ? strings.isRequiredErrorMessage || ' ' : undefined;\n\n    if (!errorMessage && value) {\n      errorMessage = this._isDateOutOfBounds(value, minDate, maxDate) ? strings.isOutOfBoundsErrorMessage || ' ' : undefined;\n    }\n\n    if (setState) {\n      this.setState({\n        errorMessage: errorMessage\n      });\n    }\n\n    return errorMessage;\n  };\n\n  DatePickerBase.prototype._showDatePickerPopup = function () {\n    if (!this.state.isDatePickerShown) {\n      this._preventFocusOpeningPicker = true;\n      this.setState({\n        isDatePickerShown: true\n      });\n    }\n  };\n\n  DatePickerBase.prototype._getDefaultState = function (props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    return {\n      selectedDate: props.value || undefined,\n      formattedDate: props.formatDate && props.value ? props.formatDate(props.value) : '',\n      isDatePickerShown: false,\n      errorMessage: this._setErrorMessage(false)\n    };\n  };\n\n  DatePickerBase.prototype._isDateOutOfBounds = function (date, minDate, maxDate) {\n    return !!minDate && compareDatePart(minDate, date) > 0 || !!maxDate && compareDatePart(maxDate, date) < 0;\n  };\n\n  DatePickerBase.prototype._getErrorMessage = function () {\n    if (this.state.isDatePickerShown) {\n      return undefined;\n    }\n\n    return this.state.errorMessage;\n  };\n\n  DatePickerBase.defaultProps = {\n    allowTextInput: false,\n    formatDate: function (date) {\n      if (date) {\n        return date.toDateString();\n      }\n\n      return '';\n    },\n    parseDateFromString: function (dateStr) {\n      var date = Date.parse(dateStr);\n\n      if (date) {\n        return new Date(date);\n      }\n\n      return null;\n    },\n    firstDayOfWeek: DayOfWeek.Sunday,\n    initialPickerDate: new Date(),\n    isRequired: false,\n    isMonthPickerVisible: true,\n    showMonthPickerAsOverlay: false,\n    strings: DEFAULT_STRINGS,\n    highlightCurrentMonth: false,\n    highlightSelectedMonth: false,\n    borderless: false,\n    pickerAriaLabel: 'Calendar',\n    showWeekNumbers: false,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    showGoToToday: true,\n    dateTimeFormatter: undefined,\n    showCloseButton: false,\n    underlined: false,\n    allFocusable: false\n  };\n  return DatePickerBase;\n}(React.Component);\n\nexport { DatePickerBase };","map":{"version":3,"sources":["components/DatePicker/DatePicker.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  IDatePicker,\n  IDatePickerProps,\n  IDatePickerStrings,\n  IDatePickerStyleProps,\n  IDatePickerStyles,\n} from './DatePicker.types';\nimport {\n  KeyCodes,\n  classNamesFunction,\n  getId,\n  getNativeProps,\n  divProperties,\n  css,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { Calendar, ICalendar, DayOfWeek } from '../../Calendar';\nimport { FirstWeekOfYear } from '../../utilities/dateValues/DateValues';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { TextField, ITextField } from '../../TextField';\nimport { compareDates, compareDatePart } from '../../utilities/dateMath/DateMath';\nimport { FocusTrapZone } from '../../FocusTrapZone';\n\nconst getClassNames = classNamesFunction<IDatePickerStyleProps, IDatePickerStyles>();\n\nexport interface IDatePickerState {\n  selectedDate?: Date;\n  formattedDate?: string;\n  isDatePickerShown?: boolean;\n  errorMessage?: string;\n}\n\nconst DEFAULT_STRINGS: IDatePickerStrings = {\n  months: [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  goToToday: 'Go to today',\n  prevMonthAriaLabel: 'Go to previous month',\n  nextMonthAriaLabel: 'Go to next month',\n  prevYearAriaLabel: 'Go to previous year',\n  nextYearAriaLabel: 'Go to next year',\n  prevYearRangeAriaLabel: 'Previous year range',\n  nextYearRangeAriaLabel: 'Next year range',\n  closeButtonAriaLabel: 'Close date picker',\n  weekNumberFormatString: 'Week number {0}',\n};\n\nexport class DatePickerBase extends React.Component<IDatePickerProps, IDatePickerState> implements IDatePicker {\n  public static defaultProps: IDatePickerProps = {\n    allowTextInput: false,\n    formatDate: (date: Date) => {\n      if (date) {\n        return date.toDateString();\n      }\n\n      return '';\n    },\n    parseDateFromString: (dateStr: string) => {\n      const date = Date.parse(dateStr);\n      if (date) {\n        return new Date(date);\n      }\n\n      return null;\n    },\n    firstDayOfWeek: DayOfWeek.Sunday,\n    initialPickerDate: new Date(),\n    isRequired: false,\n    isMonthPickerVisible: true,\n    showMonthPickerAsOverlay: false,\n    strings: DEFAULT_STRINGS,\n    highlightCurrentMonth: false,\n    highlightSelectedMonth: false,\n    borderless: false,\n    pickerAriaLabel: 'Calendar',\n    showWeekNumbers: false,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    showGoToToday: true,\n    dateTimeFormatter: undefined,\n    showCloseButton: false,\n    underlined: false,\n    allFocusable: false,\n  };\n\n  private _calendar = React.createRef<ICalendar>();\n  private _datePickerDiv = React.createRef<HTMLDivElement>();\n  private _textField = React.createRef<ITextField>();\n  private _preventFocusOpeningPicker: boolean;\n  private _id: string;\n\n  constructor(props: IDatePickerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this.state = this._getDefaultState();\n\n    this._id = props.id || getId('DatePicker');\n\n    this._preventFocusOpeningPicker = false;\n  }\n\n  public UNSAFE_componentWillReceiveProps(nextProps: IDatePickerProps): void {\n    const { formatDate, value } = nextProps;\n\n    if (\n      compareDates(this.props.minDate!, nextProps.minDate!) &&\n      compareDates(this.props.maxDate!, nextProps.maxDate!) &&\n      this.props.isRequired === nextProps.isRequired &&\n      compareDates(this.state.selectedDate!, value!) &&\n      this.props.formatDate === formatDate\n    ) {\n      // if the props we care about haven't changed, don't run validation or updates\n      return;\n    }\n\n    this._setErrorMessage(true, nextProps);\n\n    this._id = nextProps.id || this._id;\n\n    // Issue# 1274: Check if the date value changed from old value, i.e., if indeed a new date is being\n    // passed in or if the formatting function was modified. We only update the selected date if either of these\n    // had a legit change. Note tha the bug will still repro when only the formatDate was passed in props and this\n    // is the result of the onSelectDate callback, but this should be a rare scenario.\n    const oldValue = this.state.selectedDate;\n    if (!compareDates(oldValue!, value!) || this.props.formatDate !== formatDate) {\n      this.setState({\n        selectedDate: value || undefined,\n        formattedDate: formatDate && value ? formatDate(value) : '',\n      });\n    }\n  }\n\n  public componentDidUpdate(prevProps: IDatePickerProps, prevState: IDatePickerState) {\n    if (prevState.isDatePickerShown && !this.state.isDatePickerShown) {\n      // If DatePicker's menu (Calendar) is closed, run onAfterMenuDismiss\n      if (this.props.onAfterMenuDismiss) {\n        this.props.onAfterMenuDismiss();\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      firstDayOfWeek,\n      strings,\n      label,\n      theme,\n      className,\n      styles,\n      initialPickerDate,\n      isRequired,\n      disabled,\n      ariaLabel,\n      pickerAriaLabel,\n      placeholder,\n      allowTextInput,\n      borderless,\n      minDate,\n      maxDate,\n      showCloseButton,\n      calendarProps,\n      calloutProps,\n      textField: textFieldProps,\n      underlined,\n      allFocusable,\n      calendarAs: CalendarType = Calendar,\n      tabIndex,\n    } = this.props;\n    const { isDatePickerShown, formattedDate, selectedDate } = this.state;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      disabled,\n      label: !!label,\n      isDatePickerShown,\n    });\n\n    const calloutId = getId('DatePicker-Callout');\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['value']);\n    const iconProps = textFieldProps && textFieldProps.iconProps;\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div\n          ref={this._datePickerDiv}\n          aria-haspopup=\"true\"\n          aria-owns={isDatePickerShown ? calloutId : undefined}\n          className={classNames.wrapper}\n        >\n          <TextField\n            role=\"combobox\"\n            label={label}\n            aria-expanded={isDatePickerShown}\n            ariaLabel={ariaLabel}\n            aria-controls={isDatePickerShown ? calloutId : undefined}\n            required={isRequired}\n            disabled={disabled}\n            errorMessage={this._getErrorMessage()}\n            placeholder={placeholder}\n            borderless={borderless}\n            value={formattedDate}\n            componentRef={this._textField}\n            underlined={underlined}\n            tabIndex={tabIndex}\n            readOnly={!allowTextInput}\n            {...textFieldProps}\n            id={this._id + '-label'}\n            className={css(classNames.textField, textFieldProps && textFieldProps.className)}\n            iconProps={{\n              iconName: 'Calendar',\n              ...iconProps,\n              className: css(classNames.icon, iconProps && iconProps.className),\n              onClick: this._onIconClick,\n            }}\n            onKeyDown={this._onTextFieldKeyDown}\n            onFocus={this._onTextFieldFocus}\n            onBlur={this._onTextFieldBlur}\n            onClick={this._onTextFieldClick}\n            onChange={this._onTextFieldChanged}\n          />\n        </div>\n        {isDatePickerShown && (\n          <Callout\n            id={calloutId}\n            role=\"dialog\"\n            ariaLabel={pickerAriaLabel}\n            isBeakVisible={false}\n            gapSpace={0}\n            doNotLayer={false}\n            target={this._datePickerDiv.current}\n            directionalHint={DirectionalHint.bottomLeftEdge}\n            {...calloutProps}\n            className={css(classNames.callout, calloutProps && calloutProps.className)}\n            onDismiss={this._calendarDismissed}\n            onPositioned={this._onCalloutPositioned}\n          >\n            <FocusTrapZone\n              isClickableOutsideFocusTrap={true}\n              disableFirstFocus={this.props.disableAutoFocus}\n              forceFocusInsideTrap={false}\n            >\n              <CalendarType\n                {...calendarProps}\n                onSelectDate={this._onSelectDate}\n                onDismiss={this._calendarDismissed}\n                isMonthPickerVisible={this.props.isMonthPickerVisible}\n                showMonthPickerAsOverlay={this.props.showMonthPickerAsOverlay}\n                today={this.props.today}\n                value={selectedDate || initialPickerDate}\n                firstDayOfWeek={firstDayOfWeek}\n                strings={strings!}\n                highlightCurrentMonth={this.props.highlightCurrentMonth}\n                highlightSelectedMonth={this.props.highlightSelectedMonth}\n                showWeekNumbers={this.props.showWeekNumbers}\n                firstWeekOfYear={this.props.firstWeekOfYear}\n                showGoToToday={this.props.showGoToToday}\n                dateTimeFormatter={this.props.dateTimeFormatter}\n                minDate={minDate}\n                maxDate={maxDate}\n                componentRef={this._calendar}\n                showCloseButton={showCloseButton}\n                allFocusable={allFocusable}\n              />\n            </FocusTrapZone>\n          </Callout>\n        )}\n      </div>\n    );\n  }\n\n  public focus(): void {\n    if (this._textField.current) {\n      this._textField.current.focus();\n    }\n  }\n\n  public reset(): void {\n    this.setState(this._getDefaultState());\n  }\n\n  private _setErrorMessage(setState: boolean, nextProps?: IDatePickerProps): string | undefined {\n    const { isRequired, strings, value, minDate, maxDate, initialPickerDate } = nextProps || this.props;\n    let errorMessage = !initialPickerDate && isRequired && !value ? strings!.isRequiredErrorMessage || ' ' : undefined;\n\n    if (!errorMessage && value) {\n      errorMessage = this._isDateOutOfBounds(value!, minDate, maxDate)\n        ? strings!.isOutOfBoundsErrorMessage || ' '\n        : undefined;\n    }\n\n    if (setState) {\n      this.setState({\n        errorMessage: errorMessage,\n      });\n    }\n\n    return errorMessage;\n  }\n\n  private _onSelectDate = (date: Date): void => {\n    const { formatDate, onSelectDate } = this.props;\n\n    if (this.props.calendarProps && this.props.calendarProps.onSelectDate) {\n      this.props.calendarProps.onSelectDate(date);\n    }\n\n    this.setState({\n      selectedDate: date,\n      formattedDate: formatDate && date ? formatDate(date) : '',\n    });\n\n    if (onSelectDate) {\n      onSelectDate(date);\n    }\n\n    this._calendarDismissed();\n  };\n\n  private _onCalloutPositioned = (): void => {\n    let shouldFocus = true;\n    // If the user has specified that the callout shouldn't use initial focus, then respect\n    // that and don't attempt to set focus. That will default to true within the callout\n    // so we need to check if it's undefined here.\n    if (this.props.calloutProps && this.props.calloutProps.setInitialFocus !== undefined) {\n      shouldFocus = this.props.calloutProps.setInitialFocus;\n    }\n    if (this._calendar.current && shouldFocus) {\n      this._calendar.current.focus();\n    }\n  };\n\n  private _onTextFieldFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    if (this.props.disableAutoFocus) {\n      return;\n    }\n\n    if (!this.props.allowTextInput) {\n      if (!this._preventFocusOpeningPicker) {\n        this._showDatePickerPopup();\n      } else {\n        this._preventFocusOpeningPicker = false;\n      }\n    }\n  };\n\n  private _onTextFieldBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    this._validateTextInput();\n  };\n\n  private _onTextFieldChanged = (\n    ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    newValue: string,\n  ): void => {\n    const { allowTextInput, textField } = this.props;\n\n    if (allowTextInput) {\n      if (this.state.isDatePickerShown) {\n        this._dismissDatePickerPopup();\n      }\n\n      const { isRequired, strings } = this.props;\n\n      this.setState({\n        errorMessage: isRequired && !newValue ? strings!.isRequiredErrorMessage || ' ' : undefined,\n        formattedDate: newValue,\n      });\n    }\n\n    if (textField && textField.onChange) {\n      textField.onChange(ev, newValue);\n    }\n  };\n\n  private _onTextFieldKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    switch (ev.which) {\n      case KeyCodes.enter:\n        ev.preventDefault();\n        ev.stopPropagation();\n        if (!this.state.isDatePickerShown) {\n          this._validateTextInput();\n          this._showDatePickerPopup();\n        } else {\n          // When DatePicker allows input date string directly,\n          // it is expected to hit another enter to close the popup\n          if (this.props.allowTextInput) {\n            this._dismissDatePickerPopup();\n          }\n        }\n        break;\n\n      case KeyCodes.escape:\n        this._handleEscKey(ev);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  private _onTextFieldClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    if (!this.props.disableAutoFocus && !this.state.isDatePickerShown && !this.props.disabled) {\n      this._showDatePickerPopup();\n      return;\n    }\n    if (this.props.allowTextInput) {\n      this._dismissDatePickerPopup();\n    }\n  };\n\n  private _onIconClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    ev.stopPropagation();\n    if (!this.state.isDatePickerShown && !this.props.disabled) {\n      this._showDatePickerPopup();\n    } else if (this.props.allowTextInput) {\n      this._dismissDatePickerPopup();\n    }\n  };\n\n  private _showDatePickerPopup(): void {\n    if (!this.state.isDatePickerShown) {\n      this._preventFocusOpeningPicker = true;\n      this.setState({\n        isDatePickerShown: true,\n      });\n    }\n  }\n\n  private _dismissDatePickerPopup = (): void => {\n    if (this.state.isDatePickerShown) {\n      this.setState(\n        {\n          isDatePickerShown: false,\n        },\n        () => {\n          // setState is async, so we must call validate in a callback\n          this._validateTextInput();\n        },\n      );\n    }\n  };\n\n  /**\n   * Callback for closing the calendar callout\n   */\n  private _calendarDismissed = (): void => {\n    this._preventFocusOpeningPicker = true;\n    this._dismissDatePickerPopup();\n    // don't need to focus the text box, if necessary the focusTrapZone will do it\n  };\n\n  private _handleEscKey = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (this.state.isDatePickerShown) {\n      ev.stopPropagation();\n    }\n    this._calendarDismissed();\n  };\n\n  private _validateTextInput = (): void => {\n    const {\n      isRequired,\n      allowTextInput,\n      strings,\n      parseDateFromString,\n      onSelectDate,\n      formatDate,\n      minDate,\n      maxDate,\n    } = this.props;\n    const inputValue = this.state.formattedDate;\n\n    // Do validation only if DatePicker's popup is dismissed\n    if (this.state.isDatePickerShown) {\n      return;\n    }\n\n    if (allowTextInput) {\n      let date = null;\n\n      if (inputValue) {\n        // Don't parse if the selected date has the same formatted string as what we're about to parse.\n        // The formatted string might be ambiguous (ex: \"1/2/3\" or \"New Year Eve\") and the parser might\n        // not be able to come up with the exact same date.\n        if (\n          this.state.selectedDate &&\n          !this.state.errorMessage &&\n          formatDate &&\n          formatDate(this.state.selectedDate) === inputValue\n        ) {\n          return;\n        }\n        date = parseDateFromString!(inputValue);\n\n        // Check if date is null, or date is Invalid Date\n        if (!date || isNaN(date.getTime())) {\n          // Reset invalid input field, if formatting is available\n          if (formatDate) {\n            date = this.state.selectedDate;\n            this.setState({\n              formattedDate: formatDate(date!).toString(),\n            });\n          }\n\n          this.setState({\n            errorMessage: strings!.invalidInputErrorMessage || ' ',\n          });\n        } else {\n          // Check against optional date boundaries\n          if (this._isDateOutOfBounds(date, minDate, maxDate)) {\n            this.setState({\n              errorMessage: strings!.isOutOfBoundsErrorMessage || ' ',\n            });\n          } else {\n            this.setState({\n              selectedDate: date,\n              errorMessage: '',\n            });\n\n            // When formatting is available:\n            // If formatted date is valid, but is different from input, update with formatted date.\n            // This occurs when an invalid date is entered twice.\n            if (formatDate && formatDate(date) !== inputValue) {\n              this.setState({\n                formattedDate: formatDate(date).toString(),\n              });\n            }\n          }\n        }\n      } else {\n        // Only show error for empty inputValue if it is a required field\n        this.setState({\n          errorMessage: isRequired ? strings!.isRequiredErrorMessage || ' ' : '',\n        });\n      }\n\n      // Execute onSelectDate callback\n      if (onSelectDate) {\n        // If no input date string or input date string is invalid\n        // date variable will be null, callback should expect null value for this case\n        onSelectDate(date);\n      }\n    } else if (isRequired && !inputValue) {\n      // Check when DatePicker is a required field but has NO input value\n      this.setState({\n        errorMessage: strings!.isRequiredErrorMessage || ' ',\n      });\n    } else {\n      // Cleanup the error message\n      this.setState({\n        errorMessage: '',\n      });\n    }\n  };\n\n  private _getDefaultState(props: IDatePickerProps = this.props): IDatePickerState {\n    return {\n      selectedDate: props.value || undefined,\n      formattedDate: props.formatDate && props.value ? props.formatDate(props.value) : '',\n      isDatePickerShown: false,\n      errorMessage: this._setErrorMessage(false),\n    };\n  }\n\n  private _isDateOutOfBounds(date: Date, minDate?: Date, maxDate?: Date): boolean {\n    return (!!minDate && compareDatePart(minDate!, date) > 0) || (!!maxDate && compareDatePart(maxDate!, date) < 0);\n  }\n\n  private _getErrorMessage(): string | undefined {\n    if (this.state.isDatePickerShown) {\n      return undefined;\n    }\n    return this.state.errorMessage;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}