{"ast":null,"code":"import { PersonaInitialsColor } from './Persona.types';\n/**\n * Following colors are considered reserved and can only be set with overrides, so they are excluded from this set:\n * - `gray` and `black` can result in offensive persona coins with some initials combinations\n * - `red` often has a special meaning\n * - `transparent` is not intended to be used with typical initials due to accessibility issues;\n *   its primary use is for Facepile overflow buttons.\n */\n\nvar COLOR_SWATCHES_LOOKUP = [PersonaInitialsColor.lightBlue, PersonaInitialsColor.blue, PersonaInitialsColor.darkBlue, PersonaInitialsColor.teal, PersonaInitialsColor.green, PersonaInitialsColor.darkGreen, PersonaInitialsColor.lightPink, PersonaInitialsColor.pink, PersonaInitialsColor.magenta, PersonaInitialsColor.purple, PersonaInitialsColor.orange, PersonaInitialsColor.lightRed, PersonaInitialsColor.darkRed, PersonaInitialsColor.violet, PersonaInitialsColor.gold, PersonaInitialsColor.burgundy, PersonaInitialsColor.warmGray, PersonaInitialsColor.cyan, PersonaInitialsColor.rust, PersonaInitialsColor.coolGray];\nvar COLOR_SWATCHES_NUM_ENTRIES = COLOR_SWATCHES_LOOKUP.length;\n\nfunction getInitialsColorFromName(displayName) {\n  var color = PersonaInitialsColor.blue;\n\n  if (!displayName) {\n    return color;\n  }\n\n  var hashCode = 0;\n\n  for (var iLen = displayName.length - 1; iLen >= 0; iLen--) {\n    var ch = displayName.charCodeAt(iLen);\n    var shift = iLen % 8; // eslint-disable-next-line no-bitwise\n\n    hashCode ^= (ch << shift) + (ch >> 8 - shift);\n  }\n\n  color = COLOR_SWATCHES_LOOKUP[hashCode % COLOR_SWATCHES_NUM_ENTRIES];\n  return color;\n}\n\nfunction personaInitialsColorToHexCode(personaInitialsColor) {\n  switch (personaInitialsColor) {\n    case PersonaInitialsColor.lightBlue:\n      return '#4F6BED';\n\n    case PersonaInitialsColor.blue:\n      return '#0078D4';\n\n    case PersonaInitialsColor.darkBlue:\n      return '#004E8C';\n\n    case PersonaInitialsColor.teal:\n      return '#038387';\n\n    case PersonaInitialsColor.lightGreen:\n    case PersonaInitialsColor.green:\n      return '#498205';\n\n    case PersonaInitialsColor.darkGreen:\n      return '#0B6A0B';\n\n    case PersonaInitialsColor.lightPink:\n      return '#C239B3';\n\n    case PersonaInitialsColor.pink:\n      return '#E3008C';\n\n    case PersonaInitialsColor.magenta:\n      return '#881798';\n\n    case PersonaInitialsColor.purple:\n      return '#5C2E91';\n\n    case PersonaInitialsColor.orange:\n      return '#CA5010';\n    // eslint-disable-next-line deprecation/deprecation\n\n    case PersonaInitialsColor.red:\n      return '#EE1111';\n\n    case PersonaInitialsColor.lightRed:\n      return '#D13438';\n\n    case PersonaInitialsColor.darkRed:\n      return '#A4262C';\n\n    case PersonaInitialsColor.transparent:\n      return 'transparent';\n\n    case PersonaInitialsColor.violet:\n      return '#8764B8';\n\n    case PersonaInitialsColor.gold:\n      return '#986F0B';\n\n    case PersonaInitialsColor.burgundy:\n      return '#750B1C';\n\n    case PersonaInitialsColor.warmGray:\n      return '#7A7574';\n\n    case PersonaInitialsColor.cyan:\n      return '#005B70';\n\n    case PersonaInitialsColor.rust:\n      return '#8E562E';\n\n    case PersonaInitialsColor.coolGray:\n      return '#69797E';\n    // eslint-disable-next-line deprecation/deprecation\n\n    case PersonaInitialsColor.black:\n      return '#1D1D1D';\n\n    case PersonaInitialsColor.gray:\n      return '#393939';\n  }\n}\n/** @deprecated Use `getPersonaInitialsColor` */\n\n\nexport function initialsColorPropToColorCode(props) {\n  return getPersonaInitialsColor(props);\n}\n/**\n * Gets the hex color string (prefixed with #) for the given persona props.\n * This is the logic used internally by the Persona control.\n * @param props - Current persona props\n * @returns Hex color string prefixed with #\n */\n\nexport function getPersonaInitialsColor(props) {\n  // eslint-disable-next-line deprecation/deprecation\n  var primaryText = props.primaryText,\n      text = props.text;\n  var initialsColor = props.initialsColor;\n  var initialsColorCode;\n\n  if (typeof initialsColor === 'string') {\n    initialsColorCode = initialsColor;\n  } else {\n    initialsColor = initialsColor !== undefined ? initialsColor : getInitialsColorFromName(text || primaryText);\n    initialsColorCode = personaInitialsColorToHexCode(initialsColor);\n  }\n\n  return initialsColorCode;\n}","map":{"version":3,"sources":["components/Persona/PersonaInitialsColor.ts"],"names":[],"mappings":"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","sourcesContent":["import { PersonaInitialsColor, IPersonaProps } from './Persona.types';\n\n/**\n * Following colors are considered reserved and can only be set with overrides, so they are excluded from this set:\n * - `gray` and `black` can result in offensive persona coins with some initials combinations\n * - `red` often has a special meaning\n * - `transparent` is not intended to be used with typical initials due to accessibility issues;\n *   its primary use is for Facepile overflow buttons.\n */\nconst COLOR_SWATCHES_LOOKUP: PersonaInitialsColor[] = [\n  PersonaInitialsColor.lightBlue,\n  PersonaInitialsColor.blue,\n  PersonaInitialsColor.darkBlue,\n  PersonaInitialsColor.teal,\n  PersonaInitialsColor.green,\n  PersonaInitialsColor.darkGreen,\n  PersonaInitialsColor.lightPink,\n  PersonaInitialsColor.pink,\n  PersonaInitialsColor.magenta,\n  PersonaInitialsColor.purple,\n  PersonaInitialsColor.orange,\n  PersonaInitialsColor.lightRed,\n  PersonaInitialsColor.darkRed,\n  PersonaInitialsColor.violet,\n  PersonaInitialsColor.gold,\n  PersonaInitialsColor.burgundy,\n  PersonaInitialsColor.warmGray,\n  PersonaInitialsColor.cyan,\n  PersonaInitialsColor.rust,\n  PersonaInitialsColor.coolGray,\n];\n\nconst COLOR_SWATCHES_NUM_ENTRIES = COLOR_SWATCHES_LOOKUP.length;\n\nfunction getInitialsColorFromName(displayName: string | undefined): PersonaInitialsColor {\n  let color = PersonaInitialsColor.blue;\n  if (!displayName) {\n    return color;\n  }\n\n  let hashCode = 0;\n  for (let iLen: number = displayName.length - 1; iLen >= 0; iLen--) {\n    const ch: number = displayName.charCodeAt(iLen);\n    const shift: number = iLen % 8;\n    // eslint-disable-next-line no-bitwise\n    hashCode ^= (ch << shift) + (ch >> (8 - shift));\n  }\n\n  color = COLOR_SWATCHES_LOOKUP[hashCode % COLOR_SWATCHES_NUM_ENTRIES];\n\n  return color;\n}\n\nfunction personaInitialsColorToHexCode(personaInitialsColor: PersonaInitialsColor): string {\n  switch (personaInitialsColor) {\n    case PersonaInitialsColor.lightBlue:\n      return '#4F6BED';\n    case PersonaInitialsColor.blue:\n      return '#0078D4';\n    case PersonaInitialsColor.darkBlue:\n      return '#004E8C';\n    case PersonaInitialsColor.teal:\n      return '#038387';\n    case PersonaInitialsColor.lightGreen:\n    case PersonaInitialsColor.green:\n      return '#498205';\n    case PersonaInitialsColor.darkGreen:\n      return '#0B6A0B';\n    case PersonaInitialsColor.lightPink:\n      return '#C239B3';\n    case PersonaInitialsColor.pink:\n      return '#E3008C';\n    case PersonaInitialsColor.magenta:\n      return '#881798';\n    case PersonaInitialsColor.purple:\n      return '#5C2E91';\n    case PersonaInitialsColor.orange:\n      return '#CA5010';\n    // eslint-disable-next-line deprecation/deprecation\n    case PersonaInitialsColor.red:\n      return '#EE1111';\n    case PersonaInitialsColor.lightRed:\n      return '#D13438';\n    case PersonaInitialsColor.darkRed:\n      return '#A4262C';\n    case PersonaInitialsColor.transparent:\n      return 'transparent';\n    case PersonaInitialsColor.violet:\n      return '#8764B8';\n    case PersonaInitialsColor.gold:\n      return '#986F0B';\n    case PersonaInitialsColor.burgundy:\n      return '#750B1C';\n    case PersonaInitialsColor.warmGray:\n      return '#7A7574';\n    case PersonaInitialsColor.cyan:\n      return '#005B70';\n    case PersonaInitialsColor.rust:\n      return '#8E562E';\n    case PersonaInitialsColor.coolGray:\n      return '#69797E';\n    // eslint-disable-next-line deprecation/deprecation\n    case PersonaInitialsColor.black:\n      return '#1D1D1D';\n    case PersonaInitialsColor.gray:\n      return '#393939';\n  }\n}\n\n/** @deprecated Use `getPersonaInitialsColor` */\nexport function initialsColorPropToColorCode(props: IPersonaProps): string {\n  return getPersonaInitialsColor(props);\n}\n\n/**\n * Gets the hex color string (prefixed with #) for the given persona props.\n * This is the logic used internally by the Persona control.\n * @param props - Current persona props\n * @returns Hex color string prefixed with #\n */\nexport function getPersonaInitialsColor(props: Pick<IPersonaProps, 'primaryText' | 'text' | 'initialsColor'>): string {\n  // eslint-disable-next-line deprecation/deprecation\n  const { primaryText, text } = props;\n  let { initialsColor } = props;\n  let initialsColorCode: string;\n  if (typeof initialsColor === 'string') {\n    initialsColorCode = initialsColor;\n  } else {\n    initialsColor = initialsColor !== undefined ? initialsColor : getInitialsColorFromName(text || primaryText);\n    initialsColorCode = personaInitialsColorToHexCode(initialsColor);\n  }\n\n  return initialsColorCode;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}