{"ast":null,"code":"import { mergeSettings, mergeScopedSettings } from './mergeSettings';\n/**\n * Merge props and customizations giving priority to props over context.\n * NOTE: This function will always perform multiple merge operations. Use with caution.\n * @param props - New settings to merge in.\n * @param parentContext - Context containing current settings.\n * @returns Merged customizations.\n */\n\nexport function mergeCustomizations(props, parentContext) {\n  var _a = (parentContext || {}).customizations,\n      customizations = _a === void 0 ? {\n    settings: {},\n    scopedSettings: {}\n  } : _a;\n  return {\n    customizations: {\n      settings: mergeSettings(customizations.settings, props.settings),\n      scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),\n      inCustomizerContext: true\n    }\n  };\n}","map":{"version":3,"sources":["customizations/mergeCustomizations.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,EAAwB,mBAAxB,QAAmD,iBAAnD;AAIA;;;;;;AAMG;;AACH,OAAM,SAAU,mBAAV,CAA8B,KAA9B,EAAuD,aAAvD,EAAwF;AACpF,MAAA,EAAA,GAAA,CAAA,aAAA,IAAA,EAAA,EAAA,cAAA;AAAA,MAAA,cAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA;AAAA,IAAA,QAAA,EAAA,EAAA;AAAA,IAAA,cAAA,EAAA;AAAA,GAAA,GAAA,EAAA;AAER,SAAO;AACL,IAAA,cAAc,EAAE;AACd,MAAA,QAAQ,EAAE,aAAa,CAAC,cAAc,CAAC,QAAhB,EAA0B,KAAK,CAAC,QAAhC,CADT;AAEd,MAAA,cAAc,EAAE,mBAAmB,CAAC,cAAc,CAAC,cAAhB,EAAgC,KAAK,CAAC,cAAtC,CAFrB;AAGd,MAAA,mBAAmB,EAAE;AAHP;AADX,GAAP;AAOD","sourcesContent":["import { mergeSettings, mergeScopedSettings } from './mergeSettings';\nimport { ICustomizerProps } from './Customizer.types';\nimport { ICustomizerContext } from './CustomizerContext';\n\n/**\n * Merge props and customizations giving priority to props over context.\n * NOTE: This function will always perform multiple merge operations. Use with caution.\n * @param props - New settings to merge in.\n * @param parentContext - Context containing current settings.\n * @returns Merged customizations.\n */\nexport function mergeCustomizations(props: ICustomizerProps, parentContext: ICustomizerContext): ICustomizerContext {\n  const { customizations = { settings: {}, scopedSettings: {} } } = parentContext || {};\n\n  return {\n    customizations: {\n      settings: mergeSettings(customizations.settings, props.settings),\n      scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),\n      inCustomizerContext: true,\n    },\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}