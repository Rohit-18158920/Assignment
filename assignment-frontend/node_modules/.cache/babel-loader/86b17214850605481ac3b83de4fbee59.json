{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { HighContrastSelector, getGlobalClassNames, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nvar GlobalClassNames = {\n  root: 'ms-Checkbox',\n  label: 'ms-Checkbox-label',\n  checkbox: 'ms-Checkbox-checkbox',\n  checkmark: 'ms-Checkbox-checkmark',\n  text: 'ms-Checkbox-text'\n};\nvar MS_CHECKBOX_LABEL_SIZE = '20px';\nvar MS_CHECKBOX_TRANSITION_DURATION = '200ms';\nvar MS_CHECKBOX_TRANSITION_TIMING = 'cubic-bezier(.4, 0, .23, 1)';\nexport var getStyles = function (props) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\n\n  var className = props.className,\n      theme = props.theme,\n      reversed = props.reversed,\n      checked = props.checked,\n      disabled = props.disabled,\n      isUsingCustomLabelRender = props.isUsingCustomLabelRender,\n      indeterminate = props.indeterminate;\n  var semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      palette = theme.palette,\n      fonts = theme.fonts;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var checkmarkFontColor = semanticColors.inputForegroundChecked; // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBorder\n\n  var checkmarkFontColorHovered = palette.neutralSecondary; // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder\n\n  var checkboxBorderColor = palette.neutralPrimary;\n  var checkboxBorderIndeterminateColor = semanticColors.inputBackgroundChecked;\n  var checkboxBorderColorChecked = semanticColors.inputBackgroundChecked;\n  var checkboxBorderColorDisabled = semanticColors.disabledBodySubtext;\n  var checkboxBorderHoveredColor = semanticColors.inputBorderHovered;\n  var checkboxBorderIndeterminateHoveredColor = semanticColors.inputBackgroundCheckedHovered;\n  var checkboxBackgroundChecked = semanticColors.inputBackgroundChecked; // TODO: after updating the semanticColors slots mapping the following 2 tokens need to be\n  // semanticColors.inputBackgroundCheckedHovered\n\n  var checkboxBackgroundCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\n  var checkboxBorderColorCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\n  var checkboxHoveredTextColor = semanticColors.inputTextHovered;\n  var checkboxBackgroundDisabledChecked = semanticColors.disabledBodySubtext;\n  var checkboxTextColor = semanticColors.bodyText;\n  var checkboxTextColorDisabled = semanticColors.disabledText;\n  var indeterminateDotStyles = [(_a = {\n    content: '\"\"',\n    borderRadius: effects.roundedCorner2,\n    position: 'absolute',\n    width: 10,\n    height: 10,\n    top: 4,\n    left: 4,\n    boxSizing: 'border-box',\n    borderWidth: 5,\n    borderStyle: 'solid',\n    borderColor: disabled ? checkboxBorderColorDisabled : checkboxBorderIndeterminateColor,\n    transitionProperty: 'border-width, border, border-color',\n    transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\n    transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING\n  }, _a[HighContrastSelector] = {\n    borderColor: 'WindowText'\n  }, _a)];\n  return {\n    root: [classNames.root, {\n      position: 'relative',\n      display: 'flex'\n    }, reversed && 'reversed', checked && 'is-checked', !disabled && 'is-enabled', disabled && 'is-disabled', !disabled && [!checked && (_b = {}, _b[\":hover .\" + classNames.checkbox] = (_c = {\n      borderColor: checkboxBorderHoveredColor\n    }, _c[HighContrastSelector] = {\n      borderColor: 'Highlight'\n    }, _c), _b[\":focus .\" + classNames.checkbox] = {\n      borderColor: checkboxBorderHoveredColor\n    }, _b[\":hover .\" + classNames.checkmark] = (_d = {\n      color: checkmarkFontColorHovered,\n      opacity: '1'\n    }, _d[HighContrastSelector] = {\n      color: 'Highlight'\n    }, _d), _b), checked && !indeterminate && (_e = {}, _e[\":hover .\" + classNames.checkbox] = {\n      background: checkboxBackgroundCheckedHovered,\n      borderColor: checkboxBorderColorCheckedHovered\n    }, _e[\":focus .\" + classNames.checkbox] = {\n      background: checkboxBackgroundCheckedHovered,\n      borderColor: checkboxBorderColorCheckedHovered\n    }, _e[HighContrastSelector] = (_f = {}, _f[\":hover .\" + classNames.checkbox] = {\n      background: 'Highlight',\n      borderColor: 'Highlight'\n    }, _f[\":focus .\" + classNames.checkbox] = {\n      background: 'Highlight'\n    }, _f[\":focus:hover .\" + classNames.checkbox] = {\n      background: 'Highlight'\n    }, _f[\":focus:hover .\" + classNames.checkmark] = {\n      color: 'Window'\n    }, _f[\":hover .\" + classNames.checkmark] = {\n      color: 'Window'\n    }, _f), _e), indeterminate && (_g = {}, _g[\":hover .\" + classNames.checkbox + \", :hover .\" + classNames.checkbox + \":after\"] = (_h = {\n      borderColor: checkboxBorderIndeterminateHoveredColor\n    }, _h[HighContrastSelector] = {\n      borderColor: 'WindowText'\n    }, _h), _g[\":focus .\" + classNames.checkbox] = {\n      borderColor: checkboxBorderIndeterminateHoveredColor\n    }, _g[\":hover .\" + classNames.checkmark] = {\n      opacity: '0'\n    }, _g), (_j = {}, _j[\":hover .\" + classNames.text + \", :focus .\" + classNames.text] = (_k = {\n      color: checkboxHoveredTextColor\n    }, _k[HighContrastSelector] = {\n      color: disabled ? 'GrayText' : 'WindowText'\n    }, _k), _j)], className],\n    input: (_l = {\n      position: 'absolute',\n      background: 'none',\n      opacity: 0\n    }, _l[\".\" + IsFocusVisibleClassName + \" &:focus + label::before\"] = (_m = {\n      outline: '1px solid ' + theme.palette.neutralSecondary,\n      outlineOffset: '2px'\n    }, _m[HighContrastSelector] = {\n      outline: '1px solid WindowText'\n    }, _m), _l),\n    label: [classNames.label, theme.fonts.medium, {\n      display: 'flex',\n      alignItems: isUsingCustomLabelRender ? 'center' : 'flex-start',\n      cursor: disabled ? 'default' : 'pointer',\n      position: 'relative',\n      userSelect: 'none'\n    }, reversed && {\n      flexDirection: 'row-reverse',\n      justifyContent: 'flex-end'\n    }, {\n      '&::before': {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        content: '\"\"',\n        pointerEvents: 'none'\n      }\n    }],\n    checkbox: [classNames.checkbox, (_o = {\n      position: 'relative',\n      display: 'flex',\n      flexShrink: 0,\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: MS_CHECKBOX_LABEL_SIZE,\n      width: MS_CHECKBOX_LABEL_SIZE,\n      border: \"1px solid \" + checkboxBorderColor,\n      borderRadius: effects.roundedCorner2,\n      boxSizing: 'border-box',\n      transitionProperty: 'background, border, border-color',\n      transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\n      transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\n\n      /* in case the icon is bigger than the box */\n      overflow: 'hidden',\n      ':after': indeterminate ? indeterminateDotStyles : null\n    }, _o[HighContrastSelector] = __assign({\n      borderColor: 'WindowText'\n    }, getHighContrastNoAdjustStyle()), _o), indeterminate && {\n      borderColor: checkboxBorderIndeterminateColor\n    }, !reversed ? // This margin on the checkbox is for backwards compat. Notably it has the effect where a customRender\n    // is used, there will be only a 4px margin from checkbox to label. The label by default would have\n    // another 4px margin for a total of 8px margin between checkbox and label. We don't combine the two\n    // (and move it into the text) to not incur a breaking change for everyone using custom render atm.\n    {\n      marginRight: 4\n    } : {\n      marginLeft: 4\n    }, !disabled && !indeterminate && checked && (_p = {\n      background: checkboxBackgroundChecked,\n      borderColor: checkboxBorderColorChecked\n    }, _p[HighContrastSelector] = {\n      background: 'Highlight',\n      borderColor: 'Highlight'\n    }, _p), disabled && (_q = {\n      borderColor: checkboxBorderColorDisabled\n    }, _q[HighContrastSelector] = {\n      borderColor: 'GrayText'\n    }, _q), checked && disabled && (_r = {\n      background: checkboxBackgroundDisabledChecked,\n      borderColor: checkboxBorderColorDisabled\n    }, _r[HighContrastSelector] = {\n      background: 'Window'\n    }, _r)],\n    checkmark: [classNames.checkmark, (_s = {\n      opacity: checked ? '1' : '0',\n      color: checkmarkFontColor\n    }, _s[HighContrastSelector] = __assign({\n      color: disabled ? 'GrayText' : 'Window'\n    }, getHighContrastNoAdjustStyle()), _s)],\n    text: [classNames.text, (_t = {\n      color: disabled ? checkboxTextColorDisabled : checkboxTextColor,\n      fontSize: fonts.medium.fontSize,\n      lineHeight: '20px'\n    }, _t[HighContrastSelector] = __assign({\n      color: disabled ? 'GrayText' : 'WindowText'\n    }, getHighContrastNoAdjustStyle()), _t), !reversed ? {\n      marginLeft: 4\n    } : {\n      marginRight: 4\n    }]\n  };\n};","map":{"version":3,"sources":["components/Checkbox/Checkbox.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\r\nimport { HighContrastSelector, getGlobalClassNames, IStyle, getHighContrastNoAdjustStyle } from '../../Styling';\r\nimport { IsFocusVisibleClassName } from '../../Utilities';\r\n\r\nconst GlobalClassNames = {\r\n  root: 'ms-Checkbox',\r\n  label: 'ms-Checkbox-label',\r\n  checkbox: 'ms-Checkbox-checkbox',\r\n  checkmark: 'ms-Checkbox-checkmark',\r\n  text: 'ms-Checkbox-text',\r\n};\r\n\r\nconst MS_CHECKBOX_LABEL_SIZE = '20px';\r\nconst MS_CHECKBOX_TRANSITION_DURATION = '200ms';\r\nconst MS_CHECKBOX_TRANSITION_TIMING = 'cubic-bezier(.4, 0, .23, 1)';\r\n\r\nexport const getStyles = (props: ICheckboxStyleProps): ICheckboxStyles => {\r\n  const { className, theme, reversed, checked, disabled, isUsingCustomLabelRender, indeterminate } = props;\r\n  const { semanticColors, effects, palette, fonts } = theme;\r\n\r\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\r\n\r\n  const checkmarkFontColor = semanticColors.inputForegroundChecked;\r\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBorder\r\n  const checkmarkFontColorHovered = palette.neutralSecondary;\r\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder\r\n  const checkboxBorderColor = palette.neutralPrimary;\r\n  const checkboxBorderIndeterminateColor = semanticColors.inputBackgroundChecked;\r\n  const checkboxBorderColorChecked = semanticColors.inputBackgroundChecked;\r\n  const checkboxBorderColorDisabled = semanticColors.disabledBodySubtext;\r\n  const checkboxBorderHoveredColor = semanticColors.inputBorderHovered;\r\n  const checkboxBorderIndeterminateHoveredColor = semanticColors.inputBackgroundCheckedHovered;\r\n  const checkboxBackgroundChecked = semanticColors.inputBackgroundChecked;\r\n  // TODO: after updating the semanticColors slots mapping the following 2 tokens need to be\r\n  // semanticColors.inputBackgroundCheckedHovered\r\n  const checkboxBackgroundCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\r\n  const checkboxBorderColorCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\r\n  const checkboxHoveredTextColor = semanticColors.inputTextHovered;\r\n  const checkboxBackgroundDisabledChecked = semanticColors.disabledBodySubtext;\r\n  const checkboxTextColor = semanticColors.bodyText;\r\n  const checkboxTextColorDisabled = semanticColors.disabledText;\r\n\r\n  const indeterminateDotStyles: IStyle = [\r\n    {\r\n      content: '\"\"',\r\n      borderRadius: effects.roundedCorner2,\r\n      position: 'absolute',\r\n      width: 10,\r\n      height: 10,\r\n      top: 4,\r\n      left: 4,\r\n      boxSizing: 'border-box',\r\n      borderWidth: 5,\r\n      borderStyle: 'solid',\r\n      borderColor: disabled ? checkboxBorderColorDisabled : checkboxBorderIndeterminateColor,\r\n      transitionProperty: 'border-width, border, border-color',\r\n      transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\r\n      transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\r\n      [HighContrastSelector]: {\r\n        borderColor: 'WindowText',\r\n      },\r\n    },\r\n  ];\r\n\r\n  return {\r\n    root: [\r\n      classNames.root,\r\n      {\r\n        position: 'relative',\r\n        display: 'flex',\r\n      },\r\n      reversed && 'reversed',\r\n      checked && 'is-checked',\r\n      !disabled && 'is-enabled',\r\n      disabled && 'is-disabled',\r\n      !disabled && [\r\n        !checked && {\r\n          [`:hover .${classNames.checkbox}`]: {\r\n            borderColor: checkboxBorderHoveredColor,\r\n            [HighContrastSelector]: {\r\n              borderColor: 'Highlight',\r\n            },\r\n          },\r\n          [`:focus .${classNames.checkbox}`]: { borderColor: checkboxBorderHoveredColor },\r\n          [`:hover .${classNames.checkmark}`]: {\r\n            color: checkmarkFontColorHovered,\r\n            opacity: '1',\r\n            [HighContrastSelector]: {\r\n              color: 'Highlight',\r\n            },\r\n          },\r\n        },\r\n        checked &&\r\n          !indeterminate && {\r\n            [`:hover .${classNames.checkbox}`]: {\r\n              background: checkboxBackgroundCheckedHovered,\r\n              borderColor: checkboxBorderColorCheckedHovered,\r\n            },\r\n            [`:focus .${classNames.checkbox}`]: {\r\n              background: checkboxBackgroundCheckedHovered,\r\n              borderColor: checkboxBorderColorCheckedHovered,\r\n            },\r\n            [HighContrastSelector]: {\r\n              [`:hover .${classNames.checkbox}`]: {\r\n                background: 'Highlight',\r\n                borderColor: 'Highlight',\r\n              },\r\n              [`:focus .${classNames.checkbox}`]: {\r\n                background: 'Highlight',\r\n              },\r\n              [`:focus:hover .${classNames.checkbox}`]: {\r\n                background: 'Highlight',\r\n              },\r\n              [`:focus:hover .${classNames.checkmark}`]: {\r\n                color: 'Window',\r\n              },\r\n              [`:hover .${classNames.checkmark}`]: {\r\n                color: 'Window',\r\n              },\r\n            },\r\n          },\r\n        indeterminate && {\r\n          [`:hover .${classNames.checkbox}, :hover .${classNames.checkbox}:after`]: {\r\n            borderColor: checkboxBorderIndeterminateHoveredColor,\r\n            [HighContrastSelector]: {\r\n              borderColor: 'WindowText',\r\n            },\r\n          },\r\n          [`:focus .${classNames.checkbox}`]: {\r\n            borderColor: checkboxBorderIndeterminateHoveredColor,\r\n          },\r\n          [`:hover .${classNames.checkmark}`]: {\r\n            opacity: '0',\r\n          },\r\n        },\r\n        {\r\n          [`:hover .${classNames.text}, :focus .${classNames.text}`]: {\r\n            color: checkboxHoveredTextColor,\r\n            [HighContrastSelector]: {\r\n              color: disabled ? 'GrayText' : 'WindowText',\r\n            },\r\n          },\r\n        },\r\n      ],\r\n      className,\r\n    ],\r\n    input: {\r\n      position: 'absolute',\r\n      background: 'none',\r\n\r\n      opacity: 0,\r\n      [`.${IsFocusVisibleClassName} &:focus + label::before`]: {\r\n        outline: '1px solid ' + theme.palette.neutralSecondary,\r\n        outlineOffset: '2px',\r\n        [HighContrastSelector]: {\r\n          outline: '1px solid WindowText',\r\n        },\r\n      },\r\n    },\r\n    label: [\r\n      classNames.label,\r\n      theme.fonts.medium,\r\n      {\r\n        display: 'flex',\r\n        alignItems: isUsingCustomLabelRender ? 'center' : 'flex-start',\r\n        cursor: disabled ? 'default' : 'pointer',\r\n        position: 'relative',\r\n        userSelect: 'none',\r\n      },\r\n      reversed && {\r\n        flexDirection: 'row-reverse',\r\n        justifyContent: 'flex-end',\r\n      },\r\n      {\r\n        '&::before': {\r\n          position: 'absolute',\r\n          left: 0,\r\n          right: 0,\r\n          top: 0,\r\n          bottom: 0,\r\n          content: '\"\"',\r\n          pointerEvents: 'none',\r\n        },\r\n      },\r\n    ],\r\n    checkbox: [\r\n      classNames.checkbox,\r\n      {\r\n        position: 'relative',\r\n        display: 'flex',\r\n        flexShrink: 0,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: MS_CHECKBOX_LABEL_SIZE,\r\n        width: MS_CHECKBOX_LABEL_SIZE,\r\n        border: `1px solid ${checkboxBorderColor}`,\r\n        borderRadius: effects.roundedCorner2,\r\n        boxSizing: 'border-box',\r\n        transitionProperty: 'background, border, border-color',\r\n        transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\r\n        transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\r\n\r\n        /* in case the icon is bigger than the box */\r\n        overflow: 'hidden',\r\n        ':after': indeterminate ? indeterminateDotStyles : null,\r\n        [HighContrastSelector]: {\r\n          borderColor: 'WindowText',\r\n          ...getHighContrastNoAdjustStyle(),\r\n        },\r\n      },\r\n      indeterminate && {\r\n        borderColor: checkboxBorderIndeterminateColor,\r\n      },\r\n      !reversed\r\n        ? // This margin on the checkbox is for backwards compat. Notably it has the effect where a customRender\r\n          // is used, there will be only a 4px margin from checkbox to label. The label by default would have\r\n          // another 4px margin for a total of 8px margin between checkbox and label. We don't combine the two\r\n          // (and move it into the text) to not incur a breaking change for everyone using custom render atm.\r\n          {\r\n            marginRight: 4,\r\n          }\r\n        : {\r\n            marginLeft: 4,\r\n          },\r\n      !disabled &&\r\n        !indeterminate &&\r\n        checked && {\r\n          background: checkboxBackgroundChecked,\r\n          borderColor: checkboxBorderColorChecked,\r\n          [HighContrastSelector]: {\r\n            background: 'Highlight',\r\n            borderColor: 'Highlight',\r\n          },\r\n        },\r\n      disabled && {\r\n        borderColor: checkboxBorderColorDisabled,\r\n        [HighContrastSelector]: {\r\n          borderColor: 'GrayText',\r\n        },\r\n      },\r\n      checked &&\r\n        disabled && {\r\n          background: checkboxBackgroundDisabledChecked,\r\n          borderColor: checkboxBorderColorDisabled,\r\n          [HighContrastSelector]: {\r\n            background: 'Window',\r\n          },\r\n        },\r\n    ],\r\n    checkmark: [\r\n      classNames.checkmark,\r\n      {\r\n        opacity: checked ? '1' : '0',\r\n        color: checkmarkFontColor,\r\n        [HighContrastSelector]: {\r\n          color: disabled ? 'GrayText' : 'Window',\r\n          ...getHighContrastNoAdjustStyle(),\r\n        },\r\n      },\r\n    ],\r\n    text: [\r\n      classNames.text,\r\n      {\r\n        color: disabled ? checkboxTextColorDisabled : checkboxTextColor,\r\n        fontSize: fonts.medium.fontSize,\r\n        lineHeight: '20px',\r\n        [HighContrastSelector]: {\r\n          color: disabled ? 'GrayText' : 'WindowText',\r\n          ...getHighContrastNoAdjustStyle(),\r\n        },\r\n      },\r\n      !reversed\r\n        ? {\r\n            marginLeft: 4,\r\n          }\r\n        : {\r\n            marginRight: 4,\r\n          },\r\n    ],\r\n  };\r\n};\r\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}