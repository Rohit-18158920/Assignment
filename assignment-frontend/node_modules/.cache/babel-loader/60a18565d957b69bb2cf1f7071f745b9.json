{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, css } from '../../../Utilities';\nimport { SuggestionsItem } from '../../../Pickers';\nimport * as stylesImport from './SuggestionsCore.scss';\nvar styles = stylesImport;\n/**\n * Class when used with SuggestionsStore, renders a basic suggestions control\n */\n\nvar SuggestionsCore =\n/** @class */\nfunction (_super) {\n  __extends(SuggestionsCore, _super);\n\n  function SuggestionsCore(suggestionsProps) {\n    var _this = _super.call(this, suggestionsProps) || this;\n\n    _this._selectedElement = React.createRef();\n    _this.SuggestionsItemOfProperType = SuggestionsItem;\n\n    _this._onClickTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        _this.props.onSuggestionClick(ev, item, index);\n      };\n    };\n\n    _this._onRemoveTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        var onSuggestionRemove = _this.props.onSuggestionRemove;\n        onSuggestionRemove(ev, item, index);\n        ev.stopPropagation();\n      };\n    };\n\n    initializeComponentRef(_this);\n    _this.currentIndex = -1;\n    return _this;\n  }\n  /**\n   * Increments the selected suggestion index\n   */\n\n\n  SuggestionsCore.prototype.nextSuggestion = function () {\n    var suggestions = this.props.suggestions;\n\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      } else if (this.currentIndex < suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Decrements the selected suggestion index\n   */\n\n\n  SuggestionsCore.prototype.previousSuggestion = function () {\n    var suggestions = this.props.suggestions;\n\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      } else if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === 0) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(SuggestionsCore.prototype, \"selectedElement\", {\n    get: function () {\n      return this._selectedElement.current || undefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SuggestionsCore.prototype.getCurrentItem = function () {\n    return this.props.suggestions[this.currentIndex];\n  };\n\n  SuggestionsCore.prototype.getSuggestionAtIndex = function (index) {\n    return this.props.suggestions[index];\n  };\n\n  SuggestionsCore.prototype.hasSuggestionSelected = function () {\n    return this.currentIndex !== -1 && this.currentIndex < this.props.suggestions.length;\n  };\n\n  SuggestionsCore.prototype.removeSuggestion = function (index) {\n    this.props.suggestions.splice(index, 1);\n  };\n\n  SuggestionsCore.prototype.deselectAllSuggestions = function () {\n    if (this.currentIndex > -1 && this.props.suggestions[this.currentIndex]) {\n      this.props.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n      this.forceUpdate();\n    }\n  };\n\n  SuggestionsCore.prototype.setSelectedSuggestion = function (index) {\n    var suggestions = this.props.suggestions;\n\n    if (index > suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion.selected = false;\n      this.currentSuggestion = suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1 && suggestions[this.currentIndex]) {\n        suggestions[this.currentIndex].selected = false;\n      }\n\n      suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = suggestions[index];\n    }\n\n    this.forceUpdate();\n  };\n\n  SuggestionsCore.prototype.componentDidUpdate = function () {\n    this.scrollSelected();\n  };\n\n  SuggestionsCore.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        onRenderSuggestion = _a.onRenderSuggestion,\n        suggestionsItemClassName = _a.suggestionsItemClassName,\n        resultsMaximumNumber = _a.resultsMaximumNumber,\n        showRemoveButtons = _a.showRemoveButtons,\n        suggestionsContainerAriaLabel = _a.suggestionsContainerAriaLabel;\n    var TypedSuggestionsItem = this.SuggestionsItemOfProperType;\n    var suggestions = this.props.suggestions;\n\n    if (resultsMaximumNumber) {\n      suggestions = suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    return React.createElement(\"div\", {\n      className: css('ms-Suggestions-container', styles.suggestionsContainer),\n      id: \"suggestion-list\",\n      role: \"list\",\n      \"aria-label\": suggestionsContainerAriaLabel\n    }, suggestions.map(function (suggestion, index) {\n      return React.createElement(\"div\", {\n        ref: suggestion.selected || index === _this.currentIndex ? _this._selectedElement : undefined,\n        key: suggestion.item.key ? suggestion.item.key : index,\n        id: 'sug-' + index,\n        role: \"listitem\",\n        \"aria-label\": suggestion.ariaLabel\n      }, React.createElement(TypedSuggestionsItem, {\n        id: 'sug-item' + index,\n        suggestionModel: suggestion,\n        RenderSuggestion: onRenderSuggestion,\n        onClick: _this._onClickTypedSuggestionsItem(suggestion.item, index),\n        className: suggestionsItemClassName,\n        showRemoveButton: showRemoveButtons,\n        onRemoveItem: _this._onRemoveTypedSuggestionsItem(suggestion.item, index),\n        isSelectedOverride: index === _this.currentIndex\n      }));\n    }));\n  }; // TODO get the element to scroll into view properly regardless of direction.\n\n\n  SuggestionsCore.prototype.scrollSelected = function () {\n    var _a;\n\n    if (((_a = this._selectedElement.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView) !== undefined) {\n      this._selectedElement.current.scrollIntoView(false);\n    }\n  };\n\n  return SuggestionsCore;\n}(React.Component);\n\nexport { SuggestionsCore };","map":{"version":3,"sources":["components/FloatingPicker/Suggestions/SuggestionsCore.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef, css } from '../../../Utilities';\nimport { ISuggestionItemProps, SuggestionsItem, ISuggestionModel } from '../../../Pickers';\nimport { ISuggestionsCoreProps } from './Suggestions.types';\nimport * as stylesImport from './SuggestionsCore.scss';\nconst styles: any = stylesImport;\n\n/**\n * Class when used with SuggestionsStore, renders a basic suggestions control\n */\nexport class SuggestionsCore<T> extends React.Component<ISuggestionsCoreProps<T>, {}> {\n  public currentIndex: number;\n  public currentSuggestion: ISuggestionModel<T> | undefined;\n  protected _selectedElement = React.createRef<HTMLDivElement>();\n  private SuggestionsItemOfProperType: new (props: ISuggestionItemProps<T>) => SuggestionsItem<T> = SuggestionsItem;\n\n  constructor(suggestionsProps: ISuggestionsCoreProps<T>) {\n    super(suggestionsProps);\n\n    initializeComponentRef(this);\n    this.currentIndex = -1;\n  }\n\n  /**\n   * Increments the selected suggestion index\n   */\n  public nextSuggestion(): boolean {\n    const { suggestions } = this.props;\n\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      } else if (this.currentIndex < suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Decrements the selected suggestion index\n   */\n  public previousSuggestion(): boolean {\n    const { suggestions } = this.props;\n\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      } else if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === 0) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public get selectedElement(): HTMLDivElement | undefined {\n    return this._selectedElement.current || undefined;\n  }\n\n  public getCurrentItem(): ISuggestionModel<T> {\n    return this.props.suggestions[this.currentIndex];\n  }\n\n  public getSuggestionAtIndex(index: number): ISuggestionModel<T> {\n    return this.props.suggestions[index];\n  }\n\n  public hasSuggestionSelected(): boolean {\n    return this.currentIndex !== -1 && this.currentIndex < this.props.suggestions.length;\n  }\n\n  public removeSuggestion(index: number): void {\n    this.props.suggestions.splice(index, 1);\n  }\n\n  public deselectAllSuggestions(): void {\n    if (this.currentIndex > -1 && this.props.suggestions[this.currentIndex]) {\n      this.props.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n      this.forceUpdate();\n    }\n  }\n\n  public setSelectedSuggestion(index: number): void {\n    const { suggestions } = this.props;\n\n    if (index > suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion!.selected = false;\n      this.currentSuggestion = suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1 && suggestions[this.currentIndex]) {\n        suggestions[this.currentIndex].selected = false;\n      }\n      suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = suggestions[index];\n    }\n\n    this.forceUpdate();\n  }\n\n  public componentDidUpdate(): void {\n    this.scrollSelected();\n  }\n\n  public render(): JSX.Element {\n    const {\n      onRenderSuggestion,\n      suggestionsItemClassName,\n      resultsMaximumNumber,\n      showRemoveButtons,\n      suggestionsContainerAriaLabel,\n    } = this.props;\n    const TypedSuggestionsItem = this.SuggestionsItemOfProperType;\n    let { suggestions } = this.props;\n\n    if (resultsMaximumNumber) {\n      suggestions = suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    return (\n      <div\n        className={css('ms-Suggestions-container', styles.suggestionsContainer)}\n        id=\"suggestion-list\"\n        role=\"list\"\n        aria-label={suggestionsContainerAriaLabel}\n      >\n        {suggestions.map((suggestion: ISuggestionModel<T>, index: number) => (\n          <div\n            ref={suggestion.selected || index === this.currentIndex ? this._selectedElement : undefined}\n            key={(suggestion.item as any).key ? (suggestion.item as any).key : index}\n            id={'sug-' + index}\n            role=\"listitem\"\n            aria-label={suggestion.ariaLabel}\n          >\n            <TypedSuggestionsItem\n              id={'sug-item' + index}\n              suggestionModel={suggestion}\n              RenderSuggestion={onRenderSuggestion as any}\n              onClick={this._onClickTypedSuggestionsItem(suggestion.item, index)}\n              className={suggestionsItemClassName}\n              showRemoveButton={showRemoveButtons}\n              onRemoveItem={this._onRemoveTypedSuggestionsItem(suggestion.item, index)}\n              isSelectedOverride={index === this.currentIndex}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  // TODO get the element to scroll into view properly regardless of direction.\n  public scrollSelected(): void {\n    if (this._selectedElement.current?.scrollIntoView !== undefined) {\n      this._selectedElement.current.scrollIntoView(false);\n    }\n  }\n\n  private _onClickTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      this.props.onSuggestionClick(ev, item, index);\n    };\n  };\n\n  private _onRemoveTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      const onSuggestionRemove = this.props.onSuggestionRemove!;\n      onSuggestionRemove(ev, item, index);\n      ev.stopPropagation();\n    };\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}