{"ast":null,"code":"import { extractStyleParts } from './extractStyleParts';\nimport { getStyleOptions } from './StyleOptionsState';\nimport { styleToClassName } from './styleToClassName';\n/**\n * Concatenation helper, which can merge class names together. Skips over falsey values.\n *\n * @public\n */\n\nexport function mergeStyles() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return mergeCss(args, getStyleOptions());\n}\n/**\n * Concatenation helper, which can merge class names together. Skips over falsey values.\n * Accepts a set of options that will be used when calculating styles.\n *\n * @public\n */\n\nexport function mergeCss(args, options) {\n  var styleArgs = args instanceof Array ? args : [args];\n\n  var _a = extractStyleParts(styleArgs),\n      classes = _a.classes,\n      objects = _a.objects;\n\n  if (objects.length) {\n    classes.push(styleToClassName(options || {}, objects));\n  }\n\n  return classes.join(' ');\n}","map":{"version":3,"sources":["mergeStyles.ts"],"names":[],"mappings":"AAAA,SAAS,iBAAT,QAAkC,qBAAlC;AAGA,SAAS,eAAT,QAAgC,qBAAhC;AACA,SAAS,gBAAT,QAAiC,oBAAjC;AAEA;;;;AAIG;;AACH,OAAM,SAAU,WAAV,GAAqB;AAAC,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAgE;AAAhE,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC1B,SAAO,QAAQ,CAAC,IAAD,EAAO,eAAe,EAAtB,CAAf;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,QAAV,CACJ,IADI,EAEJ,OAFI,EAEmB;AAEvB,MAAM,SAAS,GAAG,IAAI,YAAY,KAAhB,GAAwB,IAAxB,GAA+B,CAAC,IAAD,CAAjD;;AACM,MAAA,EAAA,GAAA,iBAAA,CAAA,SAAA,CAAA;AAAA,MAAE,OAAA,GAAA,EAAA,CAAA,OAAF;AAAA,MAAW,OAAA,GAAA,EAAA,CAAA,OAAX;;AAEN,MAAI,OAAO,CAAC,MAAZ,EAAoB;AAClB,IAAA,OAAO,CAAC,IAAR,CAAa,gBAAgB,CAAC,OAAO,IAAI,EAAZ,EAAgB,OAAhB,CAA7B;AACD;;AAED,SAAO,OAAO,CAAC,IAAR,CAAa,GAAb,CAAP;AACD","sourcesContent":["import { extractStyleParts } from './extractStyleParts';\nimport { IStyle, IStyleBaseArray } from './IStyle';\nimport { IStyleOptions } from './IStyleOptions';\nimport { getStyleOptions } from './StyleOptionsState';\nimport { styleToClassName } from './styleToClassName';\n\n/**\n * Concatenation helper, which can merge class names together. Skips over falsey values.\n *\n * @public\n */\nexport function mergeStyles(...args: (IStyle | IStyleBaseArray | false | null | undefined)[]): string {\n  return mergeCss(args, getStyleOptions());\n}\n\n/**\n * Concatenation helper, which can merge class names together. Skips over falsey values.\n * Accepts a set of options that will be used when calculating styles.\n *\n * @public\n */\nexport function mergeCss(\n  args: (IStyle | IStyleBaseArray | false | null | undefined) | (IStyle | IStyleBaseArray | false | null | undefined)[],\n  options?: IStyleOptions,\n): string {\n  const styleArgs = args instanceof Array ? args : [args];\n  const { classes, objects } = extractStyleParts(styleArgs);\n\n  if (objects.length) {\n    classes.push(styleToClassName(options || {}, objects));\n  }\n\n  return classes.join(' ');\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}