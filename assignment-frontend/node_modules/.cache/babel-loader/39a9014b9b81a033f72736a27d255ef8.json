{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Async, EventGroup, css, divProperties, findIndex, findScrollableParent, getNativeProps, getParent, getWindow, initializeComponentRef } from '../../Utilities';\nimport { ScrollToMode } from './List.types';\nimport { composeRenderFunction } from '../../Utilities';\nvar RESIZE_DELAY = 16;\nvar MIN_SCROLL_UPDATE_DELAY = 100;\nvar MAX_SCROLL_UPDATE_DELAY = 500;\nvar IDLE_DEBOUNCE_DELAY = 200; // The amount of time to wait before declaring that the list isn't scrolling\n\nvar DONE_SCROLLING_WAIT = 500;\nvar DEFAULT_ITEMS_PER_PAGE = 10;\nvar DEFAULT_PAGE_HEIGHT = 30;\nvar DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nvar DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nvar PAGE_KEY_PREFIX = 'page-';\nvar SPACER_KEY_PREFIX = 'spacer-';\nvar EMPTY_RECT = {\n  top: -1,\n  bottom: -1,\n  left: -1,\n  right: -1,\n  width: 0,\n  height: 0\n}; // Naming expensive measures so that they're named in profiles.\n\nvar _measurePageRect = function (element) {\n  return element.getBoundingClientRect();\n};\n\nvar _measureSurfaceRect = _measurePageRect;\nvar _measureScrollRect = _measurePageRect;\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback\n * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if\n * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.\n * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\n\nvar List =\n/** @class */\nfunction (_super) {\n  __extends(List, _super);\n\n  function List(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._surface = React.createRef();\n    _this._pageRefs = {};\n\n    _this._getDerivedStateFromProps = function (nextProps, previousState) {\n      if (nextProps.items !== _this.props.items || nextProps.renderCount !== _this.props.renderCount || nextProps.startIndex !== _this.props.startIndex || nextProps.version !== _this.props.version) {\n        // We have received new items so we want to make sure that initially we only render a single window to\n        // fill the currently visible rect, and then later render additional windows.\n        _this._resetRequiredWindows();\n\n        _this._requiredRect = null;\n        _this._measureVersion++;\n\n        _this._invalidatePageCache();\n\n        return _this._updatePages(nextProps, previousState);\n      }\n\n      return previousState;\n    };\n\n    _this._onRenderRoot = function (props) {\n      var rootRef = props.rootRef,\n          surfaceElement = props.surfaceElement,\n          divProps = props.divProps;\n      return React.createElement(\"div\", __assign({\n        ref: rootRef\n      }, divProps), surfaceElement);\n    };\n\n    _this._onRenderSurface = function (props) {\n      var surfaceRef = props.surfaceRef,\n          pageElements = props.pageElements,\n          divProps = props.divProps;\n      return React.createElement(\"div\", __assign({\n        ref: surfaceRef\n      }, divProps), pageElements);\n    };\n\n    _this._onRenderPage = function (pageProps, defaultRender) {\n      var _a = _this.props,\n          onRenderCell = _a.onRenderCell,\n          role = _a.role;\n\n      var _b = pageProps.page,\n          _c = _b.items,\n          items = _c === void 0 ? [] : _c,\n          startIndex = _b.startIndex,\n          divProps = __rest(pageProps, [\"page\"]); // only assign list item role if no role is assigned\n\n\n      var cellRole = role === undefined ? 'listitem' : 'presentation';\n      var cells = [];\n\n      for (var i = 0; i < items.length; i++) {\n        var index = startIndex + i;\n        var item = items[i];\n        var itemKey = _this.props.getKey ? _this.props.getKey(item, index) : item && item.key;\n\n        if (itemKey === null || itemKey === undefined) {\n          itemKey = index;\n        }\n\n        cells.push(React.createElement(\"div\", {\n          role: cellRole,\n          className: 'ms-List-cell',\n          key: itemKey,\n          \"data-list-index\": index,\n          \"data-automationid\": \"ListCell\"\n        }, onRenderCell && onRenderCell(item, index, !_this.props.ignoreScrollingState ? _this.state.isScrolling : undefined)));\n      }\n\n      return React.createElement(\"div\", __assign({}, divProps), cells);\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      pages: [],\n      isScrolling: false,\n      getDerivedStateFromProps: _this._getDerivedStateFromProps\n    };\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    _this._estimatedPageHeight = 0;\n    _this._totalEstimates = 0;\n    _this._requiredWindowsAhead = 0;\n    _this._requiredWindowsBehind = 0; // Track the measure version for everything.\n\n    _this._measureVersion = 0; // Ensure that scrolls are lazy updated.\n\n    _this._onAsyncScroll = _this._async.debounce(_this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {\n      leading: false,\n      maxWait: MAX_SCROLL_UPDATE_DELAY\n    });\n    _this._onAsyncIdle = _this._async.debounce(_this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {\n      leading: false\n    });\n    _this._onAsyncResize = _this._async.debounce(_this._onAsyncResize, RESIZE_DELAY, {\n      leading: false\n    });\n    _this._onScrollingDone = _this._async.debounce(_this._onScrollingDone, DONE_SCROLLING_WAIT, {\n      leading: false\n    });\n    _this._cachedPageHeights = {};\n    _this._estimatedPageHeight = 0;\n    _this._focusedIndex = -1;\n    _this._pageCache = {};\n    return _this;\n  }\n\n  List.getDerivedStateFromProps = function (nextProps, previousState) {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  };\n\n  Object.defineProperty(List.prototype, \"pageRefs\", {\n    get: function () {\n      return this._pageRefs;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\n   */\n\n  List.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    if (scrollToMode === void 0) {\n      scrollToMode = ScrollToMode.auto;\n    }\n\n    var startIndex = this.props.startIndex;\n\n    var renderCount = this._getRenderCount();\n\n    var endIndex = startIndex + renderCount;\n    var allowedRect = this._allowedRect;\n    var scrollTop = 0;\n    var itemsPerPage = 1;\n\n    for (var itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      var pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n\n      var pageHeight = pageSpecification.height;\n      itemsPerPage = pageSpecification.itemCount;\n      var requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;\n\n      if (requestedIndexIsInPage) {\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in\n        // just the given item, otherwise we'll only bring the page into view\n        if (measureItem && this._scrollElement) {\n          var scrollRect = _measureScrollRect(this._scrollElement);\n\n          var scrollWindow = {\n            top: this._scrollElement.scrollTop,\n            bottom: this._scrollElement.scrollTop + scrollRect.height\n          }; // Adjust for actual item position within page\n\n          var itemPositionWithinPage = index - itemIndex;\n\n          for (var itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\n          }\n\n          var scrollBottom = scrollTop + measureItem(index); // If scrollToMode is set to something other than auto, we always want to\n          // scroll the item into a specific position on the page.\n\n          switch (scrollToMode) {\n            case ScrollToMode.top:\n              this._scrollElement.scrollTop = scrollTop;\n              return;\n\n            case ScrollToMode.bottom:\n              this._scrollElement.scrollTop = scrollBottom - scrollRect.height;\n              return;\n\n            case ScrollToMode.center:\n              this._scrollElement.scrollTop = (scrollTop + scrollBottom - scrollRect.height) / 2;\n              return;\n\n            case ScrollToMode.auto:\n            default:\n              break;\n          }\n\n          var itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\n\n          if (itemIsFullyVisible) {\n            // Item is already visible, do nothing.\n            return;\n          }\n\n          var itemIsPartiallyAbove = scrollTop < scrollWindow.top;\n          var itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\n\n          if (itemIsPartiallyAbove) {//  We will just scroll to 'scrollTop'\n            //  .------.   - scrollTop\n            //  |Item  |\n            //  | .----|-. - scrollWindow.top\n            //  '------' |\n            //    |      |\n            //    '------'\n          } else if (itemIsPartiallyBelow) {\n            //  Adjust scrollTop position to just bring in the element\n            // .------.  - scrollTop\n            // |      |\n            // | .------.\n            // '-|----' | - scrollWindow.bottom\n            //   | Item |\n            //   '------' - scrollBottom\n            scrollTop = scrollBottom - scrollRect.height;\n          }\n        }\n\n        this._scrollElement.scrollTop = scrollTop;\n        return;\n      }\n\n      scrollTop += pageHeight;\n    }\n  };\n\n  List.prototype.getStartItemIndexInView = function (measureItem) {\n    var pages = this.state.pages || [];\n\n    for (var _i = 0, pages_1 = pages; _i < pages_1.length; _i++) {\n      var page = pages_1[_i];\n      var isPageVisible = !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;\n\n      if (isPageVisible) {\n        if (!measureItem) {\n          var rowHeight = Math.floor(page.height / page.itemCount);\n          return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);\n        } else {\n          var totalRowHeight = 0;\n\n          for (var itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {\n            var rowHeight = measureItem(itemIndex);\n\n            if (page.top + totalRowHeight <= this._scrollTop && this._scrollTop < page.top + totalRowHeight + rowHeight) {\n              return itemIndex;\n            } else {\n              totalRowHeight += rowHeight;\n            }\n          }\n        }\n      }\n    }\n\n    return 0;\n  };\n\n  List.prototype.componentDidMount = function () {\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n    this._scrollElement = findScrollableParent(this._root.current);\n\n    this._events.on(window, 'resize', this._onAsyncResize);\n\n    if (this._root.current) {\n      this._events.on(this._root.current, 'focus', this._onFocus, true);\n    }\n\n    if (this._scrollElement) {\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\n\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n    }\n  };\n\n  List.prototype.componentDidUpdate = function (previousProps, previousState) {\n    var finalProps = this.props;\n    var finalState = this.state;\n\n    if (this.state.pagesVersion !== previousState.pagesVersion) {\n      // If we weren't provided with the page height, measure the pages\n      if (!finalProps.getPageHeight) {\n        // If measured version is invalid since we've updated the DOM\n        var heightsChanged = this._updatePageMeasurements(finalState.pages); // On first render, we should re-measure so that we don't get a visual glitch.\n\n\n        if (heightsChanged) {\n          this._materializedRect = null;\n\n          if (!this._hasCompletedFirstRender) {\n            this._hasCompletedFirstRender = true;\n            this.setState(this._updatePages(finalProps, finalState));\n          } else {\n            this._onAsyncScroll();\n          }\n        } else {\n          // Enqueue an idle bump.\n          this._onAsyncIdle();\n        }\n      } else {\n        // Enqueue an idle bump\n        this._onAsyncIdle();\n      } // Notify the caller that rendering the new pages has completed\n\n\n      if (finalProps.onPagesUpdated) {\n        finalProps.onPagesUpdated(finalState.pages);\n      }\n    }\n  };\n\n  List.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n\n    this._events.dispose();\n\n    delete this._scrollElement;\n  };\n\n  List.prototype.shouldComponentUpdate = function (newProps, newState) {\n    var oldPages = this.state.pages;\n    var newPages = newState.pages;\n    var shouldComponentUpdate = false; // Update if the page stops scrolling\n\n    if (!newState.isScrolling && this.state.isScrolling) {\n      return true;\n    }\n\n    if (newProps.version !== this.props.version) {\n      return true;\n    }\n\n    if (newProps.items === this.props.items && oldPages.length === newPages.length) {\n      for (var i = 0; i < oldPages.length; i++) {\n        var oldPage = oldPages[i];\n        var newPage = newPages[i];\n\n        if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {\n          shouldComponentUpdate = true;\n          break;\n        }\n      }\n    } else {\n      shouldComponentUpdate = true;\n    }\n\n    return shouldComponentUpdate;\n  };\n\n  List.prototype.forceUpdate = function () {\n    this._invalidatePageCache(); // Ensure that when the list is force updated we update the pages first before render.\n\n\n    this._updateRenderRects(this.props, this.state, true);\n\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n\n    _super.prototype.forceUpdate.call(this);\n  };\n  /**\n   * Get the current height the list and it's pages.\n   */\n\n\n  List.prototype.getTotalListHeight = function () {\n    return this._surfaceRect.height;\n  };\n\n  List.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        _b = _a.role,\n        role = _b === void 0 ? 'list' : _b,\n        onRenderSurface = _a.onRenderSurface,\n        onRenderRoot = _a.onRenderRoot;\n    var _c = this.state.pages,\n        pages = _c === void 0 ? [] : _c;\n    var pageElements = [];\n    var divProps = getNativeProps(this.props, divProperties);\n\n    for (var _i = 0, pages_2 = pages; _i < pages_2.length; _i++) {\n      var page = pages_2[_i];\n      pageElements.push(this._renderPage(page));\n    }\n\n    var finalOnRenderSurface = onRenderSurface ? composeRenderFunction(onRenderSurface, this._onRenderSurface) : this._onRenderSurface;\n    var finalOnRenderRoot = onRenderRoot ? composeRenderFunction(onRenderRoot, this._onRenderRoot) : this._onRenderRoot;\n    return finalOnRenderRoot({\n      rootRef: this._root,\n      pages: pages,\n      surfaceElement: finalOnRenderSurface({\n        surfaceRef: this._surface,\n        pages: pages,\n        pageElements: pageElements,\n        divProps: {\n          role: 'presentation',\n          className: 'ms-List-surface'\n        }\n      }),\n      divProps: __assign(__assign({}, divProps), {\n        className: css('ms-List', className),\n        role: pageElements.length > 0 ? role : undefined\n      })\n    });\n  };\n\n  List.prototype._shouldVirtualize = function (props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var onShouldVirtualize = props.onShouldVirtualize;\n    return !onShouldVirtualize || onShouldVirtualize(props);\n  };\n  /**\n   * when props.items change or forceUpdate called, throw away cached pages\n   */\n\n\n  List.prototype._invalidatePageCache = function () {\n    this._pageCache = {};\n  };\n\n  List.prototype._renderPage = function (page) {\n    var _this = this;\n\n    var usePageCache = this.props.usePageCache;\n    var cachedPage; // if usePageCache is set and cached page element can be found, just return cached page\n\n    if (usePageCache) {\n      cachedPage = this._pageCache[page.key];\n\n      if (cachedPage && cachedPage.pageElement) {\n        return cachedPage.pageElement;\n      }\n    }\n\n    var pageStyle = this._getPageStyle(page);\n\n    var _a = this.props.onRenderPage,\n        onRenderPage = _a === void 0 ? this._onRenderPage : _a;\n    var pageElement = onRenderPage({\n      page: page,\n      className: 'ms-List-page',\n      key: page.key,\n      ref: function (newRef) {\n        _this._pageRefs[page.key] = newRef;\n      },\n      style: pageStyle,\n      role: 'presentation'\n    }, this._onRenderPage); // cache the first page for now since it is re-rendered a lot times unnecessarily.\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\n\n    if (usePageCache && page.startIndex === 0) {\n      this._pageCache[page.key] = {\n        page: page,\n        pageElement: pageElement\n      };\n    }\n\n    return pageElement;\n  };\n  /** Generate the style object for the page. */\n\n\n  List.prototype._getPageStyle = function (page) {\n    var getPageStyle = this.props.getPageStyle;\n    return __assign(__assign({}, getPageStyle ? getPageStyle(page) : {}), !page.items ? {\n      height: page.height\n    } : {});\n  };\n  /** Track the last item index focused so that we ensure we keep it rendered. */\n\n\n  List.prototype._onFocus = function (ev) {\n    var target = ev.target;\n\n    while (target !== this._surface.current) {\n      var indexString = target.getAttribute('data-list-index');\n\n      if (indexString) {\n        this._focusedIndex = Number(indexString);\n        break;\n      }\n\n      target = getParent(target);\n    }\n  };\n  /**\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n   * we will call onAsyncIdle which will reset it back to it's correct value.\n   */\n\n\n  List.prototype._onScroll = function () {\n    if (!this.state.isScrolling && !this.props.ignoreScrollingState) {\n      this.setState({\n        isScrolling: true\n      });\n    }\n\n    this._resetRequiredWindows();\n\n    this._onScrollingDone();\n  };\n\n  List.prototype._resetRequiredWindows = function () {\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n  };\n  /**\n   * Debounced method to asynchronously update the visible region on a scroll event.\n   */\n\n\n  List.prototype._onAsyncScroll = function () {\n    this._updateRenderRects(this.props, this.state); // Only update pages when the visible rect falls outside of the materialized rect.\n\n\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect, this._materializedRect)) {\n      this.setState(this._updatePages(this.props, this.state));\n    } else {// console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n    }\n  };\n  /**\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\n   * either, we increase the amount we render and re-evaluate.\n   */\n\n\n  List.prototype._onAsyncIdle = function () {\n    var _a = this.props,\n        renderedWindowsAhead = _a.renderedWindowsAhead,\n        renderedWindowsBehind = _a.renderedWindowsBehind;\n\n    var _b = this,\n        requiredWindowsAhead = _b._requiredWindowsAhead,\n        requiredWindowsBehind = _b._requiredWindowsBehind;\n\n    var windowsAhead = Math.min(renderedWindowsAhead, requiredWindowsAhead + 1);\n    var windowsBehind = Math.min(renderedWindowsBehind, requiredWindowsBehind + 1);\n\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n      // console.log('idling', windowsBehind, windowsAhead);\n      this._requiredWindowsAhead = windowsAhead;\n      this._requiredWindowsBehind = windowsBehind;\n\n      this._updateRenderRects(this.props, this.state);\n\n      this.setState(this._updatePages(this.props, this.state));\n    }\n\n    if (renderedWindowsAhead > windowsAhead || renderedWindowsBehind > windowsBehind) {\n      // Async increment on next tick.\n      this._onAsyncIdle();\n    }\n  };\n  /**\n   * Function to call when the list is done scrolling.\n   * This function is debounced.\n   */\n\n\n  List.prototype._onScrollingDone = function () {\n    if (!this.props.ignoreScrollingState) {\n      this.setState({\n        isScrolling: false\n      });\n    }\n  };\n\n  List.prototype._onAsyncResize = function () {\n    this.forceUpdate();\n  };\n\n  List.prototype._updatePages = function (nextProps, previousState) {\n    // console.log('updating pages');\n    if (!this._requiredRect) {\n      this._updateRenderRects(nextProps, previousState);\n    }\n\n    var newListState = this._buildPages(nextProps, previousState);\n\n    var oldListPages = previousState.pages;\n\n    this._notifyPageChanges(oldListPages, newListState.pages, this.props);\n\n    return __assign(__assign(__assign({}, previousState), newListState), {\n      pagesVersion: {}\n    });\n  };\n  /**\n   * Notify consumers that the rendered pages have changed\n   * @param oldPages - The old pages\n   * @param newPages - The new pages\n   * @param props - The props to use\n   */\n\n\n  List.prototype._notifyPageChanges = function (oldPages, newPages, props) {\n    var onPageAdded = props.onPageAdded,\n        onPageRemoved = props.onPageRemoved;\n\n    if (onPageAdded || onPageRemoved) {\n      var renderedIndexes = {};\n\n      for (var _i = 0, oldPages_1 = oldPages; _i < oldPages_1.length; _i++) {\n        var page = oldPages_1[_i];\n\n        if (page.items) {\n          renderedIndexes[page.startIndex] = page;\n        }\n      }\n\n      for (var _a = 0, newPages_1 = newPages; _a < newPages_1.length; _a++) {\n        var page = newPages_1[_a];\n\n        if (page.items) {\n          if (!renderedIndexes[page.startIndex]) {\n            this._onPageAdded(page);\n          } else {\n            delete renderedIndexes[page.startIndex];\n          }\n        }\n      }\n\n      for (var index in renderedIndexes) {\n        if (renderedIndexes.hasOwnProperty(index)) {\n          this._onPageRemoved(renderedIndexes[index]);\n        }\n      }\n    }\n  };\n\n  List.prototype._updatePageMeasurements = function (pages) {\n    var heightChanged = false; // when not in virtualize mode, we render all the items without page measurement\n\n    if (!this._shouldVirtualize()) {\n      return heightChanged;\n    }\n\n    for (var i = 0; i < pages.length; i++) {\n      var page = pages[i];\n\n      if (page.items) {\n        heightChanged = this._measurePage(page) || heightChanged;\n      }\n    }\n\n    return heightChanged;\n  };\n  /**\n   * Given a page, measure its dimensions, update cache.\n   * @returns True if the height has changed.\n   */\n\n\n  List.prototype._measurePage = function (page) {\n    var hasChangedHeight = false;\n    var pageElement = this._pageRefs[page.key];\n    var cachedHeight = this._cachedPageHeights[page.startIndex]; // console.log('   * measure attempt', page.startIndex, cachedHeight);\n\n    if (pageElement && this._shouldVirtualize() && (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)) {\n      var newClientRect = {\n        width: pageElement.clientWidth,\n        height: pageElement.clientHeight\n      };\n\n      if (newClientRect.height || newClientRect.width) {\n        hasChangedHeight = page.height !== newClientRect.height; // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n\n        page.height = newClientRect.height;\n        this._cachedPageHeights[page.startIndex] = {\n          height: newClientRect.height,\n          measureVersion: this._measureVersion\n        };\n        this._estimatedPageHeight = Math.round((this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1));\n        this._totalEstimates++;\n      }\n    }\n\n    return hasChangedHeight;\n  };\n  /** Called when a page has been added to the DOM. */\n\n\n  List.prototype._onPageAdded = function (page) {\n    var onPageAdded = this.props.onPageAdded; // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageAdded) {\n      onPageAdded(page);\n    }\n  };\n  /** Called when a page has been removed from the DOM. */\n\n\n  List.prototype._onPageRemoved = function (page) {\n    var onPageRemoved = this.props.onPageRemoved; // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageRemoved) {\n      onPageRemoved(page);\n    }\n  };\n  /** Build up the pages that should be rendered. */\n\n\n  List.prototype._buildPages = function (props, state) {\n    var renderCount = props.renderCount;\n    var items = props.items,\n        startIndex = props.startIndex,\n        getPageHeight = props.getPageHeight;\n    renderCount = this._getRenderCount(props);\n\n    var materializedRect = __assign({}, EMPTY_RECT);\n\n    var pages = [];\n    var itemsPerPage = 1;\n    var pageTop = 0;\n    var currentSpacer = null;\n    var focusedIndex = this._focusedIndex;\n    var endIndex = startIndex + renderCount;\n\n    var shouldVirtualize = this._shouldVirtualize(props); // First render is very important to track; when we render cells, we have no idea of estimated page height.\n    // So we should default to rendering only the first page so that we can get information.\n    // However if the user provides a measure function, let's just assume they know the right heights.\n\n\n    var isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\n    var allowedRect = this._allowedRect;\n\n    var _loop_1 = function (itemIndex) {\n      var pageSpecification = this_1._getPageSpecification(itemIndex, allowedRect);\n\n      var pageHeight = pageSpecification.height;\n      var pageData = pageSpecification.data;\n      var key = pageSpecification.key;\n      itemsPerPage = pageSpecification.itemCount;\n      var pageBottom = pageTop + pageHeight - 1;\n      var isPageRendered = findIndex(state.pages, function (page) {\n        return !!page.items && page.startIndex === itemIndex;\n      }) > -1;\n      var isPageInAllowedRange = !allowedRect || pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom;\n      var isPageInRequiredRange = !this_1._requiredRect || pageBottom >= this_1._requiredRect.top && pageTop <= this_1._requiredRect.bottom;\n      var isPageVisible = !isFirstRender && (isPageInRequiredRange || isPageInAllowedRange && isPageRendered) || !shouldVirtualize;\n      var isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;\n      var isFirstPage = itemIndex === startIndex; // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +\n      // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n      // Only render whats visible, focused, or first page,\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\n\n      if (isPageVisible || isPageFocused || isFirstPage) {\n        if (currentSpacer) {\n          pages.push(currentSpacer);\n          currentSpacer = null;\n        }\n\n        var itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n\n        var newPage = this_1._createPage(key, items.slice(itemIndex, itemIndex + itemsInPage), itemIndex, undefined, undefined, pageData);\n\n        newPage.top = pageTop;\n        newPage.height = pageHeight;\n\n        if (this_1._visibleRect && this_1._visibleRect.bottom) {\n          newPage.isVisible = pageBottom >= this_1._visibleRect.top && pageTop <= this_1._visibleRect.bottom;\n        }\n\n        pages.push(newPage);\n\n        if (isPageInRequiredRange && this_1._allowedRect) {\n          _mergeRect(materializedRect, {\n            top: pageTop,\n            bottom: pageBottom,\n            height: pageHeight,\n            left: allowedRect.left,\n            right: allowedRect.right,\n            width: allowedRect.width\n          });\n        }\n      } else {\n        if (!currentSpacer) {\n          currentSpacer = this_1._createPage(SPACER_KEY_PREFIX + itemIndex, undefined, itemIndex, 0, undefined, pageData, true\n          /*isSpacer*/\n          );\n        }\n\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n        currentSpacer.itemCount += itemsPerPage;\n      }\n\n      pageTop += pageBottom - pageTop + 1; // in virtualized mode, we render need to render first page then break and measure,\n      // otherwise, we render all items without measurement to make rendering fast\n\n      if (isFirstRender && shouldVirtualize) {\n        return \"break\";\n      }\n    };\n\n    var this_1 = this;\n\n    for (var itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      var state_1 = _loop_1(itemIndex);\n\n      if (state_1 === \"break\") break;\n    }\n\n    if (currentSpacer) {\n      currentSpacer.key = SPACER_KEY_PREFIX + 'end';\n      pages.push(currentSpacer);\n    }\n\n    this._materializedRect = materializedRect; // console.log('materialized: ', materializedRect);\n\n    return __assign(__assign({}, state), {\n      pages: pages,\n      measureVersion: this._measureVersion\n    });\n  };\n\n  List.prototype._getPageSpecification = function (itemIndex, visibleRect) {\n    var getPageSpecification = this.props.getPageSpecification;\n\n    if (getPageSpecification) {\n      var pageData = getPageSpecification(itemIndex, visibleRect);\n      var _a = pageData.itemCount,\n          itemCount = _a === void 0 ? this._getItemCountForPage(itemIndex, visibleRect) : _a;\n      var _b = pageData.height,\n          height = _b === void 0 ? this._getPageHeight(itemIndex, visibleRect, itemCount) : _b;\n      return {\n        itemCount: itemCount,\n        height: height,\n        data: pageData.data,\n        key: pageData.key\n      };\n    } else {\n      var itemCount = this._getItemCountForPage(itemIndex, visibleRect);\n\n      return {\n        itemCount: itemCount,\n        height: this._getPageHeight(itemIndex, visibleRect, itemCount)\n      };\n    }\n  };\n  /**\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n   * cached height, or estimated page height, or default page height.\n   */\n\n\n  List.prototype._getPageHeight = function (itemIndex, visibleRect, itemsPerPage) {\n    if (this.props.getPageHeight) {\n      return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);\n    } else {\n      var cachedHeight = this._cachedPageHeights[itemIndex];\n      return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;\n    }\n  };\n\n  List.prototype._getItemCountForPage = function (itemIndex, visibileRect) {\n    var itemsPerPage = this.props.getItemCountForPage ? this.props.getItemCountForPage(itemIndex, visibileRect) : DEFAULT_ITEMS_PER_PAGE;\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n  };\n\n  List.prototype._createPage = function (pageKey, items, startIndex, count, style, data, isSpacer) {\n    if (startIndex === void 0) {\n      startIndex = -1;\n    }\n\n    if (count === void 0) {\n      count = items ? items.length : 0;\n    }\n\n    if (style === void 0) {\n      style = {};\n    }\n\n    pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;\n    var cachedPage = this._pageCache[pageKey];\n\n    if (cachedPage && cachedPage.page) {\n      return cachedPage.page;\n    }\n\n    return {\n      key: pageKey,\n      startIndex: startIndex,\n      itemCount: count,\n      items: items,\n      style: style,\n      top: 0,\n      height: 0,\n      data: data,\n      isSpacer: isSpacer || false\n    };\n  };\n\n  List.prototype._getRenderCount = function (props) {\n    var _a = props || this.props,\n        items = _a.items,\n        startIndex = _a.startIndex,\n        renderCount = _a.renderCount;\n\n    return renderCount === undefined ? items ? items.length - startIndex : 0 : renderCount;\n  };\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n\n\n  List.prototype._updateRenderRects = function (props, state, forceUpdate) {\n    var renderedWindowsAhead = props.renderedWindowsAhead,\n        renderedWindowsBehind = props.renderedWindowsBehind;\n    var pages = state.pages; // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\n\n    if (!this._shouldVirtualize(props)) {\n      return;\n    }\n\n    var surfaceRect = this._surfaceRect || __assign({}, EMPTY_RECT);\n\n    var scrollHeight = this._scrollElement && this._scrollElement.scrollHeight;\n    var scrollTop = this._scrollElement ? this._scrollElement.scrollTop : 0; // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n    // This needs to be called to recalculate when new pages should be loaded.\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\n\n    if (this._surface.current && (forceUpdate || !pages || !this._surfaceRect || !scrollHeight || scrollHeight !== this._scrollHeight || Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)) {\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);\n      this._scrollTop = scrollTop;\n    } // If the scroll height has changed, something in the container likely resized and\n    // we should redo the page heights incase their content resized.\n\n\n    if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {\n      this._measureVersion++;\n    }\n\n    this._scrollHeight = scrollHeight; // If the surface is above the container top or below the container bottom, or if this is not the first\n    // render return empty rect.\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n    // used to calculate the width of the list items.\n\n    var visibleTop = Math.max(0, -surfaceRect.top);\n    var win = getWindow(this._root.current);\n    var visibleRect = {\n      top: visibleTop,\n      left: surfaceRect.left,\n      bottom: visibleTop + win.innerHeight,\n      right: surfaceRect.right,\n      width: surfaceRect.width,\n      height: win.innerHeight\n    }; // The required/allowed rects are adjusted versions of the visible rect.\n\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind, renderedWindowsAhead); // store the visible rect for later use.\n\n    this._visibleRect = visibleRect;\n  };\n\n  List.defaultProps = {\n    startIndex: 0,\n    onRenderCell: function (item, index, containsFocus) {\n      return React.createElement(React.Fragment, null, item && item.name || '');\n    },\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND\n  };\n  return List;\n}(React.Component);\n\nexport { List };\n\nfunction _expandRect(rect, pagesBefore, pagesAfter) {\n  var top = rect.top - pagesBefore * rect.height;\n  var height = rect.height + (pagesBefore + pagesAfter) * rect.height;\n  return {\n    top: top,\n    bottom: top + height,\n    height: height,\n    left: rect.left,\n    right: rect.right,\n    width: rect.width\n  };\n}\n\nfunction _isContainedWithin(innerRect, outerRect) {\n  return innerRect.top >= outerRect.top && innerRect.left >= outerRect.left && innerRect.bottom <= outerRect.bottom && innerRect.right <= outerRect.right;\n}\n\nfunction _mergeRect(targetRect, newRect) {\n  targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;\n  targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;\n  targetRect.bottom = newRect.bottom > targetRect.bottom || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;\n  targetRect.right = newRect.right > targetRect.right || targetRect.right === -1 ? newRect.right : targetRect.right;\n  targetRect.width = targetRect.right - targetRect.left + 1;\n  targetRect.height = targetRect.bottom - targetRect.top + 1;\n  return targetRect;\n}","map":{"version":3,"sources":["components/List/List.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  IRectangle,\n  IRenderFunction,\n  css,\n  divProperties,\n  findIndex,\n  findScrollableParent,\n  getNativeProps,\n  getParent,\n  getWindow,\n  initializeComponentRef,\n} from '../../Utilities';\nimport {\n  IList,\n  IListProps,\n  IPage,\n  IPageProps,\n  ScrollToMode,\n  IListOnRenderSurfaceProps,\n  IListOnRenderRootProps,\n} from './List.types';\nimport { composeRenderFunction } from '../../Utilities';\n\nconst RESIZE_DELAY = 16;\nconst MIN_SCROLL_UPDATE_DELAY = 100;\nconst MAX_SCROLL_UPDATE_DELAY = 500;\nconst IDLE_DEBOUNCE_DELAY = 200;\n// The amount of time to wait before declaring that the list isn't scrolling\nconst DONE_SCROLLING_WAIT = 500;\nconst DEFAULT_ITEMS_PER_PAGE = 10;\nconst DEFAULT_PAGE_HEIGHT = 30;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst PAGE_KEY_PREFIX = 'page-';\nconst SPACER_KEY_PREFIX = 'spacer-';\n\nexport interface IListState<T = any> {\n  pages?: IPage<T>[];\n\n  /** The last versionstamp for  */\n  measureVersion?: number;\n  isScrolling?: boolean;\n  getDerivedStateFromProps(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T>;\n\n  pagesVersion?: {};\n}\n\ninterface IPageCacheItem<T> {\n  page: IPage<T>;\n  pageElement?: JSX.Element;\n}\n\ninterface IPageCache<T> {\n  [key: string]: IPageCacheItem<T>;\n}\n\nconst EMPTY_RECT = {\n  top: -1,\n  bottom: -1,\n  left: -1,\n  right: -1,\n  width: 0,\n  height: 0,\n};\n\n// Naming expensive measures so that they're named in profiles.\nconst _measurePageRect = (element: HTMLElement) => element.getBoundingClientRect();\nconst _measureSurfaceRect = _measurePageRect;\nconst _measureScrollRect = _measurePageRect;\n\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback\n * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if\n * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.\n * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\nexport class List<T = any> extends React.Component<IListProps<T>, IListState<T>> implements IList {\n  public static defaultProps = {\n    startIndex: 0,\n    onRenderCell: (item: any, index: number, containsFocus: boolean) => <>{(item && item.name) || ''}</>,\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND,\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _surface = React.createRef<HTMLDivElement>();\n  private _pageRefs: Record<string, unknown> = {};\n  private _async: Async;\n  private _events: EventGroup;\n  private _estimatedPageHeight: number;\n  private _totalEstimates: number;\n  private _cachedPageHeights: {\n    [key: string]: {\n      height: number;\n      measureVersion: number;\n    };\n  };\n  private _focusedIndex: number;\n  private _scrollElement: HTMLElement;\n  private _hasCompletedFirstRender: boolean;\n\n  // surface rect relative to window\n  private _surfaceRect: IRectangle | undefined;\n\n  // The visible rect that we're required to render given the current list state.\n  private _requiredRect: IRectangle | null;\n\n  // The visible rect that we're allowed to keep rendered. Pages outside of this rect will be removed.\n  private _allowedRect: IRectangle;\n\n  // The rect that is visible to the user\n  private _visibleRect: IRectangle | undefined;\n\n  // materialized rect around visible items, relative to surface\n  private _materializedRect: IRectangle | null;\n\n  private _requiredWindowsAhead: number;\n  private _requiredWindowsBehind: number;\n\n  private _measureVersion: number;\n  private _scrollHeight: number;\n  private _scrollTop: number;\n  private _pageCache: IPageCache<T>;\n\n  public static getDerivedStateFromProps<T = any>(\n    nextProps: IListProps<T>,\n    previousState: IListState<T>,\n  ): IListState<T> {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IListProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      pages: [],\n      isScrolling: false,\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    this._estimatedPageHeight = 0;\n    this._totalEstimates = 0;\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n\n    // Track the measure version for everything.\n    this._measureVersion = 0;\n\n    // Ensure that scrolls are lazy updated.\n    this._onAsyncScroll = this._async.debounce(this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {\n      leading: false,\n      maxWait: MAX_SCROLL_UPDATE_DELAY,\n    });\n\n    this._onAsyncIdle = this._async.debounce(this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {\n      leading: false,\n    });\n\n    this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n      leading: false,\n    });\n\n    this._onScrollingDone = this._async.debounce(this._onScrollingDone, DONE_SCROLLING_WAIT, {\n      leading: false,\n    });\n\n    this._cachedPageHeights = {};\n    this._estimatedPageHeight = 0;\n    this._focusedIndex = -1;\n    this._pageCache = {};\n  }\n\n  public get pageRefs(): Readonly<Record<string, unknown>> {\n    return this._pageRefs;\n  }\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\n   */\n  public scrollToIndex(\n    index: number,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode: ScrollToMode = ScrollToMode.auto,\n  ): void {\n    const startIndex = this.props.startIndex as number;\n    const renderCount = this._getRenderCount();\n    const endIndex = startIndex + renderCount;\n\n    const allowedRect = this._allowedRect;\n\n    let scrollTop = 0;\n\n    let itemsPerPage = 1;\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n\n      const pageHeight = pageSpecification.height;\n      itemsPerPage = pageSpecification.itemCount;\n\n      const requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;\n      if (requestedIndexIsInPage) {\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in\n        // just the given item, otherwise we'll only bring the page into view\n        if (measureItem && this._scrollElement) {\n          const scrollRect = _measureScrollRect(this._scrollElement);\n          const scrollWindow = {\n            top: this._scrollElement.scrollTop,\n            bottom: this._scrollElement.scrollTop + scrollRect.height,\n          };\n\n          // Adjust for actual item position within page\n          const itemPositionWithinPage = index - itemIndex;\n          for (let itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\n          }\n          const scrollBottom = scrollTop + measureItem(index);\n\n          // If scrollToMode is set to something other than auto, we always want to\n          // scroll the item into a specific position on the page.\n          switch (scrollToMode) {\n            case ScrollToMode.top:\n              this._scrollElement.scrollTop = scrollTop;\n              return;\n            case ScrollToMode.bottom:\n              this._scrollElement.scrollTop = scrollBottom - scrollRect.height;\n              return;\n            case ScrollToMode.center:\n              this._scrollElement.scrollTop = (scrollTop + scrollBottom - scrollRect.height) / 2;\n              return;\n            case ScrollToMode.auto:\n            default:\n              break;\n          }\n\n          const itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\n          if (itemIsFullyVisible) {\n            // Item is already visible, do nothing.\n            return;\n          }\n\n          const itemIsPartiallyAbove = scrollTop < scrollWindow.top;\n          const itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\n\n          if (itemIsPartiallyAbove) {\n            //  We will just scroll to 'scrollTop'\n            //  .------.   - scrollTop\n            //  |Item  |\n            //  | .----|-. - scrollWindow.top\n            //  '------' |\n            //    |      |\n            //    '------'\n          } else if (itemIsPartiallyBelow) {\n            //  Adjust scrollTop position to just bring in the element\n            // .------.  - scrollTop\n            // |      |\n            // | .------.\n            // '-|----' | - scrollWindow.bottom\n            //   | Item |\n            //   '------' - scrollBottom\n            scrollTop = scrollBottom - scrollRect.height;\n          }\n        }\n\n        this._scrollElement.scrollTop = scrollTop;\n        return;\n      }\n\n      scrollTop += pageHeight;\n    }\n  }\n\n  public getStartItemIndexInView(measureItem?: (itemIndex: number) => number): number {\n    const pages = this.state.pages || [];\n    for (const page of pages) {\n      const isPageVisible =\n        !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;\n      if (isPageVisible) {\n        if (!measureItem) {\n          const rowHeight = Math.floor(page.height / page.itemCount);\n          return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);\n        } else {\n          let totalRowHeight = 0;\n          for (let itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {\n            const rowHeight = measureItem(itemIndex);\n            if (\n              page.top + totalRowHeight <= this._scrollTop &&\n              this._scrollTop < page.top + totalRowHeight + rowHeight\n            ) {\n              return itemIndex;\n            } else {\n              totalRowHeight += rowHeight;\n            }\n          }\n        }\n      }\n    }\n    return 0;\n  }\n\n  public componentDidMount(): void {\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n    this._scrollElement = findScrollableParent(this._root.current) as HTMLElement;\n\n    this._events.on(window, 'resize', this._onAsyncResize);\n    if (this._root.current) {\n      this._events.on(this._root.current, 'focus', this._onFocus, true);\n    }\n    if (this._scrollElement) {\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IListProps, previousState: IListState<T>): void {\n    const finalProps = this.props;\n    const finalState = this.state;\n\n    if (this.state.pagesVersion !== previousState.pagesVersion) {\n      // If we weren't provided with the page height, measure the pages\n      if (!finalProps.getPageHeight) {\n        // If measured version is invalid since we've updated the DOM\n        const heightsChanged = this._updatePageMeasurements(finalState.pages!);\n\n        // On first render, we should re-measure so that we don't get a visual glitch.\n        if (heightsChanged) {\n          this._materializedRect = null;\n          if (!this._hasCompletedFirstRender) {\n            this._hasCompletedFirstRender = true;\n            this.setState(this._updatePages(finalProps, finalState));\n          } else {\n            this._onAsyncScroll();\n          }\n        } else {\n          // Enqueue an idle bump.\n          this._onAsyncIdle();\n        }\n      } else {\n        // Enqueue an idle bump\n        this._onAsyncIdle();\n      }\n\n      // Notify the caller that rendering the new pages has completed\n      if (finalProps.onPagesUpdated) {\n        finalProps.onPagesUpdated(finalState.pages as IPage<T>[]);\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n\n    delete this._scrollElement;\n  }\n\n  public shouldComponentUpdate(newProps: IListProps<T>, newState: IListState<T>): boolean {\n    const { pages: oldPages } = this.state;\n    const { pages: newPages } = newState;\n    let shouldComponentUpdate = false;\n\n    // Update if the page stops scrolling\n    if (!newState.isScrolling && this.state.isScrolling) {\n      return true;\n    }\n\n    if (newProps.version !== this.props.version) {\n      return true;\n    }\n\n    if (newProps.items === this.props.items && oldPages!.length === newPages!.length) {\n      for (let i = 0; i < oldPages!.length; i++) {\n        const oldPage = oldPages![i];\n        const newPage = newPages![i];\n\n        if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {\n          shouldComponentUpdate = true;\n          break;\n        }\n      }\n    } else {\n      shouldComponentUpdate = true;\n    }\n\n    return shouldComponentUpdate;\n  }\n\n  public forceUpdate(): void {\n    this._invalidatePageCache();\n    // Ensure that when the list is force updated we update the pages first before render.\n    this._updateRenderRects(this.props, this.state, true);\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n\n    super.forceUpdate();\n  }\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  public getTotalListHeight(): number {\n    return this._surfaceRect!.height;\n  }\n\n  public render(): JSX.Element | null {\n    const { className, role = 'list', onRenderSurface, onRenderRoot } = this.props;\n    const { pages = [] } = this.state;\n    const pageElements: JSX.Element[] = [];\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    for (const page of pages) {\n      pageElements.push(this._renderPage(page));\n    }\n\n    const finalOnRenderSurface = onRenderSurface\n      ? composeRenderFunction(onRenderSurface, this._onRenderSurface)\n      : this._onRenderSurface;\n\n    const finalOnRenderRoot = onRenderRoot\n      ? composeRenderFunction(onRenderRoot, this._onRenderRoot)\n      : this._onRenderRoot;\n\n    return finalOnRenderRoot({\n      rootRef: this._root,\n      pages,\n      surfaceElement: finalOnRenderSurface({\n        surfaceRef: this._surface,\n        pages,\n        pageElements,\n        divProps: {\n          role: 'presentation',\n          className: 'ms-List-surface',\n        },\n      }),\n      divProps: {\n        ...divProps,\n        className: css('ms-List', className),\n        role: pageElements.length > 0 ? role : undefined,\n      },\n    });\n  }\n\n  private _getDerivedStateFromProps = (nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> => {\n    if (\n      nextProps.items !== this.props.items ||\n      nextProps.renderCount !== this.props.renderCount ||\n      nextProps.startIndex !== this.props.startIndex ||\n      nextProps.version !== this.props.version\n    ) {\n      // We have received new items so we want to make sure that initially we only render a single window to\n      // fill the currently visible rect, and then later render additional windows.\n      this._resetRequiredWindows();\n      this._requiredRect = null;\n\n      this._measureVersion++;\n      this._invalidatePageCache();\n\n      return this._updatePages(nextProps, previousState);\n    }\n\n    return previousState;\n  };\n\n  private _shouldVirtualize(props: IListProps<T> = this.props): boolean {\n    const { onShouldVirtualize } = props;\n    return !onShouldVirtualize || onShouldVirtualize(props);\n  }\n\n  /**\n   * when props.items change or forceUpdate called, throw away cached pages\n   */\n  private _invalidatePageCache(): void {\n    this._pageCache = {};\n  }\n\n  private _renderPage(page: IPage<T>): JSX.Element {\n    const { usePageCache } = this.props;\n    let cachedPage;\n    // if usePageCache is set and cached page element can be found, just return cached page\n    if (usePageCache) {\n      cachedPage = this._pageCache[page.key];\n      if (cachedPage && cachedPage.pageElement) {\n        return cachedPage.pageElement;\n      }\n    }\n\n    const pageStyle = this._getPageStyle(page);\n\n    const { onRenderPage = this._onRenderPage } = this.props;\n\n    const pageElement = onRenderPage(\n      {\n        page: page,\n        className: 'ms-List-page',\n        key: page.key,\n        ref: (newRef: unknown) => {\n          this._pageRefs[page.key] = newRef;\n        },\n        style: pageStyle,\n        role: 'presentation',\n      },\n      this._onRenderPage,\n    );\n\n    // cache the first page for now since it is re-rendered a lot times unnecessarily.\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\n    if (usePageCache && page.startIndex === 0) {\n      this._pageCache[page.key] = {\n        page: page,\n        pageElement: pageElement,\n      };\n    }\n    return pageElement;\n  }\n\n  private _onRenderRoot = (props: IListOnRenderRootProps<T>): JSX.Element => {\n    const { rootRef, surfaceElement, divProps } = props;\n\n    return (\n      <div ref={rootRef} {...divProps}>\n        {surfaceElement}\n      </div>\n    );\n  };\n\n  private _onRenderSurface = (props: IListOnRenderSurfaceProps<T>): JSX.Element => {\n    const { surfaceRef, pageElements, divProps } = props;\n\n    return (\n      <div ref={surfaceRef} {...divProps}>\n        {pageElements}\n      </div>\n    );\n  };\n\n  /** Generate the style object for the page. */\n  private _getPageStyle(page: IPage<T>): React.StyleHTMLAttributes<HTMLDivElement> {\n    const { getPageStyle } = this.props;\n\n    return {\n      ...(getPageStyle ? getPageStyle(page) : {}),\n      ...(!page.items\n        ? {\n            height: page.height,\n          }\n        : {}),\n    };\n  }\n\n  private _onRenderPage = (pageProps: IPageProps<T>, defaultRender?: IRenderFunction<IPageProps<T>>): any => {\n    const { onRenderCell, role } = this.props;\n\n    const {\n      page: { items = [], startIndex },\n      ...divProps\n    } = pageProps;\n\n    // only assign list item role if no role is assigned\n    const cellRole = role === undefined ? 'listitem' : 'presentation';\n    const cells: React.ReactNode[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n      const index = startIndex + i;\n      const item = items[i];\n\n      let itemKey = this.props.getKey ? this.props.getKey(item, index) : item && (item as any).key;\n\n      if (itemKey === null || itemKey === undefined) {\n        itemKey = index;\n      }\n\n      cells.push(\n        <div\n          role={cellRole}\n          className={'ms-List-cell'}\n          key={itemKey}\n          data-list-index={index}\n          data-automationid=\"ListCell\"\n        >\n          {onRenderCell &&\n            onRenderCell(item, index, !this.props.ignoreScrollingState ? this.state.isScrolling : undefined)}\n        </div>,\n      );\n    }\n\n    return <div {...divProps}>{cells}</div>;\n  };\n\n  /** Track the last item index focused so that we ensure we keep it rendered. */\n  private _onFocus(ev: any): void {\n    let target = ev.target as HTMLElement;\n\n    while (target !== this._surface.current) {\n      const indexString = target.getAttribute('data-list-index');\n\n      if (indexString) {\n        this._focusedIndex = Number(indexString);\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  }\n\n  /**\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n   * we will call onAsyncIdle which will reset it back to it's correct value.\n   */\n  private _onScroll(): void {\n    if (!this.state.isScrolling && !this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: true });\n    }\n    this._resetRequiredWindows();\n    this._onScrollingDone();\n  }\n\n  private _resetRequiredWindows(): void {\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n  }\n\n  /**\n   * Debounced method to asynchronously update the visible region on a scroll event.\n   */\n  private _onAsyncScroll(): void {\n    this._updateRenderRects(this.props, this.state);\n\n    // Only update pages when the visible rect falls outside of the materialized rect.\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect as IRectangle, this._materializedRect)) {\n      this.setState(this._updatePages(this.props, this.state));\n    } else {\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n    }\n  }\n\n  /**\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\n   * either, we increase the amount we render and re-evaluate.\n   */\n  private _onAsyncIdle(): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = this.props;\n    const { _requiredWindowsAhead: requiredWindowsAhead, _requiredWindowsBehind: requiredWindowsBehind } = this;\n    const windowsAhead = Math.min(renderedWindowsAhead as number, requiredWindowsAhead + 1);\n    const windowsBehind = Math.min(renderedWindowsBehind as number, requiredWindowsBehind + 1);\n\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n      // console.log('idling', windowsBehind, windowsAhead);\n\n      this._requiredWindowsAhead = windowsAhead;\n      this._requiredWindowsBehind = windowsBehind;\n      this._updateRenderRects(this.props, this.state);\n      this.setState(this._updatePages(this.props, this.state));\n    }\n\n    if (renderedWindowsAhead! > windowsAhead || renderedWindowsBehind! > windowsBehind) {\n      // Async increment on next tick.\n      this._onAsyncIdle();\n    }\n  }\n\n  /**\n   * Function to call when the list is done scrolling.\n   * This function is debounced.\n   */\n  private _onScrollingDone(): void {\n    if (!this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: false });\n    }\n  }\n\n  private _onAsyncResize(): void {\n    this.forceUpdate();\n  }\n\n  private _updatePages(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> {\n    // console.log('updating pages');\n\n    if (!this._requiredRect) {\n      this._updateRenderRects(nextProps, previousState);\n    }\n\n    const newListState = this._buildPages(nextProps, previousState);\n    const oldListPages = previousState.pages!;\n\n    this._notifyPageChanges(oldListPages, newListState.pages!, this.props);\n\n    return {\n      ...previousState,\n      ...newListState,\n      pagesVersion: {},\n    };\n  }\n\n  /**\n   * Notify consumers that the rendered pages have changed\n   * @param oldPages - The old pages\n   * @param newPages - The new pages\n   * @param props - The props to use\n   */\n  private _notifyPageChanges(oldPages: IPage<T>[], newPages: IPage<T>[], props: IListProps<T>): void {\n    const { onPageAdded, onPageRemoved } = props;\n\n    if (onPageAdded || onPageRemoved) {\n      const renderedIndexes: {\n        [index: number]: IPage<T>;\n      } = {};\n\n      for (const page of oldPages) {\n        if (page.items) {\n          renderedIndexes[page.startIndex] = page;\n        }\n      }\n\n      for (const page of newPages) {\n        if (page.items) {\n          if (!renderedIndexes[page.startIndex]) {\n            this._onPageAdded(page);\n          } else {\n            delete renderedIndexes[page.startIndex];\n          }\n        }\n      }\n\n      for (const index in renderedIndexes) {\n        if (renderedIndexes.hasOwnProperty(index)) {\n          this._onPageRemoved(renderedIndexes[index]);\n        }\n      }\n    }\n  }\n\n  private _updatePageMeasurements(pages: IPage<T>[]): boolean {\n    let heightChanged = false;\n\n    // when not in virtualize mode, we render all the items without page measurement\n    if (!this._shouldVirtualize()) {\n      return heightChanged;\n    }\n\n    for (let i = 0; i < pages.length; i++) {\n      const page = pages[i];\n\n      if (page.items) {\n        heightChanged = this._measurePage(page) || heightChanged;\n      }\n    }\n\n    return heightChanged;\n  }\n\n  /**\n   * Given a page, measure its dimensions, update cache.\n   * @returns True if the height has changed.\n   */\n  private _measurePage(page: IPage<T>): boolean {\n    let hasChangedHeight = false;\n    const pageElement = this._pageRefs[page.key] as HTMLElement;\n    const cachedHeight = this._cachedPageHeights[page.startIndex];\n\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\n\n    if (\n      pageElement &&\n      this._shouldVirtualize() &&\n      (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)\n    ) {\n      const newClientRect = {\n        width: pageElement.clientWidth,\n        height: pageElement.clientHeight,\n      };\n\n      if (newClientRect.height || newClientRect.width) {\n        hasChangedHeight = page.height !== newClientRect.height;\n\n        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n\n        page.height = newClientRect.height;\n\n        this._cachedPageHeights[page.startIndex] = {\n          height: newClientRect.height,\n          measureVersion: this._measureVersion,\n        };\n\n        this._estimatedPageHeight = Math.round(\n          (this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1),\n        );\n\n        this._totalEstimates++;\n      }\n    }\n\n    return hasChangedHeight;\n  }\n\n  /** Called when a page has been added to the DOM. */\n  private _onPageAdded(page: IPage<T>): void {\n    const { onPageAdded } = this.props;\n\n    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageAdded) {\n      onPageAdded(page);\n    }\n  }\n\n  /** Called when a page has been removed from the DOM. */\n  private _onPageRemoved(page: IPage<T>): void {\n    const { onPageRemoved } = this.props;\n\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageRemoved) {\n      onPageRemoved(page);\n    }\n  }\n\n  /** Build up the pages that should be rendered. */\n  private _buildPages(props: IListProps<T>, state: IListState<T>): IListState<T> {\n    let { renderCount } = props;\n    const { items, startIndex, getPageHeight } = props;\n\n    renderCount = this._getRenderCount(props);\n\n    const materializedRect = { ...EMPTY_RECT };\n    const pages: IPage<T>[] = [];\n\n    let itemsPerPage = 1;\n    let pageTop = 0;\n    let currentSpacer = null;\n    const focusedIndex = this._focusedIndex;\n    const endIndex = startIndex! + renderCount;\n    const shouldVirtualize = this._shouldVirtualize(props);\n\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\n    // So we should default to rendering only the first page so that we can get information.\n    // However if the user provides a measure function, let's just assume they know the right heights.\n    const isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\n\n    const allowedRect = this._allowedRect;\n\n    for (let itemIndex = startIndex!; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n      const pageHeight = pageSpecification.height;\n      const pageData = pageSpecification.data;\n      const key = pageSpecification.key;\n\n      itemsPerPage = pageSpecification.itemCount;\n\n      const pageBottom = pageTop + pageHeight - 1;\n\n      const isPageRendered =\n        findIndex(state.pages as IPage<T>[], (page: IPage<T>) => !!page.items && page.startIndex === itemIndex) > -1;\n      const isPageInAllowedRange = !allowedRect || (pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom!);\n      const isPageInRequiredRange =\n        !this._requiredRect || (pageBottom >= this._requiredRect.top && pageTop <= this._requiredRect.bottom!);\n      const isPageVisible =\n        (!isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered))) || !shouldVirtualize;\n      const isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;\n      const isFirstPage = itemIndex === startIndex;\n\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +\n      // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n\n      // Only render whats visible, focused, or first page,\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\n      if (isPageVisible || isPageFocused || isFirstPage) {\n        if (currentSpacer) {\n          pages.push(currentSpacer);\n          currentSpacer = null;\n        }\n\n        const itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n        const newPage = this._createPage(\n          key,\n          items!.slice(itemIndex, itemIndex + itemsInPage),\n          itemIndex,\n          undefined,\n          undefined,\n          pageData,\n        );\n\n        newPage.top = pageTop;\n        newPage.height = pageHeight;\n        if (this._visibleRect && this._visibleRect.bottom) {\n          newPage.isVisible = pageBottom >= this._visibleRect.top && pageTop <= this._visibleRect.bottom;\n        }\n\n        pages.push(newPage);\n\n        if (isPageInRequiredRange && this._allowedRect) {\n          _mergeRect(materializedRect, {\n            top: pageTop,\n            bottom: pageBottom,\n            height: pageHeight,\n            left: allowedRect.left,\n            right: allowedRect.right,\n            width: allowedRect.width,\n          });\n        }\n      } else {\n        if (!currentSpacer) {\n          currentSpacer = this._createPage(\n            SPACER_KEY_PREFIX + itemIndex,\n            undefined,\n            itemIndex,\n            0,\n            undefined,\n            pageData,\n            true /*isSpacer*/,\n          );\n        }\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n        currentSpacer.itemCount += itemsPerPage;\n      }\n      pageTop += pageBottom - pageTop + 1;\n\n      // in virtualized mode, we render need to render first page then break and measure,\n      // otherwise, we render all items without measurement to make rendering fast\n      if (isFirstRender && shouldVirtualize) {\n        break;\n      }\n    }\n\n    if (currentSpacer) {\n      currentSpacer.key = SPACER_KEY_PREFIX + 'end';\n      pages.push(currentSpacer);\n    }\n\n    this._materializedRect = materializedRect;\n\n    // console.log('materialized: ', materializedRect);\n    return {\n      ...state,\n      pages: pages,\n      measureVersion: this._measureVersion,\n    };\n  }\n\n  private _getPageSpecification(\n    itemIndex: number,\n    visibleRect: IRectangle,\n  ): {\n    // These return values are now no longer optional.\n    itemCount: number;\n    height: number;\n    data?: any;\n    key?: string;\n  } {\n    const { getPageSpecification } = this.props;\n    if (getPageSpecification) {\n      const pageData = getPageSpecification(itemIndex, visibleRect);\n\n      const { itemCount = this._getItemCountForPage(itemIndex, visibleRect) } = pageData;\n\n      const { height = this._getPageHeight(itemIndex, visibleRect, itemCount) } = pageData;\n\n      return {\n        itemCount: itemCount,\n        height: height,\n        data: pageData.data,\n        key: pageData.key,\n      };\n    } else {\n      const itemCount = this._getItemCountForPage(itemIndex, visibleRect);\n\n      return {\n        itemCount: itemCount,\n        height: this._getPageHeight(itemIndex, visibleRect, itemCount),\n      };\n    }\n  }\n\n  /**\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n   * cached height, or estimated page height, or default page height.\n   */\n  private _getPageHeight(itemIndex: number, visibleRect: IRectangle, itemsPerPage: number): number {\n    if (this.props.getPageHeight) {\n      return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);\n    } else {\n      const cachedHeight = this._cachedPageHeights[itemIndex];\n\n      return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;\n    }\n  }\n\n  private _getItemCountForPage(itemIndex: number, visibileRect: IRectangle): number {\n    const itemsPerPage = this.props.getItemCountForPage\n      ? this.props.getItemCountForPage(itemIndex, visibileRect)\n      : DEFAULT_ITEMS_PER_PAGE;\n\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n  }\n\n  private _createPage(\n    pageKey: string | undefined,\n    items: any[] | undefined,\n    startIndex: number = -1,\n    count: number = items ? items.length : 0,\n    style: React.CSSProperties = {},\n    data?: any,\n    isSpacer?: boolean,\n  ): IPage<T> {\n    pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;\n    const cachedPage = this._pageCache[pageKey];\n    if (cachedPage && cachedPage.page) {\n      return cachedPage.page;\n    }\n\n    return {\n      key: pageKey,\n      startIndex: startIndex,\n      itemCount: count,\n      items: items,\n      style: style,\n      top: 0,\n      height: 0,\n      data: data,\n      isSpacer: isSpacer || false,\n    };\n  }\n\n  private _getRenderCount(props?: IListProps<T>): number {\n    const { items, startIndex, renderCount } = props || this.props;\n\n    return renderCount === undefined ? (items ? items.length - startIndex! : 0) : renderCount;\n  }\n\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n  private _updateRenderRects(props: IListProps<T>, state: IListState<T>, forceUpdate?: boolean): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = props;\n    const { pages } = state;\n    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\n    if (!this._shouldVirtualize(props)) {\n      return;\n    }\n\n    let surfaceRect = this._surfaceRect || { ...EMPTY_RECT };\n    const scrollHeight = this._scrollElement && this._scrollElement.scrollHeight;\n    const scrollTop = this._scrollElement ? this._scrollElement.scrollTop : 0;\n\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n    // This needs to be called to recalculate when new pages should be loaded.\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\n    if (\n      this._surface.current &&\n      (forceUpdate ||\n        !pages ||\n        !this._surfaceRect ||\n        !scrollHeight ||\n        scrollHeight !== this._scrollHeight ||\n        Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)\n    ) {\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);\n      this._scrollTop = scrollTop;\n    }\n\n    // If the scroll height has changed, something in the container likely resized and\n    // we should redo the page heights incase their content resized.\n    if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {\n      this._measureVersion++;\n    }\n\n    this._scrollHeight = scrollHeight;\n\n    // If the surface is above the container top or below the container bottom, or if this is not the first\n    // render return empty rect.\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n    // used to calculate the width of the list items.\n    const visibleTop = Math.max(0, -surfaceRect.top);\n    const win = getWindow(this._root.current);\n    const visibleRect = {\n      top: visibleTop,\n      left: surfaceRect.left,\n      bottom: visibleTop + win!.innerHeight,\n      right: surfaceRect.right,\n      width: surfaceRect.width,\n      height: win!.innerHeight,\n    };\n\n    // The required/allowed rects are adjusted versions of the visible rect.\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind!, renderedWindowsAhead!);\n\n    // store the visible rect for later use.\n    this._visibleRect = visibleRect;\n  }\n}\n\nfunction _expandRect(rect: IRectangle, pagesBefore: number, pagesAfter: number): IRectangle {\n  const top = rect.top - pagesBefore * rect.height;\n  const height = rect.height + (pagesBefore + pagesAfter) * rect.height;\n\n  return {\n    top: top,\n    bottom: top + height,\n    height: height,\n    left: rect.left,\n    right: rect.right,\n    width: rect.width,\n  };\n}\n\nfunction _isContainedWithin(innerRect: IRectangle, outerRect: IRectangle): boolean {\n  return (\n    innerRect.top >= outerRect.top &&\n    innerRect.left >= outerRect.left &&\n    innerRect.bottom! <= outerRect.bottom! &&\n    innerRect.right! <= outerRect.right!\n  );\n}\n\nfunction _mergeRect(targetRect: IRectangle, newRect: IRectangle): IRectangle {\n  targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;\n  targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;\n  targetRect.bottom =\n    newRect.bottom! > targetRect.bottom! || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;\n  targetRect.right = newRect.right! > targetRect.right! || targetRect.right === -1 ? newRect.right : targetRect.right;\n  targetRect.width = targetRect.right! - targetRect.left + 1;\n  targetRect.height = targetRect.bottom! - targetRect.top + 1;\n\n  return targetRect;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}