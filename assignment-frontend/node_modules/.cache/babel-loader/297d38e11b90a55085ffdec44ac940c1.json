{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Customizations, getWindow } from '@uifabric/utilities';\nimport { loadTheme as legacyLoadTheme } from '@microsoft/load-themed-styles';\nimport { createTheme } from '@fluentui/theme/lib/createTheme';\nexport { createTheme } from '@fluentui/theme/lib/createTheme';\n\nvar _theme = createTheme({});\n\nvar _onThemeChangeCallbacks = [];\nexport var ThemeSettingName = 'theme';\nexport function initializeThemeInCustomizations() {\n  var _a;\n\n  var _b, _c;\n\n  if (!Customizations.getSettings([ThemeSettingName]).theme) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var win = getWindow();\n\n    if ((_c = (_b = win) === null || _b === void 0 ? void 0 : _b.FabricConfig) === null || _c === void 0 ? void 0 : _c.theme) {\n      _theme = createTheme(win.FabricConfig.theme);\n    } // Set the default theme.\n\n\n    Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));\n  }\n}\ninitializeThemeInCustomizations();\n/**\n * Gets the theme object\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\n\nexport function getTheme(depComments) {\n  if (depComments === void 0) {\n    depComments = false;\n  }\n\n  if (depComments === true) {\n    _theme = createTheme({}, depComments);\n  }\n\n  return _theme;\n}\n/**\n * Registers a callback that gets called whenever the theme changes.\n * This should only be used when the component cannot automatically get theme changes through its state.\n * This will not register duplicate callbacks.\n */\n\nexport function registerOnThemeChangeCallback(callback) {\n  if (_onThemeChangeCallbacks.indexOf(callback) === -1) {\n    _onThemeChangeCallbacks.push(callback);\n  }\n}\n/**\n * See registerOnThemeChangeCallback().\n * Removes previously registered callbacks.\n */\n\nexport function removeOnThemeChangeCallback(callback) {\n  var i = _onThemeChangeCallbacks.indexOf(callback);\n\n  if (i === -1) {\n    return;\n  }\n\n  _onThemeChangeCallbacks.splice(i, 1);\n}\n/**\n * Applies the theme, while filling in missing slots.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\n\nexport function loadTheme(theme, depComments) {\n  var _a;\n\n  if (depComments === void 0) {\n    depComments = false;\n  }\n\n  _theme = createTheme(theme, depComments); // Invoke the legacy method of theming the page as well.\n\n  legacyLoadTheme(__assign(__assign(__assign(__assign({}, _theme.palette), _theme.semanticColors), _theme.effects), _loadFonts(_theme)));\n  Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));\n\n  _onThemeChangeCallbacks.forEach(function (callback) {\n    try {\n      callback(_theme);\n    } catch (e) {// don't let a bad callback break everything else\n    }\n  });\n\n  return _theme;\n}\n/**\n * Loads font variables into a JSON object.\n * @param theme - The theme object\n */\n\nfunction _loadFonts(theme) {\n  var lines = {};\n\n  for (var _i = 0, _a = Object.keys(theme.fonts); _i < _a.length; _i++) {\n    var fontName = _a[_i];\n    var font = theme.fonts[fontName];\n\n    for (var _b = 0, _c = Object.keys(font); _b < _c.length; _b++) {\n      var propName = _c[_b];\n      var name_1 = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);\n      var value = font[propName];\n\n      if (propName === 'fontSize' && typeof value === 'number') {\n        // if it's a number, convert it to px by default like our theming system does\n        value = value + 'px';\n      }\n\n      lines[name_1] = value;\n    }\n  }\n\n  return lines;\n}","map":{"version":3,"sources":["styles/theme.ts"],"names":[],"mappings":"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","sourcesContent":["import { Customizations, getWindow } from '@uifabric/utilities';\nimport { ITheme, IPartialTheme, IFontStyles } from '../interfaces/index';\nimport { loadTheme as legacyLoadTheme } from '@microsoft/load-themed-styles';\nimport { IRawStyle } from '@uifabric/merge-styles';\nimport { createTheme } from '@fluentui/theme/lib/createTheme';\n\nexport { createTheme } from '@fluentui/theme/lib/createTheme';\n\nlet _theme: ITheme = createTheme({});\nlet _onThemeChangeCallbacks: Array<(theme: ITheme) => void> = [];\n\nexport const ThemeSettingName = 'theme';\n\nexport function initializeThemeInCustomizations(): void {\n  if (!Customizations.getSettings([ThemeSettingName]).theme) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const win: any = getWindow();\n\n    if (win?.FabricConfig?.theme) {\n      _theme = createTheme(win.FabricConfig.theme);\n    }\n\n    // Set the default theme.\n    Customizations.applySettings({ [ThemeSettingName]: _theme });\n  }\n}\n\ninitializeThemeInCustomizations();\n\n/**\n * Gets the theme object\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function getTheme(depComments: boolean = false): ITheme {\n  if (depComments === true) {\n    _theme = createTheme({}, depComments);\n  }\n  return _theme;\n}\n\n/**\n * Registers a callback that gets called whenever the theme changes.\n * This should only be used when the component cannot automatically get theme changes through its state.\n * This will not register duplicate callbacks.\n */\nexport function registerOnThemeChangeCallback(callback: (theme: ITheme) => void): void {\n  if (_onThemeChangeCallbacks.indexOf(callback) === -1) {\n    _onThemeChangeCallbacks.push(callback);\n  }\n}\n\n/**\n * See registerOnThemeChangeCallback().\n * Removes previously registered callbacks.\n */\nexport function removeOnThemeChangeCallback(callback: (theme: ITheme) => void): void {\n  const i = _onThemeChangeCallbacks.indexOf(callback);\n  if (i === -1) {\n    return;\n  }\n\n  _onThemeChangeCallbacks.splice(i, 1);\n}\n\n/**\n * Applies the theme, while filling in missing slots.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function loadTheme(theme: IPartialTheme, depComments: boolean = false): ITheme {\n  _theme = createTheme(theme, depComments);\n\n  // Invoke the legacy method of theming the page as well.\n  legacyLoadTheme({ ..._theme.palette, ..._theme.semanticColors, ..._theme.effects, ..._loadFonts(_theme) });\n\n  Customizations.applySettings({ [ThemeSettingName]: _theme });\n\n  _onThemeChangeCallbacks.forEach((callback: (theme: ITheme) => void) => {\n    try {\n      callback(_theme);\n    } catch (e) {\n      // don't let a bad callback break everything else\n    }\n  });\n\n  return _theme;\n}\n\n/**\n * Loads font variables into a JSON object.\n * @param theme - The theme object\n */\nfunction _loadFonts(theme: ITheme): { [name: string]: string } {\n  const lines: { [key: string]: string } = {};\n\n  for (const fontName of Object.keys(theme.fonts)) {\n    const font: IRawStyle = theme.fonts[fontName as keyof IFontStyles];\n\n    for (const propName of Object.keys(font)) {\n      const name: string = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);\n      let value = font[propName as keyof IRawStyle] as string;\n\n      if (propName === 'fontSize' && typeof value === 'number') {\n        // if it's a number, convert it to px by default like our theming system does\n        value = value + 'px';\n      }\n      lines[name] = value;\n    }\n  }\n  return lines;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}