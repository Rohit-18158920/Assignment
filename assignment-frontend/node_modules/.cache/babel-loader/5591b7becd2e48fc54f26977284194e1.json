{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, initializeComponentRef } from '../../../Utilities';\nimport { CommandButton, IconButton } from '../../../Button';\nimport * as stylesImport from './Suggestions.scss';\nvar legacyStyles = stylesImport;\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Pickers}\n */\n\nvar SuggestionsItem =\n/** @class */\nfunction (_super) {\n  __extends(SuggestionsItem, _super);\n\n  function SuggestionsItem(props) {\n    var _this = _super.call(this, props) || this;\n\n    initializeComponentRef(_this);\n    return _this;\n  }\n\n  SuggestionsItem.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        suggestionModel = _b.suggestionModel,\n        RenderSuggestion = _b.RenderSuggestion,\n        onClick = _b.onClick,\n        className = _b.className,\n        id = _b.id,\n        onRemoveItem = _b.onRemoveItem,\n        isSelectedOverride = _b.isSelectedOverride,\n        removeButtonAriaLabel = _b.removeButtonAriaLabel,\n        styles = _b.styles,\n        theme = _b.theme; // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from SuggestionsItem class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in Suggestions when the typed SuggestionsItem class is ready to be rendered. If the\n    // check passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n\n    var classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      suggested: suggestionModel.selected || isSelectedOverride\n    }) : {\n      root: css('ms-Suggestions-item', legacyStyles.suggestionsItem, (_a = {}, _a['is-suggested ' + legacyStyles.suggestionsItemIsSuggested] = suggestionModel.selected || isSelectedOverride, _a), className),\n      itemButton: css('ms-Suggestions-itemButton', legacyStyles.itemButton),\n      closeButton: css('ms-Suggestions-closeButton', legacyStyles.closeButton)\n    };\n    return React.createElement(\"div\", {\n      className: classNames.root,\n      role: \"presentation\"\n    }, React.createElement(CommandButton, {\n      onClick: onClick,\n      className: classNames.itemButton,\n      id: id,\n      \"aria-selected\": suggestionModel.selected,\n      role: \"option\",\n      \"aria-label\": suggestionModel.ariaLabel\n    }, RenderSuggestion(suggestionModel.item, this.props)), this.props.showRemoveButton ? React.createElement(IconButton, {\n      iconProps: {\n        iconName: 'Cancel',\n        styles: {\n          root: {\n            fontSize: '12px'\n          }\n        }\n      },\n      title: removeButtonAriaLabel,\n      ariaLabel: removeButtonAriaLabel,\n      onClick: onRemoveItem,\n      className: classNames.closeButton\n    }) : null);\n  };\n\n  return SuggestionsItem;\n}(React.Component);\n\nexport { SuggestionsItem };","map":{"version":3,"sources":["components/pickers/Suggestions/SuggestionsItem.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { classNamesFunction, css, initializeComponentRef } from '../../../Utilities';\nimport { IProcessedStyleSet } from '../../../Styling';\nimport { CommandButton, IconButton } from '../../../Button';\nimport { ISuggestionItemProps, ISuggestionsItemStyleProps, ISuggestionsItemStyles } from './SuggestionsItem.types';\n\nimport * as stylesImport from './Suggestions.scss';\nconst legacyStyles: any = stylesImport;\n\nconst getClassNames = classNamesFunction<ISuggestionsItemStyleProps, ISuggestionsItemStyles>();\n\n/**\n * {@docCategory Pickers}\n */\nexport class SuggestionsItem<T> extends React.Component<ISuggestionItemProps<T>, {}> {\n  constructor(props: ISuggestionItemProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      suggestionModel,\n      RenderSuggestion,\n      onClick,\n      className,\n      id,\n      onRemoveItem,\n      isSelectedOverride,\n      removeButtonAriaLabel,\n      styles,\n      theme,\n    } = this.props;\n\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from SuggestionsItem class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in Suggestions when the typed SuggestionsItem class is ready to be rendered. If the\n    // check passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    const classNames: Partial<IProcessedStyleSet<ISuggestionsItemStyles>> = styles\n      ? getClassNames(styles, {\n          theme: theme!,\n          className,\n          suggested: suggestionModel.selected || isSelectedOverride,\n        })\n      : {\n          root: css(\n            'ms-Suggestions-item',\n            legacyStyles.suggestionsItem,\n            {\n              ['is-suggested ' + legacyStyles.suggestionsItemIsSuggested]:\n                suggestionModel.selected || isSelectedOverride,\n            },\n            className,\n          ),\n          itemButton: css('ms-Suggestions-itemButton', legacyStyles.itemButton),\n          closeButton: css('ms-Suggestions-closeButton', legacyStyles.closeButton),\n        };\n\n    return (\n      <div className={classNames.root} role=\"presentation\">\n        <CommandButton\n          onClick={onClick}\n          className={classNames.itemButton}\n          id={id}\n          aria-selected={suggestionModel.selected}\n          role=\"option\"\n          aria-label={suggestionModel.ariaLabel}\n        >\n          {RenderSuggestion(suggestionModel.item, this.props)}\n        </CommandButton>\n        {this.props.showRemoveButton ? (\n          <IconButton\n            iconProps={{ iconName: 'Cancel', styles: { root: { fontSize: '12px' } } }}\n            title={removeButtonAriaLabel}\n            ariaLabel={removeButtonAriaLabel}\n            onClick={onRemoveItem}\n            className={classNames.closeButton}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}