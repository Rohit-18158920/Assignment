{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSets - One or more stylesets to be merged (each param can also be falsy).\n */\n\nexport function concatStyleSets() {\n  var styleSets = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    styleSets[_i] = arguments[_i];\n  }\n\n  if (styleSets && styleSets.length === 1 && styleSets[0] && !styleSets[0].subComponentStyles) {\n    return styleSets[0];\n  }\n\n  var mergedSet = {}; // We process sub component styles in two phases. First we collect them, then we combine them into 1 style function.\n\n  var workingSubcomponentStyles = {};\n\n  for (var _a = 0, styleSets_1 = styleSets; _a < styleSets_1.length; _a++) {\n    var currentSet = styleSets_1[_a];\n\n    if (currentSet) {\n      for (var prop in currentSet) {\n        if (currentSet.hasOwnProperty(prop)) {\n          if (prop === 'subComponentStyles' && currentSet.subComponentStyles !== undefined) {\n            // subcomponent styles - style functions or objects\n            var currentComponentStyles = currentSet.subComponentStyles;\n\n            for (var subCompProp in currentComponentStyles) {\n              if (currentComponentStyles.hasOwnProperty(subCompProp)) {\n                if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {\n                  workingSubcomponentStyles[subCompProp].push(currentComponentStyles[subCompProp]);\n                } else {\n                  workingSubcomponentStyles[subCompProp] = [currentComponentStyles[subCompProp]];\n                }\n              }\n            }\n\n            continue;\n          } // the as any casts below is a workaround for ts 2.8.\n          // todo: remove cast to any in ts 2.9.\n\n\n          var mergedValue = mergedSet[prop];\n          var currentValue = currentSet[prop];\n\n          if (mergedValue === undefined) {\n            mergedSet[prop] = currentValue;\n          } else {\n            mergedSet[prop] = __spreadArrays(Array.isArray(mergedValue) ? mergedValue : [mergedValue], Array.isArray(currentValue) ? currentValue : [currentValue]);\n          }\n        }\n      }\n    }\n  }\n\n  if (Object.keys(workingSubcomponentStyles).length > 0) {\n    mergedSet.subComponentStyles = {};\n    var mergedSubStyles = mergedSet.subComponentStyles;\n\n    var _loop_1 = function _loop_1(subCompProp) {\n      if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {\n        var workingSet_1 = workingSubcomponentStyles[subCompProp];\n\n        mergedSubStyles[subCompProp] = function (styleProps) {\n          return concatStyleSets.apply(void 0, workingSet_1.map(function (styleFunctionOrObject) {\n            return typeof styleFunctionOrObject === 'function' ? styleFunctionOrObject(styleProps) : styleFunctionOrObject;\n          }));\n        };\n      }\n    }; // now we process the subcomponent styles if there are any\n\n\n    for (var subCompProp in workingSubcomponentStyles) {\n      _loop_1(subCompProp);\n    }\n  }\n\n  return mergedSet;\n}","map":{"version":3,"sources":["concatStyleSets.ts"],"names":[],"mappings":"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","sourcesContent":["import { IStyleSet, IConcatenatedStyleSet } from './IStyleSet';\nimport { IStyleBase, IStyle } from './IStyle';\nimport { IStyleFunctionOrObject } from './IStyleFunction';\nimport { ObjectOnly } from './ObjectOnly';\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSet - The first style set to be concatenated.\n */\nexport function concatStyleSets<TStyleSet>(\n  styleSet: TStyleSet | false | null | undefined,\n): IConcatenatedStyleSet<ObjectOnly<TStyleSet>>;\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSet1 - The first style set to be concatenated.\n * @param styleSet2 - The second style set to be concatenated.\n */\nexport function concatStyleSets<TStyleSet1, TStyleSet2>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n): IConcatenatedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2>>;\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSet1 - The first style set to be concatenated.\n * @param styleSet2 - The second style set to be concatenated.\n * @param styleSet3 - The third style set to be concatenated.\n */\nexport function concatStyleSets<TStyleSet1, TStyleSet2, TStyleSet3>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n  styleSet3: TStyleSet3 | false | null | undefined,\n): IConcatenatedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3>>;\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSet1 - The first style set to be concatenated.\n * @param styleSet2 - The second style set to be concatenated.\n * @param styleSet3 - The third style set to be concatenated.\n * @param styleSet4 - The fourth style set to be concatenated.\n */\nexport function concatStyleSets<TStyleSet1, TStyleSet2, TStyleSet3, TStyleSet4>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n  styleSet3: TStyleSet3 | false | null | undefined,\n  styleSet4: TStyleSet4 | false | null | undefined,\n): IConcatenatedStyleSet<\n  ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3> & ObjectOnly<TStyleSet4>\n>;\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSet1 - The first style set to be concatenated.\n * @param styleSet2 - The second style set to be concatenated.\n * @param styleSet3 - The third style set to be concatenated.\n * @param styleSet4 - The fourth style set to be concatenated.\n * @param styleSet5 - The fifth set to be concatenated.\n */\nexport function concatStyleSets<TStyleSet1, TStyleSet2, TStyleSet3, TStyleSet4, TStyleSet5>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n  styleSet3: TStyleSet3 | false | null | undefined,\n  styleSet4: TStyleSet4 | false | null | undefined,\n  styleSet5: TStyleSet5 | false | null | undefined,\n): IConcatenatedStyleSet<\n  ObjectOnly<TStyleSet1> &\n    ObjectOnly<TStyleSet2> &\n    ObjectOnly<TStyleSet3> &\n    ObjectOnly<TStyleSet4> &\n    ObjectOnly<TStyleSet5>\n>;\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSet1 - The first style set to be concatenated.\n * @param styleSet2 - The second style set to be concatenated.\n * @param styleSet3 - The third style set to be concatenated.\n * @param styleSet4 - The fourth style set to be concatenated.\n * @param styleSet5 - The fifth set to be concatenated.\n * @param styleSet6 - The sixth set to be concatenated.\n */\nexport function concatStyleSets<TStyleSet1, TStyleSet2, TStyleSet3, TStyleSet4, TStyleSet5, TStyleSet6>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n  styleSet3: TStyleSet3 | false | null | undefined,\n  styleSet4: TStyleSet4 | false | null | undefined,\n  styleSet5: TStyleSet5 | false | null | undefined,\n  styleSet6: TStyleSet6 | false | null | undefined,\n): IConcatenatedStyleSet<\n  ObjectOnly<TStyleSet1> &\n    ObjectOnly<TStyleSet2> &\n    ObjectOnly<TStyleSet3> &\n    ObjectOnly<TStyleSet4> &\n    ObjectOnly<TStyleSet5> &\n    ObjectOnly<TStyleSet6>\n>;\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSets - One or more stylesets to be merged (each param can also be falsy).\n */\nexport function concatStyleSets(...styleSets: (IStyleSet | false | null | undefined)[]): IConcatenatedStyleSet<any>;\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSets - One or more stylesets to be merged (each param can also be falsy).\n */\nexport function concatStyleSets(...styleSets: (IStyleSet | false | null | undefined)[]): IConcatenatedStyleSet<any> {\n  if (styleSets && styleSets.length === 1 && styleSets[0] && !(styleSets[0] as IStyleSet).subComponentStyles) {\n    return styleSets[0] as IConcatenatedStyleSet<any>;\n  }\n\n  const mergedSet: IConcatenatedStyleSet<any> = {};\n\n  // We process sub component styles in two phases. First we collect them, then we combine them into 1 style function.\n  const workingSubcomponentStyles: { [key: string]: Array<IStyleFunctionOrObject<any, any>> } = {};\n\n  for (const currentSet of styleSets) {\n    if (currentSet) {\n      for (const prop in currentSet) {\n        if (currentSet.hasOwnProperty(prop)) {\n          if (prop === 'subComponentStyles' && currentSet.subComponentStyles !== undefined) {\n            // subcomponent styles - style functions or objects\n\n            const currentComponentStyles = currentSet.subComponentStyles;\n            for (const subCompProp in currentComponentStyles) {\n              if (currentComponentStyles.hasOwnProperty(subCompProp)) {\n                if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {\n                  workingSubcomponentStyles[subCompProp].push(currentComponentStyles[subCompProp]);\n                } else {\n                  workingSubcomponentStyles[subCompProp] = [currentComponentStyles[subCompProp]];\n                }\n              }\n            }\n\n            continue;\n          }\n\n          // the as any casts below is a workaround for ts 2.8.\n          // todo: remove cast to any in ts 2.9.\n          const mergedValue: IStyle = (mergedSet as any)[prop];\n          const currentValue = (currentSet as any)[prop];\n\n          if (mergedValue === undefined) {\n            (mergedSet as any)[prop] = currentValue;\n          } else {\n            (mergedSet as any)[prop] = [\n              // https://github.com/Microsoft/TypeScript/issues/25474\n              ...(Array.isArray(mergedValue) ? mergedValue : [mergedValue as IStyleBase]),\n              ...(Array.isArray(currentValue) ? currentValue : [currentValue as IStyleBase]),\n            ];\n          }\n        }\n      }\n    }\n  }\n\n  if (Object.keys(workingSubcomponentStyles).length > 0) {\n    mergedSet.subComponentStyles = {};\n    const mergedSubStyles = mergedSet.subComponentStyles;\n\n    // now we process the subcomponent styles if there are any\n    for (const subCompProp in workingSubcomponentStyles) {\n      if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {\n        const workingSet = workingSubcomponentStyles[subCompProp];\n        mergedSubStyles[subCompProp] = (styleProps: any) => {\n          return concatStyleSets(\n            ...workingSet.map((styleFunctionOrObject: IStyleFunctionOrObject<any, any>) =>\n              typeof styleFunctionOrObject === 'function' ? styleFunctionOrObject(styleProps) : styleFunctionOrObject,\n            ),\n          );\n        };\n      }\n    }\n  }\n\n  return mergedSet;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}