{"ast":null,"code":"import { getStyleOptions } from './StyleOptionsState';\nimport { Stylesheet } from './Stylesheet';\nimport { serializeRuleEntries } from './styleToClassName';\n/**\n * Registers keyframe definitions.\n *\n * @public\n */\n\nexport function keyframes(timeline) {\n  var stylesheet = Stylesheet.getInstance();\n  var name = stylesheet.getClassName();\n  var rulesArray = [];\n\n  for (var prop in timeline) {\n    if (timeline.hasOwnProperty(prop)) {\n      rulesArray.push(prop, '{', serializeRuleEntries(getStyleOptions(), timeline[prop]), '}');\n    }\n  }\n\n  var rules = rulesArray.join('');\n  stylesheet.insertRule(\"@keyframes \" + name + \"{\" + rules + \"}\", true);\n  stylesheet.cacheClassName(name, rules, [], ['keyframes', rules]);\n  return name;\n}","map":{"version":3,"sources":["keyframes.ts"],"names":[],"mappings":"AACA,SAAS,eAAT,QAAgC,qBAAhC;AACA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAS,oBAAT,QAAqC,oBAArC;AAEA;;;;AAIG;;AACH,OAAM,SAAU,SAAV,CAAoB,QAApB,EAAwC;AAC5C,MAAM,UAAU,GAAG,UAAU,CAAC,WAAX,EAAnB;AACA,MAAM,IAAI,GAAG,UAAU,CAAC,YAAX,EAAb;AAEA,MAAM,UAAU,GAAa,EAA7B;;AAEA,OAAK,IAAM,IAAX,IAAmB,QAAnB,EAA6B;AAC3B,QAAI,QAAQ,CAAC,cAAT,CAAwB,IAAxB,CAAJ,EAAmC;AACjC,MAAA,UAAU,CAAC,IAAX,CAAgB,IAAhB,EAAsB,GAAtB,EAA2B,oBAAoB,CAAC,eAAe,EAAhB,EAAoB,QAAQ,CAAC,IAAD,CAA5B,CAA/C,EAAoF,GAApF;AACD;AACF;;AACD,MAAM,KAAK,GAAG,UAAU,CAAC,IAAX,CAAgB,EAAhB,CAAd;AAEA,EAAA,UAAU,CAAC,UAAX,CAAsB,gBAAc,IAAd,GAAkB,GAAlB,GAAsB,KAAtB,GAA2B,GAAjD,EAAsD,IAAtD;AAEA,EAAA,UAAU,CAAC,cAAX,CAA0B,IAA1B,EAAgC,KAAhC,EAAuC,EAAvC,EAA2C,CAAC,WAAD,EAAc,KAAd,CAA3C;AAEA,SAAO,IAAP;AACD","sourcesContent":["import { IKeyframes } from './IKeyframes';\nimport { getStyleOptions } from './StyleOptionsState';\nimport { Stylesheet } from './Stylesheet';\nimport { serializeRuleEntries } from './styleToClassName';\n\n/**\n * Registers keyframe definitions.\n *\n * @public\n */\nexport function keyframes(timeline: IKeyframes): string {\n  const stylesheet = Stylesheet.getInstance();\n  const name = stylesheet.getClassName();\n\n  const rulesArray: string[] = [];\n\n  for (const prop in timeline) {\n    if (timeline.hasOwnProperty(prop)) {\n      rulesArray.push(prop, '{', serializeRuleEntries(getStyleOptions(), timeline[prop]), '}');\n    }\n  }\n  const rules = rulesArray.join('');\n\n  stylesheet.insertRule(`@keyframes ${name}{${rules}}`, true);\n\n  stylesheet.cacheClassName(name, rules, [], ['keyframes', rules]);\n\n  return name;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}