{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { buttonProperties, getNativeProps, KeyCodes, mergeAriaAttributeValues, memoizeFunction, Async, EventGroup, getId } from '../../../Utilities';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport { getSplitButtonVerticalDividerClassNames } from '../ContextualMenu.classNames';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { VerticalDivider } from '../../../Divider';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nvar TouchIdleDelay = 500;\n/* ms */\n\nvar ContextualMenuSplitButton =\n/** @class */\nfunction (_super) {\n  __extends(ContextualMenuSplitButton, _super);\n\n  function ContextualMenuSplitButton(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n      return __assign(__assign({}, keytipProps), {\n        hasMenu: true\n      });\n    });\n\n    _this._renderAriaDescription = function (ariaDescription, className) {\n      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n      return ariaDescription ? React.createElement(\"span\", {\n        id: _this._ariaDescriptionId,\n        className: className\n      }, ariaDescription) : null;\n    };\n\n    _this._onItemKeyDown = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemKeyDown = _a.onItemKeyDown;\n\n      if (ev.which === KeyCodes.enter) {\n        _this._executeItemClick(ev);\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      } else if (onItemKeyDown) {\n        onItemKeyDown(item, ev);\n      }\n    };\n\n    _this._getSubmenuTarget = function () {\n      return _this._splitButton;\n    };\n\n    _this._onItemMouseEnterPrimary = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemMouseEnter = _a.onItemMouseEnter;\n\n      if (onItemMouseEnter) {\n        onItemMouseEnter(__assign(__assign({}, item), {\n          subMenuProps: undefined,\n          items: undefined\n        }), ev, _this._splitButton);\n      }\n    };\n\n    _this._onItemMouseEnterIcon = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemMouseEnter = _a.onItemMouseEnter;\n\n      if (onItemMouseEnter) {\n        onItemMouseEnter(item, ev, _this._splitButton);\n      }\n    };\n\n    _this._onItemMouseMovePrimary = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemMouseMove = _a.onItemMouseMove;\n\n      if (onItemMouseMove) {\n        onItemMouseMove(__assign(__assign({}, item), {\n          subMenuProps: undefined,\n          items: undefined\n        }), ev, _this._splitButton);\n      }\n    };\n\n    _this._onItemMouseMoveIcon = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemMouseMove = _a.onItemMouseMove;\n\n      if (onItemMouseMove) {\n        onItemMouseMove(item, ev, _this._splitButton);\n      }\n    };\n\n    _this._onIconItemClick = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemClickBase = _a.onItemClickBase;\n\n      if (onItemClickBase) {\n        onItemClickBase(item, ev, _this._splitButton ? _this._splitButton : ev.currentTarget);\n      }\n    };\n\n    _this._executeItemClick = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          executeItemClick = _a.executeItemClick,\n          onItemClick = _a.onItemClick;\n\n      if (item.disabled || item.isDisabled) {\n        return;\n      }\n\n      if (_this._processingTouch && onItemClick) {\n        return onItemClick(item, ev);\n      }\n\n      if (executeItemClick) {\n        executeItemClick(item, ev);\n      }\n    };\n\n    _this._onTouchStart = function (ev) {\n      if (_this._splitButton && !('onpointerdown' in _this._splitButton)) {\n        _this._handleTouchAndPointerEvent(ev);\n      }\n    };\n\n    _this._onPointerDown = function (ev) {\n      if (ev.pointerType === 'touch') {\n        _this._handleTouchAndPointerEvent(ev);\n\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n      }\n    };\n\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    return _this;\n  }\n\n  ContextualMenuSplitButton.prototype.componentDidMount = function () {\n    if (this._splitButton && 'onpointerdown' in this._splitButton) {\n      this._events.on(this._splitButton, 'pointerdown', this._onPointerDown, true);\n    }\n  };\n\n  ContextualMenuSplitButton.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n\n    this._events.dispose();\n  };\n\n  ContextualMenuSplitButton.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        item = _a.item,\n        classNames = _a.classNames,\n        index = _a.index,\n        focusableElementIndex = _a.focusableElementIndex,\n        totalItemCount = _a.totalItemCount,\n        hasCheckmarks = _a.hasCheckmarks,\n        hasIcons = _a.hasIcons,\n        onItemMouseLeave = _a.onItemMouseLeave,\n        expandedMenuItemKey = _a.expandedMenuItemKey;\n    var itemHasSubmenu = hasSubmenu(item);\n    var keytipProps = item.keytipProps;\n\n    if (keytipProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    } // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n\n\n    var ariaDescription = item.ariaDescription;\n\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    return React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      disabled: isItemDisabled(item)\n    }, function (keytipAttributes) {\n      return React.createElement(\"div\", {\n        \"data-ktp-target\": keytipAttributes['data-ktp-target'],\n        ref: function (splitButton) {\n          return _this._splitButton = splitButton;\n        },\n        role: getMenuItemAriaRole(item),\n        \"aria-label\": item.ariaLabel,\n        className: classNames.splitContainer,\n        \"aria-disabled\": isItemDisabled(item),\n        \"aria-expanded\": itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n        \"aria-haspopup\": true,\n        \"aria-describedby\": mergeAriaAttributeValues(ariaDescription ? _this._ariaDescriptionId : undefined, keytipAttributes['aria-describedby']),\n        \"aria-checked\": item.isChecked || item.checked,\n        \"aria-posinset\": focusableElementIndex + 1,\n        \"aria-setsize\": totalItemCount,\n        onMouseEnter: _this._onItemMouseEnterPrimary,\n        onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(_this, __assign(__assign({}, item), {\n          subMenuProps: null,\n          items: null\n        })) : undefined,\n        onMouseMove: _this._onItemMouseMovePrimary,\n        onKeyDown: _this._onItemKeyDown,\n        onClick: _this._executeItemClick,\n        onTouchStart: _this._onTouchStart,\n        tabIndex: 0,\n        \"data-is-focusable\": true,\n        \"aria-roledescription\": item['aria-roledescription']\n      }, _this._renderSplitPrimaryButton(item, classNames, index, hasCheckmarks, hasIcons), _this._renderSplitDivider(item), _this._renderSplitIconButton(item, classNames, index, keytipAttributes), _this._renderAriaDescription(ariaDescription, classNames.screenReaderText));\n    });\n  };\n\n  ContextualMenuSplitButton.prototype._renderSplitPrimaryButton = function (item, // eslint-disable-next-line deprecation/deprecation\n  classNames, index, hasCheckmarks, hasIcons) {\n    var _a = this.props,\n        _b = _a.contextualMenuItemAs,\n        ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n        onItemClick = _a.onItemClick;\n    var itemProps = {\n      key: item.key,\n      disabled: isItemDisabled(item) || item.primaryDisabled,\n\n      /* eslint-disable deprecation/deprecation */\n      name: item.name,\n      text: item.text || item.name,\n      secondaryText: item.secondaryText,\n\n      /* eslint-enable deprecation/deprecation */\n      className: classNames.splitPrimary,\n      canCheck: item.canCheck,\n      isChecked: item.isChecked,\n      checked: item.checked,\n      iconProps: item.iconProps,\n      onRenderIcon: item.onRenderIcon,\n      data: item.data,\n      'data-is-focusable': false\n    };\n    var itemComponentProps = item.itemProps;\n    return React.createElement(\"button\", __assign({}, getNativeProps(itemProps, buttonProperties)), React.createElement(ChildrenRenderer, __assign({\n      \"data-is-focusable\": false,\n      item: itemProps,\n      classNames: classNames,\n      index: index,\n      onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,\n      hasIcons: hasIcons\n    }, itemComponentProps)));\n  };\n\n  ContextualMenuSplitButton.prototype._renderSplitDivider = function (item) {\n    var getDividerClassNames = item.getSplitButtonVerticalDividerClassNames || getSplitButtonVerticalDividerClassNames;\n    return React.createElement(VerticalDivider, {\n      getClassNames: getDividerClassNames\n    });\n  };\n\n  ContextualMenuSplitButton.prototype._renderSplitIconButton = function (item, classNames, // eslint-disable-line deprecation/deprecation\n  index, keytipAttributes) {\n    var _a = this.props,\n        _b = _a.contextualMenuItemAs,\n        ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n        onItemMouseLeave = _a.onItemMouseLeave,\n        onItemMouseDown = _a.onItemMouseDown,\n        openSubMenu = _a.openSubMenu,\n        dismissSubMenu = _a.dismissSubMenu,\n        dismissMenu = _a.dismissMenu;\n    var itemProps = {\n      onClick: this._onIconItemClick,\n      disabled: isItemDisabled(item),\n      className: classNames.splitMenu,\n      subMenuProps: item.subMenuProps,\n      submenuIconProps: item.submenuIconProps,\n      split: true,\n      key: item.key\n    };\n\n    var buttonProps = __assign(__assign({}, getNativeProps(itemProps, buttonProperties)), {\n      onMouseEnter: this._onItemMouseEnterIcon,\n      onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : undefined,\n      onMouseDown: function (ev) {\n        return onItemMouseDown ? onItemMouseDown(item, ev) : undefined;\n      },\n      onMouseMove: this._onItemMouseMoveIcon,\n      'data-is-focusable': false,\n      'data-ktp-execute-target': keytipAttributes['data-ktp-execute-target'],\n      'aria-hidden': true\n    });\n\n    var itemComponentProps = item.itemProps;\n    return React.createElement(\"button\", __assign({}, buttonProps), React.createElement(ChildrenRenderer, __assign({\n      componentRef: item.componentRef,\n      item: itemProps,\n      classNames: classNames,\n      index: index,\n      hasIcons: false,\n      openSubMenu: openSubMenu,\n      dismissSubMenu: dismissSubMenu,\n      dismissMenu: dismissMenu,\n      getSubmenuTarget: this._getSubmenuTarget\n    }, itemComponentProps)));\n  };\n\n  ContextualMenuSplitButton.prototype._handleTouchAndPointerEvent = function (ev) {\n    var _this = this;\n\n    var onTap = this.props.onTap;\n\n    if (onTap) {\n      onTap(ev);\n    } // If we already have an existing timeout from a previous touch/pointer event\n    // cancel that timeout so we can set a new one.\n\n\n    if (this._lastTouchTimeoutId) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n\n      this._lastTouchTimeoutId = undefined;\n    }\n\n    this._processingTouch = true;\n    this._lastTouchTimeoutId = this._async.setTimeout(function () {\n      _this._processingTouch = false;\n      _this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  };\n\n  return ContextualMenuSplitButton;\n}(ContextualMenuItemWrapper);\n\nexport { ContextualMenuSplitButton };","map":{"version":3,"sources":["components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuSplitButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  buttonProperties,\n  getNativeProps,\n  KeyCodes,\n  mergeAriaAttributeValues,\n  memoizeFunction,\n  Async,\n  EventGroup,\n  getId,\n} from '../../../Utilities';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport { IContextualMenuItem } from '../ContextualMenu.types';\nimport { IMenuItemClassNames, getSplitButtonVerticalDividerClassNames } from '../ContextualMenu.classNames';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { VerticalDivider } from '../../../Divider';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { IKeytipProps } from '../../Keytip/Keytip.types';\nimport { IContextualMenuItemWrapperProps } from './ContextualMenuItemWrapper.types';\n\nexport interface IContextualMenuSplitButtonState {}\n\nconst TouchIdleDelay = 500; /* ms */\n\nexport class ContextualMenuSplitButton extends ContextualMenuItemWrapper {\n  private _splitButton: HTMLDivElement;\n  private _lastTouchTimeoutId: number | undefined;\n  private _processingTouch: boolean;\n  private _ariaDescriptionId: string;\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  constructor(props: IContextualMenuItemWrapperProps) {\n    super(props);\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount() {\n    if (this._splitButton && 'onpointerdown' in this._splitButton) {\n      this._events.on(this._splitButton, 'pointerdown', this._onPointerDown, true);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      onItemMouseLeave,\n      expandedMenuItemKey,\n    } = this.props;\n\n    const itemHasSubmenu = hasSubmenu(item);\n\n    let { keytipProps } = item;\n    if (keytipProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    const { ariaDescription } = item;\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    return (\n      <KeytipData keytipProps={keytipProps} disabled={isItemDisabled(item)}>\n        {(keytipAttributes: any): JSX.Element => (\n          <div\n            data-ktp-target={keytipAttributes['data-ktp-target']}\n            ref={(splitButton: HTMLDivElement) => (this._splitButton = splitButton)}\n            role={getMenuItemAriaRole(item)}\n            aria-label={item.ariaLabel}\n            className={classNames.splitContainer}\n            aria-disabled={isItemDisabled(item)}\n            aria-expanded={itemHasSubmenu ? item.key === expandedMenuItemKey : undefined}\n            aria-haspopup={true}\n            aria-describedby={mergeAriaAttributeValues(\n              ariaDescription ? this._ariaDescriptionId : undefined,\n              keytipAttributes['aria-describedby'],\n            )}\n            aria-checked={item.isChecked || item.checked}\n            aria-posinset={focusableElementIndex + 1}\n            aria-setsize={totalItemCount}\n            onMouseEnter={this._onItemMouseEnterPrimary}\n            onMouseLeave={\n              onItemMouseLeave ? onItemMouseLeave.bind(this, { ...item, subMenuProps: null, items: null }) : undefined\n            }\n            onMouseMove={this._onItemMouseMovePrimary}\n            onKeyDown={this._onItemKeyDown}\n            onClick={this._executeItemClick}\n            onTouchStart={this._onTouchStart}\n            tabIndex={0}\n            data-is-focusable={true}\n            aria-roledescription={item['aria-roledescription']}\n          >\n            {this._renderSplitPrimaryButton(item, classNames, index, hasCheckmarks!, hasIcons!)}\n            {this._renderSplitDivider(item)}\n            {this._renderSplitIconButton(item, classNames, index, keytipAttributes)}\n            {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n          </div>\n        )}\n      </KeytipData>\n    );\n  }\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n\n  protected _onItemKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { item, onItemKeyDown } = this.props;\n    if (ev.which === KeyCodes.enter) {\n      this._executeItemClick(ev);\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else if (onItemKeyDown) {\n      onItemKeyDown(item, ev);\n    }\n  };\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._splitButton;\n  };\n\n  private _renderSplitPrimaryButton(\n    item: IContextualMenuItem,\n    // eslint-disable-next-line deprecation/deprecation\n    classNames: IMenuItemClassNames,\n    index: number,\n    hasCheckmarks: boolean,\n    hasIcons: boolean,\n  ) {\n    const { contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem, onItemClick } = this.props;\n\n    const itemProps: IContextualMenuItem = {\n      key: item.key,\n      disabled: isItemDisabled(item) || item.primaryDisabled,\n      /* eslint-disable deprecation/deprecation */\n      name: item.name,\n      text: item.text || item.name,\n      secondaryText: item.secondaryText,\n      /* eslint-enable deprecation/deprecation */\n      className: classNames.splitPrimary,\n      canCheck: item.canCheck,\n      isChecked: item.isChecked,\n      checked: item.checked,\n      iconProps: item.iconProps,\n      onRenderIcon: item.onRenderIcon,\n      data: item.data,\n      'data-is-focusable': false,\n    };\n\n    const { itemProps: itemComponentProps } = item;\n\n    return (\n      <button {...getNativeProps(itemProps, buttonProperties)}>\n        <ChildrenRenderer\n          data-is-focusable={false}\n          item={itemProps}\n          classNames={classNames}\n          index={index}\n          onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n          hasIcons={hasIcons}\n          {...itemComponentProps}\n        />\n      </button>\n    );\n  }\n\n  private _renderSplitDivider(item: IContextualMenuItem) {\n    const getDividerClassNames =\n      item.getSplitButtonVerticalDividerClassNames || getSplitButtonVerticalDividerClassNames;\n    return <VerticalDivider getClassNames={getDividerClassNames} />;\n  }\n\n  private _renderSplitIconButton(\n    item: IContextualMenuItem,\n    classNames: IMenuItemClassNames, // eslint-disable-line deprecation/deprecation\n    index: number,\n    keytipAttributes: any,\n  ) {\n    const {\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      onItemMouseLeave,\n      onItemMouseDown,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    const itemProps: IContextualMenuItem = {\n      onClick: this._onIconItemClick,\n      disabled: isItemDisabled(item),\n      className: classNames.splitMenu,\n      subMenuProps: item.subMenuProps,\n      submenuIconProps: item.submenuIconProps,\n      split: true,\n      key: item.key,\n    };\n\n    const buttonProps = {\n      ...getNativeProps<React.ButtonHTMLAttributes<HTMLButtonElement>>(itemProps, buttonProperties),\n      ...{\n        onMouseEnter: this._onItemMouseEnterIcon,\n        onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : undefined,\n        onMouseDown: (ev: React.MouseEvent<HTMLButtonElement>) =>\n          onItemMouseDown ? onItemMouseDown(item, ev) : undefined,\n        onMouseMove: this._onItemMouseMoveIcon,\n        'data-is-focusable': false,\n        'data-ktp-execute-target': keytipAttributes['data-ktp-execute-target'],\n        'aria-hidden': true,\n      },\n    };\n\n    const { itemProps: itemComponentProps } = item;\n\n    return (\n      <button {...buttonProps}>\n        <ChildrenRenderer\n          componentRef={item.componentRef}\n          item={itemProps}\n          classNames={classNames}\n          index={index}\n          hasIcons={false}\n          openSubMenu={openSubMenu}\n          dismissSubMenu={dismissSubMenu}\n          dismissMenu={dismissMenu}\n          getSubmenuTarget={this._getSubmenuTarget}\n          {...itemComponentProps}\n        />\n      </button>\n    );\n  }\n\n  private _onItemMouseEnterPrimary = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseEnter } = this.props;\n    if (onItemMouseEnter) {\n      onItemMouseEnter({ ...item, subMenuProps: undefined, items: undefined }, ev, this._splitButton);\n    }\n  };\n\n  private _onItemMouseEnterIcon = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseEnter } = this.props;\n    if (onItemMouseEnter) {\n      onItemMouseEnter(item, ev, this._splitButton);\n    }\n  };\n\n  private _onItemMouseMovePrimary = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseMove } = this.props;\n    if (onItemMouseMove) {\n      onItemMouseMove({ ...item, subMenuProps: undefined, items: undefined }, ev, this._splitButton);\n    }\n  };\n\n  private _onItemMouseMoveIcon = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseMove } = this.props;\n    if (onItemMouseMove) {\n      onItemMouseMove(item, ev, this._splitButton);\n    }\n  };\n\n  private _onIconItemClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemClickBase } = this.props;\n    if (onItemClickBase) {\n      onItemClickBase(item, ev, (this._splitButton ? this._splitButton : ev.currentTarget) as HTMLElement);\n    }\n  };\n\n  private _executeItemClick = (ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>): void => {\n    const { item, executeItemClick, onItemClick } = this.props;\n\n    if (item.disabled || item.isDisabled) {\n      return;\n    }\n\n    if (this._processingTouch && onItemClick) {\n      return onItemClick(item, ev);\n    }\n\n    if (executeItemClick) {\n      executeItemClick(item, ev);\n    }\n  };\n\n  private _onTouchStart = (ev: React.TouchEvent<HTMLElement>): void => {\n    if (this._splitButton && !('onpointerdown' in this._splitButton)) {\n      this._handleTouchAndPointerEvent(ev);\n    }\n  };\n\n  private _onPointerDown = (ev: PointerEvent): void => {\n    if (ev.pointerType === 'touch') {\n      this._handleTouchAndPointerEvent(ev);\n      ev.preventDefault();\n      ev.stopImmediatePropagation();\n    }\n  };\n\n  private _handleTouchAndPointerEvent(ev: React.TouchEvent<HTMLElement> | PointerEvent) {\n    const { onTap } = this.props;\n\n    if (onTap) {\n      onTap(ev);\n    }\n    // If we already have an existing timeout from a previous touch/pointer event\n    // cancel that timeout so we can set a new one.\n    if (this._lastTouchTimeoutId) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n    this._lastTouchTimeoutId = this._async.setTimeout(() => {\n      this._processingTouch = false;\n      this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}