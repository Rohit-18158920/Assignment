{"ast":null,"code":"import { getDocument } from '@uifabric/utilities';\nimport * as React from 'react';\nimport { useWindow } from '@fluentui/react-window-provider';\n/**\n * Hook to calculate and cache the target element specified by the given target attribute,\n * as well as the target element's (or host element's) parent window\n * @param target- Target selector passed to the component as a property, describing the element that\n * the callout should target\n * @param hostElement- The callout's host element, used for determining the parent window.\n */\n\nexport function useTarget(target, hostElement) {\n  var _a;\n\n  var previousTargetProp = React.useRef();\n  var targetRef = React.useRef(null);\n  /**\n   * Stores an instance of Window, used to check\n   * for server side rendering and if focus was lost.\n   */\n\n  var targetWindow = useWindow(); // If the target element changed, find the new one. If we are tracking\n  // target with class name, always find element because we do not know if\n  // fabric has rendered a new element and disposed the old element.\n\n  if (!target || target !== previousTargetProp.current || typeof target === 'string') {\n    var currentElement = (_a = hostElement) === null || _a === void 0 ? void 0 : _a.current;\n\n    if (target) {\n      if (typeof target === 'string') {\n        var currentDoc = getDocument(currentElement);\n        targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;\n      } else if ('stopPropagation' in target) {\n        targetRef.current = target;\n      } else if ('getBoundingClientRect' in target) {\n        targetRef.current = target;\n      } else if ('current' in target) {\n        targetRef.current = target.current;\n      } else {\n        targetRef.current = target;\n      }\n    }\n\n    previousTargetProp.current = target;\n  }\n\n  return [targetRef, targetWindow];\n}","map":{"version":3,"sources":["useTarget.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA8C,qBAA9C;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,SAAT,QAA0B,iCAA1B;AAIA;;;;;;AAMG;;AACH,OAAM,SAAU,SAAV,CACJ,MADI,EAEJ,WAFI,EAE0C;;;AAE9C,MAAM,kBAAkB,GAAG,KAAK,CAAC,MAAN,EAA3B;AAIA,MAAM,SAAS,GAAG,KAAK,CAAC,MAAN,CAA8D,IAA9D,CAAlB;AACA;;;AAGG;;AACH,MAAM,YAAY,GAAG,SAAS,EAA9B,CAX8C,CAa9C;AACA;AACA;;AACA,MAAI,CAAC,MAAD,IAAW,MAAM,KAAK,kBAAkB,CAAC,OAAzC,IAAoD,OAAO,MAAP,KAAkB,QAA1E,EAAoF;AAClF,QAAM,cAAc,GAAA,CAAA,EAAA,GAAG,WAAH,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,OAApC;;AACA,QAAI,MAAJ,EAAY;AACV,UAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,YAAM,UAAU,GAAa,WAAW,CAAC,cAAD,CAAxC;AACA,QAAA,SAAS,CAAC,OAAV,GAAoB,UAAU,GAAG,UAAU,CAAC,aAAX,CAAyB,MAAzB,CAAH,GAAsC,IAApE;AACD,OAHD,MAGO,IAAI,qBAAqB,MAAzB,EAAiC;AACtC,QAAA,SAAS,CAAC,OAAV,GAAoB,MAApB;AACD,OAFM,MAEA,IAAI,2BAA2B,MAA/B,EAAuC;AAC5C,QAAA,SAAS,CAAC,OAAV,GAAoB,MAApB;AACD,OAFM,MAEA,IAAI,aAAa,MAAjB,EAAyB;AAC9B,QAAA,SAAS,CAAC,OAAV,GAAoB,MAAM,CAAC,OAA3B;AACD,OAFM,MAEA;AACL,QAAA,SAAS,CAAC,OAAV,GAAoB,MAApB;AACD;AACF;;AACD,IAAA,kBAAkB,CAAC,OAAnB,GAA6B,MAA7B;AACD;;AAED,SAAO,CAAC,SAAD,EAAY,YAAZ,CAAP;AACD","sourcesContent":["import { getDocument, Point, Rectangle } from '@uifabric/utilities';\nimport * as React from 'react';\nimport { useWindow } from '@fluentui/react-window-provider';\n\nexport type Target = Element | string | MouseEvent | Point | Rectangle | null | React.RefObject<Element>;\n\n/**\n * Hook to calculate and cache the target element specified by the given target attribute,\n * as well as the target element's (or host element's) parent window\n * @param target- Target selector passed to the component as a property, describing the element that\n * the callout should target\n * @param hostElement- The callout's host element, used for determining the parent window.\n */\nexport function useTarget<TElement extends HTMLElement = HTMLElement>(\n  target: Target | undefined,\n  hostElement?: React.RefObject<TElement | null>,\n): Readonly<[React.RefObject<Element | MouseEvent | Point | Rectangle | null>, Window | undefined]> {\n  const previousTargetProp = React.useRef<\n    Element | string | MouseEvent | Point | Rectangle | React.RefObject<Element> | null | undefined\n  >();\n\n  const targetRef = React.useRef<Element | MouseEvent | Point | Rectangle | null>(null);\n  /**\n   * Stores an instance of Window, used to check\n   * for server side rendering and if focus was lost.\n   */\n  const targetWindow = useWindow();\n\n  // If the target element changed, find the new one. If we are tracking\n  // target with class name, always find element because we do not know if\n  // fabric has rendered a new element and disposed the old element.\n  if (!target || target !== previousTargetProp.current || typeof target === 'string') {\n    const currentElement = hostElement?.current;\n    if (target) {\n      if (typeof target === 'string') {\n        const currentDoc: Document = getDocument(currentElement)!;\n        targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;\n      } else if ('stopPropagation' in target) {\n        targetRef.current = target;\n      } else if ('getBoundingClientRect' in target) {\n        targetRef.current = target;\n      } else if ('current' in target) {\n        targetRef.current = target.current;\n      } else {\n        targetRef.current = target;\n      }\n    }\n    previousTargetProp.current = target;\n  }\n\n  return [targetRef, targetWindow] as const;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}