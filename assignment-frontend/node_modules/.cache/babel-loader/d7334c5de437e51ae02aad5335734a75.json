{"ast":null,"code":"import { getWindow } from './dom/getWindow';\nimport { isDirectionalKeyCode } from './keyboard';\nimport { setFocusVisibility } from './setFocusVisibility';\n/**\n * Initializes the logic which:\n *\n * 1. Subscribes keydown and mousedown events. (It will only do it once per window,\n *    so it's safe to call this method multiple times.)\n * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname\n *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.\n * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the\n *    document body, removes the 'ms-Fabric--isFocusVisible' classname.\n *\n * This logic allows components on the page to conditionally render focus treatments based on\n * the existence of global classnames, which simplifies logic overall.\n *\n * @param window - the window used to add the event listeners\n * @deprecated Use useFocusRects hook or FocusRects component instead.\n */\n\nexport function initializeFocusRects(window) {\n  var _a;\n\n  var win = window || getWindow();\n\n  if (!win || ((_a = win.FabricConfig) === null || _a === void 0 ? void 0 : _a.disableFocusRects) === true) {\n    return;\n  }\n\n  if (!win.__hasInitializeFocusRects__) {\n    win.__hasInitializeFocusRects__ = true;\n    win.addEventListener('mousedown', _onMouseDown, true);\n    win.addEventListener('pointerdown', _onPointerDown, true);\n    win.addEventListener('keydown', _onKeyDown, true);\n  }\n}\n\nfunction _onMouseDown(ev) {\n  setFocusVisibility(false, ev.target);\n}\n\nfunction _onPointerDown(ev) {\n  if (ev.pointerType !== 'mouse') {\n    setFocusVisibility(false, ev.target);\n  }\n}\n\nfunction _onKeyDown(ev) {\n  // eslint-disable-next-line deprecation/deprecation\n  isDirectionalKeyCode(ev.which) && setFocusVisibility(true, ev.target);\n}","map":{"version":3,"sources":["initializeFocusRects.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,iBAA1B;AACA,SAAS,oBAAT,QAAqC,YAArC;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AASA;;;;;;;;;;;;;;;AAeG;;AACH,OAAM,SAAU,oBAAV,CAA+B,MAA/B,EAA8C;;;AAClD,MAAM,GAAG,GAAI,MAAM,IAAI,SAAS,EAAhC;;AACA,MAAI,CAAC,GAAD,IAAQ,CAAA,CAAA,EAAA,GAAA,GAAG,CAAC,YAAJ,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,KAAA,CAAhB,GAAgB,EAAA,CAAE,iBAAlB,MAAwC,IAApD,EAA0D;AACxD;AACD;;AAED,MAAI,CAAC,GAAG,CAAC,2BAAT,EAAsC;AACpC,IAAA,GAAG,CAAC,2BAAJ,GAAkC,IAAlC;AACA,IAAA,GAAG,CAAC,gBAAJ,CAAqB,WAArB,EAAkC,YAAlC,EAAgD,IAAhD;AACA,IAAA,GAAG,CAAC,gBAAJ,CAAqB,aAArB,EAAoC,cAApC,EAAoD,IAApD;AACA,IAAA,GAAG,CAAC,gBAAJ,CAAqB,SAArB,EAAgC,UAAhC,EAA0D,IAA1D;AACD;AACF;;AAED,SAAS,YAAT,CAAsB,EAAtB,EAAoC;AAClC,EAAA,kBAAkB,CAAC,KAAD,EAAQ,EAAE,CAAC,MAAX,CAAlB;AACD;;AAED,SAAS,cAAT,CAAwB,EAAxB,EAAwC;AACtC,MAAI,EAAE,CAAC,WAAH,KAAmB,OAAvB,EAAgC;AAC9B,IAAA,kBAAkB,CAAC,KAAD,EAAQ,EAAE,CAAC,MAAX,CAAlB;AACD;AACF;;AAED,SAAS,UAAT,CAAoB,EAApB,EAAqC;AACnC;AACA,EAAA,oBAAoB,CAAC,EAAE,CAAC,KAAJ,CAApB,IAAkC,kBAAkB,CAAC,IAAD,EAAO,EAAE,CAAC,MAAV,CAApD;AACD","sourcesContent":["import { getWindow } from './dom/getWindow';\nimport { isDirectionalKeyCode } from './keyboard';\nimport { setFocusVisibility } from './setFocusVisibility';\n\ntype AppWindow =\n  | (Window & {\n      __hasInitializeFocusRects__: boolean;\n      FabricConfig?: { disableFocusRects?: boolean };\n    })\n  | undefined;\n\n/**\n * Initializes the logic which:\n *\n * 1. Subscribes keydown and mousedown events. (It will only do it once per window,\n *    so it's safe to call this method multiple times.)\n * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname\n *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.\n * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the\n *    document body, removes the 'ms-Fabric--isFocusVisible' classname.\n *\n * This logic allows components on the page to conditionally render focus treatments based on\n * the existence of global classnames, which simplifies logic overall.\n *\n * @param window - the window used to add the event listeners\n * @deprecated Use useFocusRects hook or FocusRects component instead.\n */\nexport function initializeFocusRects(window?: Window): void {\n  const win = (window || getWindow()) as AppWindow;\n  if (!win || win.FabricConfig?.disableFocusRects === true) {\n    return;\n  }\n\n  if (!win.__hasInitializeFocusRects__) {\n    win.__hasInitializeFocusRects__ = true;\n    win.addEventListener('mousedown', _onMouseDown, true);\n    win.addEventListener('pointerdown', _onPointerDown, true);\n    win.addEventListener('keydown', _onKeyDown as () => void, true);\n  }\n}\n\nfunction _onMouseDown(ev: MouseEvent): void {\n  setFocusVisibility(false, ev.target as Element);\n}\n\nfunction _onPointerDown(ev: PointerEvent): void {\n  if (ev.pointerType !== 'mouse') {\n    setFocusVisibility(false, ev.target as Element);\n  }\n}\n\nfunction _onKeyDown(ev: KeyboardEvent): void {\n  // eslint-disable-next-line deprecation/deprecation\n  isDirectionalKeyCode(ev.which) && setFocusVisibility(true, ev.target as Element);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}