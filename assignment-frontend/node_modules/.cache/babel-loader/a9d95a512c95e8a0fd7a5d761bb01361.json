{"ast":null,"code":"import { warn } from './warn';\n/**\n * Warns when a deprecated props are being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\n * either null or a replacement prop name.\n */\n\nexport function warnDeprecations(componentName, props, deprecationMap) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var propName in deprecationMap) {\n      if (props && propName in props) {\n        var deprecationMessage = componentName + \" property '\" + propName + \"' was used but has been deprecated.\";\n        var replacementPropName = deprecationMap[propName];\n\n        if (replacementPropName) {\n          deprecationMessage += \" Use '\" + replacementPropName + \"' instead.\";\n        }\n\n        warn(deprecationMessage);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["warn/warnDeprecations.ts"],"names":[],"mappings":"AAAA,SAAuB,IAAvB,QAAmC,QAAnC;AACA;;;;;;;;AAQG;;AACH,OAAM,SAAU,gBAAV,CAA8B,aAA9B,EAAqD,KAArD,EAA+D,cAA/D,EAA8F;AAClG,MAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,SAAK,IAAM,QAAX,IAAuB,cAAvB,EAAuC;AACrC,UAAI,KAAK,IAAI,QAAQ,IAAI,KAAzB,EAAgC;AAC9B,YAAI,kBAAkB,GAAM,aAAa,GAAA,aAAb,GAA2B,QAA3B,GAAmC,qCAA/D;AACA,YAAM,mBAAmB,GAAG,cAAc,CAAC,QAAD,CAA1C;;AACA,YAAI,mBAAJ,EAAyB;AACvB,UAAA,kBAAkB,IAAI,WAAS,mBAAT,GAA4B,YAAlD;AACD;;AACD,QAAA,IAAI,CAAC,kBAAD,CAAJ;AACD;AACF;AACF;AACF","sourcesContent":["import { ISettingsMap, warn } from './warn';\n/**\n * Warns when a deprecated props are being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\n * either null or a replacement prop name.\n */\nexport function warnDeprecations<P>(componentName: string, props: P, deprecationMap: ISettingsMap<P>): void {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const propName in deprecationMap) {\n      if (props && propName in props) {\n        let deprecationMessage = `${componentName} property '${propName}' was used but has been deprecated.`;\n        const replacementPropName = deprecationMap[propName];\n        if (replacementPropName) {\n          deprecationMessage += ` Use '${replacementPropName}' instead.`;\n        }\n        warn(deprecationMessage);\n      }\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}