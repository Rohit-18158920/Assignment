{"ast":null,"code":"import { find } from '../../Utilities';\n/**\n * Tests for equality between two IKeytipTransitionKeys.\n *\n * @param key1 - First IKeytipTransitionKey.\n * @param key2 - Second IKeytipTransitionKey.\n * @returns T/F if the transition keys are equal.\n */\n\nexport function transitionKeysAreEqual(key1, key2) {\n  if (key1.key !== key2.key) {\n    return false;\n  }\n\n  var mod1 = key1.modifierKeys;\n  var mod2 = key2.modifierKeys;\n\n  if (!mod1 && mod2 || mod1 && !mod2) {\n    // Not equal if one modifier is defined and the other isn't\n    return false;\n  }\n\n  if (mod1 && mod2) {\n    if (mod1.length !== mod2.length) {\n      return false;\n    } // Sort both arrays\n\n\n    mod1 = mod1.sort();\n    mod2 = mod2.sort();\n\n    for (var i = 0; i < mod1.length; i++) {\n      if (mod1[i] !== mod2[i]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/**\n * Tests if 'key' is present in 'keys'.\n *\n * @param keys - Array of IKeytipTransitionKey.\n * @param key - IKeytipTransitionKey to find in 'keys'.\n * @returns T/F if 'keys' contains 'key'.\n */\n\nexport function transitionKeysContain(keys, key) {\n  return !!find(keys, function (transitionKey) {\n    return transitionKeysAreEqual(transitionKey, key);\n  });\n}","map":{"version":3,"sources":["utilities/keytips/IKeytipTransitionKey.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,QAA+B,iBAA/B;AAaA;;;;;;AAMG;;AACH,OAAM,SAAU,sBAAV,CAAiC,IAAjC,EAA6D,IAA7D,EAAuF;AAC3F,MAAI,IAAI,CAAC,GAAL,KAAa,IAAI,CAAC,GAAtB,EAA2B;AACzB,WAAO,KAAP;AACD;;AAED,MAAI,IAAI,GAAG,IAAI,CAAC,YAAhB;AACA,MAAI,IAAI,GAAG,IAAI,CAAC,YAAhB;;AAEA,MAAK,CAAC,IAAD,IAAS,IAAV,IAAoB,IAAI,IAAI,CAAC,IAAjC,EAAwC;AACtC;AACA,WAAO,KAAP;AACD;;AAED,MAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB,QAAI,IAAI,CAAC,MAAL,KAAgB,IAAI,CAAC,MAAzB,EAAiC;AAC/B,aAAO,KAAP;AACD,KAHe,CAKhB;;;AACA,IAAA,IAAI,GAAG,IAAI,CAAC,IAAL,EAAP;AACA,IAAA,IAAI,GAAG,IAAI,CAAC,IAAL,EAAP;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AACpC,UAAI,IAAI,CAAC,CAAD,CAAJ,KAAY,IAAI,CAAC,CAAD,CAApB,EAAyB;AACvB,eAAO,KAAP;AACD;AACF;AACF;;AAED,SAAO,IAAP;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,qBAAV,CAAgC,IAAhC,EAA8D,GAA9D,EAAuF;AAC3F,SAAO,CAAC,CAAC,IAAI,CAAC,IAAD,EAAO,UAAC,aAAD,EAAoC;AACtD,WAAO,sBAAsB,CAAC,aAAD,EAAgB,GAAhB,CAA7B;AACD,GAFY,CAAb;AAGD","sourcesContent":["import { find, KeyCodes } from '../../Utilities';\n\nexport type KeytipTransitionModifier =\n  | typeof KeyCodes.shift\n  | typeof KeyCodes.ctrl\n  | typeof KeyCodes.alt\n  | typeof KeyCodes.leftWindow;\n\nexport interface IKeytipTransitionKey {\n  key: string;\n  modifierKeys?: KeytipTransitionModifier[];\n}\n\n/**\n * Tests for equality between two IKeytipTransitionKeys.\n *\n * @param key1 - First IKeytipTransitionKey.\n * @param key2 - Second IKeytipTransitionKey.\n * @returns T/F if the transition keys are equal.\n */\nexport function transitionKeysAreEqual(key1: IKeytipTransitionKey, key2: IKeytipTransitionKey): boolean {\n  if (key1.key !== key2.key) {\n    return false;\n  }\n\n  let mod1 = key1.modifierKeys;\n  let mod2 = key2.modifierKeys;\n\n  if ((!mod1 && mod2) || (mod1 && !mod2)) {\n    // Not equal if one modifier is defined and the other isn't\n    return false;\n  }\n\n  if (mod1 && mod2) {\n    if (mod1.length !== mod2.length) {\n      return false;\n    }\n\n    // Sort both arrays\n    mod1 = mod1.sort();\n    mod2 = mod2.sort();\n    for (let i = 0; i < mod1.length; i++) {\n      if (mod1[i] !== mod2[i]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Tests if 'key' is present in 'keys'.\n *\n * @param keys - Array of IKeytipTransitionKey.\n * @param key - IKeytipTransitionKey to find in 'keys'.\n * @returns T/F if 'keys' contains 'key'.\n */\nexport function transitionKeysContain(keys: IKeytipTransitionKey[], key: IKeytipTransitionKey): boolean {\n  return !!find(keys, (transitionKey: IKeytipTransitionKey) => {\n    return transitionKeysAreEqual(transitionKey, key);\n  });\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}