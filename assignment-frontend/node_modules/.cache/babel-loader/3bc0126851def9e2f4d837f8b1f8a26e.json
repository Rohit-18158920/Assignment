{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { concatStyleSetsWithProps } from '@uifabric/merge-styles';\nimport { useCustomizationSettings } from './customizations/useCustomizationSettings';\nvar DefaultFields = ['theme', 'styles'];\nexport function styled(Component, baseStyles, getProps, customizable, pure) {\n  customizable = customizable || {\n    scope: '',\n    fields: undefined\n  };\n  var scope = customizable.scope,\n      _a = customizable.fields,\n      fields = _a === void 0 ? DefaultFields : _a;\n  var Wrapped = React.forwardRef(function (props, forwardedRef) {\n    var styles = React.useRef();\n    var settings = useCustomizationSettings(fields, scope);\n\n    var customizedStyles = settings.styles,\n        dir = settings.dir,\n        rest = __rest(settings, [\"styles\", \"dir\"]);\n\n    var additionalProps = getProps ? getProps(props) : undefined; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var cache = styles.current && styles.current.__cachedInputs__ || [];\n\n    if (!styles.current || customizedStyles !== cache[1] || props.styles !== cache[2]) {\n      // Using styled components as the Component arg will result in nested styling arrays.\n      var concatenatedStyles = function concatenatedStyles(styleProps) {\n        return concatStyleSetsWithProps(styleProps, baseStyles, customizedStyles, props.styles);\n      }; // The __cachedInputs__ array is attached to the function and consumed by the\n      // classNamesFunction as a list of keys to include for memoizing classnames.\n\n\n      concatenatedStyles.__cachedInputs__ = [baseStyles, customizedStyles, props.styles];\n      concatenatedStyles.__noStyleOverride__ = !customizedStyles && !props.styles;\n      styles.current = concatenatedStyles;\n    }\n\n    return React.createElement(Component, __assign({\n      ref: forwardedRef\n    }, rest, additionalProps, props, {\n      styles: styles.current\n    }));\n  }); // Function.prototype.name is an ES6 feature, so the cast to any is required until we're\n  // able to drop IE 11 support and compile with ES6 libs\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  Wrapped.displayName = \"Styled\" + (Component.displayName || Component.name); // This preserves backwards compatibility.\n\n  var pureComponent = pure ? React.memo(Wrapped) : Wrapped; // Check if the wrapper has a displayName after it has been memoized. Then assign it to the pure component.\n\n  if (Wrapped.displayName) {\n    pureComponent.displayName = Wrapped.displayName;\n  }\n\n  return pureComponent;\n}","map":{"version":3,"sources":["styled.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAA4C,wBAA5C,QAA4E,wBAA5E;AACA,SAAS,wBAAT,QAAyC,2CAAzC;AAmBA,IAAM,aAAa,GAAG,CAAC,OAAD,EAAU,QAAV,CAAtB;AAoDA,OAAM,SAAU,MAAV,CAMJ,SANI,EAOJ,UAPI,EAQJ,QARI,EASJ,YATI,EAUJ,IAVI,EAUU;AAEd,EAAA,YAAY,GAAG,YAAY,IAAI;AAAE,IAAA,KAAK,EAAE,EAAT;AAAa,IAAA,MAAM,EAAE;AAArB,GAA/B;AAEQ,MAAA,KAAA,GAAA,YAAA,CAAA,KAAA;AAAA,MAAO,EAAA,GAAA,YAAA,CAAA,MAAP;AAAA,MAAO,MAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,aAAA,GAAA,EAAP;AAER,MAAM,OAAO,GAAG,KAAK,CAAC,UAAN,CAAiB,UAAC,KAAD,EAAyB,YAAzB,EAAsD;AACrF,QAAM,MAAM,GAAG,KAAK,CAAC,MAAN,EAAf;AAEA,QAAM,QAAQ,GAAG,wBAAwB,CAAC,MAAD,EAAS,KAAT,CAAzC;;AACQ,QAAA,gBAAA,GAAA,QAAA,CAAA,MAAA;AAAA,QAA0B,GAAA,GAAA,QAAA,CAAA,GAA1B;AAAA,QAA+B,IAAA,GAAA,MAAA,CAAA,QAAA,EAAA,CAAA,QAAA,EAAA,KAAA,CAAA,CAA/B;;AACR,QAAM,eAAe,GAAG,QAAQ,GAAG,QAAQ,CAAC,KAAD,CAAX,GAAqB,SAArD,CALqF,CAOrF;;AACA,QAAM,KAAK,GAAI,MAAM,CAAC,OAAP,IAAmB,MAAM,CAAC,OAAP,CAAuB,gBAA3C,IAAgE,EAA9E;;AACA,QAAI,CAAC,MAAM,CAAC,OAAR,IAAmB,gBAAgB,KAAK,KAAK,CAAC,CAAD,CAA7C,IAAoD,KAAK,CAAC,MAAN,KAAiB,KAAK,CAAC,CAAD,CAA9E,EAAmF;AACjF;AACA,UAAM,kBAAkB,GAAmD,SAArE,kBAAqE,CAAC,UAAD,EAAwB;AACjG,eAAA,wBAAwB,CAAC,UAAD,EAAa,UAAb,EAAyB,gBAAzB,EAA2C,KAAK,CAAC,MAAjD,CAAxB;AAAgF,OADlF,CAFiF,CAKjF;AACA;;;AACC,MAAA,kBAA4D,CAAC,gBAA7D,GAAgF,CAC/E,UAD+E,EAE/E,gBAF+E,EAG/E,KAAK,CAAC,MAHyE,CAAhF;AAMA,MAAA,kBAA4D,CAAC,mBAA7D,GACC,CAAC,gBAAD,IAAqB,CAAC,KAAK,CAAC,MAD7B;AAGD,MAAA,MAAM,CAAC,OAAP,GAAiB,kBAAjB;AACD;;AAED,WAAO,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,QAAA,CAAA;AAAC,MAAA,GAAG,EAAE;AAAN,KAAA,EAAwB,IAAxB,EAAkC,eAAlC,EAAuD,KAAvD,EAA4D;AAAE,MAAA,MAAM,EAAE,MAAM,CAAC;AAAjB,KAA5D,CAAV,CAAP;AACD,GA7Be,CAAhB,CANc,CAoCd;AACA;AACA;;AACA,EAAA,OAAO,CAAC,WAAR,GAAsB,YAAS,SAAS,CAAC,WAAV,IAA0B,SAAiB,CAAC,IAArD,CAAtB,CAvCc,CAyCd;;AACA,MAAM,aAAa,GAAG,IAAI,GAAG,KAAK,CAAC,IAAN,CAAW,OAAX,CAAH,GAAyB,OAAnD,CA1Cc,CA2Cd;;AACA,MAAI,OAAO,CAAC,WAAZ,EAAyB;AACvB,IAAA,aAAa,CAAC,WAAd,GAA4B,OAAO,CAAC,WAApC;AACD;;AAED,SAAO,aAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { IStyleSet, IStyleFunctionOrObject, concatStyleSetsWithProps } from '@uifabric/merge-styles';\nimport { useCustomizationSettings } from './customizations/useCustomizationSettings';\n\nexport interface IPropsWithStyles<TStyleProps, TStyleSet extends IStyleSet<TStyleSet>> {\n  styles?: IStyleFunctionOrObject<TStyleProps, TStyleSet>;\n}\n\nexport interface ICustomizableProps {\n  /**\n   * Name of scope, which can be targeted using the Customizer.\n   */\n  scope: string;\n\n  /**\n   * List of fields which can be customized.\n   * @defaultvalue [ 'theme', 'styles' ]\n   */\n  fields?: string[];\n}\n\nconst DefaultFields = ['theme', 'styles'];\n\nexport type StyleFunction<TStyleProps, TStyleSet> = IStyleFunctionOrObject<TStyleProps, TStyleSet> & {\n  /** Cache for all style functions. */\n  __cachedInputs__: (IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined)[];\n\n  /** True if no styles prop or styles from Customizer is passed to wrapped component. */\n  __noStyleOverride__: boolean;\n};\n\n/**\n * The styled HOC wrapper allows you to create a functional wrapper around a given component which will resolve\n * getStyles functional props, and mix customized props passed in using concatStyleSets.\n *\n * @example\n * ```tsx\n * export const Toggle = styled(\n *   ToggleBase,\n *   props => ({ root: { background: 'red' }})\n * );\n * ```\n * @param Component - The unstyled base component to render, which receives styles.\n * @param baseStyles - The styles which should be curried with the component.\n * @param getProps - A helper which provides default props.\n * @param customizable - An object which defines which props can be customized using the Customizer.\n * @param pure - A boolean indicating if the component should avoid re-rendering when props haven't changed.\n * Note that pure should not be used on components which allow children, or take in complex objects or\n * arrays as props which could mutate on every render.\n */\nexport function styled<\n  TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet>,\n  TStyleProps,\n  TStyleSet extends IStyleSet<TStyleSet>\n>(\n  Component: React.ComponentClass<TComponentProps> | React.FunctionComponent<TComponentProps>,\n  baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>,\n  getProps?: (props: TComponentProps) => Partial<TComponentProps>,\n  customizable?: ICustomizableProps,\n  pure?: boolean,\n): React.FunctionComponent<TComponentProps>;\nexport function styled<\n  TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet> & React.RefAttributes<TRef>,\n  TStyleProps,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TRef = unknown\n>(\n  Component: React.ComponentClass<TComponentProps> | React.FunctionComponent<TComponentProps>,\n  baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>,\n  getProps?: (props: TComponentProps) => Partial<TComponentProps>,\n  customizable?: ICustomizableProps,\n  pure?: boolean,\n): React.ForwardRefExoticComponent<React.PropsWithoutRef<TComponentProps> & React.RefAttributes<TRef>>;\nexport function styled<\n  TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet> & React.RefAttributes<TRef>,\n  TStyleProps,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TRef = unknown\n>(\n  Component: React.ComponentClass<TComponentProps> | React.FunctionComponent<TComponentProps>,\n  baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>,\n  getProps?: (props: TComponentProps) => Partial<TComponentProps>,\n  customizable?: ICustomizableProps,\n  pure?: boolean,\n) {\n  customizable = customizable || { scope: '', fields: undefined };\n\n  const { scope, fields = DefaultFields } = customizable;\n\n  const Wrapped = React.forwardRef((props: TComponentProps, forwardedRef: React.Ref<TRef>) => {\n    const styles = React.useRef<StyleFunction<TStyleProps, TStyleSet>>();\n\n    const settings = useCustomizationSettings(fields, scope);\n    const { styles: customizedStyles, dir, ...rest } = settings;\n    const additionalProps = getProps ? getProps(props) : undefined;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const cache = (styles.current && (styles.current as any).__cachedInputs__) || [];\n    if (!styles.current || customizedStyles !== cache[1] || props.styles !== cache[2]) {\n      // Using styled components as the Component arg will result in nested styling arrays.\n      const concatenatedStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet> = (styleProps: TStyleProps) =>\n        concatStyleSetsWithProps(styleProps, baseStyles, customizedStyles, props.styles);\n\n      // The __cachedInputs__ array is attached to the function and consumed by the\n      // classNamesFunction as a list of keys to include for memoizing classnames.\n      (concatenatedStyles as StyleFunction<TStyleProps, TStyleSet>).__cachedInputs__ = [\n        baseStyles,\n        customizedStyles,\n        props.styles,\n      ];\n\n      (concatenatedStyles as StyleFunction<TStyleProps, TStyleSet>).__noStyleOverride__ =\n        !customizedStyles && !props.styles;\n\n      styles.current = concatenatedStyles as StyleFunction<TStyleProps, TStyleSet>;\n    }\n\n    return <Component ref={forwardedRef} {...rest} {...additionalProps} {...props} styles={styles.current} />;\n  });\n  // Function.prototype.name is an ES6 feature, so the cast to any is required until we're\n  // able to drop IE 11 support and compile with ES6 libs\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Wrapped.displayName = `Styled${Component.displayName || (Component as any).name}`;\n\n  // This preserves backwards compatibility.\n  const pureComponent = pure ? React.memo(Wrapped) : Wrapped;\n  // Check if the wrapper has a displayName after it has been memoized. Then assign it to the pure component.\n  if (Wrapped.displayName) {\n    pureComponent.displayName = Wrapped.displayName;\n  }\n\n  return pureComponent;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}