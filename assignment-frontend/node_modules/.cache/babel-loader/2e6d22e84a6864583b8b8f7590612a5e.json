{"ast":null,"code":"import { Stylesheet } from '@uifabric/merge-styles';\nimport { memoizeFunction } from '@uifabric/utilities';\n/**\n * Internal memoized function which simply takes in the class map and the\n * disable boolean. These immutable values can be memoized.\n */\n\nvar _getGlobalClassNames = memoizeFunction(function (classNames, disableGlobalClassNames) {\n  var styleSheet = Stylesheet.getInstance();\n\n  if (disableGlobalClassNames) {\n    // disable global classnames\n    return Object.keys(classNames).reduce(function (acc, className) {\n      acc[className] = styleSheet.getClassName(classNames[className]);\n      return acc;\n    }, {});\n  } // use global classnames\n\n\n  return classNames;\n});\n/**\n * Checks for the `disableGlobalClassNames` property on the `theme` to determine if it should return `classNames`\n * Note that calls to this function are memoized.\n *\n * @param classNames - The collection of global class names that apply when the flag is false. Make sure to pass in\n * the same instance on each call to benefit from memoization.\n * @param theme - The theme to check the flag on\n * @param disableGlobalClassNames - Optional. Explicitly opt in/out of disabling global classnames. Defaults to false.\n */\n\n\nexport function getGlobalClassNames(classNames, theme, disableGlobalClassNames) {\n  return _getGlobalClassNames(classNames, disableGlobalClassNames !== undefined ? disableGlobalClassNames : theme.disableGlobalClassNames);\n}","map":{"version":3,"sources":["styles/getGlobalClassNames.ts"],"names":[],"mappings":"AACA,SAAS,UAAT,QAA2B,wBAA3B;AACA,SAAS,eAAT,QAAgC,qBAAhC;AAIA;;;AAGG;;AACH,IAAM,oBAAoB,GAAG,eAAe,CAC1C,UAAI,UAAJ,EAAqC,uBAArC,EAAsE;AACpE,MAAM,UAAU,GAAG,UAAU,CAAC,WAAX,EAAnB;;AAEA,MAAI,uBAAJ,EAA6B;AAC3B;AACA,WAAQ,MAAM,CAAC,IAAP,CAAY,UAAZ,EAAwC,MAAxC,CAA+C,UAAC,GAAD,EAAM,SAAN,EAAe;AACpE,MAAA,GAAG,CAAC,SAAD,CAAH,GAAiB,UAAU,CAAC,YAAX,CAAwB,UAAU,CAAC,SAAD,CAAlC,CAAjB;AACA,aAAO,GAAP;AACD,KAHO,EAGL,EAHK,CAAR;AAID,GATmE,CAWpE;;;AACA,SAAO,UAAP;AACD,CAdyC,CAA5C;AAiBA;;;;;;;;AAQG;;;AACH,OAAM,SAAU,mBAAV,CACJ,UADI,EAEJ,KAFI,EAGJ,uBAHI,EAG6B;AAEjC,SAAO,oBAAoB,CACzB,UADyB,EAEzB,uBAAuB,KAAK,SAA5B,GAAwC,uBAAxC,GAAkE,KAAK,CAAC,uBAF/C,CAA3B;AAID","sourcesContent":["import { ITheme } from '../interfaces/index';\nimport { Stylesheet } from '@uifabric/merge-styles';\nimport { memoizeFunction } from '@uifabric/utilities';\n\nexport type GlobalClassNames<IStyles> = Record<keyof IStyles, string>;\n\n/**\n * Internal memoized function which simply takes in the class map and the\n * disable boolean. These immutable values can be memoized.\n */\nconst _getGlobalClassNames = memoizeFunction(\n  <T>(classNames: GlobalClassNames<T>, disableGlobalClassNames?: boolean): GlobalClassNames<T> => {\n    const styleSheet = Stylesheet.getInstance();\n\n    if (disableGlobalClassNames) {\n      // disable global classnames\n      return (Object.keys(classNames) as (keyof T)[]).reduce((acc, className) => {\n        acc[className] = styleSheet.getClassName(classNames[className]);\n        return acc;\n      }, {} as GlobalClassNames<T>);\n    }\n\n    // use global classnames\n    return classNames;\n  },\n);\n\n/**\n * Checks for the `disableGlobalClassNames` property on the `theme` to determine if it should return `classNames`\n * Note that calls to this function are memoized.\n *\n * @param classNames - The collection of global class names that apply when the flag is false. Make sure to pass in\n * the same instance on each call to benefit from memoization.\n * @param theme - The theme to check the flag on\n * @param disableGlobalClassNames - Optional. Explicitly opt in/out of disabling global classnames. Defaults to false.\n */\nexport function getGlobalClassNames<T>(\n  classNames: GlobalClassNames<T>,\n  theme: ITheme,\n  disableGlobalClassNames?: boolean,\n): GlobalClassNames<T> {\n  return _getGlobalClassNames(\n    classNames,\n    disableGlobalClassNames !== undefined ? disableGlobalClassNames : theme.disableGlobalClassNames,\n  );\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}