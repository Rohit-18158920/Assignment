{"ast":null,"code":"import { getDividerClassNames } from '../Divider/VerticalDivider.classNames';\nimport { getMenuItemStyles } from './ContextualMenu.cnstyles';\nimport { mergeStyleSets, getGlobalClassNames, getScreenSelector, ScreenWidthMaxMedium, hiddenContentStyle } from '../../Styling';\nimport { memoizeFunction, IsFocusVisibleClassName } from '../../Utilities';\nvar CONTEXTUAL_SPLIT_MENU_MINWIDTH = '28px';\nvar MediumScreenSelector = getScreenSelector(0, ScreenWidthMaxMedium);\nexport var getSplitButtonVerticalDividerClassNames = memoizeFunction(\n/* eslint-disable deprecation/deprecation */\nfunction (theme) {\n  var _a;\n\n  return mergeStyleSets(getDividerClassNames(theme), {\n    /* eslint-enable deprecation/deprecation */\n    wrapper: {\n      position: 'absolute',\n      right: 28,\n      selectors: (_a = {}, _a[MediumScreenSelector] = {\n        right: 32\n      }, _a)\n    },\n    divider: {\n      height: 16,\n      width: 1\n    }\n  });\n});\nvar GlobalClassNames = {\n  item: 'ms-ContextualMenu-item',\n  divider: 'ms-ContextualMenu-divider',\n  root: 'ms-ContextualMenu-link',\n  isChecked: 'is-checked',\n  isExpanded: 'is-expanded',\n  isDisabled: 'is-disabled',\n  linkContent: 'ms-ContextualMenu-linkContent',\n  linkContentMenu: 'ms-ContextualMenu-linkContent',\n  icon: 'ms-ContextualMenu-icon',\n  iconColor: 'ms-ContextualMenu-iconColor',\n  checkmarkIcon: 'ms-ContextualMenu-checkmarkIcon',\n  subMenuIcon: 'ms-ContextualMenu-submenuIcon',\n  label: 'ms-ContextualMenu-itemText',\n  secondaryText: 'ms-ContextualMenu-secondaryText',\n  splitMenu: 'ms-ContextualMenu-splitMenu',\n  screenReaderText: 'ms-ContextualMenu-screenReaderText'\n};\n/**\n * @deprecated To be removed in 7.0.\n * @internal\n * This is a package-internal method that has been depended on.\n * It is being kept in this form for backwards compatibility.\n * It should be cleaned up in 7.0.\n *\n * TODO: Audit perf. impact of and potentially remove memoizeFunction.\n * https://github.com/microsoft/fluentui/issues/5534\n */\n\nexport var getItemClassNames = memoizeFunction(function (theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className) {\n  var _a, _b, _c, _d;\n\n  var styles = getMenuItemStyles(theme);\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  return mergeStyleSets({\n    item: [classNames.item, styles.item, itemClassName],\n    divider: [classNames.divider, styles.divider, dividerClassName],\n    root: [classNames.root, styles.root, checked && [classNames.isChecked, styles.rootChecked], isAnchorLink && styles.anchorLink, expanded && [classNames.isExpanded, styles.rootExpanded], disabled && [classNames.isDisabled, styles.rootDisabled], !disabled && !expanded && [{\n      selectors: (_a = {\n        ':hover': styles.rootHovered,\n        ':active': styles.rootPressed\n      }, _a[\".\" + IsFocusVisibleClassName + \" &:focus, .\" + IsFocusVisibleClassName + \" &:focus:hover\"] = styles.rootFocused, _a[\".\" + IsFocusVisibleClassName + \" &:hover\"] = {\n        background: 'inherit;'\n      }, _a)\n    }], className],\n    splitPrimary: [styles.root, {\n      width: \"calc(100% - \" + CONTEXTUAL_SPLIT_MENU_MINWIDTH + \")\"\n    }, checked && ['is-checked', styles.rootChecked], (disabled || primaryDisabled) && ['is-disabled', styles.rootDisabled], !(disabled || primaryDisabled) && !checked && [{\n      selectors: (_b = {\n        ':hover': styles.rootHovered\n      }, // when hovering over the splitPrimary also affect the splitMenu\n      _b[\":hover ~ .\" + classNames.splitMenu] = styles.rootHovered, _b[':active'] = styles.rootPressed, _b[\".\" + IsFocusVisibleClassName + \" &:focus, .\" + IsFocusVisibleClassName + \" &:focus:hover\"] = styles.rootFocused, _b[\".\" + IsFocusVisibleClassName + \" &:hover\"] = {\n        background: 'inherit;'\n      }, _b)\n    }]],\n    splitMenu: [classNames.splitMenu, styles.root, {\n      flexBasis: '0',\n      padding: '0 8px',\n      minWidth: CONTEXTUAL_SPLIT_MENU_MINWIDTH\n    }, expanded && ['is-expanded', styles.rootExpanded], disabled && ['is-disabled', styles.rootDisabled], !disabled && !expanded && [{\n      selectors: (_c = {\n        ':hover': styles.rootHovered,\n        ':active': styles.rootPressed\n      }, _c[\".\" + IsFocusVisibleClassName + \" &:focus, .\" + IsFocusVisibleClassName + \" &:focus:hover\"] = styles.rootFocused, _c[\".\" + IsFocusVisibleClassName + \" &:hover\"] = {\n        background: 'inherit;'\n      }, _c)\n    }]],\n    anchorLink: styles.anchorLink,\n    linkContent: [classNames.linkContent, styles.linkContent],\n    linkContentMenu: [classNames.linkContentMenu, styles.linkContent, {\n      justifyContent: 'center'\n    }],\n    icon: [classNames.icon, knownIcon && styles.iconColor, styles.icon, iconClassName, disabled && [classNames.isDisabled, styles.iconDisabled]],\n    iconColor: styles.iconColor,\n    checkmarkIcon: [classNames.checkmarkIcon, knownIcon && styles.checkmarkIcon, styles.icon, iconClassName],\n    subMenuIcon: [classNames.subMenuIcon, styles.subMenuIcon, subMenuClassName, expanded && {\n      color: theme.palette.neutralPrimary\n    }, disabled && [styles.iconDisabled]],\n    label: [classNames.label, styles.label],\n    secondaryText: [classNames.secondaryText, styles.secondaryText],\n    splitContainer: [styles.splitButtonFlexContainer, !disabled && !checked && [{\n      selectors: (_d = {}, _d[\".\" + IsFocusVisibleClassName + \" &:focus, .\" + IsFocusVisibleClassName + \" &:focus:hover\"] = styles.rootFocused, _d)\n    }]],\n    screenReaderText: [classNames.screenReaderText, styles.screenReaderText, hiddenContentStyle, {\n      visibility: 'hidden'\n    }]\n  });\n});\n/**\n * Wrapper function for generating ContextualMenuItem classNames which adheres to\n * the getStyles API, but invokes memoized className generator function with\n * primitive values.\n *\n * @param props - the ContextualMenuItem style props used to generate its styles.\n */\n\nexport var getItemStyles = function (props) {\n  var theme = props.theme,\n      disabled = props.disabled,\n      expanded = props.expanded,\n      checked = props.checked,\n      isAnchorLink = props.isAnchorLink,\n      knownIcon = props.knownIcon,\n      itemClassName = props.itemClassName,\n      dividerClassName = props.dividerClassName,\n      iconClassName = props.iconClassName,\n      subMenuClassName = props.subMenuClassName,\n      primaryDisabled = props.primaryDisabled,\n      className = props.className; // eslint-disable-next-line deprecation/deprecation\n\n  return getItemClassNames(theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className);\n};","map":{"version":3,"sources":["components/ContextualMenu/ContextualMenu.classNames.ts"],"names":[],"mappings":"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","sourcesContent":["import { getDividerClassNames } from '../Divider/VerticalDivider.classNames';\nimport { getMenuItemStyles } from './ContextualMenu.cnstyles';\nimport {\n  ITheme,\n  mergeStyleSets,\n  getGlobalClassNames,\n  getScreenSelector,\n  ScreenWidthMaxMedium,\n  hiddenContentStyle,\n} from '../../Styling';\nimport { IVerticalDividerClassNames } from '../Divider/VerticalDivider.types';\nimport { memoizeFunction, IsFocusVisibleClassName } from '../../Utilities';\nimport { IContextualMenuItemStyles, IContextualMenuItemStyleProps } from './ContextualMenuItem.types';\nimport { IContextualMenuSubComponentStyles } from './ContextualMenu.types';\n\n/**\n * @deprecated in favor of mergeStyles API.\n */\nexport interface IContextualMenuClassNames {\n  container: string;\n  root: string;\n  list: string;\n  header: string;\n  title: string;\n  subComponentStyles?: IContextualMenuSubComponentStyles;\n}\n\n/**\n * @deprecated in favor of mergeStyles API.\n */\nexport interface IMenuItemClassNames {\n  item: string;\n  divider: string;\n  root: string;\n  linkContent: string;\n  icon: string;\n  checkmarkIcon: string;\n  subMenuIcon: string;\n  label: string;\n  secondaryText: string;\n  splitContainer: string;\n  splitPrimary: string;\n  splitMenu: string;\n  linkContentMenu: string;\n  screenReaderText: string;\n}\n\nconst CONTEXTUAL_SPLIT_MENU_MINWIDTH = '28px';\n\nconst MediumScreenSelector = getScreenSelector(0, ScreenWidthMaxMedium);\n\nexport const getSplitButtonVerticalDividerClassNames = memoizeFunction(\n  /* eslint-disable deprecation/deprecation */\n  (theme: ITheme): IVerticalDividerClassNames => {\n    return mergeStyleSets(getDividerClassNames(theme), {\n      /* eslint-enable deprecation/deprecation */\n      wrapper: {\n        position: 'absolute',\n        right: 28, // width of the splitMenu based on the padding plus icon fontSize\n        selectors: {\n          [MediumScreenSelector]: {\n            right: 32, // fontSize of the icon increased from 12px to 16px\n          },\n        },\n      },\n      divider: {\n        height: 16,\n        width: 1,\n      },\n    });\n  },\n);\n\nconst GlobalClassNames = {\n  item: 'ms-ContextualMenu-item',\n  divider: 'ms-ContextualMenu-divider',\n  root: 'ms-ContextualMenu-link',\n  isChecked: 'is-checked',\n  isExpanded: 'is-expanded',\n  isDisabled: 'is-disabled',\n  linkContent: 'ms-ContextualMenu-linkContent',\n  linkContentMenu: 'ms-ContextualMenu-linkContent',\n  icon: 'ms-ContextualMenu-icon',\n  iconColor: 'ms-ContextualMenu-iconColor',\n  checkmarkIcon: 'ms-ContextualMenu-checkmarkIcon',\n  subMenuIcon: 'ms-ContextualMenu-submenuIcon',\n  label: 'ms-ContextualMenu-itemText',\n  secondaryText: 'ms-ContextualMenu-secondaryText',\n  splitMenu: 'ms-ContextualMenu-splitMenu',\n  screenReaderText: 'ms-ContextualMenu-screenReaderText',\n};\n\n/**\n * @deprecated To be removed in 7.0.\n * @internal\n * This is a package-internal method that has been depended on.\n * It is being kept in this form for backwards compatibility.\n * It should be cleaned up in 7.0.\n *\n * TODO: Audit perf. impact of and potentially remove memoizeFunction.\n * https://github.com/microsoft/fluentui/issues/5534\n */\nexport const getItemClassNames = memoizeFunction(\n  (\n    theme: ITheme,\n    disabled: boolean,\n    expanded: boolean,\n    checked: boolean,\n    isAnchorLink: boolean,\n    knownIcon: boolean,\n    itemClassName?: string,\n    dividerClassName?: string,\n    iconClassName?: string,\n    subMenuClassName?: string,\n    primaryDisabled?: boolean,\n    className?: string,\n  ): IContextualMenuItemStyles => {\n    const styles = getMenuItemStyles(theme);\n    const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n    return mergeStyleSets({\n      item: [classNames.item, styles.item, itemClassName],\n      divider: [classNames.divider, styles.divider, dividerClassName],\n      root: [\n        classNames.root,\n        styles.root,\n        checked && [classNames.isChecked, styles.rootChecked],\n        isAnchorLink && styles.anchorLink,\n        expanded && [classNames.isExpanded, styles.rootExpanded],\n        disabled && [classNames.isDisabled, styles.rootDisabled],\n        !disabled &&\n          !expanded && [\n            {\n              selectors: {\n                ':hover': styles.rootHovered,\n                ':active': styles.rootPressed,\n                [`.${IsFocusVisibleClassName} &:focus, .${IsFocusVisibleClassName} &:focus:hover`]: styles.rootFocused,\n                [`.${IsFocusVisibleClassName} &:hover`]: { background: 'inherit;' },\n              },\n            },\n          ],\n        className,\n      ],\n      splitPrimary: [\n        styles.root,\n        {\n          width: `calc(100% - ${CONTEXTUAL_SPLIT_MENU_MINWIDTH})`,\n        },\n        checked && ['is-checked', styles.rootChecked],\n        (disabled || primaryDisabled) && ['is-disabled', styles.rootDisabled],\n        !(disabled || primaryDisabled) &&\n          !checked && [\n            {\n              selectors: {\n                ':hover': styles.rootHovered,\n                // when hovering over the splitPrimary also affect the splitMenu\n                [`:hover ~ .${classNames.splitMenu}`]: styles.rootHovered,\n                ':active': styles.rootPressed,\n                [`.${IsFocusVisibleClassName} &:focus, .${IsFocusVisibleClassName} &:focus:hover`]: styles.rootFocused,\n                [`.${IsFocusVisibleClassName} &:hover`]: { background: 'inherit;' },\n              },\n            },\n          ],\n      ],\n      splitMenu: [\n        classNames.splitMenu,\n        styles.root,\n        {\n          flexBasis: '0',\n          padding: '0 8px',\n          minWidth: CONTEXTUAL_SPLIT_MENU_MINWIDTH,\n        },\n        expanded && ['is-expanded', styles.rootExpanded],\n        disabled && ['is-disabled', styles.rootDisabled],\n        !disabled &&\n          !expanded && [\n            {\n              selectors: {\n                ':hover': styles.rootHovered,\n                ':active': styles.rootPressed,\n                [`.${IsFocusVisibleClassName} &:focus, .${IsFocusVisibleClassName} &:focus:hover`]: styles.rootFocused,\n                [`.${IsFocusVisibleClassName} &:hover`]: { background: 'inherit;' },\n              },\n            },\n          ],\n      ],\n      anchorLink: styles.anchorLink,\n      linkContent: [classNames.linkContent, styles.linkContent],\n      linkContentMenu: [\n        classNames.linkContentMenu,\n        styles.linkContent,\n        {\n          justifyContent: 'center',\n        },\n      ],\n      icon: [\n        classNames.icon,\n        knownIcon && styles.iconColor,\n        styles.icon,\n        iconClassName,\n        disabled && [classNames.isDisabled, styles.iconDisabled],\n      ],\n      iconColor: styles.iconColor,\n      checkmarkIcon: [classNames.checkmarkIcon, knownIcon && styles.checkmarkIcon, styles.icon, iconClassName],\n      subMenuIcon: [\n        classNames.subMenuIcon,\n        styles.subMenuIcon,\n        subMenuClassName,\n        expanded && { color: theme.palette.neutralPrimary },\n        disabled && [styles.iconDisabled],\n      ],\n      label: [classNames.label, styles.label],\n      secondaryText: [classNames.secondaryText, styles.secondaryText],\n      splitContainer: [\n        styles.splitButtonFlexContainer,\n        !disabled &&\n          !checked && [\n            {\n              selectors: {\n                [`.${IsFocusVisibleClassName} &:focus, .${IsFocusVisibleClassName} &:focus:hover`]: styles.rootFocused,\n              },\n            },\n          ],\n      ],\n      screenReaderText: [\n        classNames.screenReaderText,\n        styles.screenReaderText,\n        hiddenContentStyle,\n        { visibility: 'hidden' },\n      ],\n    });\n  },\n);\n\n/**\n * Wrapper function for generating ContextualMenuItem classNames which adheres to\n * the getStyles API, but invokes memoized className generator function with\n * primitive values.\n *\n * @param props - the ContextualMenuItem style props used to generate its styles.\n */\nexport const getItemStyles = (props: IContextualMenuItemStyleProps): IContextualMenuItemStyles => {\n  const {\n    theme,\n    disabled,\n    expanded,\n    checked,\n    isAnchorLink,\n    knownIcon,\n    itemClassName,\n    dividerClassName,\n    iconClassName,\n    subMenuClassName,\n    primaryDisabled,\n    className,\n  } = props;\n\n  // eslint-disable-next-line deprecation/deprecation\n  return getItemClassNames(\n    theme,\n    disabled,\n    expanded,\n    checked,\n    isAnchorLink,\n    knownIcon,\n    itemClassName,\n    dividerClassName,\n    iconClassName,\n    subMenuClassName,\n    primaryDisabled,\n    className,\n  );\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}