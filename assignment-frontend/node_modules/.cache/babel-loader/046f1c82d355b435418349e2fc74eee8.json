{"ast":null,"code":"var _a, _b, _c;\n\nimport { __assign } from \"tslib\";\nimport { HighContrastSelector, ScreenWidthMaxSmall, getScreenSelector, getGlobalClassNames, getFocusStyle, IconFontSizes, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nvar GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine'\n};\nvar backgroundColor = (_a = {}, _a[MessageBarType.error] = 'errorBackground', _a[MessageBarType.blocked] = 'errorBackground', _a[MessageBarType.success] = 'successBackground', _a[MessageBarType.warning] = 'warningBackground', _a[MessageBarType.severeWarning] = 'severeWarningBackground', _a[MessageBarType.info] = 'infoBackground', _a);\nvar highContrastBackgroundColor = (_b = {}, _b[MessageBarType.error] = 'rgba(255, 0, 0, 0.3)', _b[MessageBarType.blocked] = 'rgba(255, 0, 0, 0.3)', _b[MessageBarType.success] = 'rgba(48, 241, 73, 0.3)', _b[MessageBarType.warning] = 'rgba(255, 254, 57, 0.3)', _b[MessageBarType.severeWarning] = 'rgba(255, 0, 0, 0.3)', _b[MessageBarType.info] = 'Window', _b);\nvar iconColor = (_c = {}, _c[MessageBarType.error] = 'errorIcon', _c[MessageBarType.blocked] = 'errorIcon', _c[MessageBarType.success] = 'successIcon', _c[MessageBarType.warning] = 'warningIcon', _c[MessageBarType.severeWarning] = 'severeWarningIcon', _c[MessageBarType.info] = 'infoIcon', _c);\nexport var getStyles = function (props) {\n  var _a, _b, _c, _d, _e;\n\n  var theme = props.theme,\n      className = props.className,\n      onDismiss = props.onDismiss,\n      truncated = props.truncated,\n      isMultiline = props.isMultiline,\n      expandSingleLine = props.expandSingleLine,\n      _f = props.messageBarType,\n      messageBarType = _f === void 0 ? MessageBarType.info : _f;\n  var semanticColors = theme.semanticColors,\n      fonts = theme.fonts;\n  var SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var dismissalAndExpandIconStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: (_a = {}, _a[HighContrastSelector] = __assign(__assign({}, getHighContrastNoAdjustStyle()), {\n      color: 'WindowText'\n    }), _a)\n  };\n  var dismissalAndExpandStyle = [getFocusStyle(theme, {\n    inset: 1,\n    highContrastStyle: {\n      outlineOffset: '-6px',\n      outline: '1px solid Highlight'\n    },\n    borderColor: 'transparent'\n  }), {\n    flexShrink: 0,\n    width: 32,\n    height: 32,\n    padding: '8px 12px',\n    selectors: {\n      '& .ms-Button-icon': dismissalAndExpandIconStyle,\n      ':hover': {\n        backgroundColor: 'transparent'\n      },\n      ':active': {\n        backgroundColor: 'transparent'\n      }\n    }\n  }];\n  return {\n    root: [classNames.root, fonts.medium, messageBarType === MessageBarType.error && classNames.error, messageBarType === MessageBarType.blocked && classNames.blocked, messageBarType === MessageBarType.severeWarning && classNames.severeWarning, messageBarType === MessageBarType.success && classNames.success, messageBarType === MessageBarType.warning && classNames.warning, isMultiline ? classNames.multiline : classNames.singleline, !isMultiline && onDismiss && classNames.dismissalSingleLine, !isMultiline && truncated && classNames.expandingSingleLine, {\n      background: semanticColors[backgroundColor[messageBarType]],\n      color: semanticColors.messageText,\n      minHeight: 32,\n      width: '100%',\n      display: 'flex',\n      wordBreak: 'break-word',\n      selectors: (_b = {\n        '.ms-Link': {\n          color: semanticColors.messageLink,\n          selectors: {\n            ':hover': {\n              color: semanticColors.messageLinkHovered\n            }\n          }\n        }\n      }, _b[HighContrastSelector] = __assign(__assign({}, getHighContrastNoAdjustStyle()), {\n        background: highContrastBackgroundColor[messageBarType],\n        border: '1px solid WindowText',\n        color: 'WindowText'\n      }), _b)\n    }, isMultiline && {\n      flexDirection: 'column'\n    }, className],\n    content: [classNames.content, {\n      display: 'flex',\n      width: '100%',\n      lineHeight: 'normal'\n    }],\n    iconContainer: [classNames.iconContainer, {\n      fontSize: IconFontSizes.medium,\n      minWidth: 16,\n      minHeight: 16,\n      display: 'flex',\n      flexShrink: 0,\n      margin: '8px 0 8px 12px'\n    }],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: (_c = {}, _c[HighContrastSelector] = __assign(__assign({}, getHighContrastNoAdjustStyle()), {\n        color: 'WindowText'\n      }), _c)\n    },\n    text: [classNames.text, __assign(__assign({\n      minWidth: 0,\n      display: 'flex',\n      flexGrow: 1,\n      margin: 8\n    }, fonts.small), {\n      selectors: (_d = {}, _d[HighContrastSelector] = __assign({}, getHighContrastNoAdjustStyle()), _d)\n    }), !onDismiss && {\n      marginRight: 12\n    }],\n    innerText: [classNames.innerText, {\n      lineHeight: 16,\n      selectors: {\n        '& span a': {\n          paddingLeft: 4\n        }\n      }\n    }, truncated && {\n      overflow: 'visible',\n      whiteSpace: 'pre-wrap'\n    }, !isMultiline && {\n      // In high contrast this causes the top and bottom of links' focus outline to be clipped\n      // (not sure of a good way around that while still maintaining text clipping)\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    }, !isMultiline && !truncated && {\n      selectors: (_e = {}, _e[SmallScreenSelector] = {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap'\n      }, _e)\n    }, expandSingleLine && {\n      overflow: 'visible',\n      whiteSpace: 'pre-wrap'\n    }],\n    dismissSingleLine: classNames.dismissSingleLine,\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [isMultiline ? classNames.actions : classNames.actionsSingleline, {\n      display: 'flex',\n      flexGrow: 0,\n      flexShrink: 0,\n      flexBasis: 'auto',\n      flexDirection: 'row-reverse',\n      alignItems: 'center',\n      margin: '0 12px 0 8px',\n      selectors: {\n        '& button:nth-child(n+2)': {\n          marginLeft: 8\n        }\n      }\n    }, isMultiline && {\n      marginBottom: 8\n    }, onDismiss && !isMultiline && {\n      marginRight: 0\n    }]\n  };\n};","map":{"version":3,"sources":["components/MessageBar/MessageBar.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  IStyle,\n  ISemanticColors,\n  HighContrastSelector,\n  ScreenWidthMaxSmall,\n  getScreenSelector,\n  getGlobalClassNames,\n  getFocusStyle,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { IMessageBarStyleProps, IMessageBarStyles, MessageBarType } from './MessageBar.types';\n\nconst GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\n\nconst backgroundColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorBackground',\n  [MessageBarType.blocked]: 'errorBackground',\n  [MessageBarType.success]: 'successBackground',\n  [MessageBarType.warning]: 'warningBackground',\n  [MessageBarType.severeWarning]: 'severeWarningBackground',\n  [MessageBarType.info]: 'infoBackground',\n};\n\nconst highContrastBackgroundColor: { [key: string]: string } = {\n  [MessageBarType.error]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.blocked]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.success]: 'rgba(48, 241, 73, 0.3)',\n  [MessageBarType.warning]: 'rgba(255, 254, 57, 0.3)',\n  [MessageBarType.severeWarning]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.info]: 'Window',\n};\n\nconst iconColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorIcon',\n  [MessageBarType.blocked]: 'errorIcon',\n  [MessageBarType.success]: 'successIcon',\n  [MessageBarType.warning]: 'warningIcon',\n  [MessageBarType.severeWarning]: 'severeWarningIcon',\n  [MessageBarType.info]: 'infoIcon',\n};\n\nexport const getStyles = (props: IMessageBarStyleProps): IMessageBarStyles => {\n  const {\n    theme,\n    className,\n    onDismiss,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    messageBarType = MessageBarType.info,\n  } = props;\n  const { semanticColors, fonts } = theme;\n\n  const SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const dismissalAndExpandIconStyle: IStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: {\n      [HighContrastSelector]: {\n        ...getHighContrastNoAdjustStyle(),\n        color: 'WindowText',\n      },\n    },\n  };\n\n  const dismissalAndExpandStyle: IStyle = [\n    getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: {\n        outlineOffset: '-6px',\n        outline: '1px solid Highlight',\n      },\n      borderColor: 'transparent',\n    }),\n    {\n      flexShrink: 0,\n      width: 32,\n      height: 32,\n      padding: '8px 12px',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle,\n        ':hover': {\n          backgroundColor: 'transparent',\n        },\n        ':active': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      messageBarType === MessageBarType.error && classNames.error,\n      messageBarType === MessageBarType.blocked && classNames.blocked,\n      messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n      messageBarType === MessageBarType.success && classNames.success,\n      messageBarType === MessageBarType.warning && classNames.warning,\n      isMultiline ? classNames.multiline : classNames.singleline,\n      !isMultiline && onDismiss && classNames.dismissalSingleLine,\n      !isMultiline && truncated && classNames.expandingSingleLine,\n      {\n        background: semanticColors[backgroundColor[messageBarType]],\n        color: semanticColors.messageText,\n        minHeight: 32,\n        width: '100%',\n        display: 'flex',\n        wordBreak: 'break-word',\n        selectors: {\n          '.ms-Link': {\n            color: semanticColors.messageLink,\n            selectors: {\n              ':hover': {\n                color: semanticColors.messageLinkHovered,\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n            background: highContrastBackgroundColor[messageBarType],\n            border: '1px solid WindowText',\n            color: 'WindowText',\n          },\n        },\n      },\n      isMultiline && {\n        flexDirection: 'column',\n      },\n      className,\n    ],\n    content: [\n      classNames.content,\n      {\n        display: 'flex',\n        width: '100%',\n        lineHeight: 'normal',\n      },\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        fontSize: IconFontSizes.medium,\n        minWidth: 16,\n        minHeight: 16,\n        display: 'flex',\n        flexShrink: 0,\n        margin: '8px 0 8px 12px',\n      },\n    ],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: {\n        [HighContrastSelector]: {\n          ...getHighContrastNoAdjustStyle(),\n          color: 'WindowText',\n        },\n      },\n    },\n    text: [\n      classNames.text,\n      {\n        minWidth: 0,\n        display: 'flex',\n        flexGrow: 1,\n        margin: 8,\n        ...fonts.small,\n        selectors: {\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      !onDismiss && {\n        marginRight: 12,\n      },\n    ],\n    innerText: [\n      classNames.innerText,\n      {\n        lineHeight: 16,\n        selectors: {\n          '& span a': {\n            paddingLeft: 4,\n          },\n        },\n      },\n      truncated && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n      !isMultiline && {\n        // In high contrast this causes the top and bottom of links' focus outline to be clipped\n        // (not sure of a good way around that while still maintaining text clipping)\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      },\n      !isMultiline &&\n        !truncated && {\n          selectors: {\n            [SmallScreenSelector]: {\n              overflow: 'visible',\n              whiteSpace: 'pre-wrap',\n            },\n          },\n        },\n      expandSingleLine && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n    dismissSingleLine: classNames.dismissSingleLine,\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [\n      isMultiline ? classNames.actions : classNames.actionsSingleline,\n      {\n        display: 'flex',\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n        flexDirection: 'row-reverse',\n        alignItems: 'center',\n        margin: '0 12px 0 8px',\n        selectors: {\n          '& button:nth-child(n+2)': {\n            marginLeft: 8,\n          },\n        },\n      },\n      isMultiline && {\n        marginBottom: 8,\n      },\n      onDismiss &&\n        !isMultiline && {\n          marginRight: 0,\n        },\n    ],\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}