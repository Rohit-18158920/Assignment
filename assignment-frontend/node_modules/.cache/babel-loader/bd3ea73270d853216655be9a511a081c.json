{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css } from '../../Utilities';\nimport { SelectionMode } from '../../utilities/selection/interfaces';\nimport { DetailsList } from './DetailsList';\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType } from '../../Shimmer';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DEFAULT_CELL_STYLE_PROPS, DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\nvar getClassNames = classNamesFunction();\nvar SHIMMER_INITIAL_ITEMS = 10;\nvar DEFAULT_SHIMMER_HEIGHT = 7;\nvar SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\n\nvar ShimmeredDetailsListBase =\n/** @class */\nfunction (_super) {\n  __extends(ShimmeredDetailsListBase, _super);\n\n  function ShimmeredDetailsListBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._onRenderShimmerPlaceholder = function (index, rowProps) {\n      var onRenderCustomPlaceholder = _this.props.onRenderCustomPlaceholder;\n      var placeholderElements = onRenderCustomPlaceholder ? onRenderCustomPlaceholder(rowProps, index, _this._renderDefaultShimmerPlaceholder) : _this._renderDefaultShimmerPlaceholder(rowProps);\n      return React.createElement(Shimmer, {\n        customElementsGroup: placeholderElements\n      });\n    };\n\n    _this._renderDefaultShimmerPlaceholder = function (rowProps) {\n      var columns = rowProps.columns,\n          compact = rowProps.compact,\n          selectionMode = rowProps.selectionMode,\n          checkboxVisibility = rowProps.checkboxVisibility,\n          _a = rowProps.cellStyleProps,\n          cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n      var rowHeight = DEFAULT_ROW_HEIGHTS.rowHeight,\n          compactRowHeight = DEFAULT_ROW_HEIGHTS.compactRowHeight; // 1px to take into account the border-bottom of DetailsRow.\n\n      var gapHeight = compact ? compactRowHeight : rowHeight + 1;\n      var shimmerElementsRow = [];\n      var showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n\n      if (showCheckbox) {\n        shimmerElementsRow.push(React.createElement(ShimmerElementsGroup, {\n          key: 'checkboxGap',\n          shimmerElements: [{\n            type: ShimmerElementType.gap,\n            width: '40px',\n            height: gapHeight\n          }]\n        }));\n      }\n\n      columns.forEach(function (column, columnIdx) {\n        var shimmerElements = [];\n        var groupWidth = cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + column.calculatedWidth + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width: cellStyleProps.cellLeftPadding,\n          height: gapHeight\n        });\n\n        if (column.isIconOnly) {\n          shimmerElements.push({\n            type: ShimmerElementType.line,\n            width: column.calculatedWidth,\n            height: column.calculatedWidth\n          });\n          shimmerElements.push({\n            type: ShimmerElementType.gap,\n            width: cellStyleProps.cellRightPadding,\n            height: gapHeight\n          });\n        } else {\n          shimmerElements.push({\n            type: ShimmerElementType.line,\n            width: column.calculatedWidth * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\n            height: DEFAULT_SHIMMER_HEIGHT\n          });\n          shimmerElements.push({\n            type: ShimmerElementType.gap,\n            width: cellStyleProps.cellRightPadding + (column.calculatedWidth - column.calculatedWidth * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n            height: gapHeight\n          });\n        }\n\n        shimmerElementsRow.push(React.createElement(ShimmerElementsGroup, {\n          key: columnIdx,\n          width: groupWidth + \"px\",\n          shimmerElements: shimmerElements\n        }));\n      }); // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave\n      // until the column resizing logic is done.\n\n      shimmerElementsRow.push(React.createElement(ShimmerElementsGroup, {\n        key: 'endGap',\n        width: '100%',\n        shimmerElements: [{\n          type: ShimmerElementType.gap,\n          width: '100%',\n          height: gapHeight\n        }]\n      }));\n      return React.createElement(\"div\", {\n        style: {\n          display: 'flex'\n        }\n      }, shimmerElementsRow);\n    };\n\n    _this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\n    return _this;\n  }\n\n  ShimmeredDetailsListBase.prototype.render = function () {\n    var _a = this.props,\n        detailsListStyles = _a.detailsListStyles,\n        enableShimmer = _a.enableShimmer,\n        items = _a.items,\n        listProps = _a.listProps,\n        onRenderCustomPlaceholder = _a.onRenderCustomPlaceholder,\n        removeFadingOverlay = _a.removeFadingOverlay,\n        shimmerLines = _a.shimmerLines,\n        styles = _a.styles,\n        theme = _a.theme,\n        ariaLabelForGrid = _a.ariaLabelForGrid,\n        ariaLabelForShimmer = _a.ariaLabelForShimmer,\n        restProps = __rest(_a, [\"detailsListStyles\", \"enableShimmer\", \"items\", \"listProps\", \"onRenderCustomPlaceholder\", \"removeFadingOverlay\", \"shimmerLines\", \"styles\", \"theme\", \"ariaLabelForGrid\", \"ariaLabelForShimmer\"]);\n\n    var listClassName = listProps && listProps.className;\n    this._classNames = getClassNames(styles, {\n      theme: theme\n    });\n\n    var newListProps = __assign(__assign({}, listProps), {\n      // Adds to the optional listProp className a fading out overlay className only when `enableShimmer` toggled on\n      // and the overlay is not disabled by `removeFadingOverlay` prop.\n      className: enableShimmer && !removeFadingOverlay ? css(this._classNames.root, listClassName) : listClassName\n    });\n\n    return React.createElement(DetailsList, __assign({}, restProps, {\n      styles: detailsListStyles,\n      items: enableShimmer ? this._shimmerItems : items,\n      isPlaceholderData: enableShimmer,\n      ariaLabelForGrid: enableShimmer && ariaLabelForShimmer || ariaLabelForGrid,\n      onRenderMissingItem: this._onRenderShimmerPlaceholder,\n      listProps: newListProps\n    }));\n  };\n\n  return ShimmeredDetailsListBase;\n}(React.Component);\n\nexport { ShimmeredDetailsListBase };","map":{"version":3,"sources":["components/DetailsList/ShimmeredDetailsList.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { classNamesFunction, css } from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { SelectionMode } from '../../utilities/selection/interfaces';\nimport { DetailsList } from './DetailsList';\nimport { IDetailsRowProps } from './DetailsRow.types';\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType, IShimmerElement } from '../../Shimmer';\nimport {\n  IShimmeredDetailsListProps,\n  IShimmeredDetailsListStyleProps,\n  IShimmeredDetailsListStyles,\n} from './ShimmeredDetailsList.types';\nimport { CheckboxVisibility } from './DetailsList.types';\n\nimport { DEFAULT_CELL_STYLE_PROPS, DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\n\nconst getClassNames = classNamesFunction<IShimmeredDetailsListStyleProps, IShimmeredDetailsListStyles>();\n\nconst SHIMMER_INITIAL_ITEMS = 10;\nconst DEFAULT_SHIMMER_HEIGHT = 7;\nconst SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\n\nexport class ShimmeredDetailsListBase extends React.Component<IShimmeredDetailsListProps, {}> {\n  private _shimmerItems: null[];\n  private _classNames: IProcessedStyleSet<IShimmeredDetailsListStyles>;\n\n  constructor(props: IShimmeredDetailsListProps) {\n    super(props);\n\n    this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\n  }\n\n  public render(): JSX.Element {\n    const {\n      detailsListStyles,\n      enableShimmer,\n      items,\n      listProps,\n      onRenderCustomPlaceholder,\n      removeFadingOverlay,\n      shimmerLines,\n      styles,\n      theme,\n      ariaLabelForGrid,\n      ariaLabelForShimmer,\n      ...restProps\n    } = this.props;\n\n    const listClassName = listProps && listProps.className;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n    });\n\n    const newListProps = {\n      ...listProps,\n      // Adds to the optional listProp className a fading out overlay className only when `enableShimmer` toggled on\n      // and the overlay is not disabled by `removeFadingOverlay` prop.\n      className: enableShimmer && !removeFadingOverlay ? css(this._classNames.root, listClassName) : listClassName,\n    };\n\n    return (\n      <DetailsList\n        {...restProps}\n        styles={detailsListStyles}\n        items={enableShimmer ? this._shimmerItems : items}\n        isPlaceholderData={enableShimmer}\n        ariaLabelForGrid={(enableShimmer && ariaLabelForShimmer) || ariaLabelForGrid}\n        onRenderMissingItem={this._onRenderShimmerPlaceholder}\n        listProps={newListProps}\n      />\n    );\n  }\n\n  private _onRenderShimmerPlaceholder = (index: number, rowProps: IDetailsRowProps): React.ReactNode => {\n    const { onRenderCustomPlaceholder } = this.props;\n\n    const placeholderElements: React.ReactNode = onRenderCustomPlaceholder\n      ? onRenderCustomPlaceholder(rowProps, index, this._renderDefaultShimmerPlaceholder)\n      : this._renderDefaultShimmerPlaceholder(rowProps);\n\n    return <Shimmer customElementsGroup={placeholderElements} />;\n  };\n\n  private _renderDefaultShimmerPlaceholder = (rowProps: IDetailsRowProps): React.ReactNode => {\n    const { columns, compact, selectionMode, checkboxVisibility, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = rowProps;\n\n    const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\n    // 1px to take into account the border-bottom of DetailsRow.\n    const gapHeight: number = compact ? compactRowHeight : rowHeight + 1;\n\n    const shimmerElementsRow: JSX.Element[] = [];\n\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n\n    if (showCheckbox) {\n      shimmerElementsRow.push(\n        <ShimmerElementsGroup\n          key={'checkboxGap'}\n          shimmerElements={[{ type: ShimmerElementType.gap, width: '40px', height: gapHeight }]}\n        />,\n      );\n    }\n\n    columns.forEach((column, columnIdx) => {\n      const shimmerElements: IShimmerElement[] = [];\n      const groupWidth: number =\n        cellStyleProps.cellLeftPadding +\n        cellStyleProps.cellRightPadding +\n        column.calculatedWidth! +\n        (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n      shimmerElements.push({\n        type: ShimmerElementType.gap,\n        width: cellStyleProps.cellLeftPadding,\n        height: gapHeight,\n      });\n\n      if (column.isIconOnly) {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth!,\n          height: column.calculatedWidth!,\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width: cellStyleProps.cellRightPadding,\n          height: gapHeight,\n        });\n      } else {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\n          height: DEFAULT_SHIMMER_HEIGHT,\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width:\n            cellStyleProps.cellRightPadding +\n            (column.calculatedWidth! - column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) +\n            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          height: gapHeight,\n        });\n      }\n      shimmerElementsRow.push(\n        <ShimmerElementsGroup key={columnIdx} width={`${groupWidth}px`} shimmerElements={shimmerElements} />,\n      );\n    });\n    // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave\n    // until the column resizing logic is done.\n    shimmerElementsRow.push(\n      <ShimmerElementsGroup\n        key={'endGap'}\n        width={'100%'}\n        shimmerElements={[{ type: ShimmerElementType.gap, width: '100%', height: gapHeight }]}\n      />,\n    );\n    return <div style={{ display: 'flex' }}>{shimmerElementsRow}</div>;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}