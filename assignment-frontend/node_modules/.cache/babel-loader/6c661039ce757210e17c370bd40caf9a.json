{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { cloneElement } from 'react';\nimport uncontrollable from 'uncontrollable';\nimport { bsClass, getClassSet, splitBsPropsAndOmit } from './utils/bootstrapUtils';\nimport ValidComponentChildren from './utils/ValidComponentChildren';\nimport { generatedId } from './utils/PropTypes';\nvar propTypes = {\n  accordion: PropTypes.bool,\n\n  /**\n   * When `accordion` is enabled, `activeKey` controls the which child `Panel` is expanded. `activeKey` should\n   * match a child Panel `eventKey` prop exactly.\n   *\n   * @controllable onSelect\n   */\n  activeKey: PropTypes.any,\n\n  /**\n   * A callback fired when a child Panel collapse state changes. It's called with the next expanded `activeKey`\n   *\n   * @controllable activeKey\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * An HTML role attribute\n   */\n  role: PropTypes.string,\n\n  /**\n   * A function that takes an eventKey and type and returns a\n   * unique id for each Panel heading and Panel Collapse. The function _must_ be a pure function,\n   * meaning it should always return the _same_ id for the same set of inputs. The default\n   * value requires that an `id` to be set for the PanelGroup.\n   *\n   * The `type` argument will either be `\"body\"` or `\"heading\"`.\n   *\n   * @defaultValue (eventKey, type) => `${this.props.id}-${type}-${key}`\n   */\n  generateChildId: PropTypes.func,\n\n  /**\n   * HTML id attribute, required if no `generateChildId` prop\n   * is specified.\n   */\n  id: generatedId('PanelGroup')\n};\nvar defaultProps = {\n  accordion: false\n};\nvar childContextTypes = {\n  $bs_panelGroup: PropTypes.shape({\n    getId: PropTypes.func,\n    headerRole: PropTypes.string,\n    panelRole: PropTypes.string,\n    activeKey: PropTypes.any,\n    onToggle: PropTypes.func\n  })\n};\n\nvar PanelGroup = function (_React$Component) {\n  _inherits(PanelGroup, _React$Component);\n\n  function PanelGroup() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, PanelGroup);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleSelect = function (key, expanded, e) {\n      if (expanded) {\n        _this.props.onSelect(key, e);\n      } else if (_this.props.activeKey === key) {\n        _this.props.onSelect(null, e);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  PanelGroup.prototype.getChildContext = function getChildContext() {\n    var _props = this.props,\n        activeKey = _props.activeKey,\n        accordion = _props.accordion,\n        generateChildId = _props.generateChildId,\n        id = _props.id;\n    var getId = null;\n\n    if (accordion) {\n      getId = generateChildId || function (key, type) {\n        return id ? id + '-' + type + '-' + key : null;\n      };\n    }\n\n    return {\n      $bs_panelGroup: _extends({\n        getId: getId,\n        headerRole: 'tab',\n        panelRole: 'tabpanel'\n      }, accordion && {\n        activeKey: activeKey,\n        onToggle: this.handleSelect\n      })\n    };\n  };\n\n  PanelGroup.prototype.render = function render() {\n    var _props2 = this.props,\n        accordion = _props2.accordion,\n        className = _props2.className,\n        children = _props2.children,\n        props = _objectWithoutProperties(_props2, ['accordion', 'className', 'children']);\n\n    var _splitBsPropsAndOmit = splitBsPropsAndOmit(props, ['onSelect', 'activeKey']),\n        bsProps = _splitBsPropsAndOmit[0],\n        elementProps = _splitBsPropsAndOmit[1];\n\n    if (accordion) {\n      elementProps.role = elementProps.role || 'tablist';\n    }\n\n    var classes = getClassSet(bsProps);\n    return React.createElement('div', _extends({}, elementProps, {\n      className: classNames(className, classes)\n    }), ValidComponentChildren.map(children, function (child) {\n      return cloneElement(child, {\n        bsStyle: child.props.bsStyle || bsProps.bsStyle\n      });\n    }));\n  };\n\n  return PanelGroup;\n}(React.Component);\n\nPanelGroup.propTypes = propTypes;\nPanelGroup.defaultProps = defaultProps;\nPanelGroup.childContextTypes = childContextTypes;\nexport default uncontrollable(bsClass('panel-group', PanelGroup), {\n  activeKey: 'onSelect'\n});","map":{"version":3,"sources":["D:/personalWork/assignment-frontend/node_modules/react-bootstrap/es/PanelGroup.js"],"names":["_objectWithoutProperties","_extends","_classCallCheck","_possibleConstructorReturn","_inherits","classNames","PropTypes","React","cloneElement","uncontrollable","bsClass","getClassSet","splitBsPropsAndOmit","ValidComponentChildren","generatedId","propTypes","accordion","bool","activeKey","any","onSelect","func","role","string","generateChildId","id","defaultProps","childContextTypes","$bs_panelGroup","shape","getId","headerRole","panelRole","onToggle","PanelGroup","_React$Component","_temp","_this","_ret","_len","arguments","length","args","Array","_key","call","apply","concat","handleSelect","key","expanded","e","props","prototype","getChildContext","_props","type","render","_props2","className","children","_splitBsPropsAndOmit","bsProps","elementProps","classes","createElement","map","child","bsStyle","Component"],"mappings":"AAAA,OAAOA,wBAAP,MAAqC,+CAArC;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,eAAP,MAA4B,sCAA5B;AACA,OAAOC,0BAAP,MAAuC,iDAAvC;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,YAAhB,QAAoC,OAApC;AACA,OAAOC,cAAP,MAA2B,gBAA3B;AAEA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,mBAA/B,QAA0D,wBAA1D;AACA,OAAOC,sBAAP,MAAmC,gCAAnC;AACA,SAASC,WAAT,QAA4B,mBAA5B;AAEA,IAAIC,SAAS,GAAG;AACdC,EAAAA,SAAS,EAAEV,SAAS,CAACW,IADP;;AAEd;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,EAAEZ,SAAS,CAACa,GARP;;AAUd;AACF;AACA;AACA;AACA;AACEC,EAAAA,QAAQ,EAAEd,SAAS,CAACe,IAfN;;AAiBd;AACF;AACA;AACEC,EAAAA,IAAI,EAAEhB,SAAS,CAACiB,MApBF;;AAsBd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,eAAe,EAAElB,SAAS,CAACe,IAhCb;;AAkCd;AACF;AACA;AACA;AACEI,EAAAA,EAAE,EAAEX,WAAW,CAAC,YAAD;AAtCD,CAAhB;AAyCA,IAAIY,YAAY,GAAG;AACjBV,EAAAA,SAAS,EAAE;AADM,CAAnB;AAIA,IAAIW,iBAAiB,GAAG;AACtBC,EAAAA,cAAc,EAAEtB,SAAS,CAACuB,KAAV,CAAgB;AAC9BC,IAAAA,KAAK,EAAExB,SAAS,CAACe,IADa;AAE9BU,IAAAA,UAAU,EAAEzB,SAAS,CAACiB,MAFQ;AAG9BS,IAAAA,SAAS,EAAE1B,SAAS,CAACiB,MAHS;AAI9BL,IAAAA,SAAS,EAAEZ,SAAS,CAACa,GAJS;AAK9Bc,IAAAA,QAAQ,EAAE3B,SAAS,CAACe;AALU,GAAhB;AADM,CAAxB;;AAUA,IAAIa,UAAU,GAAG,UAAUC,gBAAV,EAA4B;AAC3C/B,EAAAA,SAAS,CAAC8B,UAAD,EAAaC,gBAAb,CAAT;;AAEA,WAASD,UAAT,GAAsB;AACpB,QAAIE,KAAJ,EAAWC,KAAX,EAAkBC,IAAlB;;AAEApC,IAAAA,eAAe,CAAC,IAAD,EAAOgC,UAAP,CAAf;;AAEA,SAAK,IAAIK,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAGC,KAAK,CAACJ,IAAD,CAAzC,EAAiDK,IAAI,GAAG,CAA7D,EAAgEA,IAAI,GAAGL,IAAvE,EAA6EK,IAAI,EAAjF,EAAqF;AACnFF,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAED,WAAON,IAAI,IAAIF,KAAK,IAAIC,KAAK,GAAGlC,0BAA0B,CAAC,IAAD,EAAOgC,gBAAgB,CAACU,IAAjB,CAAsBC,KAAtB,CAA4BX,gBAA5B,EAA8C,CAAC,IAAD,EAAOY,MAAP,CAAcL,IAAd,CAA9C,CAAP,CAAlC,EAA8GL,KAAlH,CAAL,EAA+HA,KAAK,CAACW,YAAN,GAAqB,UAAUC,GAAV,EAAeC,QAAf,EAAyBC,CAAzB,EAA4B;AAC7L,UAAID,QAAJ,EAAc;AACZb,QAAAA,KAAK,CAACe,KAAN,CAAYhC,QAAZ,CAAqB6B,GAArB,EAA0BE,CAA1B;AACD,OAFD,MAEO,IAAId,KAAK,CAACe,KAAN,CAAYlC,SAAZ,KAA0B+B,GAA9B,EAAmC;AACxCZ,QAAAA,KAAK,CAACe,KAAN,CAAYhC,QAAZ,CAAqB,IAArB,EAA2B+B,CAA3B;AACD;AACF,KANc,EAMZf,KANQ,CAAJ,EAMIjC,0BAA0B,CAACkC,KAAD,EAAQC,IAAR,CANrC;AAOD;;AAEDJ,EAAAA,UAAU,CAACmB,SAAX,CAAqBC,eAArB,GAAuC,SAASA,eAAT,GAA2B;AAChE,QAAIC,MAAM,GAAG,KAAKH,KAAlB;AAAA,QACIlC,SAAS,GAAGqC,MAAM,CAACrC,SADvB;AAAA,QAEIF,SAAS,GAAGuC,MAAM,CAACvC,SAFvB;AAAA,QAGIQ,eAAe,GAAG+B,MAAM,CAAC/B,eAH7B;AAAA,QAIIC,EAAE,GAAG8B,MAAM,CAAC9B,EAJhB;AAMA,QAAIK,KAAK,GAAG,IAAZ;;AAEA,QAAId,SAAJ,EAAe;AACbc,MAAAA,KAAK,GAAGN,eAAe,IAAI,UAAUyB,GAAV,EAAeO,IAAf,EAAqB;AAC9C,eAAO/B,EAAE,GAAGA,EAAE,GAAG,GAAL,GAAW+B,IAAX,GAAkB,GAAlB,GAAwBP,GAA3B,GAAiC,IAA1C;AACD,OAFD;AAGD;;AAED,WAAO;AACLrB,MAAAA,cAAc,EAAE3B,QAAQ,CAAC;AACvB6B,QAAAA,KAAK,EAAEA,KADgB;AAEvBC,QAAAA,UAAU,EAAE,KAFW;AAGvBC,QAAAA,SAAS,EAAE;AAHY,OAAD,EAIrBhB,SAAS,IAAI;AACdE,QAAAA,SAAS,EAAEA,SADG;AAEde,QAAAA,QAAQ,EAAE,KAAKe;AAFD,OAJQ;AADnB,KAAP;AAUD,GAzBD;;AA2BAd,EAAAA,UAAU,CAACmB,SAAX,CAAqBI,MAArB,GAA8B,SAASA,MAAT,GAAkB;AAC9C,QAAIC,OAAO,GAAG,KAAKN,KAAnB;AAAA,QACIpC,SAAS,GAAG0C,OAAO,CAAC1C,SADxB;AAAA,QAEI2C,SAAS,GAAGD,OAAO,CAACC,SAFxB;AAAA,QAGIC,QAAQ,GAAGF,OAAO,CAACE,QAHvB;AAAA,QAIIR,KAAK,GAAGpD,wBAAwB,CAAC0D,OAAD,EAAU,CAAC,WAAD,EAAc,WAAd,EAA2B,UAA3B,CAAV,CAJpC;;AAMA,QAAIG,oBAAoB,GAAGjD,mBAAmB,CAACwC,KAAD,EAAQ,CAAC,UAAD,EAAa,WAAb,CAAR,CAA9C;AAAA,QACIU,OAAO,GAAGD,oBAAoB,CAAC,CAAD,CADlC;AAAA,QAEIE,YAAY,GAAGF,oBAAoB,CAAC,CAAD,CAFvC;;AAIA,QAAI7C,SAAJ,EAAe;AACb+C,MAAAA,YAAY,CAACzC,IAAb,GAAoByC,YAAY,CAACzC,IAAb,IAAqB,SAAzC;AACD;;AAED,QAAI0C,OAAO,GAAGrD,WAAW,CAACmD,OAAD,CAAzB;AAEA,WAAOvD,KAAK,CAAC0D,aAAN,CACL,KADK,EAELhE,QAAQ,CAAC,EAAD,EAAK8D,YAAL,EAAmB;AAAEJ,MAAAA,SAAS,EAAEtD,UAAU,CAACsD,SAAD,EAAYK,OAAZ;AAAvB,KAAnB,CAFH,EAGLnD,sBAAsB,CAACqD,GAAvB,CAA2BN,QAA3B,EAAqC,UAAUO,KAAV,EAAiB;AACpD,aAAO3D,YAAY,CAAC2D,KAAD,EAAQ;AACzBC,QAAAA,OAAO,EAAED,KAAK,CAACf,KAAN,CAAYgB,OAAZ,IAAuBN,OAAO,CAACM;AADf,OAAR,CAAnB;AAGD,KAJD,CAHK,CAAP;AASD,GA1BD;;AA4BA,SAAOlC,UAAP;AACD,CA7EgB,CA6Ef3B,KAAK,CAAC8D,SA7ES,CAAjB;;AA+EAnC,UAAU,CAACnB,SAAX,GAAuBA,SAAvB;AACAmB,UAAU,CAACR,YAAX,GAA0BA,YAA1B;AACAQ,UAAU,CAACP,iBAAX,GAA+BA,iBAA/B;AAEA,eAAelB,cAAc,CAACC,OAAO,CAAC,aAAD,EAAgBwB,UAAhB,CAAR,EAAqC;AAChEhB,EAAAA,SAAS,EAAE;AADqD,CAArC,CAA7B","sourcesContent":["import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { cloneElement } from 'react';\nimport uncontrollable from 'uncontrollable';\n\nimport { bsClass, getClassSet, splitBsPropsAndOmit } from './utils/bootstrapUtils';\nimport ValidComponentChildren from './utils/ValidComponentChildren';\nimport { generatedId } from './utils/PropTypes';\n\nvar propTypes = {\n  accordion: PropTypes.bool,\n  /**\n   * When `accordion` is enabled, `activeKey` controls the which child `Panel` is expanded. `activeKey` should\n   * match a child Panel `eventKey` prop exactly.\n   *\n   * @controllable onSelect\n   */\n  activeKey: PropTypes.any,\n\n  /**\n   * A callback fired when a child Panel collapse state changes. It's called with the next expanded `activeKey`\n   *\n   * @controllable activeKey\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * An HTML role attribute\n   */\n  role: PropTypes.string,\n\n  /**\n   * A function that takes an eventKey and type and returns a\n   * unique id for each Panel heading and Panel Collapse. The function _must_ be a pure function,\n   * meaning it should always return the _same_ id for the same set of inputs. The default\n   * value requires that an `id` to be set for the PanelGroup.\n   *\n   * The `type` argument will either be `\"body\"` or `\"heading\"`.\n   *\n   * @defaultValue (eventKey, type) => `${this.props.id}-${type}-${key}`\n   */\n  generateChildId: PropTypes.func,\n\n  /**\n   * HTML id attribute, required if no `generateChildId` prop\n   * is specified.\n   */\n  id: generatedId('PanelGroup')\n};\n\nvar defaultProps = {\n  accordion: false\n};\n\nvar childContextTypes = {\n  $bs_panelGroup: PropTypes.shape({\n    getId: PropTypes.func,\n    headerRole: PropTypes.string,\n    panelRole: PropTypes.string,\n    activeKey: PropTypes.any,\n    onToggle: PropTypes.func\n  })\n};\n\nvar PanelGroup = function (_React$Component) {\n  _inherits(PanelGroup, _React$Component);\n\n  function PanelGroup() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, PanelGroup);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleSelect = function (key, expanded, e) {\n      if (expanded) {\n        _this.props.onSelect(key, e);\n      } else if (_this.props.activeKey === key) {\n        _this.props.onSelect(null, e);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  PanelGroup.prototype.getChildContext = function getChildContext() {\n    var _props = this.props,\n        activeKey = _props.activeKey,\n        accordion = _props.accordion,\n        generateChildId = _props.generateChildId,\n        id = _props.id;\n\n    var getId = null;\n\n    if (accordion) {\n      getId = generateChildId || function (key, type) {\n        return id ? id + '-' + type + '-' + key : null;\n      };\n    }\n\n    return {\n      $bs_panelGroup: _extends({\n        getId: getId,\n        headerRole: 'tab',\n        panelRole: 'tabpanel'\n      }, accordion && {\n        activeKey: activeKey,\n        onToggle: this.handleSelect\n      })\n    };\n  };\n\n  PanelGroup.prototype.render = function render() {\n    var _props2 = this.props,\n        accordion = _props2.accordion,\n        className = _props2.className,\n        children = _props2.children,\n        props = _objectWithoutProperties(_props2, ['accordion', 'className', 'children']);\n\n    var _splitBsPropsAndOmit = splitBsPropsAndOmit(props, ['onSelect', 'activeKey']),\n        bsProps = _splitBsPropsAndOmit[0],\n        elementProps = _splitBsPropsAndOmit[1];\n\n    if (accordion) {\n      elementProps.role = elementProps.role || 'tablist';\n    }\n\n    var classes = getClassSet(bsProps);\n\n    return React.createElement(\n      'div',\n      _extends({}, elementProps, { className: classNames(className, classes) }),\n      ValidComponentChildren.map(children, function (child) {\n        return cloneElement(child, {\n          bsStyle: child.props.bsStyle || bsProps.bsStyle\n        });\n      })\n    );\n  };\n\n  return PanelGroup;\n}(React.Component);\n\nPanelGroup.propTypes = propTypes;\nPanelGroup.defaultProps = defaultProps;\nPanelGroup.childContextTypes = childContextTypes;\n\nexport default uncontrollable(bsClass('panel-group', PanelGroup), {\n  activeKey: 'onSelect'\n});"]},"metadata":{},"sourceType":"module"}