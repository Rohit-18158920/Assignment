{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { warnDeprecations, classNamesFunction, getId } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { Modal } from '../../Modal';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\nvar getClassNames = classNamesFunction();\nimport { DialogContent } from './DialogContent';\nvar DefaultModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false\n};\nvar DefaultDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: []\n};\n\nvar DialogBase =\n/** @class */\nfunction (_super) {\n  __extends(DialogBase, _super);\n\n  function DialogBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._getSubTextId = function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          ariaDescribedById = _a.ariaDescribedById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          subText = _a.subText;\n      var id = modalProps && modalProps.subtitleAriaId || ariaDescribedById;\n\n      if (!id) {\n        id = (dialogContentProps && dialogContentProps.subText || subText) && _this._defaultSubTextId;\n      }\n\n      return id;\n    };\n\n    _this._getTitleTextId = function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          ariaLabelledById = _a.ariaLabelledById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          title = _a.title;\n      var id = modalProps && modalProps.titleAriaId || ariaLabelledById;\n\n      if (!id) {\n        id = (dialogContentProps && dialogContentProps.title || title) && _this._defaultTitleTextId;\n      }\n\n      return id;\n    };\n\n    _this._id = getId('Dialog');\n    _this._defaultTitleTextId = _this._id + '-title';\n    _this._defaultSubTextId = _this._id + '-subText';\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId'\n      });\n    }\n\n    return _this;\n  }\n\n  DialogBase.prototype.render = function () {\n    var _a, _b;\n\n    var _c = this.props,\n\n    /* eslint-disable deprecation/deprecation */\n    className = _c.className,\n        containerClassName = _c.containerClassName,\n        contentClassName = _c.contentClassName,\n        elementToFocusOnDismiss = _c.elementToFocusOnDismiss,\n        firstFocusableSelector = _c.firstFocusableSelector,\n        forceFocusInsideTrap = _c.forceFocusInsideTrap,\n        styles = _c.styles,\n        hidden = _c.hidden,\n        ignoreExternalFocusing = _c.ignoreExternalFocusing,\n        isBlocking = _c.isBlocking,\n        isClickableOutsideFocusTrap = _c.isClickableOutsideFocusTrap,\n        isDarkOverlay = _c.isDarkOverlay,\n        isOpen = _c.isOpen,\n        onDismiss = _c.onDismiss,\n        onDismissed = _c.onDismissed,\n        onLayerDidMount = _c.onLayerDidMount,\n        responsiveMode = _c.responsiveMode,\n        subText = _c.subText,\n        theme = _c.theme,\n        title = _c.title,\n        topButtonsProps = _c.topButtonsProps,\n        type = _c.type,\n\n    /* eslint-enable deprecation/deprecation */\n    minWidth = _c.minWidth,\n        maxWidth = _c.maxWidth,\n        modalProps = _c.modalProps;\n\n    var mergedLayerProps = __assign({}, modalProps ? modalProps.layerProps : {\n      onLayerDidMount: onLayerDidMount\n    });\n\n    if (onLayerDidMount && !mergedLayerProps.onLayerDidMount) {\n      mergedLayerProps.onLayerDidMount = onLayerDidMount;\n    }\n\n    var dialogDraggableClassName;\n    var dragOptions; // if we are draggable, make sure we are using the correct\n    // draggable classname and selectors\n\n    if (modalProps && modalProps.dragOptions && !modalProps.dragOptions.dragHandleSelector) {\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions = __assign(__assign({}, modalProps.dragOptions), {\n        dragHandleSelector: \".\" + dialogDraggableClassName\n      });\n    } else {\n      dragOptions = modalProps && modalProps.dragOptions;\n    }\n\n    var mergedModalProps = __assign(__assign(__assign(__assign({}, DefaultModalProps), {\n      className: className,\n      containerClassName: containerClassName,\n      isBlocking: isBlocking,\n      isDarkOverlay: isDarkOverlay,\n      onDismissed: onDismissed\n    }), modalProps), {\n      layerProps: mergedLayerProps,\n      dragOptions: dragOptions\n    });\n\n    var dialogContentProps = __assign(__assign(__assign({\n      className: contentClassName,\n      subText: subText,\n      title: title,\n      topButtonsProps: topButtonsProps,\n      type: type\n    }, DefaultDialogContentProps), this.props.dialogContentProps), {\n      draggableHeaderClassName: dialogDraggableClassName,\n      titleProps: __assign({\n        // eslint-disable-next-line deprecation/deprecation\n        id: ((_a = this.props.dialogContentProps) === null || _a === void 0 ? void 0 : _a.titleId) || this._defaultTitleTextId\n      }, (_b = this.props.dialogContentProps) === null || _b === void 0 ? void 0 : _b.titleProps)\n    });\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: mergedModalProps.className,\n      containerClassName: mergedModalProps.containerClassName,\n      hidden: hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth\n    });\n    return React.createElement(Modal, __assign({\n      elementToFocusOnDismiss: elementToFocusOnDismiss,\n      firstFocusableSelector: firstFocusableSelector,\n      forceFocusInsideTrap: forceFocusInsideTrap,\n      ignoreExternalFocusing: ignoreExternalFocusing,\n      isClickableOutsideFocusTrap: isClickableOutsideFocusTrap,\n      onDismissed: mergedModalProps.onDismissed,\n      responsiveMode: responsiveMode\n    }, mergedModalProps, {\n      isDarkOverlay: mergedModalProps.isDarkOverlay,\n      isBlocking: mergedModalProps.isBlocking,\n      isOpen: isOpen !== undefined ? isOpen : !hidden,\n      className: classNames.root,\n      containerClassName: classNames.main,\n      onDismiss: onDismiss ? onDismiss : mergedModalProps.onDismiss,\n      subtitleAriaId: this._getSubTextId(),\n      titleAriaId: this._getTitleTextId()\n    }), React.createElement(DialogContent, __assign({\n      subTextId: this._defaultSubTextId,\n      title: dialogContentProps.title,\n      subText: dialogContentProps.subText,\n      showCloseButton: mergedModalProps.isBlocking,\n      topButtonsProps: dialogContentProps.topButtonsProps,\n      type: dialogContentProps.type,\n      onDismiss: onDismiss ? onDismiss : dialogContentProps.onDismiss,\n      className: dialogContentProps.className\n    }, dialogContentProps), this.props.children));\n  };\n\n  DialogBase.defaultProps = {\n    hidden: true\n  };\n  DialogBase = __decorate([withResponsiveMode], DialogBase);\n  return DialogBase;\n}(React.Component);\n\nexport { DialogBase };","map":{"version":3,"sources":["components/Dialog/Dialog.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { warnDeprecations, classNamesFunction, getId } from '../../Utilities';\nimport { IDialogProps, IDialogStyleProps, IDialogStyles } from './Dialog.types';\nimport { DialogType, IDialogContentProps } from './DialogContent.types';\nimport { Modal, IModalProps, IDragOptions } from '../../Modal';\nimport { ILayerProps } from '../../Layer';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\n\nconst getClassNames = classNamesFunction<IDialogStyleProps, IDialogStyles>();\n\nimport { DialogContent } from './DialogContent';\n\nconst DefaultModalProps: IModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false,\n};\n\nconst DefaultDialogContentProps: IDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: [],\n};\n\n@withResponsiveMode\nexport class DialogBase extends React.Component<IDialogProps, {}> {\n  public static defaultProps: IDialogProps = {\n    hidden: true,\n  };\n\n  private _id: string;\n  private _defaultTitleTextId: string;\n  private _defaultSubTextId: string;\n\n  constructor(props: IDialogProps) {\n    super(props);\n\n    this._id = getId('Dialog');\n    this._defaultTitleTextId = this._id + '-title';\n    this._defaultSubTextId = this._id + '-subText';\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId',\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      /* eslint-disable deprecation/deprecation */\n      className,\n      containerClassName,\n      contentClassName,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      styles,\n      hidden,\n      ignoreExternalFocusing,\n      isBlocking,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      isOpen,\n      onDismiss,\n      onDismissed,\n      onLayerDidMount,\n      responsiveMode,\n      subText,\n      theme,\n      title,\n      topButtonsProps,\n      type,\n      /* eslint-enable deprecation/deprecation */\n      minWidth,\n      maxWidth,\n      modalProps,\n    } = this.props;\n\n    const mergedLayerProps: ILayerProps = {\n      ...(modalProps ? modalProps.layerProps : { onLayerDidMount }),\n    };\n    if (onLayerDidMount && !mergedLayerProps.onLayerDidMount) {\n      mergedLayerProps.onLayerDidMount = onLayerDidMount;\n    }\n\n    let dialogDraggableClassName: string | undefined;\n    let dragOptions: IDragOptions | undefined;\n\n    // if we are draggable, make sure we are using the correct\n    // draggable classname and selectors\n    if (modalProps && modalProps.dragOptions && !modalProps.dragOptions.dragHandleSelector) {\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions = {\n        ...modalProps.dragOptions,\n        dragHandleSelector: `.${dialogDraggableClassName}`,\n      };\n    } else {\n      dragOptions = modalProps && modalProps.dragOptions;\n    }\n\n    const mergedModalProps = {\n      ...DefaultModalProps,\n      className,\n      containerClassName,\n      isBlocking,\n      isDarkOverlay,\n      onDismissed,\n      ...modalProps,\n      layerProps: mergedLayerProps,\n      dragOptions,\n    };\n\n    const dialogContentProps: IDialogContentProps = {\n      className: contentClassName,\n      subText,\n      title,\n      topButtonsProps,\n      type,\n      ...DefaultDialogContentProps,\n      ...this.props.dialogContentProps,\n      draggableHeaderClassName: dialogDraggableClassName,\n      titleProps: {\n        // eslint-disable-next-line deprecation/deprecation\n        id: this.props.dialogContentProps?.titleId || this._defaultTitleTextId,\n        ...this.props.dialogContentProps?.titleProps,\n      },\n    };\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: mergedModalProps.className,\n      containerClassName: mergedModalProps.containerClassName,\n      hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth,\n    });\n\n    return (\n      <Modal\n        elementToFocusOnDismiss={elementToFocusOnDismiss}\n        firstFocusableSelector={firstFocusableSelector}\n        forceFocusInsideTrap={forceFocusInsideTrap}\n        ignoreExternalFocusing={ignoreExternalFocusing}\n        isClickableOutsideFocusTrap={isClickableOutsideFocusTrap}\n        onDismissed={mergedModalProps.onDismissed}\n        responsiveMode={responsiveMode}\n        {...mergedModalProps}\n        isDarkOverlay={mergedModalProps.isDarkOverlay}\n        isBlocking={mergedModalProps.isBlocking}\n        isOpen={isOpen !== undefined ? isOpen : !hidden}\n        className={classNames.root}\n        containerClassName={classNames.main}\n        onDismiss={onDismiss ? onDismiss : mergedModalProps.onDismiss}\n        subtitleAriaId={this._getSubTextId()}\n        titleAriaId={this._getTitleTextId()}\n      >\n        <DialogContent\n          subTextId={this._defaultSubTextId}\n          title={dialogContentProps.title}\n          subText={dialogContentProps.subText}\n          showCloseButton={mergedModalProps.isBlocking}\n          topButtonsProps={dialogContentProps.topButtonsProps}\n          type={dialogContentProps.type}\n          onDismiss={onDismiss ? onDismiss : dialogContentProps.onDismiss}\n          className={dialogContentProps.className}\n          {...dialogContentProps}\n        >\n          {this.props.children}\n        </DialogContent>\n      </Modal>\n    );\n  }\n\n  private _getSubTextId = (): string | undefined => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ariaDescribedById, modalProps, dialogContentProps, subText } = this.props;\n    let id = (modalProps && modalProps.subtitleAriaId) || ariaDescribedById;\n\n    if (!id) {\n      id = ((dialogContentProps && dialogContentProps.subText) || subText) && this._defaultSubTextId;\n    }\n\n    return id;\n  };\n\n  private _getTitleTextId = (): string | undefined => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ariaLabelledById, modalProps, dialogContentProps, title } = this.props;\n    let id = (modalProps && modalProps.titleAriaId) || ariaLabelledById;\n\n    if (!id) {\n      id = ((dialogContentProps && dialogContentProps.title) || title) && this._defaultTitleTextId;\n    }\n\n    return id;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}