{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { initializeComponentRef, warnDeprecations, warnMutuallyExclusive, classNamesFunction, find, getId, isControlled, getNativeProps, divProperties, setFocusVisibility } from '../../Utilities';\nimport { ChoiceGroupOption } from './ChoiceGroupOption/index';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory ChoiceGroup}\n */\n\nvar ChoiceGroupBase =\n/** @class */\nfunction (_super) {\n  __extends(ChoiceGroupBase, _super);\n\n  function ChoiceGroupBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusCallbacks = {};\n    _this._changeCallbacks = {};\n\n    _this._onBlur = function (ev, option) {\n      _this.setState({\n        keyFocused: undefined\n      });\n    };\n\n    initializeComponentRef(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('ChoiceGroup', props, {\n        onChanged: 'onChange'\n      });\n      warnMutuallyExclusive('ChoiceGroup', props, {\n        selectedKey: 'defaultSelectedKey'\n      });\n    }\n\n    var defaultSelectedKey = props.defaultSelectedKey,\n        _a = props.options,\n        options = _a === void 0 ? [] : _a;\n    var validDefaultSelectedKey = !_isControlled(props) && defaultSelectedKey !== undefined && options.some(function (option) {\n      return option.key === defaultSelectedKey;\n    });\n    _this.state = {\n      keyChecked: validDefaultSelectedKey ? defaultSelectedKey : _this._getKeyChecked(props)\n    };\n    _this._id = getId('ChoiceGroup');\n    _this._labelId = getId('ChoiceGroupLabel');\n    return _this;\n  }\n\n  Object.defineProperty(ChoiceGroupBase.prototype, \"checkedOption\", {\n    /**\n     * Gets the current checked option.\n     */\n    get: function () {\n      var _this = this;\n\n      var _a = this.props.options,\n          options = _a === void 0 ? [] : _a;\n      return find(options, function (value) {\n        return value.key === _this.state.keyChecked;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ChoiceGroupBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // Only update if a new props object has been passed in (don't care about state updates)\n    if (prevProps !== this.props) {\n      var newKeyChecked = this._getKeyChecked(this.props);\n\n      var oldKeyChecked = this._getKeyChecked(prevProps);\n\n      if (newKeyChecked !== oldKeyChecked) {\n        this.setState({\n          keyChecked: newKeyChecked\n        });\n      }\n    }\n  };\n\n  ChoiceGroupBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        className = _a.className,\n        theme = _a.theme,\n        styles = _a.styles,\n        _b = _a.options,\n        options = _b === void 0 ? [] : _b,\n        label = _a.label,\n        required = _a.required,\n        disabled = _a.disabled,\n        name = _a.name;\n    var _c = this.state,\n        keyChecked = _c.keyChecked,\n        keyFocused = _c.keyFocused;\n    var divProps = getNativeProps(this.props, divProperties, ['onChange', 'className', 'required']);\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      optionsContainIconOrImage: options.some(function (option) {\n        return !!(option.iconProps || option.imageSrc);\n      })\n    });\n    var labelId = this._id + '-label';\n    var ariaLabelledBy = this.props.ariaLabelledBy || (label ? labelId : this.props['aria-labelledby']); // TODO (Fabric 8?) - if possible, move `root` class to the actual root and eliminate\n    // `applicationRole` class (but the div structure will stay the same by necessity)\n\n    return (// eslint-disable-next-line deprecation/deprecation\n      React.createElement(\"div\", __assign({\n        className: classNames.applicationRole\n      }, divProps), React.createElement(\"div\", __assign({\n        className: classNames.root,\n        role: \"radiogroup\"\n      }, ariaLabelledBy && {\n        'aria-labelledby': ariaLabelledBy\n      }), label && React.createElement(Label, {\n        className: classNames.label,\n        required: required,\n        id: labelId,\n        disabled: disabled\n      }, label), React.createElement(\"div\", {\n        className: classNames.flexContainer\n      }, options.map(function (option) {\n        var innerOptionProps = __assign(__assign({}, option), {\n          focused: option.key === keyFocused,\n          checked: option.key === keyChecked,\n          disabled: option.disabled || disabled,\n          id: _this._getOptionId(option),\n          labelId: _this._getOptionLabelId(option),\n          name: name || _this._id,\n          required: required\n        });\n\n        return React.createElement(ChoiceGroupOption, __assign({\n          key: option.key,\n          onBlur: _this._onBlur,\n          onFocus: _this._onFocus(option.key),\n          onChange: _this._onChange(option.key)\n        }, innerOptionProps));\n      }))))\n    );\n  };\n\n  ChoiceGroupBase.prototype.focus = function () {\n    var _a = this.props.options,\n        options = _a === void 0 ? [] : _a;\n    var optionToFocus = this.checkedOption || options.filter(function (option) {\n      return !option.disabled;\n    })[0];\n    var elementToFocus = optionToFocus && document.getElementById(this._getOptionId(optionToFocus));\n\n    if (elementToFocus) {\n      elementToFocus.focus();\n      setFocusVisibility(true, elementToFocus);\n    }\n  };\n\n  ChoiceGroupBase.prototype._onFocus = function (key) {\n    var _this = this; // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n\n\n    if (!this._focusCallbacks[key]) {\n      this._focusCallbacks[key] = function (ev, option) {\n        _this.setState({\n          keyFocused: key\n        });\n      };\n    }\n\n    return this._focusCallbacks[key];\n  };\n\n  ChoiceGroupBase.prototype._onChange = function (key) {\n    var _this = this; // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n\n\n    if (!this._changeCallbacks[key]) {\n      this._changeCallbacks[key] = function (evt, option) {\n        // eslint-disable-next-line deprecation/deprecation\n        var _a = _this.props,\n            onChanged = _a.onChanged,\n            onChange = _a.onChange; // Only manage state in uncontrolled scenarios.\n\n        if (!_isControlled(_this.props)) {\n          _this.setState({\n            keyChecked: key\n          });\n        } // Get the original option without the `key` prop removed\n\n\n        var originalOption = find(_this.props.options || [], function (value) {\n          return value.key === key;\n        }); // TODO: onChanged deprecated, remove else if after 07/17/2017 when onChanged has been removed.\n\n        if (onChange) {\n          onChange(evt, originalOption);\n        } else if (onChanged) {\n          onChanged(originalOption, evt);\n        }\n      };\n    }\n\n    return this._changeCallbacks[key];\n  };\n  /**\n   * Returns `selectedKey` if provided, or the key of the first option with the `checked` prop set.\n   */\n\n\n  ChoiceGroupBase.prototype._getKeyChecked = function (props) {\n    if (props.selectedKey !== undefined) {\n      return props.selectedKey;\n    }\n\n    var _a = props.options,\n        options = _a === void 0 ? [] : _a; // eslint-disable-next-line deprecation/deprecation\n\n    var optionsChecked = options.filter(function (option) {\n      return option.checked;\n    });\n    return optionsChecked[0] && optionsChecked[0].key;\n  };\n\n  ChoiceGroupBase.prototype._getOptionId = function (option) {\n    return option.id || this._id + \"-\" + option.key;\n  };\n\n  ChoiceGroupBase.prototype._getOptionLabelId = function (option) {\n    return option.labelId || this._labelId + \"-\" + option.key;\n  };\n\n  return ChoiceGroupBase;\n}(React.Component);\n\nexport { ChoiceGroupBase };\n\nfunction _isControlled(props) {\n  return isControlled(props, 'selectedKey');\n}","map":{"version":3,"sources":["components/ChoiceGroup/ChoiceGroup.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { Label } from '../../Label';\nimport {\n  initializeComponentRef,\n  warnDeprecations,\n  warnMutuallyExclusive,\n  classNamesFunction,\n  find,\n  getId,\n  isControlled,\n  getNativeProps,\n  divProperties,\n  setFocusVisibility,\n} from '../../Utilities';\nimport {\n  IChoiceGroup,\n  IChoiceGroupOption,\n  IChoiceGroupProps,\n  IChoiceGroupStyleProps,\n  IChoiceGroupStyles,\n} from './ChoiceGroup.types';\nimport { ChoiceGroupOption, IChoiceGroupOptionProps } from './ChoiceGroupOption/index';\n\nconst getClassNames = classNamesFunction<IChoiceGroupStyleProps, IChoiceGroupStyles>();\n\nexport interface IChoiceGroupState {\n  /**\n   * Current selected option, for **internal use only**.\n   * External users should access `IChoiceGroup.checkedOption` instead.\n   */\n  // TODO (Fabric 8?) - once we removed the checked property from individual options,\n  // we can probably store only the uncontrolled value in the state (right now it tracks\n  // the value regardless of controlled/uncontrolled--though if controlled, it only updates\n  // the value in state when the selectedKey prop updates)\n  keyChecked?: string | number;\n\n  /** Is set when the control has focus. */\n  keyFocused?: string | number;\n}\n\n/**\n * {@docCategory ChoiceGroup}\n */\nexport class ChoiceGroupBase extends React.Component<IChoiceGroupProps, IChoiceGroupState> implements IChoiceGroup {\n  private _id: string;\n  private _labelId: string;\n  private _focusCallbacks: { [key: string]: IChoiceGroupOptionProps['onFocus'] } = {};\n  private _changeCallbacks: { [key: string]: IChoiceGroupOptionProps['onBlur'] } = {};\n\n  constructor(props: IChoiceGroupProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('ChoiceGroup', props, { onChanged: 'onChange' });\n      warnMutuallyExclusive('ChoiceGroup', props, {\n        selectedKey: 'defaultSelectedKey',\n      });\n    }\n\n    const { defaultSelectedKey, options = [] } = props;\n    const validDefaultSelectedKey =\n      !_isControlled(props) &&\n      defaultSelectedKey !== undefined &&\n      options.some(option => option.key === defaultSelectedKey);\n\n    this.state = {\n      keyChecked: validDefaultSelectedKey ? defaultSelectedKey : this._getKeyChecked(props),\n    };\n\n    this._id = getId('ChoiceGroup');\n    this._labelId = getId('ChoiceGroupLabel');\n  }\n\n  /**\n   * Gets the current checked option.\n   */\n  public get checkedOption(): IChoiceGroupOption | undefined {\n    const { options = [] } = this.props;\n    return find(options, (value: IChoiceGroupOption) => value.key === this.state.keyChecked);\n  }\n\n  public componentDidUpdate(prevProps: IChoiceGroupProps, prevState: IChoiceGroupState): void {\n    // Only update if a new props object has been passed in (don't care about state updates)\n    if (prevProps !== this.props) {\n      const newKeyChecked = this._getKeyChecked(this.props);\n      const oldKeyChecked = this._getKeyChecked(prevProps);\n\n      if (newKeyChecked !== oldKeyChecked) {\n        this.setState({\n          keyChecked: newKeyChecked,\n        });\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const { className, theme, styles, options = [], label, required, disabled, name } = this.props;\n    const { keyChecked, keyFocused } = this.state;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, [\n      'onChange',\n      'className',\n      'required',\n    ]);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      optionsContainIconOrImage: options.some(option => !!(option.iconProps || option.imageSrc)),\n    });\n\n    const labelId = this._id + '-label';\n    const ariaLabelledBy = this.props.ariaLabelledBy || (label ? labelId : this.props['aria-labelledby']);\n\n    // TODO (Fabric 8?) - if possible, move `root` class to the actual root and eliminate\n    // `applicationRole` class (but the div structure will stay the same by necessity)\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div className={classNames.applicationRole} {...divProps}>\n        <div\n          className={classNames.root}\n          role=\"radiogroup\"\n          {...(ariaLabelledBy && { 'aria-labelledby': ariaLabelledBy })}\n        >\n          {label && (\n            <Label className={classNames.label} required={required} id={labelId} disabled={disabled}>\n              {label}\n            </Label>\n          )}\n          <div className={classNames.flexContainer}>\n            {options.map((option: IChoiceGroupOption) => {\n              const innerOptionProps = {\n                ...option,\n                focused: option.key === keyFocused,\n                checked: option.key === keyChecked,\n                disabled: option.disabled || disabled,\n                id: this._getOptionId(option),\n                labelId: this._getOptionLabelId(option),\n                name: name || this._id,\n                required,\n              };\n\n              return (\n                <ChoiceGroupOption\n                  key={option.key}\n                  onBlur={this._onBlur}\n                  onFocus={this._onFocus(option.key)}\n                  onChange={this._onChange(option.key)}\n                  {...innerOptionProps}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  public focus() {\n    const { options = [] } = this.props;\n    const optionToFocus = this.checkedOption || options.filter(option => !option.disabled)[0];\n    const elementToFocus = optionToFocus && document.getElementById(this._getOptionId(optionToFocus));\n    if (elementToFocus) {\n      elementToFocus.focus();\n      setFocusVisibility(true, elementToFocus as Element);\n    }\n  }\n\n  private _onFocus(key: string) {\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._focusCallbacks[key]) {\n      this._focusCallbacks[key] = (\n        ev: React.FocusEvent<HTMLElement | HTMLInputElement>,\n        option: IChoiceGroupOption,\n      ) => {\n        this.setState({\n          keyFocused: key,\n        });\n      };\n    }\n    return this._focusCallbacks[key];\n  }\n\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>, option: IChoiceGroupOption) => {\n    this.setState({\n      keyFocused: undefined,\n    });\n  };\n\n  private _onChange(key: string) {\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._changeCallbacks[key]) {\n      this._changeCallbacks[key] = (\n        evt: React.FormEvent<HTMLElement | HTMLInputElement>,\n        option: IChoiceGroupOption,\n      ) => {\n        // eslint-disable-next-line deprecation/deprecation\n        const { onChanged, onChange } = this.props;\n\n        // Only manage state in uncontrolled scenarios.\n        if (!_isControlled(this.props)) {\n          this.setState({\n            keyChecked: key,\n          });\n        }\n\n        // Get the original option without the `key` prop removed\n        const originalOption = find(this.props.options || [], (value: IChoiceGroupOption) => value.key === key);\n\n        // TODO: onChanged deprecated, remove else if after 07/17/2017 when onChanged has been removed.\n        if (onChange) {\n          onChange(evt, originalOption);\n        } else if (onChanged) {\n          onChanged(originalOption!, evt);\n        }\n      };\n    }\n    return this._changeCallbacks[key];\n  }\n\n  /**\n   * Returns `selectedKey` if provided, or the key of the first option with the `checked` prop set.\n   */\n  private _getKeyChecked(props: IChoiceGroupProps): string | number | undefined {\n    if (props.selectedKey !== undefined) {\n      return props.selectedKey;\n    }\n\n    const { options = [] } = props;\n    // eslint-disable-next-line deprecation/deprecation\n    const optionsChecked = options.filter((option: IChoiceGroupOption) => option.checked);\n    return optionsChecked[0] && optionsChecked[0].key;\n  }\n\n  private _getOptionId(option: IChoiceGroupOption): string {\n    return option.id || `${this._id}-${option.key}`;\n  }\n\n  private _getOptionLabelId(option: IChoiceGroupOption): string {\n    return option.labelId || `${this._labelId}-${option.key}`;\n  }\n}\n\nfunction _isControlled(props: IChoiceGroupProps): boolean {\n  return isControlled(props, 'selectedKey');\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}