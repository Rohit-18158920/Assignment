{"ast":null,"code":"import { appendFunction } from './appendFunction';\n/**\n * Extends a component's lifetime methods by appending new functions to the existing lifetime functions.\n */\n\nexport function extendComponent(parent, methods) {\n  for (var name_1 in methods) {\n    if (methods.hasOwnProperty(name_1)) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parent[name_1] = appendFunction(parent, parent[name_1], methods[name_1]);\n    }\n  }\n}","map":{"version":3,"sources":["extendComponent.ts"],"names":[],"mappings":"AACA,SAAS,cAAT,QAA+B,kBAA/B;AAEA;;AAEG;;AACH,OAAM,SAAU,eAAV,CAAqD,MAArD,EAAgE,OAAhE,EAAsG;AAC1G,OAAK,IAAI,MAAT,IAAiB,OAAjB,EAA0B;AACxB,QAAI,OAAO,CAAC,cAAR,CAAuB,MAAvB,CAAJ,EAAkC;AAChC;AACA,MAAA,MAAM,CAAC,MAAD,CAAN,GAAe,cAAc,CAAC,MAAD,EAAS,MAAM,CAAC,MAAD,CAAf,EAAuB,OAAO,CAAC,MAAD,CAA9B,CAA7B;AACD;AACF;AACF","sourcesContent":["import * as React from 'react';\nimport { appendFunction } from './appendFunction';\n\n/**\n * Extends a component's lifetime methods by appending new functions to the existing lifetime functions.\n */\nexport function extendComponent<T extends React.Component>(parent: T, methods: { [key in keyof T]?: T[key] }): void {\n  for (let name in methods) {\n    if (methods.hasOwnProperty(name)) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parent[name] = appendFunction(parent, parent[name], methods[name]) as any;\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}