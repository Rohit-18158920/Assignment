{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, getId, allowScrollOnElement, allowOverscrollOnElement, KeyCodes, elementContains, warnDeprecations, Async, EventGroup } from '../../Utilities';\nimport { FocusTrapZone } from '../FocusTrapZone/index';\nimport { animationDuration } from './Modal.styles';\nimport { Overlay } from '../../Overlay';\nimport { Layer } from '../../Layer';\nimport { Popup } from '../Popup/index';\nimport { withResponsiveMode, ResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\nimport { DirectionalHint } from '../Callout/index';\nimport { Icon } from '../Icon/index';\nimport { DraggableZone } from '../../utilities/DraggableZone/index';\nimport { initializeComponentRef } from '@uifabric/utilities'; // @TODO - need to change this to a panel whenever the breakpoint is under medium (verify the spec)\n\nvar DefaultLayerProps = {\n  eventBubblingEnabled: false\n};\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'Modal';\n\nvar ModalBase =\n/** @class */\nfunction (_super) {\n  __extends(ModalBase, _super);\n\n  function ModalBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusTrapZone = React.createRef();\n\n    _this._registerInitialModalPosition = function () {\n      var _a;\n\n      var dialogMain = document.querySelector(\"[data-id=\" + _this.state.id + \"]\");\n\n      if (dialogMain) {\n        var modalRectangle = dialogMain.getBoundingClientRect();\n\n        if (((_a = _this.props.dragOptions) === null || _a === void 0 ? void 0 : _a.keepInBounds) && !_this._minClampedPosition && !_this._maxClampedPosition) {\n          _this._minClampedPosition = {\n            x: -modalRectangle.x,\n            y: -modalRectangle.y\n          };\n          _this._maxClampedPosition = {\n            x: modalRectangle.x,\n            y: modalRectangle.y\n          };\n        }\n\n        _this.setState({\n          modalRectangleTop: modalRectangle.top\n        });\n      }\n    }; // Allow the user to scroll within the modal but not on the body\n\n\n    _this._allowScrollOnModal = function (elt) {\n      if (elt) {\n        if (_this._allowTouchBodyScroll) {\n          allowOverscrollOnElement(elt, _this._events);\n        } else {\n          allowScrollOnElement(elt, _this._events);\n        }\n      } else {\n        _this._events.off(_this._scrollableContent);\n      }\n\n      _this._scrollableContent = elt;\n    };\n\n    _this._onModalContextMenuClose = function () {\n      _this.setState({\n        isModalMenuOpen: false\n      });\n    };\n\n    _this._onModalClose = function () {\n      _this._lastSetX = 0;\n      _this._lastSetY = 0;\n\n      _this.setState({\n        isModalMenuOpen: false,\n        isInKeyboardMoveMode: false,\n        isOpen: false,\n        x: 0,\n        y: 0\n      });\n\n      if (_this.props.dragOptions && _this._hasRegisteredKeyUp) {\n        _this._events.off(window, 'keyup', _this._onKeyUp, true\n        /* useCapture */\n        );\n      } // Call the onDismiss callback\n\n\n      if (_this.props.onDismissed) {\n        _this.props.onDismissed();\n      }\n    };\n\n    _this._onDragStart = function () {\n      _this.setState({\n        isModalMenuOpen: false,\n        isInKeyboardMoveMode: false\n      });\n    };\n\n    _this._onDrag = function (_, ui) {\n      var _a = _this.state,\n          x = _a.x,\n          y = _a.y;\n\n      _this.setState(_this._getClampedPosition({\n        x: x + ui.delta.x,\n        y: y + ui.delta.y\n      }));\n    };\n\n    _this._onDragStop = function () {\n      _this.focus();\n    };\n\n    _this._onKeyUp = function (event) {\n      // Need to handle the CTRL + ALT + SPACE key during keyup due to FireFox bug:\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1220143\n      // Otherwise it would continue to fire a click even if the event was cancelled\n      // during mouseDown.\n      if (event.altKey && event.ctrlKey && event.keyCode === KeyCodes.space) {\n        // Since this is a global handler, we should make sure the target is within the dialog\n        // before opening the dropdown\n        if (elementContains(_this._scrollableContent, event.target)) {\n          _this.setState({\n            isModalMenuOpen: !_this.state.isModalMenuOpen\n          });\n\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n    }; // We need a global onKeyDown event when we are in the move mode so that we can\n    // handle the key presses and the components inside the modal do not get the events\n\n\n    _this._onKeyDown = function (event) {\n      if (event.altKey && event.ctrlKey && event.keyCode === KeyCodes.space) {\n        // CTRL + ALT + SPACE is handled during keyUp\n        event.preventDefault();\n        event.stopPropagation();\n        return;\n      }\n\n      if (_this.state.isModalMenuOpen && (event.altKey || event.keyCode === KeyCodes.escape)) {\n        _this.setState({\n          isModalMenuOpen: false\n        });\n      }\n\n      if (_this.state.isInKeyboardMoveMode && (event.keyCode === KeyCodes.escape || event.keyCode === KeyCodes.enter)) {\n        _this.setState({\n          isInKeyboardMoveMode: false\n        });\n\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      if (_this.state.isInKeyboardMoveMode) {\n        var handledEvent = true;\n\n        var delta = _this._getMoveDelta(event);\n\n        switch (event.keyCode) {\n          /* eslint-disable no-fallthrough */\n          case KeyCodes.escape:\n            _this.setState({\n              x: _this._lastSetX,\n              y: _this._lastSetY\n            });\n\n          case KeyCodes.enter:\n            {\n              // TODO: determine if fallthrough was intentional\n\n              /* eslint-enable no-fallthrough */\n              _this._lastSetX = 0;\n              _this._lastSetY = 0;\n\n              _this.setState({\n                isInKeyboardMoveMode: false\n              });\n\n              break;\n            }\n\n          case KeyCodes.up:\n            {\n              _this.setState({\n                y: _this._getClampedPositionY(_this.state.y - delta)\n              });\n\n              break;\n            }\n\n          case KeyCodes.down:\n            {\n              _this.setState({\n                y: _this._getClampedPositionY(_this.state.y + delta)\n              });\n\n              break;\n            }\n\n          case KeyCodes.left:\n            {\n              _this.setState({\n                x: _this._getClampedPositionX(_this.state.x - delta)\n              });\n\n              break;\n            }\n\n          case KeyCodes.right:\n            {\n              _this.setState({\n                x: _this._getClampedPositionX(_this.state.x + delta)\n              });\n\n              break;\n            }\n\n          default:\n            {\n              handledEvent = false;\n            }\n        }\n\n        if (handledEvent) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n    };\n\n    _this._onEnterKeyboardMoveMode = function () {\n      _this._lastSetX = _this.state.x;\n      _this._lastSetY = _this.state.y;\n\n      _this.setState({\n        isInKeyboardMoveMode: true,\n        isModalMenuOpen: false\n      });\n\n      _this._events.on(window, 'keydown', _this._onKeyDown, true\n      /* useCapture */\n      );\n    };\n\n    _this._onExitKeyboardMoveMode = function () {\n      _this._lastSetX = 0;\n      _this._lastSetY = 0;\n\n      _this.setState({\n        isInKeyboardMoveMode: false\n      });\n\n      _this._events.off(window, 'keydown', _this._onKeyDown, true\n      /* useCapture */\n      );\n    };\n\n    _this._registerForKeyUp = function () {\n      if (!_this._hasRegisteredKeyUp) {\n        _this._events.on(window, 'keyup', _this._onKeyUp, true\n        /* useCapture */\n        );\n\n        _this._hasRegisteredKeyUp = true;\n      }\n    };\n\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      onLayerDidMount: 'layerProps.onLayerDidMount'\n    });\n    _this.state = {\n      id: getId('Modal'),\n      isOpen: props.isOpen,\n      isVisible: props.isOpen,\n      hasBeenOpened: props.isOpen,\n      x: 0,\n      y: 0\n    };\n    _this._lastSetX = 0;\n    _this._lastSetY = 0;\n    var _a = _this.props.allowTouchBodyScroll,\n        allowTouchBodyScroll = _a === void 0 ? false : _a;\n    _this._allowTouchBodyScroll = allowTouchBodyScroll;\n    return _this;\n  }\n\n  ModalBase.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    clearTimeout(this._onModalCloseTimer); // Opening the dialog\n\n    if (newProps.isOpen) {\n      if (!this.state.isOpen) {\n        // First Open\n        this.setState({\n          isOpen: true\n        }); // Add a keyUp handler for all key up events when the dialog is open\n\n        if (newProps.dragOptions) {\n          this._registerForKeyUp();\n        }\n      } else {\n        // Modal has been opened\n        // Reopen during closing\n        this.setState({\n          hasBeenOpened: true,\n          isVisible: true\n        });\n      }\n    } // Closing the dialog\n\n\n    if (!newProps.isOpen && this.state.isOpen) {\n      this._onModalCloseTimer = this._async.setTimeout(this._onModalClose, parseFloat(animationDuration) * 1000);\n      this.setState({\n        isVisible: false\n      });\n    }\n  };\n\n  ModalBase.prototype.componentDidMount = function () {\n    var _this = this; // Not all modals show just by updating their props. Some only render when they are mounted and pass in\n    // isOpen as true. We need to add the keyUp handler in componentDidMount if we are in that case.\n\n\n    if (this.state.isOpen && this.state.isVisible) {\n      this._registerForKeyUp();\n\n      requestAnimationFrame(function () {\n        return setTimeout(_this._registerInitialModalPosition, 0);\n      });\n    }\n  };\n\n  ModalBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _this = this;\n\n    if (!prevProps.isOpen && !prevState.isVisible) {\n      this.setState({\n        isVisible: true\n      });\n    }\n\n    if (!prevProps.isOpen && this.props.isOpen) {\n      requestAnimationFrame(function () {\n        return setTimeout(_this._registerInitialModalPosition, 0);\n      });\n    }\n  };\n\n  ModalBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n\n    this._events.dispose();\n  };\n\n  ModalBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        containerClassName = _a.containerClassName,\n        scrollableContentClassName = _a.scrollableContentClassName,\n        elementToFocusOnDismiss = _a.elementToFocusOnDismiss,\n        firstFocusableSelector = _a.firstFocusableSelector,\n        forceFocusInsideTrap = _a.forceFocusInsideTrap,\n        ignoreExternalFocusing = _a.ignoreExternalFocusing,\n        isBlocking = _a.isBlocking,\n        isClickableOutsideFocusTrap = _a.isClickableOutsideFocusTrap,\n        isDarkOverlay = _a.isDarkOverlay,\n        onDismiss = _a.onDismiss,\n        layerProps = _a.layerProps,\n        overlay = _a.overlay,\n        responsiveMode = _a.responsiveMode,\n        titleAriaId = _a.titleAriaId,\n        styles = _a.styles,\n        subtitleAriaId = _a.subtitleAriaId,\n        theme = _a.theme,\n        topOffsetFixed = _a.topOffsetFixed,\n        // eslint-disable-next-line deprecation/deprecation\n    onLayerDidMount = _a.onLayerDidMount,\n        isModeless = _a.isModeless,\n        dragOptions = _a.dragOptions,\n        enableAriaHiddenSiblings = _a.enableAriaHiddenSiblings;\n    var _b = this.state,\n        isOpen = _b.isOpen,\n        isVisible = _b.isVisible,\n        hasBeenOpened = _b.hasBeenOpened,\n        modalRectangleTop = _b.modalRectangleTop,\n        x = _b.x,\n        y = _b.y,\n        isInKeyboardMoveMode = _b.isInKeyboardMoveMode;\n\n    if (!isOpen) {\n      return null;\n    }\n\n    var layerClassName = layerProps === undefined ? '' : layerProps.className;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      containerClassName: containerClassName,\n      scrollableContentClassName: scrollableContentClassName,\n      isOpen: isOpen,\n      isVisible: isVisible,\n      hasBeenOpened: hasBeenOpened,\n      modalRectangleTop: modalRectangleTop,\n      topOffsetFixed: topOffsetFixed,\n      isModeless: isModeless,\n      layerClassName: layerClassName,\n      isDefaultDragHandle: dragOptions && !dragOptions.dragHandleSelector\n    });\n\n    var mergedLayerProps = __assign(__assign(__assign({}, DefaultLayerProps), this.props.layerProps), {\n      onLayerDidMount: layerProps && layerProps.onLayerDidMount ? layerProps.onLayerDidMount : onLayerDidMount,\n      insertFirst: isModeless,\n      className: classNames.layer\n    });\n\n    var modalContent = React.createElement(FocusTrapZone, {\n      \"data-id\": this.state.id,\n      componentRef: this._focusTrapZone,\n      className: classNames.main,\n      elementToFocusOnDismiss: elementToFocusOnDismiss,\n      isClickableOutsideFocusTrap: isModeless || isClickableOutsideFocusTrap || !isBlocking,\n      ignoreExternalFocusing: ignoreExternalFocusing,\n      forceFocusInsideTrap: isModeless ? !isModeless : forceFocusInsideTrap,\n      firstFocusableSelector: firstFocusableSelector,\n      focusPreviouslyFocusedInnerElement: true,\n      onBlur: isInKeyboardMoveMode ? this._onExitKeyboardMoveMode : undefined,\n      enableAriaHiddenSiblings: enableAriaHiddenSiblings\n    }, dragOptions && isInKeyboardMoveMode && React.createElement(\"div\", {\n      className: classNames.keyboardMoveIconContainer\n    }, dragOptions.keyboardMoveIconProps ? React.createElement(Icon, __assign({}, dragOptions.keyboardMoveIconProps)) : React.createElement(Icon, {\n      iconName: \"move\",\n      className: classNames.keyboardMoveIcon\n    })), React.createElement(\"div\", {\n      ref: this._allowScrollOnModal,\n      className: classNames.scrollableContent,\n      \"data-is-scrollable\": true\n    }, dragOptions && this.state.isModalMenuOpen && React.createElement(dragOptions.menu, {\n      items: [{\n        key: 'move',\n        text: dragOptions.moveMenuItemText,\n        onClick: this._onEnterKeyboardMoveMode\n      }, {\n        key: 'close',\n        text: dragOptions.closeMenuItemText,\n        onClick: this._onModalClose\n      }],\n      onDismiss: this._onModalContextMenuClose,\n      alignTargetEdge: true,\n      coverTarget: true,\n      directionalHint: DirectionalHint.topLeftEdge,\n      directionalHintFixed: true,\n      shouldFocusOnMount: true,\n      target: this._scrollableContent\n    }), this.props.children)); // @temp tuatology - Will adjust this to be a panel at certain breakpoints\n\n    if (responsiveMode >= ResponsiveMode.small) {\n      return React.createElement(Layer, __assign({}, mergedLayerProps), React.createElement(Popup, {\n        role: isModeless || !isBlocking ? 'dialog' : 'alertdialog',\n        \"aria-modal\": !isModeless,\n        ariaLabelledBy: titleAriaId,\n        ariaDescribedBy: subtitleAriaId,\n        onDismiss: onDismiss,\n        shouldRestoreFocus: !ignoreExternalFocusing\n      }, React.createElement(\"div\", {\n        className: classNames.root,\n        role: !isModeless ? 'document' : undefined\n      }, !isModeless && React.createElement(Overlay, __assign({\n        isDarkThemed: isDarkOverlay,\n        onClick: isBlocking ? undefined : onDismiss,\n        allowTouchBodyScroll: this._allowTouchBodyScroll\n      }, overlay)), dragOptions ? React.createElement(DraggableZone, {\n        handleSelector: dragOptions.dragHandleSelector || \".\" + classNames.main.split(' ')[0],\n        preventDragSelector: \"button\",\n        onStart: this._onDragStart,\n        onDragChange: this._onDrag,\n        onStop: this._onDragStop,\n        position: {\n          x: x,\n          y: y\n        }\n      }, modalContent) : modalContent)));\n    }\n\n    return null;\n  };\n\n  ModalBase.prototype.focus = function () {\n    if (this._focusTrapZone.current) {\n      this._focusTrapZone.current.focus();\n    }\n  };\n  /**\n   * Clamps the position coordinates to the maximum/minimum value specified in props\n   */\n\n\n  ModalBase.prototype._getClampedPosition = function (position) {\n    if (!this.props.dragOptions || !this.props.dragOptions.keepInBounds) {\n      return position;\n    }\n\n    return {\n      x: this._getClampedPositionX(position.x),\n      y: this._getClampedPositionY(position.y)\n    };\n  };\n\n  ModalBase.prototype._getClampedPositionY = function (y) {\n    var minPosition = this._minClampedPosition;\n    var maxPosition = this._maxClampedPosition;\n\n    if (minPosition) {\n      y = Math.max(minPosition.y, y);\n    }\n\n    if (maxPosition) {\n      y = Math.min(maxPosition.y, y);\n    }\n\n    return y;\n  };\n\n  ModalBase.prototype._getClampedPositionX = function (x) {\n    var minPosition = this._minClampedPosition;\n    var maxPosition = this._maxClampedPosition;\n\n    if (minPosition) {\n      x = Math.max(minPosition.x, x);\n    }\n\n    if (maxPosition) {\n      x = Math.min(maxPosition.x, x);\n    }\n\n    return x;\n  };\n\n  ModalBase.prototype._getMoveDelta = function (event) {\n    var delta = 10;\n\n    if (event.shiftKey) {\n      if (!event.ctrlKey) {\n        delta = 50;\n      }\n    } else if (event.ctrlKey) {\n      delta = 1;\n    }\n\n    return delta;\n  };\n\n  ModalBase.defaultProps = {\n    isOpen: false,\n    isDarkOverlay: true,\n    isBlocking: false,\n    className: '',\n    containerClassName: ''\n  };\n  ModalBase = __decorate([withResponsiveMode], ModalBase);\n  return ModalBase;\n}(React.Component);\n\nexport { ModalBase };","map":{"version":3,"sources":["components/Modal/Modal.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  classNamesFunction,\n  getId,\n  allowScrollOnElement,\n  allowOverscrollOnElement,\n  KeyCodes,\n  elementContains,\n  warnDeprecations,\n  Async,\n  EventGroup,\n} from '../../Utilities';\nimport { FocusTrapZone, IFocusTrapZone } from '../FocusTrapZone/index';\nimport { animationDuration } from './Modal.styles';\nimport { IModalProps, IModalStyleProps, IModalStyles, IModal } from './Modal.types';\nimport { Overlay } from '../../Overlay';\nimport { ILayerProps, Layer } from '../../Layer';\nimport { Popup } from '../Popup/index';\nimport { withResponsiveMode, ResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\nimport { DirectionalHint } from '../Callout/index';\nimport { Icon } from '../Icon/index';\nimport { DraggableZone, ICoordinates, IDragData } from '../../utilities/DraggableZone/index';\nimport { initializeComponentRef } from '@uifabric/utilities';\n\n// @TODO - need to change this to a panel whenever the breakpoint is under medium (verify the spec)\n\nconst DefaultLayerProps: ILayerProps = {\n  eventBubblingEnabled: false,\n};\n\nexport interface IDialogState {\n  isOpen?: boolean;\n  isVisible?: boolean;\n  isVisibleClose?: boolean;\n  id?: string;\n  hasBeenOpened?: boolean;\n  modalRectangleTop?: number;\n  isModalMenuOpen?: boolean;\n  isInKeyboardMoveMode?: boolean;\n  x: number;\n  y: number;\n}\n\nconst getClassNames = classNamesFunction<IModalStyleProps, IModalStyles>();\nconst COMPONENT_NAME = 'Modal';\n\n@withResponsiveMode\nexport class ModalBase extends React.Component<IModalProps, IDialogState> implements IModal {\n  public static defaultProps: IModalProps = {\n    isOpen: false,\n    isDarkOverlay: true,\n    isBlocking: false,\n    className: '',\n    containerClassName: '',\n  };\n\n  private _onModalCloseTimer: number;\n  private _focusTrapZone = React.createRef<IFocusTrapZone>();\n  private _scrollableContent: HTMLDivElement | null;\n  private _lastSetX: number;\n  private _lastSetY: number;\n  private _allowTouchBodyScroll: boolean;\n  private _hasRegisteredKeyUp: boolean;\n  private _async: Async;\n  private _events: EventGroup;\n  private _minClampedPosition: ICoordinates;\n  private _maxClampedPosition: ICoordinates;\n\n  constructor(props: IModalProps) {\n    super(props);\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    initializeComponentRef(this);\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      onLayerDidMount: 'layerProps.onLayerDidMount',\n    });\n\n    this.state = {\n      id: getId('Modal'),\n      isOpen: props.isOpen,\n      isVisible: props.isOpen,\n      hasBeenOpened: props.isOpen,\n      x: 0,\n      y: 0,\n    };\n\n    this._lastSetX = 0;\n    this._lastSetY = 0;\n\n    const { allowTouchBodyScroll = false } = this.props;\n    this._allowTouchBodyScroll = allowTouchBodyScroll;\n  }\n\n  public UNSAFE_componentWillReceiveProps(newProps: IModalProps): void {\n    clearTimeout(this._onModalCloseTimer);\n\n    // Opening the dialog\n    if (newProps.isOpen) {\n      if (!this.state.isOpen) {\n        // First Open\n        this.setState({\n          isOpen: true,\n        });\n        // Add a keyUp handler for all key up events when the dialog is open\n        if (newProps.dragOptions) {\n          this._registerForKeyUp();\n        }\n      } else {\n        // Modal has been opened\n        // Reopen during closing\n        this.setState({\n          hasBeenOpened: true,\n          isVisible: true,\n        });\n      }\n    }\n\n    // Closing the dialog\n    if (!newProps.isOpen && this.state.isOpen) {\n      this._onModalCloseTimer = this._async.setTimeout(this._onModalClose, parseFloat(animationDuration) * 1000);\n      this.setState({\n        isVisible: false,\n      });\n    }\n  }\n\n  public componentDidMount() {\n    // Not all modals show just by updating their props. Some only render when they are mounted and pass in\n    // isOpen as true. We need to add the keyUp handler in componentDidMount if we are in that case.\n    if (this.state.isOpen && this.state.isVisible) {\n      this._registerForKeyUp();\n      requestAnimationFrame(() => setTimeout(this._registerInitialModalPosition, 0));\n    }\n  }\n\n  public componentDidUpdate(prevProps: IModalProps, prevState: IDialogState) {\n    if (!prevProps.isOpen && !prevState.isVisible) {\n      this.setState({\n        isVisible: true,\n      });\n    }\n    if (!prevProps.isOpen && this.props.isOpen) {\n      requestAnimationFrame(() => setTimeout(this._registerInitialModalPosition, 0));\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      className,\n      containerClassName,\n      scrollableContentClassName,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      ignoreExternalFocusing,\n      isBlocking,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      onDismiss,\n      layerProps,\n      overlay,\n      responsiveMode,\n      titleAriaId,\n      styles,\n      subtitleAriaId,\n      theme,\n      topOffsetFixed,\n      // eslint-disable-next-line deprecation/deprecation\n      onLayerDidMount,\n      isModeless,\n      dragOptions,\n      enableAriaHiddenSiblings,\n    } = this.props;\n    const { isOpen, isVisible, hasBeenOpened, modalRectangleTop, x, y, isInKeyboardMoveMode } = this.state;\n\n    if (!isOpen) {\n      return null;\n    }\n\n    const layerClassName = layerProps === undefined ? '' : layerProps.className;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      containerClassName,\n      scrollableContentClassName,\n      isOpen,\n      isVisible,\n      hasBeenOpened,\n      modalRectangleTop,\n      topOffsetFixed,\n      isModeless,\n      layerClassName,\n      isDefaultDragHandle: dragOptions && !dragOptions.dragHandleSelector,\n    });\n\n    const mergedLayerProps = {\n      ...DefaultLayerProps,\n      ...this.props.layerProps,\n      onLayerDidMount: layerProps && layerProps.onLayerDidMount ? layerProps.onLayerDidMount : onLayerDidMount,\n      insertFirst: isModeless,\n      className: classNames.layer,\n    };\n    const modalContent = (\n      <FocusTrapZone\n        data-id={this.state.id}\n        componentRef={this._focusTrapZone}\n        className={classNames.main}\n        elementToFocusOnDismiss={elementToFocusOnDismiss}\n        isClickableOutsideFocusTrap={isModeless || isClickableOutsideFocusTrap || !isBlocking}\n        ignoreExternalFocusing={ignoreExternalFocusing}\n        forceFocusInsideTrap={isModeless ? !isModeless : forceFocusInsideTrap}\n        firstFocusableSelector={firstFocusableSelector}\n        focusPreviouslyFocusedInnerElement={true}\n        onBlur={isInKeyboardMoveMode ? this._onExitKeyboardMoveMode : undefined}\n        enableAriaHiddenSiblings={enableAriaHiddenSiblings}\n      >\n        {dragOptions && isInKeyboardMoveMode && (\n          <div className={classNames.keyboardMoveIconContainer}>\n            {dragOptions.keyboardMoveIconProps ? (\n              <Icon {...dragOptions.keyboardMoveIconProps} />\n            ) : (\n              <Icon iconName=\"move\" className={classNames.keyboardMoveIcon} />\n            )}\n          </div>\n        )}\n        <div ref={this._allowScrollOnModal} className={classNames.scrollableContent} data-is-scrollable={true}>\n          {dragOptions && this.state.isModalMenuOpen && (\n            <dragOptions.menu\n              items={[\n                { key: 'move', text: dragOptions.moveMenuItemText, onClick: this._onEnterKeyboardMoveMode },\n                { key: 'close', text: dragOptions.closeMenuItemText, onClick: this._onModalClose },\n              ]}\n              onDismiss={this._onModalContextMenuClose}\n              alignTargetEdge={true}\n              coverTarget={true}\n              directionalHint={DirectionalHint.topLeftEdge}\n              directionalHintFixed={true}\n              shouldFocusOnMount={true}\n              target={this._scrollableContent}\n            />\n          )}\n          {this.props.children}\n        </div>\n      </FocusTrapZone>\n    );\n\n    // @temp tuatology - Will adjust this to be a panel at certain breakpoints\n    if (responsiveMode! >= ResponsiveMode.small) {\n      return (\n        <Layer {...mergedLayerProps}>\n          <Popup\n            role={isModeless || !isBlocking ? 'dialog' : 'alertdialog'}\n            aria-modal={!isModeless}\n            ariaLabelledBy={titleAriaId}\n            ariaDescribedBy={subtitleAriaId}\n            onDismiss={onDismiss}\n            shouldRestoreFocus={!ignoreExternalFocusing}\n          >\n            <div className={classNames.root} role={!isModeless ? 'document' : undefined}>\n              {!isModeless && (\n                <Overlay\n                  isDarkThemed={isDarkOverlay}\n                  onClick={isBlocking ? undefined : (onDismiss as any)}\n                  allowTouchBodyScroll={this._allowTouchBodyScroll}\n                  {...overlay}\n                />\n              )}\n              {dragOptions ? (\n                <DraggableZone\n                  handleSelector={dragOptions.dragHandleSelector || `.${classNames.main.split(' ')[0]}`}\n                  preventDragSelector=\"button\"\n                  onStart={this._onDragStart}\n                  onDragChange={this._onDrag}\n                  onStop={this._onDragStop}\n                  position={{ x: x, y: y }}\n                >\n                  {modalContent}\n                </DraggableZone>\n              ) : (\n                modalContent\n              )}\n            </div>\n          </Popup>\n        </Layer>\n      );\n    }\n    return null;\n  }\n\n  public focus() {\n    if (this._focusTrapZone.current) {\n      this._focusTrapZone.current.focus();\n    }\n  }\n\n  private _registerInitialModalPosition = (): void => {\n    const dialogMain = document.querySelector(`[data-id=${this.state.id}]`);\n\n    if (dialogMain) {\n      const modalRectangle = dialogMain.getBoundingClientRect();\n      if (this.props.dragOptions?.keepInBounds && !this._minClampedPosition && !this._maxClampedPosition) {\n        this._minClampedPosition = { x: -modalRectangle.x, y: -modalRectangle.y };\n        this._maxClampedPosition = { x: modalRectangle.x, y: modalRectangle.y };\n      }\n\n      this.setState({\n        modalRectangleTop: modalRectangle.top,\n      });\n    }\n  };\n\n  /**\n   * Clamps the position coordinates to the maximum/minimum value specified in props\n   */\n  private _getClampedPosition(position: ICoordinates) {\n    if (!this.props.dragOptions || !this.props.dragOptions.keepInBounds) {\n      return position;\n    }\n    return { x: this._getClampedPositionX(position.x), y: this._getClampedPositionY(position.y) };\n  }\n\n  private _getClampedPositionY(y: number) {\n    const minPosition = this._minClampedPosition;\n    const maxPosition = this._maxClampedPosition;\n    if (minPosition) {\n      y = Math.max(minPosition.y, y);\n    }\n    if (maxPosition) {\n      y = Math.min(maxPosition.y, y);\n    }\n    return y;\n  }\n\n  private _getClampedPositionX(x: number) {\n    const minPosition = this._minClampedPosition;\n    const maxPosition = this._maxClampedPosition;\n    if (minPosition) {\n      x = Math.max(minPosition.x, x);\n    }\n    if (maxPosition) {\n      x = Math.min(maxPosition.x, x);\n    }\n    return x;\n  }\n\n  // Allow the user to scroll within the modal but not on the body\n  private _allowScrollOnModal = (elt: HTMLDivElement | null): void => {\n    if (elt) {\n      if (this._allowTouchBodyScroll) {\n        allowOverscrollOnElement(elt, this._events);\n      } else {\n        allowScrollOnElement(elt, this._events);\n      }\n    } else {\n      this._events.off(this._scrollableContent);\n    }\n    this._scrollableContent = elt;\n  };\n\n  private _onModalContextMenuClose = (): void => {\n    this.setState({ isModalMenuOpen: false });\n  };\n\n  private _onModalClose = (): void => {\n    this._lastSetX = 0;\n    this._lastSetY = 0;\n\n    this.setState({\n      isModalMenuOpen: false,\n      isInKeyboardMoveMode: false,\n      isOpen: false,\n      x: 0,\n      y: 0,\n    });\n\n    if (this.props.dragOptions && this._hasRegisteredKeyUp) {\n      this._events.off(window, 'keyup', this._onKeyUp, true /* useCapture */);\n    }\n\n    // Call the onDismiss callback\n    if (this.props.onDismissed) {\n      this.props.onDismissed();\n    }\n  };\n\n  private _onDragStart = (): void => {\n    this.setState({ isModalMenuOpen: false, isInKeyboardMoveMode: false });\n  };\n\n  private _onDrag = (_: React.MouseEvent<HTMLElement> & React.TouchEvent<HTMLElement>, ui: IDragData): void => {\n    const { x, y } = this.state;\n    this.setState(this._getClampedPosition({ x: x + ui.delta.x, y: y + ui.delta.y }));\n  };\n\n  private _onDragStop = (): void => {\n    this.focus();\n  };\n\n  private _onKeyUp = (event: React.KeyboardEvent<HTMLElement>): void => {\n    // Need to handle the CTRL + ALT + SPACE key during keyup due to FireFox bug:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1220143\n    // Otherwise it would continue to fire a click even if the event was cancelled\n    // during mouseDown.\n    if (event.altKey && event.ctrlKey && event.keyCode === KeyCodes.space) {\n      // Since this is a global handler, we should make sure the target is within the dialog\n      // before opening the dropdown\n      if (elementContains(this._scrollableContent, event.target as HTMLElement)) {\n        this.setState({ isModalMenuOpen: !this.state.isModalMenuOpen });\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n  };\n\n  // We need a global onKeyDown event when we are in the move mode so that we can\n  // handle the key presses and the components inside the modal do not get the events\n  private _onKeyDown = (event: React.KeyboardEvent<HTMLElement>): void => {\n    if (event.altKey && event.ctrlKey && event.keyCode === KeyCodes.space) {\n      // CTRL + ALT + SPACE is handled during keyUp\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    if (this.state.isModalMenuOpen && (event.altKey || event.keyCode === KeyCodes.escape)) {\n      this.setState({ isModalMenuOpen: false });\n    }\n\n    if (this.state.isInKeyboardMoveMode && (event.keyCode === KeyCodes.escape || event.keyCode === KeyCodes.enter)) {\n      this.setState({ isInKeyboardMoveMode: false });\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    if (this.state.isInKeyboardMoveMode) {\n      let handledEvent = true;\n      const delta = this._getMoveDelta(event);\n\n      switch (event.keyCode) {\n        /* eslint-disable no-fallthrough */\n        case KeyCodes.escape:\n          this.setState({ x: this._lastSetX, y: this._lastSetY });\n        case KeyCodes.enter: {\n          // TODO: determine if fallthrough was intentional\n          /* eslint-enable no-fallthrough */\n          this._lastSetX = 0;\n          this._lastSetY = 0;\n          this.setState({ isInKeyboardMoveMode: false });\n          break;\n        }\n        case KeyCodes.up: {\n          this.setState({\n            y: this._getClampedPositionY(this.state.y - delta),\n          });\n          break;\n        }\n        case KeyCodes.down: {\n          this.setState({\n            y: this._getClampedPositionY(this.state.y + delta),\n          });\n          break;\n        }\n        case KeyCodes.left: {\n          this.setState({\n            x: this._getClampedPositionX(this.state.x - delta),\n          });\n          break;\n        }\n        case KeyCodes.right: {\n          this.setState({\n            x: this._getClampedPositionX(this.state.x + delta),\n          });\n          break;\n        }\n        default: {\n          handledEvent = false;\n        }\n      }\n\n      if (handledEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n  };\n\n  private _getMoveDelta(event: React.KeyboardEvent<HTMLElement>): number {\n    let delta = 10;\n    if (event.shiftKey) {\n      if (!event.ctrlKey) {\n        delta = 50;\n      }\n    } else if (event.ctrlKey) {\n      delta = 1;\n    }\n\n    return delta;\n  }\n\n  private _onEnterKeyboardMoveMode = () => {\n    this._lastSetX = this.state.x;\n    this._lastSetY = this.state.y;\n    this.setState({ isInKeyboardMoveMode: true, isModalMenuOpen: false });\n    this._events.on(window, 'keydown', this._onKeyDown, true /* useCapture */);\n  };\n\n  private _onExitKeyboardMoveMode = () => {\n    this._lastSetX = 0;\n    this._lastSetY = 0;\n    this.setState({ isInKeyboardMoveMode: false });\n    this._events.off(window, 'keydown', this._onKeyDown, true /* useCapture */);\n  };\n\n  private _registerForKeyUp = (): void => {\n    if (!this._hasRegisteredKeyUp) {\n      this._events.on(window, 'keyup', this._onKeyUp, true /* useCapture */);\n      this._hasRegisteredKeyUp = true;\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}