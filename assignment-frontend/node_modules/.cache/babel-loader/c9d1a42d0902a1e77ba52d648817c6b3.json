{"ast":null,"code":"/**\n * {@docCategory Pickers}\n */\nvar SuggestionsController =\n/** @class */\nfunction () {\n  function SuggestionsController() {\n    var _this = this;\n\n    this._isSuggestionModel = function (value) {\n      return value.item !== undefined;\n    };\n\n    this._ensureSuggestionModel = function (suggestion) {\n      if (_this._isSuggestionModel(suggestion)) {\n        return suggestion;\n      } else {\n        return {\n          item: suggestion,\n          selected: false,\n          ariaLabel: suggestion.name || suggestion.primaryText\n        };\n      }\n    };\n\n    this.suggestions = [];\n    this.currentIndex = -1;\n  }\n\n  SuggestionsController.prototype.updateSuggestions = function (newSuggestions, selectedIndex) {\n    if (newSuggestions && newSuggestions.length > 0) {\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\n      this.currentIndex = selectedIndex ? selectedIndex : 0;\n\n      if (selectedIndex === -1) {\n        this.currentSuggestion = undefined;\n      } else if (selectedIndex !== undefined) {\n        this.suggestions[selectedIndex].selected = true;\n        this.currentSuggestion = this.suggestions[selectedIndex];\n      }\n    } else {\n      this.suggestions = [];\n      this.currentIndex = -1;\n      this.currentSuggestion = undefined;\n    }\n  };\n  /**\n   * Increments the suggestion index and gets the next suggestion in the list.\n   */\n\n\n  SuggestionsController.prototype.nextSuggestion = function () {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex < this.suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.currentIndex === this.suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Decrements the suggestion index and gets the previous suggestion in the list.\n   */\n\n\n  SuggestionsController.prototype.previousSuggestion = function () {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.currentIndex === 0) {\n        this.setSelectedSuggestion(this.suggestions.length - 1);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  SuggestionsController.prototype.getSuggestions = function () {\n    return this.suggestions;\n  };\n\n  SuggestionsController.prototype.getCurrentItem = function () {\n    return this.currentSuggestion;\n  };\n\n  SuggestionsController.prototype.getSuggestionAtIndex = function (index) {\n    return this.suggestions[index];\n  };\n\n  SuggestionsController.prototype.hasSelectedSuggestion = function () {\n    return this.currentSuggestion ? true : false;\n  };\n\n  SuggestionsController.prototype.removeSuggestion = function (index) {\n    this.suggestions.splice(index, 1);\n  };\n\n  SuggestionsController.prototype.createGenericSuggestion = function (itemToConvert) {\n    var itemToAdd = this.convertSuggestionsToSuggestionItems([itemToConvert])[0];\n    this.currentSuggestion = itemToAdd;\n  };\n\n  SuggestionsController.prototype.convertSuggestionsToSuggestionItems = function (suggestions) {\n    return Array.isArray(suggestions) ? suggestions.map(this._ensureSuggestionModel) : [];\n  };\n\n  SuggestionsController.prototype.deselectAllSuggestions = function () {\n    if (this.currentIndex > -1) {\n      this.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n    }\n  };\n\n  SuggestionsController.prototype.setSelectedSuggestion = function (index) {\n    if (index > this.suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion.selected = false;\n      this.currentSuggestion = this.suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1) {\n        this.suggestions[this.currentIndex].selected = false;\n      }\n\n      this.suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = this.suggestions[index];\n    }\n  };\n\n  return SuggestionsController;\n}();\n\nexport { SuggestionsController };","map":{"version":3,"sources":["components/pickers/Suggestions/SuggestionsController.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISuggestionModel } from './Suggestions.types';\n\n/**\n * {@docCategory Pickers}\n */\nexport class SuggestionsController<T> {\n  public currentIndex: number;\n  public currentSuggestion: ISuggestionModel<T> | undefined;\n  public suggestions: ISuggestionModel<T>[];\n\n  constructor() {\n    this.suggestions = [];\n    this.currentIndex = -1;\n  }\n\n  public updateSuggestions(newSuggestions: T[], selectedIndex?: number): void {\n    if (newSuggestions && newSuggestions.length > 0) {\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\n      this.currentIndex = selectedIndex ? selectedIndex : 0;\n      if (selectedIndex! === -1) {\n        this.currentSuggestion = undefined;\n      } else if (selectedIndex !== undefined) {\n        this.suggestions[selectedIndex].selected = true;\n        this.currentSuggestion = this.suggestions[selectedIndex];\n      }\n    } else {\n      this.suggestions = [];\n      this.currentIndex = -1;\n      this.currentSuggestion = undefined;\n    }\n  }\n\n  /**\n   * Increments the suggestion index and gets the next suggestion in the list.\n   */\n  public nextSuggestion(): boolean {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex < this.suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.currentIndex === this.suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Decrements the suggestion index and gets the previous suggestion in the list.\n   */\n  public previousSuggestion(): boolean {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.currentIndex === 0) {\n        this.setSelectedSuggestion(this.suggestions.length - 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getSuggestions(): ISuggestionModel<T>[] {\n    return this.suggestions;\n  }\n\n  public getCurrentItem(): ISuggestionModel<T> {\n    return this.currentSuggestion!;\n  }\n\n  public getSuggestionAtIndex(index: number): ISuggestionModel<T> {\n    return this.suggestions[index];\n  }\n\n  public hasSelectedSuggestion(): boolean {\n    return this.currentSuggestion ? true : false;\n  }\n\n  public removeSuggestion(index: number): void {\n    this.suggestions.splice(index, 1);\n  }\n\n  public createGenericSuggestion(itemToConvert: ISuggestionModel<T> | T) {\n    const itemToAdd = this.convertSuggestionsToSuggestionItems([itemToConvert])[0];\n    this.currentSuggestion = itemToAdd;\n  }\n\n  public convertSuggestionsToSuggestionItems(suggestions: Array<ISuggestionModel<T> | T>): ISuggestionModel<T>[] {\n    return Array.isArray(suggestions) ? suggestions.map(this._ensureSuggestionModel) : [];\n  }\n\n  public deselectAllSuggestions(): void {\n    if (this.currentIndex > -1) {\n      this.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n    }\n  }\n\n  public setSelectedSuggestion(index: number): void {\n    if (index > this.suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion!.selected = false;\n      this.currentSuggestion = this.suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1) {\n        this.suggestions[this.currentIndex].selected = false;\n      }\n      this.suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = this.suggestions[index];\n    }\n  }\n\n  private _isSuggestionModel = (value: ISuggestionModel<T> | T): value is ISuggestionModel<T> => {\n    return (<ISuggestionModel<T>>value).item !== undefined;\n  };\n\n  private _ensureSuggestionModel = (suggestion: ISuggestionModel<T> | T): ISuggestionModel<T> => {\n    if (this._isSuggestionModel(suggestion)) {\n      return suggestion as ISuggestionModel<T>;\n    } else {\n      return {\n        item: suggestion,\n        selected: false,\n        ariaLabel: (<any>suggestion).name || (<any>suggestion).primaryText,\n      } as ISuggestionModel<T>;\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}