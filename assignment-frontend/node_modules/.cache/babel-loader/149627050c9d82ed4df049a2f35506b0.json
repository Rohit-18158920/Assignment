{"ast":null,"code":"import { _isSSR } from './setSSR';\nvar _window = undefined; // Note: Accessing \"window\" in IE11 is somewhat expensive, and calling \"typeof window\"\n// hits a memory leak, whereas aliasing it and calling \"typeof _window\" does not.\n// Caching the window value at the file scope lets us minimize the impact.\n\ntry {\n  _window = window;\n} catch (e) {\n  /* no-op */\n}\n/**\n * Helper to get the window object. The helper will make sure to use a cached variable\n * of \"window\", to avoid overhead and memory leaks in IE11. Note that in popup scenarios the\n * window object won't match the \"global\" window object, and for these scenarios, you should\n * pass in an element hosted within the popup.\n *\n * @public\n */\n\n\nexport function getWindow(rootElement) {\n  if (_isSSR || typeof _window === 'undefined') {\n    return undefined;\n  } else {\n    var el = rootElement;\n    return el && el.ownerDocument && el.ownerDocument.defaultView ? el.ownerDocument.defaultView : _window;\n  }\n}","map":{"version":3,"sources":["dom/getWindow.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,UAAvB;AAEA,IAAI,OAAO,GAAuB,SAAlC,C,CAEA;AACA;AACA;;AACA,IAAI;AACF,EAAA,OAAO,GAAG,MAAV;AACD,CAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACD;AAED;;;;;;;AAOG;;;AACH,OAAM,SAAU,SAAV,CAAoB,WAApB,EAAgD;AACpD,MAAI,MAAM,IAAI,OAAO,OAAP,KAAmB,WAAjC,EAA8C;AAC5C,WAAO,SAAP;AACD,GAFD,MAEO;AACL,QAAM,EAAE,GAAG,WAAX;AAEA,WAAO,EAAE,IAAI,EAAE,CAAC,aAAT,IAA0B,EAAE,CAAC,aAAH,CAAiB,WAA3C,GAAyD,EAAE,CAAC,aAAH,CAAiB,WAA1E,GAAwF,OAA/F;AACD;AACF","sourcesContent":["import { _isSSR } from './setSSR';\n\nlet _window: Window | undefined = undefined;\n\n// Note: Accessing \"window\" in IE11 is somewhat expensive, and calling \"typeof window\"\n// hits a memory leak, whereas aliasing it and calling \"typeof _window\" does not.\n// Caching the window value at the file scope lets us minimize the impact.\ntry {\n  _window = window;\n} catch (e) {\n  /* no-op */\n}\n\n/**\n * Helper to get the window object. The helper will make sure to use a cached variable\n * of \"window\", to avoid overhead and memory leaks in IE11. Note that in popup scenarios the\n * window object won't match the \"global\" window object, and for these scenarios, you should\n * pass in an element hosted within the popup.\n *\n * @public\n */\nexport function getWindow(rootElement?: Element | null): Window | undefined {\n  if (_isSSR || typeof _window === 'undefined') {\n    return undefined;\n  } else {\n    const el = rootElement as Element;\n\n    return el && el.ownerDocument && el.ownerDocument.defaultView ? el.ownerDocument.defaultView : _window;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}