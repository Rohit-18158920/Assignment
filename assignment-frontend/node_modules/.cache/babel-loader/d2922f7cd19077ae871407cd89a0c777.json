{"ast":null,"code":"import { memoizeFunction } from '../../Utilities';\nimport { mergeStyleSets } from '../../Styling';\nimport { getGlobalClassNames } from '../../Styling';\nexport var ButtonGlobalClassNames = {\n  msButton: 'ms-Button',\n  msButtonHasMenu: 'ms-Button--hasMenu',\n  msButtonIcon: 'ms-Button-icon',\n  msButtonMenuIcon: 'ms-Button-menuIcon',\n  msButtonLabel: 'ms-Button-label',\n  msButtonDescription: 'ms-Button-description',\n  msButtonScreenReaderText: 'ms-Button-screenReaderText',\n  msButtonFlexContainer: 'ms-Button-flexContainer',\n  msButtonTextContainer: 'ms-Button-textContainer'\n};\nexport var getBaseButtonClassNames = memoizeFunction(function (theme, styles, className, variantClassName, iconClassName, menuIconClassName, disabled, hasMenu, checked, expanded, isSplit) {\n  var _a, _b;\n\n  var classNames = getGlobalClassNames(ButtonGlobalClassNames, theme || {});\n  var isExpanded = expanded && !isSplit;\n  return mergeStyleSets({\n    root: [classNames.msButton, styles.root, variantClassName, checked && ['is-checked', styles.rootChecked], isExpanded && ['is-expanded', styles.rootExpanded, {\n      selectors: (_a = {}, _a[\":hover .\" + classNames.msButtonIcon] = styles.iconExpandedHovered, // menuIcon falls back to rootExpandedHovered to support original behavior\n      _a[\":hover .\" + classNames.msButtonMenuIcon] = styles.menuIconExpandedHovered || styles.rootExpandedHovered, _a[':hover'] = styles.rootExpandedHovered, _a)\n    }], hasMenu && [ButtonGlobalClassNames.msButtonHasMenu, styles.rootHasMenu], disabled && ['is-disabled', styles.rootDisabled], !disabled && !isExpanded && !checked && {\n      selectors: (_b = {\n        ':hover': styles.rootHovered\n      }, _b[\":hover .\" + classNames.msButtonLabel] = styles.labelHovered, _b[\":hover .\" + classNames.msButtonIcon] = styles.iconHovered, _b[\":hover .\" + classNames.msButtonDescription] = styles.descriptionHovered, _b[\":hover .\" + classNames.msButtonMenuIcon] = styles.menuIconHovered, _b[':focus'] = styles.rootFocused, _b[':active'] = styles.rootPressed, _b[\":active .\" + classNames.msButtonIcon] = styles.iconPressed, _b[\":active .\" + classNames.msButtonDescription] = styles.descriptionPressed, _b[\":active .\" + classNames.msButtonMenuIcon] = styles.menuIconPressed, _b)\n    }, disabled && checked && [styles.rootCheckedDisabled], !disabled && checked && {\n      selectors: {\n        ':hover': styles.rootCheckedHovered,\n        ':active': styles.rootCheckedPressed\n      }\n    }, className],\n    flexContainer: [classNames.msButtonFlexContainer, styles.flexContainer],\n    textContainer: [classNames.msButtonTextContainer, styles.textContainer],\n    icon: [classNames.msButtonIcon, iconClassName, styles.icon, isExpanded && styles.iconExpanded, checked && styles.iconChecked, disabled && styles.iconDisabled],\n    label: [classNames.msButtonLabel, styles.label, checked && styles.labelChecked, disabled && styles.labelDisabled],\n    menuIcon: [classNames.msButtonMenuIcon, menuIconClassName, styles.menuIcon, checked && styles.menuIconChecked, disabled && !isSplit && styles.menuIconDisabled, !disabled && !isExpanded && !checked && {\n      selectors: {\n        ':hover': styles.menuIconHovered,\n        ':active': styles.menuIconPressed\n      }\n    }, isExpanded && ['is-expanded', styles.menuIconExpanded]],\n    description: [classNames.msButtonDescription, styles.description, checked && styles.descriptionChecked, disabled && styles.descriptionDisabled],\n    screenReaderText: [classNames.msButtonScreenReaderText, styles.screenReaderText]\n  });\n});","map":{"version":3,"sources":["components/Button/BaseButton.classNames.ts"],"names":[],"mappings":"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","sourcesContent":["import { memoizeFunction } from '../../Utilities';\nimport { ITheme, mergeStyleSets } from '../../Styling';\nimport { IButtonStyles } from './Button.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nexport interface IButtonClassNames {\n  root?: string;\n  flexContainer?: string;\n  textContainer?: string;\n  icon?: string;\n  label?: string;\n  menuIcon?: string;\n  description?: string;\n  screenReaderText?: string;\n}\n\nexport const ButtonGlobalClassNames = {\n  msButton: 'ms-Button',\n  msButtonHasMenu: 'ms-Button--hasMenu',\n  msButtonIcon: 'ms-Button-icon',\n  msButtonMenuIcon: 'ms-Button-menuIcon',\n  msButtonLabel: 'ms-Button-label',\n  msButtonDescription: 'ms-Button-description',\n  msButtonScreenReaderText: 'ms-Button-screenReaderText',\n  msButtonFlexContainer: 'ms-Button-flexContainer',\n  msButtonTextContainer: 'ms-Button-textContainer',\n};\n\nexport const getBaseButtonClassNames = memoizeFunction(\n  (\n    theme: ITheme,\n    styles: IButtonStyles,\n    className: string,\n    variantClassName: string,\n    iconClassName: string | undefined,\n    menuIconClassName: string | undefined,\n    disabled: boolean,\n    hasMenu: boolean,\n    checked: boolean,\n    expanded: boolean,\n    isSplit: boolean | undefined,\n  ): IButtonClassNames => {\n    const classNames = getGlobalClassNames(ButtonGlobalClassNames, theme || {});\n\n    const isExpanded = expanded && !isSplit;\n    return mergeStyleSets({\n      root: [\n        classNames.msButton,\n        styles.root,\n        variantClassName,\n        checked && ['is-checked', styles.rootChecked],\n        isExpanded && [\n          'is-expanded',\n          styles.rootExpanded,\n          {\n            selectors: {\n              [`:hover .${classNames.msButtonIcon}`]: styles.iconExpandedHovered,\n              // menuIcon falls back to rootExpandedHovered to support original behavior\n              [`:hover .${classNames.msButtonMenuIcon}`]: styles.menuIconExpandedHovered || styles.rootExpandedHovered,\n              ':hover': styles.rootExpandedHovered,\n            },\n          },\n        ],\n        hasMenu && [ButtonGlobalClassNames.msButtonHasMenu, styles.rootHasMenu],\n        disabled && ['is-disabled', styles.rootDisabled],\n        !disabled &&\n          !isExpanded &&\n          !checked && {\n            selectors: {\n              ':hover': styles.rootHovered,\n              [`:hover .${classNames.msButtonLabel}`]: styles.labelHovered,\n              [`:hover .${classNames.msButtonIcon}`]: styles.iconHovered,\n              [`:hover .${classNames.msButtonDescription}`]: styles.descriptionHovered,\n              [`:hover .${classNames.msButtonMenuIcon}`]: styles.menuIconHovered,\n              ':focus': styles.rootFocused,\n              ':active': styles.rootPressed,\n              [`:active .${classNames.msButtonIcon}`]: styles.iconPressed,\n              [`:active .${classNames.msButtonDescription}`]: styles.descriptionPressed,\n              [`:active .${classNames.msButtonMenuIcon}`]: styles.menuIconPressed,\n            },\n          },\n        disabled && checked && [styles.rootCheckedDisabled],\n        !disabled &&\n          checked && {\n            selectors: {\n              ':hover': styles.rootCheckedHovered,\n              ':active': styles.rootCheckedPressed,\n            },\n          },\n        className,\n      ],\n      flexContainer: [classNames.msButtonFlexContainer, styles.flexContainer],\n      textContainer: [classNames.msButtonTextContainer, styles.textContainer],\n      icon: [\n        classNames.msButtonIcon,\n        iconClassName,\n        styles.icon,\n        isExpanded && styles.iconExpanded,\n        checked && styles.iconChecked,\n        disabled && styles.iconDisabled,\n      ],\n      label: [classNames.msButtonLabel, styles.label, checked && styles.labelChecked, disabled && styles.labelDisabled],\n      menuIcon: [\n        classNames.msButtonMenuIcon,\n        menuIconClassName,\n        styles.menuIcon,\n        checked && styles.menuIconChecked,\n        disabled && !isSplit && styles.menuIconDisabled,\n        !disabled &&\n          !isExpanded &&\n          !checked && {\n            selectors: {\n              ':hover': styles.menuIconHovered,\n              ':active': styles.menuIconPressed,\n            },\n          },\n        isExpanded && ['is-expanded', styles.menuIconExpanded],\n      ],\n      description: [\n        classNames.msButtonDescription,\n        styles.description,\n        checked && styles.descriptionChecked,\n        disabled && styles.descriptionDisabled,\n      ],\n      screenReaderText: [classNames.msButtonScreenReaderText, styles.screenReaderText],\n    });\n  },\n);\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}