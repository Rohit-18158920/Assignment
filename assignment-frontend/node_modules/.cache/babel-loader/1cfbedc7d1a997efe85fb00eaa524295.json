{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { hiddenContentStyle } from '../../Styling';\nimport { initializeComponentRef, Async, divProperties, getNativeProps, getId, assign, hasOverflow, portalContainsElement, classNamesFunction, KeyCodes } from '../../Utilities';\nimport { TooltipOverflowMode } from './TooltipHost.types';\nimport { Tooltip } from './Tooltip';\nimport { TooltipDelay } from './Tooltip.types';\nvar getClassNames = classNamesFunction();\n\nvar TooltipHostBase =\n/** @class */\nfunction (_super) {\n  __extends(TooltipHostBase, _super); // Constructor\n\n\n  function TooltipHostBase(props) {\n    var _this = _super.call(this, props) || this; // The wrapping div that gets the hover events\n\n\n    _this._tooltipHost = React.createRef();\n    _this._defaultTooltipId = getId('tooltip');\n\n    _this.show = function () {\n      _this._toggleTooltip(true);\n    };\n\n    _this.dismiss = function () {\n      _this._hideTooltip();\n    };\n\n    _this._getTargetElement = function () {\n      if (!_this._tooltipHost.current) {\n        return undefined;\n      }\n\n      var overflowMode = _this.props.overflowMode; // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\n      // to the parent element, otherwise it might look off.\n\n      if (overflowMode !== undefined) {\n        switch (overflowMode) {\n          case TooltipOverflowMode.Parent:\n            return _this._tooltipHost.current.parentElement;\n\n          case TooltipOverflowMode.Self:\n            return _this._tooltipHost.current;\n        }\n      }\n\n      return _this._tooltipHost.current;\n    }; // Show Tooltip\n\n\n    _this._onTooltipMouseEnter = function (ev) {\n      var _a = _this.props,\n          overflowMode = _a.overflowMode,\n          delay = _a.delay;\n\n      if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip !== _this) {\n        TooltipHostBase._currentVisibleTooltip.dismiss();\n      }\n\n      TooltipHostBase._currentVisibleTooltip = _this;\n\n      if (overflowMode !== undefined) {\n        var overflowElement = _this._getTargetElement();\n\n        if (overflowElement && !hasOverflow(overflowElement)) {\n          return;\n        }\n      }\n\n      if (ev.target && portalContainsElement(ev.target, _this._getTargetElement())) {\n        // Do not show tooltip when target is inside a portal relative to TooltipHost.\n        return;\n      }\n\n      _this._clearDismissTimer();\n\n      _this._clearOpenTimer();\n\n      if (delay !== TooltipDelay.zero) {\n        _this.setState({\n          isAriaPlaceholderRendered: true\n        });\n\n        var delayTime = _this._getDelayTime(delay); // non-null assertion because we set it in `defaultProps`\n\n\n        _this._openTimerId = _this._async.setTimeout(function () {\n          _this._toggleTooltip(true);\n        }, delayTime);\n      } else {\n        _this._toggleTooltip(true);\n      }\n    }; // Hide Tooltip\n\n\n    _this._onTooltipMouseLeave = function (ev) {\n      var closeDelay = _this.props.closeDelay;\n\n      _this._clearDismissTimer();\n\n      _this._clearOpenTimer();\n\n      if (closeDelay) {\n        _this._dismissTimerId = _this._async.setTimeout(function () {\n          _this._toggleTooltip(false);\n        }, closeDelay);\n      } else {\n        _this._toggleTooltip(false);\n      }\n\n      if (TooltipHostBase._currentVisibleTooltip === _this) {\n        TooltipHostBase._currentVisibleTooltip = undefined;\n      }\n    };\n\n    _this._onTooltipKeyDown = function (ev) {\n      if ((ev.which === KeyCodes.escape || ev.ctrlKey) && _this.state.isTooltipVisible) {\n        _this._hideTooltip();\n\n        ev.stopPropagation();\n      }\n    };\n\n    _this._clearDismissTimer = function () {\n      _this._async.clearTimeout(_this._dismissTimerId);\n    };\n\n    _this._clearOpenTimer = function () {\n      _this._async.clearTimeout(_this._openTimerId);\n    }; // Hide Tooltip\n\n\n    _this._hideTooltip = function () {\n      _this._clearOpenTimer();\n\n      _this._clearDismissTimer();\n\n      _this._toggleTooltip(false);\n    };\n\n    _this._toggleTooltip = function (isTooltipVisible) {\n      if (_this.state.isTooltipVisible !== isTooltipVisible) {\n        _this.setState({\n          isAriaPlaceholderRendered: false,\n          isTooltipVisible: isTooltipVisible\n        }, function () {\n          return _this.props.onTooltipToggle && _this.props.onTooltipToggle(isTooltipVisible);\n        });\n      }\n    };\n\n    _this._getDelayTime = function (delay) {\n      switch (delay) {\n        case TooltipDelay.medium:\n          return 300;\n\n        case TooltipDelay.long:\n          return 500;\n\n        default:\n          return 0;\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      isAriaPlaceholderRendered: false,\n      isTooltipVisible: false\n    };\n    _this._async = new Async(_this);\n    return _this;\n  } // Render\n\n\n  TooltipHostBase.prototype.render = function () {\n    var _a = this.props,\n        calloutProps = _a.calloutProps,\n        children = _a.children,\n        content = _a.content,\n        directionalHint = _a.directionalHint,\n        directionalHintForRTL = _a.directionalHintForRTL,\n        className = _a.hostClassName,\n        id = _a.id,\n        _b = _a.setAriaDescribedBy,\n        setAriaDescribedBy = _b === void 0 ? true : _b,\n        tooltipProps = _a.tooltipProps,\n        styles = _a.styles,\n        theme = _a.theme;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className\n    });\n    var _c = this.state,\n        isAriaPlaceholderRendered = _c.isAriaPlaceholderRendered,\n        isTooltipVisible = _c.isTooltipVisible;\n    var tooltipId = id || this._defaultTooltipId;\n    var isContentPresent = !!(content || tooltipProps && tooltipProps.onRenderContent && tooltipProps.onRenderContent());\n    var showTooltip = isTooltipVisible && isContentPresent;\n    var ariaDescribedBy = setAriaDescribedBy && isTooltipVisible && isContentPresent ? tooltipId : undefined;\n    return React.createElement(\"div\", __assign({\n      className: this._classNames.root,\n      ref: this._tooltipHost\n    }, {\n      onFocusCapture: this._onTooltipMouseEnter\n    }, {\n      onBlurCapture: this._hideTooltip\n    }, {\n      onMouseEnter: this._onTooltipMouseEnter,\n      onMouseLeave: this._onTooltipMouseLeave,\n      onKeyDown: this._onTooltipKeyDown,\n      \"aria-describedby\": ariaDescribedBy\n    }), children, showTooltip && React.createElement(Tooltip, __assign({\n      id: tooltipId,\n      content: content,\n      targetElement: this._getTargetElement(),\n      directionalHint: directionalHint,\n      directionalHintForRTL: directionalHintForRTL,\n      calloutProps: assign({}, calloutProps, {\n        onDismiss: this._hideTooltip,\n        onMouseEnter: this._onTooltipMouseEnter,\n        onMouseLeave: this._onTooltipMouseLeave\n      }),\n      onMouseEnter: this._onTooltipMouseEnter,\n      onMouseLeave: this._onTooltipMouseLeave\n    }, getNativeProps(this.props, divProperties), tooltipProps)), isAriaPlaceholderRendered && React.createElement(\"div\", {\n      id: tooltipId,\n      style: hiddenContentStyle\n    }, content));\n  };\n\n  TooltipHostBase.prototype.componentWillUnmount = function () {\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n\n    this._async.dispose();\n  };\n\n  TooltipHostBase.defaultProps = {\n    delay: TooltipDelay.medium\n  };\n  return TooltipHostBase;\n}(React.Component);\n\nexport { TooltipHostBase };","map":{"version":3,"sources":["components/Tooltip/TooltipHost.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,kBAAT,QAAmC,eAAnC;AACA,SACE,sBADF,EAEE,KAFF,EAGE,aAHF,EAIE,cAJF,EAKE,KALF,EAME,MANF,EAOE,WAPF,EAQE,qBARF,EASE,kBATF,EAUE,QAVF,QAWO,iBAXP;AAYA,SAEE,mBAFF,QAMO,qBANP;AAOA,SAAS,OAAT,QAAwB,WAAxB;AACA,SAAS,YAAT,QAA6B,iBAA7B;AAOA,IAAM,aAAa,GAAG,kBAAkB,EAAxC;;AAEA,IAAA,eAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqC,EAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA,CAArC,CAgBE;;;AACA,WAAA,eAAA,CAAY,KAAZ,EAAoC;AAApC,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADd,CAAoC,CAVpC;;;AACQ,IAAA,KAAA,CAAA,YAAA,GAAe,KAAK,CAAC,SAAN,EAAf;AAMA,IAAA,KAAA,CAAA,iBAAA,GAAoB,KAAK,CAAC,SAAD,CAAzB;;AA6FD,IAAA,KAAA,CAAA,IAAA,GAAO,YAAA;AACZ,MAAA,KAAI,CAAC,cAAL,CAAoB,IAApB;AACD,KAFM;;AAIA,IAAA,KAAA,CAAA,OAAA,GAAU,YAAA;AACf,MAAA,KAAI,CAAC,YAAL;AACD,KAFM;;AAIC,IAAA,KAAA,CAAA,iBAAA,GAAoB,YAAA;AAC1B,UAAI,CAAC,KAAI,CAAC,YAAL,CAAkB,OAAvB,EAAgC;AAC9B,eAAO,SAAP;AACD;;AAEO,UAAA,YAAA,GAAA,KAAA,CAAA,KAAA,CAAA,YAAA,CALkB,CAO1B;AACA;;AACA,UAAI,YAAY,KAAK,SAArB,EAAgC;AAC9B,gBAAQ,YAAR;AACE,eAAK,mBAAmB,CAAC,MAAzB;AACE,mBAAO,KAAI,CAAC,YAAL,CAAkB,OAAlB,CAA0B,aAAjC;;AAEF,eAAK,mBAAmB,CAAC,IAAzB;AACE,mBAAO,KAAI,CAAC,YAAL,CAAkB,OAAzB;AALJ;AAOD;;AAED,aAAO,KAAI,CAAC,YAAL,CAAkB,OAAzB;AACD,KApBO,CAlG4B,CAwHpC;;;AACQ,IAAA,KAAA,CAAA,oBAAA,GAAuB,UAAC,EAAD,EAAQ;AAC/B,UAAA,EAAA,GAAA,KAAA,CAAA,KAAA;AAAA,UAAE,YAAA,GAAA,EAAA,CAAA,YAAF;AAAA,UAAgB,KAAA,GAAA,EAAA,CAAA,KAAhB;;AAEN,UAAI,eAAe,CAAC,sBAAhB,IAA0C,eAAe,CAAC,sBAAhB,KAA2C,KAAzF,EAA+F;AAC7F,QAAA,eAAe,CAAC,sBAAhB,CAAuC,OAAvC;AACD;;AACD,MAAA,eAAe,CAAC,sBAAhB,GAAyC,KAAzC;;AAEA,UAAI,YAAY,KAAK,SAArB,EAAgC;AAC9B,YAAM,eAAe,GAAG,KAAI,CAAC,iBAAL,EAAxB;;AACA,YAAI,eAAe,IAAI,CAAC,WAAW,CAAC,eAAD,CAAnC,EAAsD;AACpD;AACD;AACF;;AAED,UAAI,EAAE,CAAC,MAAH,IAAa,qBAAqB,CAAC,EAAE,CAAC,MAAJ,EAA2B,KAAI,CAAC,iBAAL,EAA3B,CAAtC,EAA4F;AAC1F;AACA;AACD;;AAED,MAAA,KAAI,CAAC,kBAAL;;AACA,MAAA,KAAI,CAAC,eAAL;;AAEA,UAAI,KAAK,KAAK,YAAY,CAAC,IAA3B,EAAiC;AAC/B,QAAA,KAAI,CAAC,QAAL,CAAc;AAAE,UAAA,yBAAyB,EAAE;AAA7B,SAAd;;AACA,YAAM,SAAS,GAAG,KAAI,CAAC,aAAL,CAAmB,KAAnB,CAAlB,CAF+B,CAEe;;;AAE9C,QAAA,KAAI,CAAC,YAAL,GAAoB,KAAI,CAAC,MAAL,CAAY,UAAZ,CAAuB,YAAA;AACzC,UAAA,KAAI,CAAC,cAAL,CAAoB,IAApB;AACD,SAFmB,EAEjB,SAFiB,CAApB;AAGD,OAPD,MAOO;AACL,QAAA,KAAI,CAAC,cAAL,CAAoB,IAApB;AACD;AACF,KAjCO,CAzH4B,CA4JpC;;;AACQ,IAAA,KAAA,CAAA,oBAAA,GAAuB,UAAC,EAAD,EAAQ;AAC7B,UAAA,UAAA,GAAA,KAAA,CAAA,KAAA,CAAA,UAAA;;AAER,MAAA,KAAI,CAAC,kBAAL;;AACA,MAAA,KAAI,CAAC,eAAL;;AAEA,UAAI,UAAJ,EAAgB;AACd,QAAA,KAAI,CAAC,eAAL,GAAuB,KAAI,CAAC,MAAL,CAAY,UAAZ,CAAuB,YAAA;AAC5C,UAAA,KAAI,CAAC,cAAL,CAAoB,KAApB;AACD,SAFsB,EAEpB,UAFoB,CAAvB;AAGD,OAJD,MAIO;AACL,QAAA,KAAI,CAAC,cAAL,CAAoB,KAApB;AACD;;AAED,UAAI,eAAe,CAAC,sBAAhB,KAA2C,KAA/C,EAAqD;AACnD,QAAA,eAAe,CAAC,sBAAhB,GAAyC,SAAzC;AACD;AACF,KAjBO;;AAmBA,IAAA,KAAA,CAAA,iBAAA,GAAoB,UAAC,EAAD,EAAqC;AAC/D,UAAI,CAAC,EAAE,CAAC,KAAH,KAAa,QAAQ,CAAC,MAAtB,IAAgC,EAAE,CAAC,OAApC,KAAgD,KAAI,CAAC,KAAL,CAAW,gBAA/D,EAAiF;AAC/E,QAAA,KAAI,CAAC,YAAL;;AACA,QAAA,EAAE,CAAC,eAAH;AACD;AACF,KALO;;AAOA,IAAA,KAAA,CAAA,kBAAA,GAAqB,YAAA;AAC3B,MAAA,KAAI,CAAC,MAAL,CAAY,YAAZ,CAAyB,KAAI,CAAC,eAA9B;AACD,KAFO;;AAIA,IAAA,KAAA,CAAA,eAAA,GAAkB,YAAA;AACxB,MAAA,KAAI,CAAC,MAAL,CAAY,YAAZ,CAAyB,KAAI,CAAC,YAA9B;AACD,KAFO,CA3L4B,CA+LpC;;;AACQ,IAAA,KAAA,CAAA,YAAA,GAAe,YAAA;AACrB,MAAA,KAAI,CAAC,eAAL;;AACA,MAAA,KAAI,CAAC,kBAAL;;AACA,MAAA,KAAI,CAAC,cAAL,CAAoB,KAApB;AACD,KAJO;;AAMA,IAAA,KAAA,CAAA,cAAA,GAAiB,UAAC,gBAAD,EAA0B;AACjD,UAAI,KAAI,CAAC,KAAL,CAAW,gBAAX,KAAgC,gBAApC,EAAsD;AACpD,QAAA,KAAI,CAAC,QAAL,CACE;AAAE,UAAA,yBAAyB,EAAE,KAA7B;AAAoC,UAAA,gBAAgB,EAAA;AAApD,SADF,EAEE,YAAA;AAAM,iBAAA,KAAI,CAAC,KAAL,CAAW,eAAX,IAA8B,KAAI,CAAC,KAAL,CAAW,eAAX,CAA9B,gBAA8B,CAA9B;AAA0E,SAFlF;AAID;AACF,KAPO;;AASA,IAAA,KAAA,CAAA,aAAA,GAAgB,UAAC,KAAD,EAAoB;AAC1C,cAAQ,KAAR;AACE,aAAK,YAAY,CAAC,MAAlB;AACE,iBAAO,GAAP;;AACF,aAAK,YAAY,CAAC,IAAlB;AACE,iBAAO,GAAP;;AACF;AACE,iBAAO,CAAP;AANJ;AAQD,KATO;;AA5MN,IAAA,sBAAsB,CAAC,KAAD,CAAtB;AAEA,IAAA,KAAI,CAAC,KAAL,GAAa;AACX,MAAA,yBAAyB,EAAE,KADhB;AAEX,MAAA,gBAAgB,EAAE;AAFP,KAAb;AAKA,IAAA,KAAI,CAAC,MAAL,GAAc,IAAI,KAAJ,CAAU,KAAV,CAAd;;AACD,GA5BH,CA8BE;;;AACO,EAAA,eAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACQ,QAAA,EAAA,GAAA,KAAA,KAAA;AAAA,QACJ,YAAA,GAAA,EAAA,CAAA,YADI;AAAA,QAEJ,QAAA,GAAA,EAAA,CAAA,QAFI;AAAA,QAGJ,OAAA,GAAA,EAAA,CAAA,OAHI;AAAA,QAIJ,eAAA,GAAA,EAAA,CAAA,eAJI;AAAA,QAKJ,qBAAA,GAAA,EAAA,CAAA,qBALI;AAAA,QAMJ,SAAA,GAAA,EAAA,CAAA,aANI;AAAA,QAOJ,EAAA,GAAA,EAAA,CAAA,EAPI;AAAA,QAQJ,EAAA,GAAA,EAAA,CAAA,kBARI;AAAA,QAQJ,kBAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,EARI;AAAA,QASJ,YAAA,GAAA,EAAA,CAAA,YATI;AAAA,QAUJ,MAAA,GAAA,EAAA,CAAA,MAVI;AAAA,QAWJ,KAAA,GAAA,EAAA,CAAA,KAXI;AAcN,SAAK,WAAL,GAAmB,aAAa,CAAC,MAAD,EAAU;AACxC,MAAA,KAAK,EAAE,KADiC;AAExC,MAAA,SAAS,EAAA;AAF+B,KAAV,CAAhC;AAKM,QAAA,EAAA,GAAA,KAAA,KAAA;AAAA,QAAE,yBAAA,GAAA,EAAA,CAAA,yBAAF;AAAA,QAA6B,gBAAA,GAAA,EAAA,CAAA,gBAA7B;AACN,QAAM,SAAS,GAAG,EAAE,IAAI,KAAK,iBAA7B;AACA,QAAM,gBAAgB,GAAG,CAAC,EACxB,OAAO,IACN,YAAY,IAAI,YAAY,CAAC,eAA7B,IAAgD,YAAY,CAAC,eAAb,EAFzB,CAA1B;AAIA,QAAM,WAAW,GAAG,gBAAgB,IAAI,gBAAxC;AACA,QAAM,eAAe,GAAG,kBAAkB,IAAI,gBAAtB,IAA0C,gBAA1C,GAA6D,SAA7D,GAAyE,SAAjG;AAEA,WACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AACE,MAAA,SAAS,EAAE,KAAK,WAAL,CAAiB,IAD9B;AAEE,MAAA,GAAG,EAAE,KAAK;AAFZ,KAAA,EAGM;AAAE,MAAA,cAAc,EAAE,KAAK;AAAvB,KAHN,EAIM;AAAE,MAAA,aAAa,EAAE,KAAK;AAAtB,KAJN,EAI0C;AACxC,MAAA,YAAY,EAAE,KAAK,oBADqB;AAExC,MAAA,YAAY,EAAE,KAAK,oBAFqB;AAGxC,MAAA,SAAS,EAAE,KAAK,iBAHwB;AAGP,0BACf;AAJsB,KAJ1C,CAAA,EAUG,QAVH,EAWG,WAAW,IACV,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,QAAA,CAAA;AACN,MAAA,EAAE,EAAE,SADE;AAEN,MAAA,OAAO,EAAE,OAFH;AAGN,MAAA,aAAa,EAAE,KAAK,iBAAL,EAHT;AAIN,MAAA,eAAe,EAAE,eAJX;AAKN,MAAA,qBAAqB,EAAE,qBALjB;AAMN,MAAA,YAAY,EAAE,MAAM,CAAC,EAAD,EAAK,YAAL,EAAmB;AACrC,QAAA,SAAS,EAAE,KAAK,YADqB;AAErC,QAAA,YAAY,EAAE,KAAK,oBAFkB;AAGrC,QAAA,YAAY,EAAE,KAAK;AAHkB,OAAnB,CANd;AAWN,MAAA,YAAY,EAAE,KAAK,oBAXb;AAYN,MAAA,YAAY,EAAE,KAAK;AAZb,KAAA,EAaF,cAAc,CAAC,KAAK,KAAN,EAAa,aAAb,CAbZ,EAcF,YAdE,CAAR,CAZJ,EA6BG,yBAAyB,IACxB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,EAAE,EAAE,SAAT;AAAoB,MAAA,KAAK,EAAE;AAA3B,KAAA,EACG,OADH,CA9BJ,CADF;AAqCD,GAlEM;;AAoEA,EAAA,eAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,YAAA;AACE,QAAI,eAAe,CAAC,sBAAhB,IAA0C,eAAe,CAAC,sBAAhB,KAA2C,IAAzF,EAA+F;AAC7F,MAAA,eAAe,CAAC,sBAAhB,GAAyC,SAAzC;AACD;;AAED,SAAK,MAAL,CAAY,OAAZ;AACD,GANM;;AAlGO,EAAA,eAAA,CAAA,YAAA,GAAe;AAC3B,IAAA,KAAK,EAAE,YAAY,CAAC;AADO,GAAf;AAyOhB,SAAA,eAAA;AAAC,CA1OD,CAAqC,KAAK,CAAC,SAA3C,CAAA;;SAAa,e","sourcesContent":["import * as React from 'react';\nimport { hiddenContentStyle } from '../../Styling';\nimport {\n  initializeComponentRef,\n  Async,\n  divProperties,\n  getNativeProps,\n  getId,\n  assign,\n  hasOverflow,\n  portalContainsElement,\n  classNamesFunction,\n  KeyCodes,\n} from '../../Utilities';\nimport {\n  ITooltipHostProps,\n  TooltipOverflowMode,\n  ITooltipHostStyles,\n  ITooltipHostStyleProps,\n  ITooltipHost,\n} from './TooltipHost.types';\nimport { Tooltip } from './Tooltip';\nimport { TooltipDelay } from './Tooltip.types';\n\nexport interface ITooltipHostState {\n  isAriaPlaceholderRendered: boolean;\n  isTooltipVisible: boolean;\n}\n\nconst getClassNames = classNamesFunction<ITooltipHostStyleProps, ITooltipHostStyles>();\n\nexport class TooltipHostBase extends React.Component<ITooltipHostProps, ITooltipHostState> implements ITooltipHost {\n  public static defaultProps = {\n    delay: TooltipDelay.medium,\n  };\n\n  private static _currentVisibleTooltip: ITooltipHost | undefined;\n\n  // The wrapping div that gets the hover events\n  private _tooltipHost = React.createRef<HTMLDivElement>();\n\n  private _classNames: { [key in keyof ITooltipHostStyles]: string };\n  private _async: Async;\n  private _dismissTimerId: number;\n  private _openTimerId: number;\n  private _defaultTooltipId = getId('tooltip');\n\n  // Constructor\n  constructor(props: ITooltipHostProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      isAriaPlaceholderRendered: false,\n      isTooltipVisible: false,\n    };\n\n    this._async = new Async(this);\n  }\n\n  // Render\n  public render(): JSX.Element {\n    const {\n      calloutProps,\n      children,\n      content,\n      directionalHint,\n      directionalHintForRTL,\n      hostClassName: className,\n      id,\n      setAriaDescribedBy = true,\n      tooltipProps,\n      styles,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n\n    const { isAriaPlaceholderRendered, isTooltipVisible } = this.state;\n    const tooltipId = id || this._defaultTooltipId;\n    const isContentPresent = !!(\n      content ||\n      (tooltipProps && tooltipProps.onRenderContent && tooltipProps.onRenderContent())\n    );\n    const showTooltip = isTooltipVisible && isContentPresent;\n    const ariaDescribedBy = setAriaDescribedBy && isTooltipVisible && isContentPresent ? tooltipId : undefined;\n\n    return (\n      <div\n        className={this._classNames.root}\n        ref={this._tooltipHost}\n        {...{ onFocusCapture: this._onTooltipMouseEnter }}\n        {...{ onBlurCapture: this._hideTooltip }}\n        onMouseEnter={this._onTooltipMouseEnter}\n        onMouseLeave={this._onTooltipMouseLeave}\n        onKeyDown={this._onTooltipKeyDown}\n        aria-describedby={ariaDescribedBy}\n      >\n        {children}\n        {showTooltip && (\n          <Tooltip\n            id={tooltipId}\n            content={content}\n            targetElement={this._getTargetElement()}\n            directionalHint={directionalHint}\n            directionalHintForRTL={directionalHintForRTL}\n            calloutProps={assign({}, calloutProps, {\n              onDismiss: this._hideTooltip,\n              onMouseEnter: this._onTooltipMouseEnter,\n              onMouseLeave: this._onTooltipMouseLeave,\n            })}\n            onMouseEnter={this._onTooltipMouseEnter}\n            onMouseLeave={this._onTooltipMouseLeave}\n            {...getNativeProps(this.props, divProperties)}\n            {...tooltipProps}\n          />\n        )}\n        {isAriaPlaceholderRendered && (\n          <div id={tooltipId} style={hiddenContentStyle as React.CSSProperties}>\n            {content}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  public componentWillUnmount(): void {\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n\n    this._async.dispose();\n  }\n\n  public show = (): void => {\n    this._toggleTooltip(true);\n  };\n\n  public dismiss = (): void => {\n    this._hideTooltip();\n  };\n\n  private _getTargetElement = (): HTMLElement | undefined => {\n    if (!this._tooltipHost.current) {\n      return undefined;\n    }\n\n    const { overflowMode } = this.props;\n\n    // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\n    // to the parent element, otherwise it might look off.\n    if (overflowMode !== undefined) {\n      switch (overflowMode) {\n        case TooltipOverflowMode.Parent:\n          return this._tooltipHost.current.parentElement!;\n\n        case TooltipOverflowMode.Self:\n          return this._tooltipHost.current;\n      }\n    }\n\n    return this._tooltipHost.current;\n  };\n\n  // Show Tooltip\n  private _onTooltipMouseEnter = (ev: any): void => {\n    const { overflowMode, delay } = this.props;\n\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip !== this) {\n      TooltipHostBase._currentVisibleTooltip.dismiss();\n    }\n    TooltipHostBase._currentVisibleTooltip = this;\n\n    if (overflowMode !== undefined) {\n      const overflowElement = this._getTargetElement();\n      if (overflowElement && !hasOverflow(overflowElement)) {\n        return;\n      }\n    }\n\n    if (ev.target && portalContainsElement(ev.target as HTMLElement, this._getTargetElement())) {\n      // Do not show tooltip when target is inside a portal relative to TooltipHost.\n      return;\n    }\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (delay !== TooltipDelay.zero) {\n      this.setState({ isAriaPlaceholderRendered: true });\n      const delayTime = this._getDelayTime(delay!); // non-null assertion because we set it in `defaultProps`\n\n      this._openTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(true);\n      }, delayTime);\n    } else {\n      this._toggleTooltip(true);\n    }\n  };\n\n  // Hide Tooltip\n  private _onTooltipMouseLeave = (ev: any): void => {\n    const { closeDelay } = this.props;\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (closeDelay) {\n      this._dismissTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(false);\n      }, closeDelay);\n    } else {\n      this._toggleTooltip(false);\n    }\n\n    if (TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n  };\n\n  private _onTooltipKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if ((ev.which === KeyCodes.escape || ev.ctrlKey) && this.state.isTooltipVisible) {\n      this._hideTooltip();\n      ev.stopPropagation();\n    }\n  };\n\n  private _clearDismissTimer = (): void => {\n    this._async.clearTimeout(this._dismissTimerId);\n  };\n\n  private _clearOpenTimer = (): void => {\n    this._async.clearTimeout(this._openTimerId);\n  };\n\n  // Hide Tooltip\n  private _hideTooltip = (): void => {\n    this._clearOpenTimer();\n    this._clearDismissTimer();\n    this._toggleTooltip(false);\n  };\n\n  private _toggleTooltip = (isTooltipVisible: boolean): void => {\n    if (this.state.isTooltipVisible !== isTooltipVisible) {\n      this.setState(\n        { isAriaPlaceholderRendered: false, isTooltipVisible },\n        () => this.props.onTooltipToggle && this.props.onTooltipToggle(isTooltipVisible),\n      );\n    }\n  };\n\n  private _getDelayTime = (delay: TooltipDelay): number => {\n    switch (delay) {\n      case TooltipDelay.medium:\n        return 300;\n      case TooltipDelay.long:\n        return 500;\n      default:\n        return 0;\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}