{"ast":null,"code":"import { __assign, __decorate, __extends, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, FocusRects, Async, KeyCodes, elementContains, getRTLSafeKeyCode, classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { CheckboxVisibility, ColumnActionsMode, ConstrainMode, DetailsListLayoutMode, ColumnDragEndLocation } from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../utilities/selection/index';\nimport { DragDropHelper } from '../../utilities/dragdrop/DragDropHelper';\nimport { GroupedList } from '../../GroupedList';\nimport { List } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles'; // For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\n\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction } from '@uifabric/utilities';\nimport { useConst } from '@uifabric/react-hooks';\nvar getClassNames = classNamesFunction();\nvar MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nvar DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nvar DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\n\nvar DetailsListInner = function (props) {\n  var selection = props.selection;\n  var ariaLabelForListHeader = props.ariaLabelForListHeader,\n      ariaLabelForSelectAllCheckbox = props.ariaLabelForSelectAllCheckbox,\n      ariaLabelForSelectionColumn = props.ariaLabelForSelectionColumn,\n      className = props.className,\n      checkboxVisibility = props.checkboxVisibility,\n      compact = props.compact,\n      constrainMode = props.constrainMode,\n      dragDropEvents = props.dragDropEvents,\n      groups = props.groups,\n      groupProps = props.groupProps,\n      indentWidth = props.indentWidth,\n      items = props.items,\n      isPlaceholderData = props.isPlaceholderData,\n      isHeaderVisible = props.isHeaderVisible,\n      layoutMode = props.layoutMode,\n      onItemInvoked = props.onItemInvoked,\n      onItemContextMenu = props.onItemContextMenu,\n      onColumnHeaderClick = props.onColumnHeaderClick,\n      onColumnHeaderContextMenu = props.onColumnHeaderContextMenu,\n      _a = props.selectionMode,\n      selectionMode = _a === void 0 ? selection.mode : _a,\n      selectionPreservedOnEmptyClick = props.selectionPreservedOnEmptyClick,\n      selectionZoneProps = props.selectionZoneProps,\n      ariaLabel = props.ariaLabel,\n      ariaLabelForGrid = props.ariaLabelForGrid,\n      rowElementEventMap = props.rowElementEventMap,\n      _b = props.shouldApplyApplicationRole,\n      shouldApplyApplicationRole = _b === void 0 ? false : _b,\n      getKey = props.getKey,\n      listProps = props.listProps,\n      usePageCache = props.usePageCache,\n      onShouldVirtualize = props.onShouldVirtualize,\n      viewport = props.viewport,\n      minimumPixelsForDrag = props.minimumPixelsForDrag,\n      getGroupHeight = props.getGroupHeight,\n      styles = props.styles,\n      theme = props.theme,\n      _c = props.cellStyleProps,\n      cellStyleProps = _c === void 0 ? DEFAULT_CELL_STYLE_PROPS : _c,\n      onRenderCheckbox = props.onRenderCheckbox,\n      useFastIcons = props.useFastIcons,\n      dragDropHelper = props.dragDropHelper,\n      adjustedColumns = props.adjustedColumns,\n      isCollapsed = props.isCollapsed,\n      isSizing = props.isSizing,\n      isSomeGroupExpanded = props.isSomeGroupExpanded,\n      version = props.version,\n      rootRef = props.rootRef,\n      listRef = props.listRef,\n      focusZoneRef = props.focusZoneRef,\n      columnReorderOptions = props.columnReorderOptions,\n      groupedListRef = props.groupedListRef,\n      headerRef = props.headerRef,\n      onGroupExpandStateChanged = props.onGroupExpandStateChanged,\n      onColumnIsSizingChanged = props.onColumnIsSizingChanged,\n      onRowDidMount = props.onRowDidMount,\n      onRowWillUnmount = props.onRowWillUnmount,\n      disableSelectionZone = props.disableSelectionZone,\n      onColumnResized = props.onColumnResized,\n      onColumnAutoResized = props.onColumnAutoResized,\n      onToggleCollapse = props.onToggleCollapse,\n      onActiveRowChanged = props.onActiveRowChanged,\n      onBlur = props.onBlur,\n      eventsToRegister = props.rowElementEventMap,\n      onRenderMissingItem = props.onRenderMissingItem,\n      onRenderItemColumn = props.onRenderItemColumn,\n      getCellValueKey = props.getCellValueKey,\n      getRowAriaLabel = props.getRowAriaLabel,\n      getRowAriaDescribedBy = props.getRowAriaDescribedBy,\n      checkButtonAriaLabel = props.checkButtonAriaLabel,\n      checkboxCellClassName = props.checkboxCellClassName,\n      useReducedRowRenderer = props.useReducedRowRenderer,\n      enableUpdateAnimations = props.enableUpdateAnimations,\n      enterModalSelectionOnTouch = props.enterModalSelectionOnTouch,\n      onRenderDefaultRow = props.onRenderDefaultRow,\n      selectionZoneRef = props.selectionZoneRef;\n  var groupNestingDepth = getGroupNestingDepth(groups);\n  var additionalListProps = React.useMemo(function () {\n    return __assign({\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey: getKey,\n      version: version\n    }, listProps);\n  }, [isSizing, getKey, version, listProps]);\n  var selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    var isCollapsedGroupSelectVisible = groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n\n    var isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  var defaultOnRenderDetailsHeader = React.useCallback(function (detailsHeaderProps) {\n    return React.createElement(DetailsHeader, __assign({}, detailsHeaderProps));\n  }, []);\n  var defaultOnRenderDetailsFooter = React.useCallback(function () {\n    return null;\n  }, []);\n  var propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n  var onRenderDetailsHeader = React.useMemo(function () {\n    return propsOnRenderDetailsHeader ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader) : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n  var propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n  var onRenderDetailsFooter = React.useMemo(function () {\n    return propsOnRenderDetailsFooter ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter) : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n  var detailsFooterProps = React.useMemo(function () {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth: groupNestingDepth,\n      selection: selection,\n      selectionMode: selectionMode,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      indentWidth: indentWidth,\n      cellStyleProps: cellStyleProps\n    };\n  }, [adjustedColumns, groupNestingDepth, selection, selectionMode, viewport, checkboxVisibility, indentWidth, cellStyleProps]);\n  var columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n  var onColumnDragEnd = React.useCallback(function (_a, event) {\n    var dropLocation = _a.dropLocation;\n    var finalDropLocation = ColumnDragEndLocation.outside;\n\n    if (columnReorderOnDragEnd) {\n      if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n        finalDropLocation = dropLocation;\n      } else if (rootRef.current) {\n        var clientRect = rootRef.current.getBoundingClientRect();\n\n        if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {\n          finalDropLocation = ColumnDragEndLocation.surface;\n        }\n      }\n\n      columnReorderOnDragEnd(finalDropLocation);\n    }\n  }, [columnReorderOnDragEnd, rootRef]);\n  var columnReorderProps = React.useMemo(function () {\n    if (columnReorderOptions) {\n      return __assign(__assign({}, columnReorderOptions), {\n        onColumnDragEnd: onColumnDragEnd\n      });\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n  var rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  var colCount = (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) + (adjustedColumns ? adjustedColumns.length : 0) + (groups ? 1 : 0);\n  var classNames = React.useMemo(function () {\n    return getClassNames(styles, {\n      theme: theme,\n      compact: compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className: className\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n  var onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n  var finalOnRenderDetailsGroupFooter = React.useMemo(function () {\n    return onRenderDetailsGroupFooter ? function (groupFooterProps, defaultRender) {\n      return onRenderDetailsGroupFooter(__assign(__assign({}, groupFooterProps), {\n        columns: adjustedColumns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: selection,\n        selectionMode: selectionMode,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps\n      }), defaultRender);\n    } : undefined;\n  }, [onRenderDetailsGroupFooter, adjustedColumns, groupNestingDepth, indentWidth, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps]);\n  var onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n  var finalOnRenderDetailsGroupHeader = React.useMemo(function () {\n    return onRenderDetailsGroupHeader ? function (groupHeaderProps, defaultRender) {\n      var ariaPosInSet = groupHeaderProps.ariaPosInSet,\n          ariaSetSize = groupHeaderProps.ariaSetSize;\n      return onRenderDetailsGroupHeader(__assign(__assign({}, groupHeaderProps), {\n        columns: adjustedColumns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: selection,\n        selectionMode: selectionMode,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps,\n        ariaColSpan: adjustedColumns.length,\n        ariaPosInSet: undefined,\n        ariaSetSize: undefined,\n        ariaRowCount: ariaSetSize ? ariaSetSize + (isHeaderVisible ? 1 : 0) : undefined,\n        ariaRowIndex: ariaPosInSet ? ariaPosInSet + (isHeaderVisible ? 1 : 0) : undefined\n      }), defaultRender);\n    } : function (groupHeaderProps, defaultRender) {\n      var ariaPosInSet = groupHeaderProps.ariaPosInSet,\n          ariaSetSize = groupHeaderProps.ariaSetSize;\n      return defaultRender(__assign(__assign({}, groupHeaderProps), {\n        ariaColSpan: adjustedColumns.length,\n        ariaPosInSet: undefined,\n        ariaSetSize: undefined,\n        ariaRowCount: ariaSetSize ? ariaSetSize + (isHeaderVisible ? 1 : 0) : undefined,\n        ariaRowIndex: ariaPosInSet ? ariaPosInSet + (isHeaderVisible ? 1 : 0) : undefined\n      }));\n    };\n  }, [onRenderDetailsGroupHeader, adjustedColumns, groupNestingDepth, indentWidth, isHeaderVisible, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps]);\n  var finalGroupProps = React.useMemo(function () {\n    return __assign(__assign({}, groupProps), {\n      role: 'rowgroup',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader\n    });\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader]);\n  var sumColumnWidths = useConst(function () {\n    return memoizeFunction(function (columns) {\n      var totalWidth = 0;\n      columns.forEach(function (column) {\n        return totalWidth += column.calculatedWidth || column.minWidth;\n      });\n      return totalWidth;\n    });\n  });\n  var collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n  var rowWidth = React.useMemo(function () {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n  var onRenderCell = React.useCallback(function (nestingDepth, item, index) {\n    var finalOnRenderRow = props.onRenderRow ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow) : onRenderDefaultRow;\n    var rowProps = {\n      item: item,\n      itemIndex: index,\n      compact: compact,\n      columns: adjustedColumns,\n      groupNestingDepth: nestingDepth,\n      selectionMode: selectionMode,\n      selection: selection,\n      onDidMount: onRowDidMount,\n      onWillUnmount: onRowWillUnmount,\n      onRenderItemColumn: onRenderItemColumn,\n      getCellValueKey: getCellValueKey,\n      eventsToRegister: eventsToRegister,\n      dragDropEvents: dragDropEvents,\n      dragDropHelper: dragDropHelper,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      collapseAllVisibility: collapseAllVisibility,\n      getRowAriaLabel: getRowAriaLabel,\n      getRowAriaDescribedBy: getRowAriaDescribedBy,\n      checkButtonAriaLabel: checkButtonAriaLabel,\n      checkboxCellClassName: checkboxCellClassName,\n      useReducedRowRenderer: useReducedRowRenderer,\n      indentWidth: indentWidth,\n      cellStyleProps: cellStyleProps,\n      onRenderDetailsCheckbox: onRenderCheckbox,\n      enableUpdateAnimations: enableUpdateAnimations,\n      rowWidth: rowWidth,\n      useFastIcons: useFastIcons\n    };\n\n    if (!item) {\n      if (onRenderMissingItem) {\n        return onRenderMissingItem(index, rowProps);\n      }\n\n      return null;\n    }\n\n    return finalOnRenderRow(rowProps);\n  }, [compact, adjustedColumns, selectionMode, selection, onRowDidMount, onRowWillUnmount, onRenderItemColumn, getCellValueKey, eventsToRegister, dragDropEvents, dragDropHelper, viewport, checkboxVisibility, collapseAllVisibility, getRowAriaLabel, getRowAriaDescribedBy, checkButtonAriaLabel, checkboxCellClassName, useReducedRowRenderer, indentWidth, cellStyleProps, onRenderCheckbox, enableUpdateAnimations, useFastIcons, onRenderDefaultRow, onRenderMissingItem, props.onRenderRow, rowWidth]);\n  var onRenderListCell = React.useCallback(function (nestingDepth) {\n    return function (item, itemIndex) {\n      return onRenderCell(nestingDepth, item, itemIndex);\n    };\n  }, [onRenderCell]);\n  var isRightArrow = React.useCallback(function (event) {\n    return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n  }, [theme]);\n  var focusZoneProps = {\n    componentRef: focusZoneRef,\n    className: classNames.focusZone,\n    direction: FocusZoneDirection.vertical,\n    shouldEnterInnerZone: isRightArrow,\n    onActiveElementChanged: onActiveRowChanged,\n    shouldRaiseClicks: false,\n    onBlur: onBlur\n  };\n  var list = groups ? React.createElement(GroupedList, {\n    focusZoneProps: focusZoneProps,\n    componentRef: groupedListRef,\n    groups: groups,\n    groupProps: finalGroupProps,\n    items: items,\n    onRenderCell: onRenderCell,\n    role: \"presentation\",\n    selection: selection,\n    selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n    dragDropEvents: dragDropEvents,\n    dragDropHelper: dragDropHelper,\n    eventsToRegister: rowElementEventMap,\n    listProps: additionalListProps,\n    onGroupExpandStateChanged: onGroupExpandStateChanged,\n    usePageCache: usePageCache,\n    onShouldVirtualize: onShouldVirtualize,\n    getGroupHeight: getGroupHeight,\n    compact: compact\n  }) : React.createElement(FocusZone, __assign({}, focusZoneProps), React.createElement(List, __assign({\n    ref: listRef,\n    role: \"presentation\",\n    items: items,\n    onRenderCell: onRenderListCell(0),\n    usePageCache: usePageCache,\n    onShouldVirtualize: onShouldVirtualize\n  }, additionalListProps)));\n  var onHeaderKeyDown = React.useCallback(function (ev) {\n    if (ev.which === KeyCodes.down) {\n      if (focusZoneRef.current && focusZoneRef.current.focus()) {\n        // select the first item in list after down arrow key event\n        // only if nothing was selected; otherwise start with the already-selected item\n        if (selection.getSelectedIndices().length === 0) {\n          selection.setIndexSelected(0, true, false);\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [selection, focusZoneRef]);\n  var onContentKeyDown = React.useCallback(function (ev) {\n    if (ev.which === KeyCodes.up && !ev.altKey) {\n      if (headerRef.current && headerRef.current.focus()) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [headerRef]);\n  return (// If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n    // with JAWS.\n    React.createElement(\"div\", __assign({\n      ref: rootRef,\n      className: classNames.root,\n      \"data-automationid\": \"DetailsList\",\n      \"data-is-scrollable\": \"false\",\n      \"aria-label\": ariaLabel\n    }, shouldApplyApplicationRole ? {\n      role: 'application'\n    } : {}), React.createElement(FocusRects, null), React.createElement(\"div\", {\n      role: \"grid\",\n      \"aria-label\": ariaLabelForGrid,\n      \"aria-rowcount\": isPlaceholderData ? -1 : rowCount,\n      \"aria-colcount\": colCount,\n      \"aria-readonly\": \"true\",\n      \"aria-busy\": isPlaceholderData\n    }, React.createElement(\"div\", {\n      onKeyDown: onHeaderKeyDown,\n      role: \"presentation\",\n      className: classNames.headerWrapper\n    }, isHeaderVisible && onRenderDetailsHeader({\n      componentRef: headerRef,\n      selectionMode: selectionMode,\n      layoutMode: layoutMode,\n      selection: selection,\n      columns: adjustedColumns,\n      onColumnClick: onColumnHeaderClick,\n      onColumnContextMenu: onColumnHeaderContextMenu,\n      onColumnResized: onColumnResized,\n      onColumnIsSizingChanged: onColumnIsSizingChanged,\n      onColumnAutoResized: onColumnAutoResized,\n      groupNestingDepth: groupNestingDepth,\n      isAllCollapsed: isCollapsed,\n      onToggleCollapseAll: onToggleCollapse,\n      ariaLabel: ariaLabelForListHeader,\n      ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n      ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n      selectAllVisibility: selectAllVisibility,\n      collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n      viewport: viewport,\n      columnReorderProps: columnReorderProps,\n      minimumPixelsForDrag: minimumPixelsForDrag,\n      cellStyleProps: cellStyleProps,\n      checkboxVisibility: checkboxVisibility,\n      indentWidth: indentWidth,\n      onRenderDetailsCheckbox: onRenderCheckbox,\n      rowWidth: sumColumnWidths(adjustedColumns),\n      useFastIcons: useFastIcons\n    }, onRenderDetailsHeader)), React.createElement(\"div\", {\n      onKeyDown: onContentKeyDown,\n      role: \"presentation\",\n      className: classNames.contentWrapper\n    }, !disableSelectionZone ? React.createElement(SelectionZone, __assign({\n      ref: selectionZoneRef,\n      selection: selection,\n      selectionPreservedOnEmptyClick: selectionPreservedOnEmptyClick,\n      selectionMode: selectionMode,\n      onItemInvoked: onItemInvoked,\n      onItemContextMenu: onItemContextMenu,\n      enterModalOnTouch: enterModalSelectionOnTouch\n    }, selectionZoneProps || {}), list) : list), onRenderDetailsFooter(__assign({}, detailsFooterProps))))\n  );\n};\n\nvar DetailsListBase =\n/** @class */\nfunction (_super) {\n  __extends(DetailsListBase, _super);\n\n  function DetailsListBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._header = React.createRef();\n    _this._groupedList = React.createRef();\n    _this._list = React.createRef();\n    _this._focusZone = React.createRef();\n    _this._selectionZone = React.createRef();\n\n    _this._onRenderRow = function (props, defaultRender) {\n      return React.createElement(DetailsRow, __assign({}, props));\n    };\n\n    _this._getDerivedStateFromProps = function (nextProps, previousState) {\n      var _a = _this.props,\n          checkboxVisibility = _a.checkboxVisibility,\n          items = _a.items,\n          setKey = _a.setKey,\n          _b = _a.selectionMode,\n          selectionMode = _b === void 0 ? _this._selection.mode : _b,\n          columns = _a.columns,\n          viewport = _a.viewport,\n          compact = _a.compact,\n          dragDropEvents = _a.dragDropEvents;\n      var _c = (_this.props.groupProps || {}).isAllGroupsCollapsed,\n          isAllGroupsCollapsed = _c === void 0 ? undefined : _c;\n      var newViewportWidth = nextProps.viewport && nextProps.viewport.width || 0;\n      var oldViewportWidth = viewport && viewport.width || 0;\n      var shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n      var shouldForceUpdates = false;\n\n      if (nextProps.layoutMode !== _this.props.layoutMode) {\n        shouldForceUpdates = true;\n      }\n\n      var nextState = previousState;\n\n      if (shouldResetSelection) {\n        _this._initialFocusedIndex = nextProps.initialFocusedIndex; // reset focusedItemIndex when setKey changes\n\n        nextState = __assign(__assign({}, nextState), {\n          focusedItemIndex: _this._initialFocusedIndex !== undefined ? _this._initialFocusedIndex : -1\n        });\n      }\n\n      if (!_this.props.disableSelectionZone && nextProps.items !== items) {\n        _this._selection.setItems(nextProps.items, shouldResetSelection);\n      }\n\n      if (nextProps.checkboxVisibility !== checkboxVisibility || nextProps.columns !== columns || newViewportWidth !== oldViewportWidth || nextProps.compact !== compact) {\n        shouldForceUpdates = true;\n      }\n\n      nextState = __assign(__assign({}, nextState), _this._adjustColumns(nextProps, nextState, true));\n\n      if (nextProps.selectionMode !== selectionMode) {\n        shouldForceUpdates = true;\n      }\n\n      if (isAllGroupsCollapsed === undefined && nextProps.groupProps && nextProps.groupProps.isAllGroupsCollapsed !== undefined) {\n        nextState = __assign(__assign({}, nextState), {\n          isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n          isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed\n        });\n      }\n\n      if (nextProps.dragDropEvents !== dragDropEvents) {\n        _this._dragDropHelper && _this._dragDropHelper.dispose();\n        _this._dragDropHelper = nextProps.dragDropEvents ? new DragDropHelper({\n          selection: _this._selection,\n          minimumPixelsForDrag: nextProps.minimumPixelsForDrag\n        }) : undefined;\n        shouldForceUpdates = true;\n      }\n\n      if (shouldForceUpdates) {\n        nextState = __assign(__assign({}, nextState), {\n          version: {}\n        });\n      }\n\n      return nextState;\n    };\n\n    _this._onGroupExpandStateChanged = function (isSomeGroupExpanded) {\n      _this.setState({\n        isSomeGroupExpanded: isSomeGroupExpanded\n      });\n    };\n\n    _this._onColumnIsSizingChanged = function (column, isSizing) {\n      _this.setState({\n        isSizing: isSizing\n      });\n    };\n\n    _this._onRowDidMount = function (row) {\n      var _a = row.props,\n          item = _a.item,\n          itemIndex = _a.itemIndex;\n\n      var itemKey = _this._getItemKey(item, itemIndex);\n\n      _this._activeRows[itemKey] = row; // this is used for column auto resize\n\n      _this._setFocusToRowIfPending(row);\n\n      var onRowDidMount = _this.props.onRowDidMount;\n\n      if (onRowDidMount) {\n        onRowDidMount(item, itemIndex);\n      }\n    };\n\n    _this._onRowWillUnmount = function (row) {\n      var onRowWillUnmount = _this.props.onRowWillUnmount;\n      var _a = row.props,\n          item = _a.item,\n          itemIndex = _a.itemIndex;\n\n      var itemKey = _this._getItemKey(item, itemIndex);\n\n      delete _this._activeRows[itemKey];\n\n      if (onRowWillUnmount) {\n        onRowWillUnmount(item, itemIndex);\n      }\n    };\n\n    _this._onToggleCollapse = function (collapsed) {\n      _this.setState({\n        isCollapsed: collapsed\n      });\n\n      if (_this._groupedList.current) {\n        _this._groupedList.current.toggleCollapseAll(collapsed);\n      }\n    };\n\n    _this._onColumnResized = function (resizingColumn, newWidth, resizingColumnIndex) {\n      var newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n\n      if (_this.props.onColumnResize) {\n        _this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n      }\n\n      _this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n      _this.setState(__assign(__assign({}, _this._adjustColumns(_this.props, _this.state, true, resizingColumnIndex)), {\n        version: {}\n      }));\n    };\n    /**\n     * Callback function when double clicked on the details header column resizer\n     * which will measure the column cells of all the active rows and resize the\n     * column to the max cell width.\n     *\n     * @param column - double clicked column definition\n     * @param columnIndex - double clicked column index\n     * TODO: min width 100 should be changed to const value and should be consistent with the\n     * value used on _onSizerMove method in DetailsHeader\n     */\n\n\n    _this._onColumnAutoResized = function (column, columnIndex) {\n      var max = 0;\n      var count = 0;\n      var totalCount = Object.keys(_this._activeRows).length;\n\n      for (var key in _this._activeRows) {\n        if (_this._activeRows.hasOwnProperty(key)) {\n          var currentRow = _this._activeRows[key];\n          currentRow.measureCell(columnIndex, function (width) {\n            max = Math.max(max, width);\n            count++;\n\n            if (count === totalCount) {\n              _this._onColumnResized(column, max, columnIndex);\n            }\n          });\n        }\n      }\n    };\n    /**\n     * Call back function when an element in FocusZone becomes active. It will translate it into item\n     * and call onActiveItemChanged callback if specified.\n     *\n     * @param row - element that became active in Focus Zone\n     * @param focus - event from Focus Zone\n     */\n\n\n    _this._onActiveRowChanged = function (el, ev) {\n      var _a = _this.props,\n          items = _a.items,\n          onActiveItemChanged = _a.onActiveItemChanged;\n\n      if (!el) {\n        return;\n      } // Check and assign index only if the event was raised from any DetailsRow element\n\n\n      if (el.getAttribute('data-item-index')) {\n        var index = Number(el.getAttribute('data-item-index'));\n\n        if (index >= 0) {\n          if (onActiveItemChanged) {\n            onActiveItemChanged(items[index], index, ev);\n          }\n\n          _this.setState({\n            focusedItemIndex: index\n          });\n        }\n      }\n    };\n\n    _this._onBlur = function (event) {\n      _this.setState({\n        focusedItemIndex: -1\n      });\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._activeRows = {};\n    _this._columnOverrides = {};\n    _this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: _this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: _this._getDerivedStateFromProps\n    };\n    _this._selection = props.selection || new Selection({\n      onSelectionChanged: undefined,\n      getKey: props.getKey,\n      selectionMode: props.selectionMode\n    });\n\n    if (!_this.props.disableSelectionZone) {\n      _this._selection.setItems(props.items, false);\n    }\n\n    _this._dragDropHelper = props.dragDropEvents ? new DragDropHelper({\n      selection: _this._selection,\n      minimumPixelsForDrag: props.minimumPixelsForDrag\n    }) : undefined;\n    _this._initialFocusedIndex = props.initialFocusedIndex;\n    return _this;\n  }\n\n  DetailsListBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  };\n\n  DetailsListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  };\n\n  DetailsListBase.prototype.focusIndex = function (index, forceIntoFirstElement, measureItem, scrollToMode) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    var item = this.props.items[index];\n\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      var itemKey = this._getItemKey(item, index);\n\n      var row = this._activeRows[itemKey];\n\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  };\n\n  DetailsListBase.prototype.getStartItemIndexInView = function () {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n\n    return 0;\n  };\n\n  DetailsListBase.prototype.componentWillUnmount = function () {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n\n    this._async.dispose();\n  };\n\n  DetailsListBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      var item = this.props.items[this._initialFocusedIndex];\n\n      if (item) {\n        var itemKey = this._getItemKey(item, this._initialFocusedIndex);\n\n        var row = this._activeRows[itemKey];\n\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (this.props.items !== prevProps.items && this.props.items.length > 0 && this.state.focusedItemIndex !== -1 && !elementContains(this._root.current, document.activeElement, false)) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      var index = this.state.focusedItemIndex < this.props.items.length ? this.state.focusedItemIndex : this.props.items.length - 1;\n      var item = this.props.items[index];\n\n      var itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n\n      var row = this._activeRows[itemKey];\n\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  };\n\n  DetailsListBase.prototype.render = function () {\n    return React.createElement(DetailsListInner, __assign({}, this.props, this.state, {\n      selection: this._selection,\n      dragDropHelper: this._dragDropHelper,\n      rootRef: this._root,\n      listRef: this._list,\n      groupedListRef: this._groupedList,\n      focusZoneRef: this._focusZone,\n      headerRef: this._header,\n      selectionZoneRef: this._selectionZone,\n      onGroupExpandStateChanged: this._onGroupExpandStateChanged,\n      onColumnIsSizingChanged: this._onColumnIsSizingChanged,\n      onRowDidMount: this._onRowDidMount,\n      onRowWillUnmount: this._onRowWillUnmount,\n      onColumnResized: this._onColumnResized,\n      onColumnAutoResized: this._onColumnAutoResized,\n      onToggleCollapse: this._onToggleCollapse,\n      onActiveRowChanged: this._onActiveRowChanged,\n      onBlur: this._onBlur,\n      onRenderDefaultRow: this._onRenderRow\n    }));\n  };\n\n  DetailsListBase.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n\n    this._forceListUpdates();\n  };\n\n  DetailsListBase.prototype._getGroupNestingDepth = function () {\n    var groups = this.props.groups;\n    var level = 0;\n    var groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  };\n\n  DetailsListBase.prototype._setFocusToRowIfPending = function (row) {\n    var itemIndex = row.props.itemIndex;\n\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n\n      delete this._initialFocusedIndex;\n    }\n  };\n\n  DetailsListBase.prototype._setFocusToRow = function (row, forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n\n    this._async.setTimeout(function () {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  };\n\n  DetailsListBase.prototype._forceListUpdates = function () {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  };\n\n  DetailsListBase.prototype._notifyColumnsResized = function () {\n    this.state.adjustedColumns.forEach(function (column) {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  };\n\n  DetailsListBase.prototype._adjustColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n    var adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n\n    var viewport = this.props.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    return __assign(__assign({}, previousState), {\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth\n    });\n  };\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n\n\n  DetailsListBase.prototype._getAdjustedColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n    var _this = this;\n\n    var newItems = newProps.items,\n        layoutMode = newProps.layoutMode,\n        selectionMode = newProps.selectionMode,\n        viewport = newProps.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    var newColumns = newProps.columns;\n    var columns = this.props ? this.props.columns : [];\n    var lastWidth = previousState ? previousState.lastWidth : -1;\n    var lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (!forceUpdate && lastWidth === viewportWidth && lastSelectionMode === selectionMode && (!columns || newColumns === columns)) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n    var adjustedColumns;\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns); // Preserve adjusted column calculated widths.\n\n      adjustedColumns.forEach(function (column) {\n        _this._rememberCalculatedWidth(column, column.calculatedWidth);\n      });\n    } else {\n      if (resizingColumnIndex !== undefined) {\n        adjustedColumns = this._getJustifiedColumnsAfterResize(newColumns, viewportWidth, newProps, resizingColumnIndex);\n      } else {\n        adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps, 0);\n      }\n\n      adjustedColumns.forEach(function (column) {\n        _this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  };\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n\n\n  DetailsListBase.prototype._getFixedColumns = function (newColumns) {\n    var _this = this;\n\n    return newColumns.map(function (column) {\n      var newColumn = __assign(__assign({}, column), _this._columnOverrides[column.key]);\n\n      if (!newColumn.calculatedWidth) {\n        newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n      }\n\n      return newColumn;\n    });\n  };\n\n  DetailsListBase.prototype._getJustifiedColumnsAfterResize = function (newColumns, viewportWidth, props, resizingColumnIndex) {\n    var _this = this;\n\n    var fixedColumns = newColumns.slice(0, resizingColumnIndex);\n    fixedColumns.forEach(function (column) {\n      return column.calculatedWidth = _this._getColumnOverride(column.key).currentWidth;\n    });\n    var fixedWidth = fixedColumns.reduce(function (total, column, i) {\n      return total + getPaddedWidth(column, i === 0, props);\n    }, 0);\n    var remainingColumns = newColumns.slice(resizingColumnIndex);\n    var remainingWidth = viewportWidth - fixedWidth;\n    return __spreadArrays(fixedColumns, this._getJustifiedColumns(remainingColumns, remainingWidth, props, resizingColumnIndex));\n  };\n  /** Builds a set of columns to fix within the viewport width. */\n\n\n  DetailsListBase.prototype._getJustifiedColumns = function (newColumns, viewportWidth, props, firstIndex) {\n    var _this = this;\n\n    var _a = props.selectionMode,\n        selectionMode = _a === void 0 ? this._selection.mode : _a,\n        checkboxVisibility = props.checkboxVisibility;\n    var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    var groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    var totalWidth = 0; // offset because we have one less inner padding.\n\n    var availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    var adjustedColumns = newColumns.map(function (column, i) {\n      var newColumn = __assign(__assign(__assign({}, column), {\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH\n      }), _this._columnOverrides[column.key]);\n\n      var isFirst = i + firstIndex === 0;\n      totalWidth += getPaddedWidth(newColumn, isFirst, props);\n      return newColumn;\n    });\n    var lastIndex = adjustedColumns.length - 1; // Shrink or remove collapsable columns.\n\n    while (lastIndex > 0 && totalWidth > availableWidth) {\n      var column = adjustedColumns[lastIndex];\n      var minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      var overflowWidth = totalWidth - availableWidth; // eslint-disable-next-line deprecation/deprecation\n\n      if (column.calculatedWidth - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        var originalWidth = column.calculatedWidth;\n        column.calculatedWidth = Math.max(column.calculatedWidth - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, false, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n\n      lastIndex--;\n    } // Then expand columns starting at the beginning, until we've filled the width.\n\n\n    for (var i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      var column = adjustedColumns[i];\n      var isLast = i === adjustedColumns.length - 1;\n      var overrides = this._columnOverrides[column.key];\n\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      var spaceLeft = availableWidth - totalWidth;\n      var increment = void 0;\n\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        var maxWidth = column.maxWidth;\n        var minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = column.calculatedWidth + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  };\n\n  DetailsListBase.prototype._rememberCalculatedWidth = function (column, newCalculatedWidth) {\n    var overrides = this._getColumnOverride(column.key);\n\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  };\n\n  DetailsListBase.prototype._getColumnOverride = function (key) {\n    return this._columnOverrides[key] = this._columnOverrides[key] || {};\n  };\n\n  DetailsListBase.prototype._getItemKey = function (item, itemIndex) {\n    var getKey = this.props.getKey;\n    var itemKey = undefined;\n\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  };\n\n  DetailsListBase.defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true\n  };\n  DetailsListBase = __decorate([withViewport], DetailsListBase);\n  return DetailsListBase;\n}(React.Component);\n\nexport { DetailsListBase };\nexport function buildColumns(items, canResizeColumns, onColumnClick, sortedColumnKey, isSortedDescending, groupedColumnKey, isMultiline) {\n  var columns = [];\n\n  if (items && items.length) {\n    var firstItem = items[0];\n\n    for (var propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column, isFirst, props) {\n  var _a = props.cellStyleProps,\n      cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n  return column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n}\n\nfunction getGroupNestingDepth(groups) {\n  var level = 0;\n  var groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}","map":{"version":3,"sources":["components/DetailsList/DetailsList.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  IRenderFunction,\n  classNamesFunction,\n  memoizeFunction,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n  ColumnDragEndLocation,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport {\n  IDetailsHeader,\n  SelectAllVisibility,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport { IFocusZone, FocusZone, FocusZoneDirection, IFocusZoneProps } from '../../FocusZone';\nimport { IObjectWithKey, ISelection, Selection, SelectionMode, SelectionZone } from '../../utilities/selection/index';\n\nimport { DragDropHelper } from '../../utilities/dragdrop/DragDropHelper';\nimport { IGroupedList, GroupedList, IGroupDividerProps, IGroupRenderProps } from '../../GroupedList';\nimport { List, IListProps, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction } from '@uifabric/utilities';\nimport { useConst } from '@uifabric/react-hooks';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n  getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\ntype IDetailsListInnerProps = Omit<IDetailsListProps, 'selection'> &\n  IDetailsListState & {\n    selection: ISelection;\n    dragDropHelper: DragDropHelper | undefined;\n    rootRef: React.RefObject<HTMLDivElement>;\n    listRef: React.RefObject<List>;\n    groupedListRef: React.RefObject<IGroupedList>;\n    focusZoneRef: React.RefObject<IFocusZone>;\n    headerRef: React.RefObject<IDetailsHeader>;\n    selectionZoneRef: React.RefObject<SelectionZone>;\n    onGroupExpandStateChanged: (isSomeGroupExpanded: boolean) => void;\n    onColumnIsSizingChanged: (column: IColumn, isSizing: boolean) => void;\n    onRowDidMount: (row: DetailsRowBase) => void;\n    onRowWillUnmount: (row: DetailsRowBase) => void;\n    onColumnResized: (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number) => void;\n    onColumnAutoResized: (column: IColumn, columnIndex: number) => void;\n    onToggleCollapse: (collapsed: boolean) => void;\n    onActiveRowChanged: (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;\n    onBlur: (event: React.FocusEvent<HTMLElement>) => void;\n    onRenderDefaultRow: (detailsRowProps: IDetailsRowProps) => JSX.Element;\n  };\n\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nconst DetailsListInner: React.ComponentType<IDetailsListInnerProps> = (\n  props: IDetailsListInnerProps,\n): JSX.Element | null => {\n  const { selection } = props;\n\n  const {\n    ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn,\n    className,\n    checkboxVisibility,\n    compact,\n    constrainMode,\n    dragDropEvents,\n    groups,\n    groupProps,\n    indentWidth,\n    items,\n    isPlaceholderData,\n    isHeaderVisible,\n    layoutMode,\n    onItemInvoked,\n    onItemContextMenu,\n    onColumnHeaderClick,\n    onColumnHeaderContextMenu,\n    selectionMode = selection.mode,\n    selectionPreservedOnEmptyClick,\n    selectionZoneProps,\n    ariaLabel,\n    ariaLabelForGrid,\n    rowElementEventMap,\n    shouldApplyApplicationRole = false,\n    getKey,\n    listProps,\n    usePageCache,\n    onShouldVirtualize,\n    viewport,\n    minimumPixelsForDrag,\n    getGroupHeight,\n    styles,\n    theme,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    onRenderCheckbox,\n    useFastIcons,\n    dragDropHelper,\n    adjustedColumns,\n    isCollapsed,\n    isSizing,\n    isSomeGroupExpanded,\n    version,\n    rootRef,\n    listRef,\n    focusZoneRef,\n    columnReorderOptions,\n    groupedListRef,\n    headerRef,\n    onGroupExpandStateChanged,\n    onColumnIsSizingChanged,\n    onRowDidMount,\n    onRowWillUnmount,\n    disableSelectionZone,\n    onColumnResized,\n    onColumnAutoResized,\n    onToggleCollapse,\n    onActiveRowChanged,\n    onBlur,\n    rowElementEventMap: eventsToRegister,\n    onRenderMissingItem,\n    onRenderItemColumn,\n    getCellValueKey,\n    getRowAriaLabel,\n    getRowAriaDescribedBy,\n    checkButtonAriaLabel,\n    checkboxCellClassName,\n    useReducedRowRenderer,\n    enableUpdateAnimations,\n    enterModalSelectionOnTouch,\n    onRenderDefaultRow,\n    selectionZoneRef,\n  } = props;\n\n  const groupNestingDepth = getGroupNestingDepth(groups);\n\n  const additionalListProps = React.useMemo((): IListProps => {\n    return {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version,\n      ...listProps,\n    };\n  }, [isSizing, getKey, version, listProps]);\n\n  let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    let isCollapsedGroupSelectVisible =\n      groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  const defaultOnRenderDetailsHeader = React.useCallback(\n    (detailsHeaderProps: IDetailsHeaderProps): JSX.Element | null => {\n      return <DetailsHeader {...detailsHeaderProps} />;\n    },\n    [],\n  );\n\n  const defaultOnRenderDetailsFooter = React.useCallback((): JSX.Element | null => {\n    return null;\n  }, []);\n\n  const propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n\n  const onRenderDetailsHeader = React.useMemo(() => {\n    return propsOnRenderDetailsHeader\n      ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)\n      : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n\n  const propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n\n  const onRenderDetailsFooter = React.useMemo(() => {\n    return propsOnRenderDetailsFooter\n      ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)\n      : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n\n  const detailsFooterProps = React.useMemo((): IDetailsFooterProps => {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth,\n      selection,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }, [\n    adjustedColumns,\n    groupNestingDepth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    indentWidth,\n    cellStyleProps,\n  ]);\n\n  const columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n\n  const onColumnDragEnd = React.useCallback(\n    (\n      {\n        dropLocation,\n      }: {\n        dropLocation?: ColumnDragEndLocation;\n      },\n      event: MouseEvent,\n    ): void => {\n      let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n      if (columnReorderOnDragEnd) {\n        if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n          finalDropLocation = dropLocation;\n        } else if (rootRef.current) {\n          const clientRect = rootRef.current.getBoundingClientRect();\n          if (\n            event.clientX > clientRect.left &&\n            event.clientX < clientRect.right &&\n            event.clientY > clientRect.top &&\n            event.clientY < clientRect.bottom\n          ) {\n            finalDropLocation = ColumnDragEndLocation.surface;\n          }\n        }\n        columnReorderOnDragEnd(finalDropLocation);\n      }\n    },\n    [columnReorderOnDragEnd, rootRef],\n  );\n\n  const columnReorderProps = React.useMemo((): IColumnReorderHeaderProps | undefined => {\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd,\n      };\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n\n  const rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  const colCount =\n    (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +\n    (adjustedColumns ? adjustedColumns.length : 0) +\n    (groups ? 1 : 0);\n\n  const classNames = React.useMemo(() => {\n    return getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n\n  const onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n\n  const finalOnRenderDetailsGroupFooter = React.useMemo(() => {\n    return onRenderDetailsGroupFooter\n      ? (groupFooterProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...groupFooterProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n  }, [\n    onRenderDetailsGroupFooter,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n\n  const finalOnRenderDetailsGroupHeader = React.useMemo(() => {\n    return onRenderDetailsGroupHeader\n      ? (groupHeaderProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          const { ariaPosInSet, ariaSetSize } = groupHeaderProps;\n\n          return onRenderDetailsGroupHeader(\n            {\n              ...groupHeaderProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n              ariaColSpan: adjustedColumns.length,\n              ariaPosInSet: undefined,\n              ariaSetSize: undefined,\n              ariaRowCount: ariaSetSize ? ariaSetSize + (isHeaderVisible ? 1 : 0) : undefined,\n              ariaRowIndex: ariaPosInSet ? ariaPosInSet + (isHeaderVisible ? 1 : 0) : undefined,\n            },\n            defaultRender,\n          );\n        }\n      : (groupHeaderProps: IGroupDividerProps, defaultRender: IRenderFunction<IGroupDividerProps>) => {\n          const { ariaPosInSet, ariaSetSize } = groupHeaderProps;\n\n          return defaultRender({\n            ...groupHeaderProps,\n            ariaColSpan: adjustedColumns.length,\n            ariaPosInSet: undefined,\n            ariaSetSize: undefined,\n            ariaRowCount: ariaSetSize ? ariaSetSize + (isHeaderVisible ? 1 : 0) : undefined,\n            ariaRowIndex: ariaPosInSet ? ariaPosInSet + (isHeaderVisible ? 1 : 0) : undefined,\n          });\n        };\n  }, [\n    onRenderDetailsGroupHeader,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    isHeaderVisible,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const finalGroupProps = React.useMemo((): IGroupRenderProps | undefined => {\n    return {\n      ...groupProps,\n      role: 'rowgroup',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n    };\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader]);\n\n  const sumColumnWidths = useConst(() =>\n    memoizeFunction((columns: IColumn[]) => {\n      let totalWidth: number = 0;\n\n      columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n      return totalWidth;\n    }),\n  );\n\n  const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n\n  const rowWidth = React.useMemo(() => {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n\n  const onRenderCell = React.useCallback(\n    (nestingDepth: number, item: any, index: number): React.ReactNode => {\n      const finalOnRenderRow = props.onRenderRow\n        ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow)\n        : onRenderDefaultRow;\n\n      const rowProps: IDetailsRowProps = {\n        item: item,\n        itemIndex: index,\n        compact,\n        columns: adjustedColumns,\n        groupNestingDepth: nestingDepth,\n        selectionMode,\n        selection,\n        onDidMount: onRowDidMount,\n        onWillUnmount: onRowWillUnmount,\n        onRenderItemColumn,\n        getCellValueKey,\n        eventsToRegister,\n        dragDropEvents,\n        dragDropHelper,\n        viewport,\n        checkboxVisibility,\n        collapseAllVisibility,\n        getRowAriaLabel,\n        getRowAriaDescribedBy,\n        checkButtonAriaLabel,\n        checkboxCellClassName,\n        useReducedRowRenderer,\n        indentWidth,\n        cellStyleProps,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        enableUpdateAnimations,\n        rowWidth,\n        useFastIcons,\n      };\n\n      if (!item) {\n        if (onRenderMissingItem) {\n          return onRenderMissingItem(index, rowProps);\n        }\n\n        return null;\n      }\n\n      return finalOnRenderRow(rowProps);\n    },\n    [\n      compact,\n      adjustedColumns,\n      selectionMode,\n      selection,\n      onRowDidMount,\n      onRowWillUnmount,\n      onRenderItemColumn,\n      getCellValueKey,\n      eventsToRegister,\n      dragDropEvents,\n      dragDropHelper,\n      viewport,\n      checkboxVisibility,\n      collapseAllVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n      onRenderDefaultRow,\n      onRenderMissingItem,\n      props.onRenderRow,\n      rowWidth,\n    ],\n  );\n\n  const onRenderListCell = React.useCallback(\n    (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n      return (item: any, itemIndex: number): React.ReactNode => {\n        return onRenderCell(nestingDepth, item, itemIndex);\n      };\n    },\n    [onRenderCell],\n  );\n\n  const isRightArrow = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n    },\n    [theme],\n  );\n\n  const focusZoneProps: IFocusZoneProps = {\n    componentRef: focusZoneRef,\n    className: classNames.focusZone,\n    direction: FocusZoneDirection.vertical,\n    shouldEnterInnerZone: isRightArrow,\n    onActiveElementChanged: onActiveRowChanged,\n    shouldRaiseClicks: false,\n    onBlur: onBlur,\n  };\n\n  const list = groups ? (\n    <GroupedList\n      focusZoneProps={focusZoneProps}\n      componentRef={groupedListRef}\n      groups={groups}\n      groupProps={finalGroupProps}\n      items={items}\n      onRenderCell={onRenderCell}\n      role=\"presentation\"\n      selection={selection}\n      selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n      dragDropEvents={dragDropEvents}\n      dragDropHelper={dragDropHelper}\n      eventsToRegister={rowElementEventMap}\n      listProps={additionalListProps}\n      onGroupExpandStateChanged={onGroupExpandStateChanged}\n      usePageCache={usePageCache}\n      onShouldVirtualize={onShouldVirtualize}\n      getGroupHeight={getGroupHeight}\n      compact={compact}\n    />\n  ) : (\n    <FocusZone {...focusZoneProps}>\n      <List\n        ref={listRef}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    </FocusZone>\n  );\n\n  const onHeaderKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      if (ev.which === KeyCodes.down) {\n        if (focusZoneRef.current && focusZoneRef.current.focus()) {\n          // select the first item in list after down arrow key event\n          // only if nothing was selected; otherwise start with the already-selected item\n          if (selection.getSelectedIndices().length === 0) {\n            selection.setIndexSelected(0, true, false);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [selection, focusZoneRef],\n  );\n\n  const onContentKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      if (ev.which === KeyCodes.up && !ev.altKey) {\n        if (headerRef.current && headerRef.current.focus()) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [headerRef],\n  );\n\n  return (\n    // If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n    // with JAWS.\n    <div\n      ref={rootRef}\n      className={classNames.root}\n      data-automationid=\"DetailsList\"\n      data-is-scrollable=\"false\"\n      aria-label={ariaLabel}\n      {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n    >\n      <FocusRects />\n      <div\n        role=\"grid\"\n        aria-label={ariaLabelForGrid}\n        aria-rowcount={isPlaceholderData ? -1 : rowCount}\n        aria-colcount={colCount}\n        aria-readonly=\"true\"\n        aria-busy={isPlaceholderData}\n      >\n        <div onKeyDown={onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n          {isHeaderVisible &&\n            onRenderDetailsHeader(\n              {\n                componentRef: headerRef,\n                selectionMode: selectionMode,\n                layoutMode: layoutMode!,\n                selection: selection,\n                columns: adjustedColumns,\n                onColumnClick: onColumnHeaderClick,\n                onColumnContextMenu: onColumnHeaderContextMenu,\n                onColumnResized: onColumnResized,\n                onColumnIsSizingChanged: onColumnIsSizingChanged,\n                onColumnAutoResized: onColumnAutoResized,\n                groupNestingDepth: groupNestingDepth,\n                isAllCollapsed: isCollapsed,\n                onToggleCollapseAll: onToggleCollapse,\n                ariaLabel: ariaLabelForListHeader,\n                ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n                ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n                selectAllVisibility: selectAllVisibility,\n                collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                viewport: viewport,\n                columnReorderProps: columnReorderProps,\n                minimumPixelsForDrag: minimumPixelsForDrag,\n                cellStyleProps: cellStyleProps,\n                checkboxVisibility,\n                indentWidth,\n                onRenderDetailsCheckbox: onRenderCheckbox,\n                rowWidth: sumColumnWidths(adjustedColumns),\n                useFastIcons,\n              },\n              onRenderDetailsHeader,\n            )}\n        </div>\n        <div onKeyDown={onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n          {!disableSelectionZone ? (\n            <SelectionZone\n              ref={selectionZoneRef}\n              selection={selection}\n              selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n              selectionMode={selectionMode}\n              onItemInvoked={onItemInvoked}\n              onItemContextMenu={onItemContextMenu}\n              enterModalOnTouch={enterModalSelectionOnTouch}\n              {...(selectionZoneProps || {})}\n            >\n              {list}\n            </SelectionZone>\n          ) : (\n            list\n          )}\n        </div>\n        {onRenderDetailsFooter({\n          ...detailsFooterProps,\n        })}\n      </div>\n    </div>\n  );\n};\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <DetailsListInner\n        {...this.props}\n        {...this.state}\n        selection={this._selection}\n        dragDropHelper={this._dragDropHelper}\n        rootRef={this._root}\n        listRef={this._list}\n        groupedListRef={this._groupedList}\n        focusZoneRef={this._focusZone}\n        headerRef={this._header}\n        selectionZoneRef={this._selectionZone}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        onColumnIsSizingChanged={this._onColumnIsSizingChanged}\n        onRowDidMount={this._onRowDidMount}\n        onRowWillUnmount={this._onRowWillUnmount}\n        onColumnResized={this._onColumnResized}\n        onColumnAutoResized={this._onColumnAutoResized}\n        onToggleCollapse={this._onToggleCollapse}\n        onActiveRowChanged={this._onActiveRowChanged}\n        onBlur={this._onBlur}\n        onRenderDefaultRow={this._onRenderRow}\n      />\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _getDerivedStateFromProps = (\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState => {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (nextProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    let nextState = previousState;\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = nextProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      nextState = {\n        ...nextState,\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      };\n    }\n\n    if (!this.props.disableSelectionZone && nextProps.items !== items) {\n      this._selection.setItems(nextProps.items, shouldResetSelection);\n    }\n\n    if (\n      nextProps.checkboxVisibility !== checkboxVisibility ||\n      nextProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      nextProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    nextState = {\n      ...nextState,\n      ...this._adjustColumns(nextProps, nextState, true),\n    };\n\n    if (nextProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      nextProps.groupProps &&\n      nextProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      nextState = {\n        ...nextState,\n        isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed,\n      };\n    }\n\n    if (nextProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = nextProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: nextProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing: isSizing });\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IDetailsListState {\n    const adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    return {\n      ...previousState,\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth,\n    };\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState | undefined,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = previousState ? previousState.lastWidth : -1;\n    const lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      if (resizingColumnIndex !== undefined) {\n        adjustedColumns = this._getJustifiedColumnsAfterResize(\n          newColumns,\n          viewportWidth,\n          newProps,\n          resizingColumnIndex,\n        );\n      } else {\n        adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps, 0);\n      }\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[]): IColumn[] {\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      if (!newColumn.calculatedWidth) {\n        newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n      }\n\n      return newColumn;\n    });\n  }\n\n  private _getJustifiedColumnsAfterResize(\n    newColumns: IColumn[],\n    viewportWidth: number,\n    props: IDetailsListProps,\n    resizingColumnIndex: number,\n  ): IColumn[] {\n    const fixedColumns = newColumns.slice(0, resizingColumnIndex);\n    fixedColumns.forEach(column => (column.calculatedWidth = this._getColumnOverride(column.key).currentWidth));\n\n    const fixedWidth = fixedColumns.reduce((total, column, i) => total + getPaddedWidth(column, i === 0, props), 0);\n\n    const remainingColumns = newColumns.slice(resizingColumnIndex);\n    const remainingWidth = viewportWidth - fixedWidth;\n\n    return [\n      ...fixedColumns,\n      ...this._getJustifiedColumns(remainingColumns, remainingWidth, props, resizingColumnIndex),\n    ];\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(\n    newColumns: IColumn[],\n    viewportWidth: number,\n    props: IDetailsListProps,\n    firstIndex: number,\n  ): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const newColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n        ...this._columnOverrides[column.key],\n      };\n\n      const isFirst = i + firstIndex === 0;\n      totalWidth += getPaddedWidth(newColumn, isFirst, props);\n\n      return newColumn;\n    });\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex > 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, false, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this.setState({\n      ...this._adjustColumns(this.props, this.state, true, resizingColumnIndex),\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, isFirst: boolean, props: IDetailsListProps): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    column.calculatedWidth! +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n\nfunction getGroupNestingDepth(groups: IDetailsListProps['groups']): number {\n  let level = 0;\n  let groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}