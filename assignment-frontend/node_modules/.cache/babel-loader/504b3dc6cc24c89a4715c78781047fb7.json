{"ast":null,"code":"import { merge } from '@uifabric/utilities';\nimport { getSemanticColors } from './utilities/makeSemanticColors';\n/**\n * Merge a partial/full theme into a full theme and returns a merged full theme.\n */\n\nexport function mergeThemes(theme, partialTheme) {\n  if (partialTheme === void 0) {\n    partialTheme = {};\n  }\n\n  var _a, _b, _c, _d;\n\n  var mergedTheme = merge({}, theme, partialTheme, {\n    semanticColors: getSemanticColors(partialTheme.palette, partialTheme.effects, partialTheme.semanticColors, partialTheme.isInverted === undefined ? theme.isInverted : partialTheme.isInverted)\n  });\n\n  if (((_a = partialTheme.palette) === null || _a === void 0 ? void 0 : _a.themePrimary) && !((_b = partialTheme.palette) === null || _b === void 0 ? void 0 : _b.accent)) {\n    mergedTheme.palette.accent = partialTheme.palette.themePrimary;\n  }\n\n  if (partialTheme.defaultFontStyle) {\n    for (var _i = 0, _e = Object.keys(mergedTheme.fonts); _i < _e.length; _i++) {\n      var fontStyle = _e[_i];\n      mergedTheme.fonts[fontStyle] = merge(mergedTheme.fonts[fontStyle], partialTheme.defaultFontStyle, (_d = (_c = partialTheme) === null || _c === void 0 ? void 0 : _c.fonts) === null || _d === void 0 ? void 0 : _d[fontStyle]);\n    }\n  }\n\n  if (partialTheme.stylesheets) {\n    mergedTheme.stylesheets = (theme.stylesheets || []).concat(partialTheme.stylesheets);\n  }\n\n  return mergedTheme;\n}","map":{"version":3,"sources":["mergeThemes.ts"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAAsB,qBAAtB;AAEA,SAAS,iBAAT,QAAkC,gCAAlC;AAEA;;AAEG;;AACH,OAAM,SAAU,WAAV,CAAsB,KAAtB,EAAoC,YAApC,EAAmE;AAA/B,MAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAA,EAAA;AAA+B;;;;AACvE,MAAM,WAAW,GAAG,KAAK,CAAuB,EAAvB,EAA2B,KAA3B,EAAkC,YAAlC,EAAgD;AACvE,IAAA,cAAc,EAAE,iBAAiB,CAC/B,YAAY,CAAC,OADkB,EAE/B,YAAY,CAAC,OAFkB,EAG/B,YAAY,CAAC,cAHkB,EAI/B,YAAY,CAAC,UAAb,KAA4B,SAA5B,GAAwC,KAAK,CAAC,UAA9C,GAA2D,YAAY,CAAC,UAJzC;AADsC,GAAhD,CAAzB;;AASA,MAAI,CAAA,CAAA,EAAA,GAAA,YAAY,CAAC,OAAb,MAAoB,IAApB,IAAoB,EAAA,KAAA,KAAA,CAApB,GAAoB,KAAA,CAApB,GAAoB,EAAA,CAAE,YAAtB,KAAsC,EAAA,CAAA,EAAA,GAAC,YAAY,CAAC,OAAd,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,KAAA,CAArB,GAAqB,EAAA,CAAE,MAAvB,CAA1C,EAAyE;AACvE,IAAA,WAAW,CAAC,OAAZ,CAAoB,MAApB,GAA6B,YAAY,CAAC,OAAb,CAAqB,YAAlD;AACD;;AAED,MAAI,YAAY,CAAC,gBAAjB,EAAmC;AACjC,SAAwB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,IAAP,CAAY,WAAW,CAAC,KAAxB,CAAxB,EAAwB,EAAA,GAAA,EAAA,CAAA,MAAxB,EAAwB,EAAA,EAAxB,EAAiF;AAA5E,UAAM,SAAS,GAAA,EAAA,CAAA,EAAA,CAAf;AACH,MAAA,WAAW,CAAC,KAAZ,CAAkB,SAAlB,IAA+B,KAAK,CAClC,WAAW,CAAC,KAAZ,CAAkB,SAAlB,CADkC,EAElC,YAAY,CAAC,gBAFqB,EAEL,CAAA,EAAA,GAAA,CAAA,EAAA,GAC7B,YAD6B,MACjB,IADiB,IACjB,EAAA,KAAA,KAAA,CADiB,GACjB,KAAA,CADiB,GACjB,EAAA,CAAE,KADe,MACV,IADU,IACV,EAAA,KAAA,KAAA,CADU,GACV,KAAA,CADU,GACV,EAAA,CAAG,SAAH,CAHe,CAApC;AAKD;AACF;;AAED,MAAI,YAAY,CAAC,WAAjB,EAA8B;AAC5B,IAAA,WAAW,CAAC,WAAZ,GAA0B,CAAC,KAAK,CAAC,WAAN,IAAqB,EAAtB,EAA0B,MAA1B,CAAiC,YAAY,CAAC,WAA9C,CAA1B;AACD;;AAED,SAAO,WAAP;AACD","sourcesContent":["import { merge } from '@uifabric/utilities';\nimport { IFontStyles, PartialTheme, Theme } from './types/index';\nimport { getSemanticColors } from './utilities/makeSemanticColors';\n\n/**\n * Merge a partial/full theme into a full theme and returns a merged full theme.\n */\nexport function mergeThemes(theme: Theme, partialTheme: PartialTheme = {}): Theme {\n  const mergedTheme = merge<Theme | PartialTheme>({}, theme, partialTheme, {\n    semanticColors: getSemanticColors(\n      partialTheme.palette,\n      partialTheme.effects,\n      partialTheme.semanticColors,\n      partialTheme.isInverted === undefined ? theme.isInverted : partialTheme.isInverted,\n    ),\n  }) as Theme;\n\n  if (partialTheme.palette?.themePrimary && !partialTheme.palette?.accent) {\n    mergedTheme.palette.accent = partialTheme.palette.themePrimary;\n  }\n\n  if (partialTheme.defaultFontStyle) {\n    for (const fontStyle of Object.keys(mergedTheme.fonts) as (keyof IFontStyles)[]) {\n      mergedTheme.fonts[fontStyle] = merge(\n        mergedTheme.fonts[fontStyle],\n        partialTheme.defaultFontStyle,\n        partialTheme?.fonts?.[fontStyle],\n      );\n    }\n  }\n\n  if (partialTheme.stylesheets) {\n    mergedTheme.stylesheets = (theme.stylesheets || []).concat(partialTheme.stylesheets);\n  }\n\n  return mergedTheme;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}