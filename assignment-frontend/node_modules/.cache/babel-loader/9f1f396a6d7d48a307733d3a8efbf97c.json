{"ast":null,"code":"export var StickyPositionType;\n\n(function (StickyPositionType) {\n  StickyPositionType[StickyPositionType[\"Both\"] = 0] = \"Both\";\n  StickyPositionType[StickyPositionType[\"Header\"] = 1] = \"Header\";\n  StickyPositionType[StickyPositionType[\"Footer\"] = 2] = \"Footer\";\n})(StickyPositionType || (StickyPositionType = {}));","map":{"version":3,"sources":["components/Sticky/Sticky.types.ts"],"names":[],"mappings":"AAkCA,OAAA,IAAY,kBAAZ;;AAAA,CAAA,UAAY,kBAAZ,EAA8B;AAC5B,EAAA,kBAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA,EAAA,kBAAA,CAAA,kBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,EAAA,kBAAA,CAAA,kBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACD,CAJD,EAAY,kBAAkB,KAAlB,kBAAkB,GAAA,EAAA,CAA9B","sourcesContent":["import * as React from 'react';\nimport { IRefObject } from '../../Utilities';\nimport { Sticky } from './Sticky';\n\n// eslint-disable-next-line deprecation/deprecation\nexport interface IStickyProps extends React.Props<Sticky> {\n  /**\n   * Gets ref to component interface.\n   */\n  componentRef?: IRefObject<IStickyProps>;\n\n  /**\n   * Class name to apply to the sticky element if component is sticky.\n   */\n  stickyClassName?: string;\n\n  /**\n   * color to apply as 'background-color' style for sticky element.\n   */\n  stickyBackgroundColor?: string;\n\n  /**\n   * Region to render sticky component in.\n   * @defaultvalue Both\n   */\n  stickyPosition?: StickyPositionType;\n\n  /**\n   * If true, then match scrolling position of placeholder element in Sticky.\n   * @defaultvalue true\n   */\n  isScrollSynced?: boolean;\n}\n\nexport enum StickyPositionType {\n  Both = 0,\n  Header = 1,\n  Footer = 2,\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}