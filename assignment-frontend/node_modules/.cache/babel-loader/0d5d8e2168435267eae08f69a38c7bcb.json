{"ast":null,"code":"import * as React from 'react';\nimport { css } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n\nvar getCellText = function (item, column) {\n  var value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\n\n\nexport var DetailsRowFields = function (props) {\n  var columns = props.columns,\n      columnStartIndex = props.columnStartIndex,\n      rowClassNames = props.rowClassNames,\n      _a = props.cellStyleProps,\n      cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a,\n      item = props.item,\n      itemIndex = props.itemIndex,\n      onRenderItemColumn = props.onRenderItemColumn,\n      getCellValueKey = props.getCellValueKey,\n      cellsByColumn = props.cellsByColumn,\n      enableUpdateAnimations = props.enableUpdateAnimations;\n  var cellValueKeysRef = React.useRef();\n  var cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n  return React.createElement(\"div\", {\n    className: rowClassNames.fields,\n    \"data-automationid\": \"DetailsRowFields\",\n    role: \"presentation\"\n  }, columns.map(function (column, columnIndex) {\n    var width = typeof column.calculatedWidth === 'undefined' ? 'auto' : column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n    var _a = column.onRender,\n        onRender = _a === void 0 ? onRenderItemColumn : _a,\n        _b = column.getValueKey,\n        getValueKey = _b === void 0 ? getCellValueKey : _b;\n    var cellContentsRender = cellsByColumn && column.key in cellsByColumn ? cellsByColumn[column.key] : onRender ? onRender(item, itemIndex, column) : getCellText(item, column);\n    var previousValueKey = cellValueKeys[column.key];\n    var cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n    var showAnimation = false;\n\n    if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n      showAnimation = true;\n    }\n\n    cellValueKeys[column.key] = cellValueKey; // generate a key that auto-dirties when content changes, to force the container to re-render,\n    // to trigger animation\n\n    var key = \"\" + column.key + (cellValueKey !== undefined ? \"-\" + cellValueKey : '');\n    return React.createElement(\"div\", {\n      key: key,\n      role: column.isRowHeader ? 'rowheader' : 'gridcell',\n      \"aria-readonly\": true,\n      \"aria-colindex\": columnIndex + columnStartIndex + 1,\n      className: css(column.className, column.isMultiline && rowClassNames.isMultiline, column.isRowHeader && rowClassNames.isRowHeader, rowClassNames.cell, column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded, showAnimation && rowClassNames.cellAnimation),\n      style: {\n        width: width\n      },\n      \"data-automationid\": \"DetailsRowCell\",\n      \"data-automation-key\": column.key\n    }, cellContentsRender);\n  }));\n};","map":{"version":3,"sources":["components/DetailsList/DetailsRowFields.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IColumn } from './DetailsList.types';\nimport { css } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps> = props => {\n  const {\n    columns,\n    columnStartIndex,\n    rowClassNames,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    item,\n    itemIndex,\n    onRenderItemColumn,\n    getCellValueKey,\n    cellsByColumn,\n    enableUpdateAnimations,\n  } = props;\n\n  const cellValueKeysRef = React.useRef<{\n    [columnKey: string]: string | undefined;\n  }>();\n\n  const cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n\n  return (\n    <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n      {columns.map((column, columnIndex) => {\n        const width: string | number =\n          typeof column.calculatedWidth === 'undefined'\n            ? 'auto'\n            : column.calculatedWidth +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n        const { onRender = onRenderItemColumn, getValueKey = getCellValueKey } = column;\n        const cellContentsRender =\n          cellsByColumn && column.key in cellsByColumn\n            ? cellsByColumn[column.key]\n            : onRender\n            ? onRender(item, itemIndex, column)\n            : getCellText(item, column);\n\n        const previousValueKey = cellValueKeys[column.key];\n\n        const cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n\n        let showAnimation = false;\n\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n          showAnimation = true;\n        }\n\n        cellValueKeys[column.key] = cellValueKey;\n\n        // generate a key that auto-dirties when content changes, to force the container to re-render,\n        // to trigger animation\n        const key = `${column.key}${cellValueKey !== undefined ? `-${cellValueKey}` : ''}`;\n        return (\n          <div\n            key={key}\n            role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n            aria-readonly\n            aria-colindex={columnIndex + columnStartIndex + 1}\n            className={css(\n              column.className,\n              column.isMultiline && rowClassNames.isMultiline,\n              column.isRowHeader && rowClassNames.isRowHeader,\n              rowClassNames.cell,\n              column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n              showAnimation && rowClassNames.cellAnimation,\n            )}\n            style={{ width }}\n            data-automationid=\"DetailsRowCell\"\n            data-automation-key={column.key}\n          >\n            {cellContentsRender}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}