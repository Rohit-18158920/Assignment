{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { GlobalSettings, warn } from '@uifabric/utilities';\nimport { fontFace, mergeStyles, Stylesheet } from '@uifabric/merge-styles';\nvar ICON_SETTING_NAME = 'icons';\n\nvar _iconSettings = GlobalSettings.getValue(ICON_SETTING_NAME, {\n  __options: {\n    disableWarnings: false,\n    warnOnMissingIcons: true\n  },\n  __remapped: {}\n}); // Reset icon registration on stylesheet resets.\n\n\nvar stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(function () {\n    for (var name_1 in _iconSettings) {\n      if (_iconSettings.hasOwnProperty(name_1) && !!_iconSettings[name_1].subset) {\n        _iconSettings[name_1].subset.className = undefined;\n      }\n    }\n  });\n}\n/**\n * Normalizes an icon name for consistent mapping.\n * Current implementation is to convert the icon name to lower case.\n *\n * @param name - Icon name to normalize.\n * @returns {string} Normalized icon name to use for indexing and mapping.\n */\n\n\nvar normalizeIconName = function (name) {\n  return name.toLowerCase();\n};\n/**\n * Registers a given subset of icons.\n *\n * @param iconSubset - the icon subset definition.\n */\n\n\nexport function registerIcons(iconSubset, options) {\n  var subset = __assign(__assign({}, iconSubset), {\n    isRegistered: false,\n    className: undefined\n  });\n\n  var icons = iconSubset.icons; // Grab options, optionally mix user provided ones on top.\n\n  options = options ? __assign(__assign({}, _iconSettings.__options), options) : _iconSettings.__options;\n\n  for (var iconName in icons) {\n    if (icons.hasOwnProperty(iconName)) {\n      var code = icons[iconName];\n      var normalizedIconName = normalizeIconName(iconName);\n\n      if (_iconSettings[normalizedIconName]) {\n        _warnDuplicateIcon(iconName);\n      } else {\n        _iconSettings[normalizedIconName] = {\n          code: code,\n          subset: subset\n        };\n      }\n    }\n  }\n}\n/**\n * Unregisters icons by name.\n *\n * @param iconNames - List of icons to unregister.\n */\n\nexport function unregisterIcons(iconNames) {\n  var options = _iconSettings.__options;\n\n  var _loop_1 = function (iconName) {\n    var normalizedIconName = normalizeIconName(iconName);\n\n    if (_iconSettings[normalizedIconName]) {\n      delete _iconSettings[normalizedIconName];\n    } else {\n      // Warn that we are trying to delete an icon that doesn't exist\n      if (!options.disableWarnings) {\n        warn(\"The icon \\\"\" + iconName + \"\\\" tried to unregister but was not registered.\");\n      }\n    } // Delete any aliases for this iconName\n\n\n    if (_iconSettings.__remapped[normalizedIconName]) {\n      delete _iconSettings.__remapped[normalizedIconName];\n    } // Delete any items that were an alias for this iconName\n\n\n    Object.keys(_iconSettings.__remapped).forEach(function (key) {\n      if (_iconSettings.__remapped[key] === normalizedIconName) {\n        delete _iconSettings.__remapped[key];\n      }\n    });\n  };\n\n  for (var _i = 0, iconNames_1 = iconNames; _i < iconNames_1.length; _i++) {\n    var iconName = iconNames_1[_i];\n\n    _loop_1(iconName);\n  }\n}\n/**\n * Remaps one icon name to another.\n */\n\nexport function registerIconAlias(iconName, mappedToName) {\n  _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);\n}\n/**\n * Gets an icon definition. If an icon is requested but the subset has yet to be registered,\n * it will get registered immediately.\n *\n * @public\n * @param name - Name of icon.\n */\n\nexport function getIcon(name) {\n  var icon = undefined;\n  var options = _iconSettings.__options;\n  name = name ? normalizeIconName(name) : '';\n  name = _iconSettings.__remapped[name] || name;\n\n  if (name) {\n    icon = _iconSettings[name];\n\n    if (icon) {\n      var subset = icon.subset;\n\n      if (subset && subset.fontFace) {\n        if (!subset.isRegistered) {\n          fontFace(subset.fontFace);\n          subset.isRegistered = true;\n        }\n\n        if (!subset.className) {\n          subset.className = mergeStyles(subset.style, {\n            fontFamily: subset.fontFace.fontFamily,\n            fontWeight: subset.fontFace.fontWeight || 'normal',\n            fontStyle: subset.fontFace.fontStyle || 'normal'\n          });\n        }\n      }\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      if (!options.disableWarnings && options.warnOnMissingIcons) {\n        warn(\"The icon \\\"\" + name + \"\\\" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.\");\n      }\n    }\n  }\n\n  return icon;\n}\n/**\n * Sets the icon options.\n *\n * @public\n */\n\nexport function setIconOptions(options) {\n  _iconSettings.__options = __assign(__assign({}, _iconSettings.__options), options);\n}\nvar _missingIcons = [];\nvar _missingIconsTimer = undefined;\n\nfunction _warnDuplicateIcon(iconName) {\n  var options = _iconSettings.__options;\n  var warningDelay = 2000;\n  var maxIconsInMessage = 10;\n\n  if (!options.disableWarnings) {\n    _missingIcons.push(iconName);\n\n    if (_missingIconsTimer === undefined) {\n      _missingIconsTimer = setTimeout(function () {\n        warn(\"Some icons were re-registered. Applications should only call registerIcons for any given \" + \"icon once. Redefining what an icon is may have unintended consequences. Duplicates \" + \"include: \\n\" + _missingIcons.slice(0, maxIconsInMessage).join(', ') + (_missingIcons.length > maxIconsInMessage ? \" (+ \" + (_missingIcons.length - maxIconsInMessage) + \" more)\" : ''));\n        _missingIconsTimer = undefined;\n        _missingIcons = [];\n      }, warningDelay);\n    }\n  }\n}","map":{"version":3,"sources":["utilities/icons.ts"],"names":[],"mappings":"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","sourcesContent":["import { GlobalSettings, warn } from '@uifabric/utilities';\nimport { IRawStyle, IFontFace, fontFace, mergeStyles, Stylesheet } from '@uifabric/merge-styles';\n\nexport interface IIconSubset {\n  fontFace?: IFontFace;\n  icons: {\n    [key: string]: string | JSX.Element;\n  };\n\n  style?: IRawStyle;\n}\n\nexport interface IIconSubsetRecord extends IIconSubset {\n  isRegistered?: boolean;\n  className?: string;\n}\n\nexport interface IIconRecord {\n  code: string | undefined;\n  subset: IIconSubsetRecord;\n}\n\nexport interface IIconOptions {\n  /**\n   * By default, registering the same set of icons will generate a console warning per duplicate icon\n   * registered, because this scenario can create unexpected consequences.\n   *\n   * Some scenarios include:\n   *\n   * Icon set was previously registered using a different base url.\n   * Icon set was previously registered but a different version was provided.\n   * Icons in a previous registered set overlap with a new set.\n   *\n   * To simply ignore previously registered icons, you can specify to disable warnings. This means\n   * that if an icon which was previous registered is registered again, it will be silently ignored.\n   * However, consider whether the problems listed above will cause issues.\n   **/\n  disableWarnings: boolean;\n\n  /**\n   * @deprecated\n   * Use 'disableWarnings' instead.\n   */\n  warnOnMissingIcons?: boolean;\n}\n\nexport interface IIconRecords {\n  __options: IIconOptions;\n  __remapped: { [key: string]: string };\n  [key: string]: IIconRecord | {};\n}\n\nconst ICON_SETTING_NAME = 'icons';\n\nconst _iconSettings = GlobalSettings.getValue<IIconRecords>(ICON_SETTING_NAME, {\n  __options: {\n    disableWarnings: false,\n    warnOnMissingIcons: true,\n  },\n  __remapped: {},\n});\n\n// Reset icon registration on stylesheet resets.\nconst stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(() => {\n    for (const name in _iconSettings) {\n      if (_iconSettings.hasOwnProperty(name) && !!(_iconSettings[name] as IIconRecord).subset) {\n        (_iconSettings[name] as IIconRecord).subset.className = undefined;\n      }\n    }\n  });\n}\n\n/**\n * Normalizes an icon name for consistent mapping.\n * Current implementation is to convert the icon name to lower case.\n *\n * @param name - Icon name to normalize.\n * @returns {string} Normalized icon name to use for indexing and mapping.\n */\nconst normalizeIconName = (name: string): string => name.toLowerCase();\n\n/**\n * Registers a given subset of icons.\n *\n * @param iconSubset - the icon subset definition.\n */\nexport function registerIcons(iconSubset: IIconSubset, options?: Partial<IIconOptions>): void {\n  let subset = {\n    ...iconSubset,\n    isRegistered: false,\n    className: undefined,\n  };\n  let { icons } = iconSubset;\n\n  // Grab options, optionally mix user provided ones on top.\n  options = options ? { ..._iconSettings.__options, ...options } : _iconSettings.__options;\n\n  for (const iconName in icons) {\n    if (icons.hasOwnProperty(iconName)) {\n      const code = icons[iconName];\n      const normalizedIconName = normalizeIconName(iconName);\n\n      if (_iconSettings[normalizedIconName]) {\n        _warnDuplicateIcon(iconName);\n      } else {\n        _iconSettings[normalizedIconName] = {\n          code,\n          subset,\n        } as IIconRecord;\n      }\n    }\n  }\n}\n\n/**\n * Unregisters icons by name.\n *\n * @param iconNames - List of icons to unregister.\n */\nexport function unregisterIcons(iconNames: string[]): void {\n  const options = _iconSettings.__options;\n\n  for (const iconName of iconNames) {\n    const normalizedIconName = normalizeIconName(iconName);\n    if (_iconSettings[normalizedIconName]) {\n      delete _iconSettings[normalizedIconName];\n    } else {\n      // Warn that we are trying to delete an icon that doesn't exist\n      if (!options.disableWarnings) {\n        warn(`The icon \"${iconName}\" tried to unregister but was not registered.`);\n      }\n    }\n\n    // Delete any aliases for this iconName\n    if (_iconSettings.__remapped[normalizedIconName]) {\n      delete _iconSettings.__remapped[normalizedIconName];\n    }\n\n    // Delete any items that were an alias for this iconName\n    Object.keys(_iconSettings.__remapped).forEach((key: string) => {\n      if (_iconSettings.__remapped[key] === normalizedIconName) {\n        delete _iconSettings.__remapped[key];\n      }\n    });\n  }\n}\n\n/**\n * Remaps one icon name to another.\n */\nexport function registerIconAlias(iconName: string, mappedToName: string): void {\n  _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);\n}\n\n/**\n * Gets an icon definition. If an icon is requested but the subset has yet to be registered,\n * it will get registered immediately.\n *\n * @public\n * @param name - Name of icon.\n */\nexport function getIcon(name?: string): IIconRecord | undefined {\n  let icon: IIconRecord | undefined = undefined;\n  const options = _iconSettings.__options;\n\n  name = name ? normalizeIconName(name) : '';\n  name = _iconSettings.__remapped[name] || name;\n\n  if (name) {\n    icon = _iconSettings[name!] as IIconRecord;\n\n    if (icon) {\n      let { subset } = icon;\n      if (subset && subset.fontFace) {\n        if (!subset.isRegistered) {\n          fontFace(subset.fontFace);\n          subset.isRegistered = true;\n        }\n\n        if (!subset.className) {\n          subset.className = mergeStyles(subset.style, {\n            fontFamily: subset.fontFace.fontFamily,\n            fontWeight: subset.fontFace.fontWeight || 'normal',\n            fontStyle: subset.fontFace.fontStyle || 'normal',\n          });\n        }\n      }\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      if (!options.disableWarnings && options.warnOnMissingIcons) {\n        warn(\n          `The icon \"${name}\" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.`,\n        );\n      }\n    }\n  }\n\n  return icon;\n}\n\n/**\n * Sets the icon options.\n *\n * @public\n */\nexport function setIconOptions(options: Partial<IIconOptions>): void {\n  _iconSettings.__options = {\n    ..._iconSettings.__options,\n    ...options,\n  };\n}\n\nlet _missingIcons: string[] = [];\nlet _missingIconsTimer: number | undefined = undefined;\n\nfunction _warnDuplicateIcon(iconName: string): void {\n  const options = _iconSettings.__options;\n  const warningDelay = 2000;\n  const maxIconsInMessage = 10;\n\n  if (!options.disableWarnings) {\n    _missingIcons.push(iconName);\n    if (_missingIconsTimer === undefined) {\n      _missingIconsTimer = setTimeout(() => {\n        warn(\n          `Some icons were re-registered. Applications should only call registerIcons for any given ` +\n            `icon once. Redefining what an icon is may have unintended consequences. Duplicates ` +\n            `include: \\n` +\n            _missingIcons.slice(0, maxIconsInMessage).join(', ') +\n            (_missingIcons.length > maxIconsInMessage ? ` (+ ${_missingIcons.length - maxIconsInMessage} more)` : ''),\n        );\n        _missingIconsTimer = undefined;\n        _missingIcons = [];\n      }, warningDelay);\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}