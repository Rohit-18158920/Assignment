{"ast":null,"code":"// A packages cache that makes sure that we don't inject the same packageName twice in the same bundle -\n// this cache is local to the module closure inside this bundle\nvar packagesCache = {}; // Cache access to window to avoid IE11 memory leak.\n\nvar _win = undefined;\n\ntry {\n  _win = window;\n} catch (e) {\n  /* no-op */\n}\n\nexport function setVersion(packageName, packageVersion) {\n  if (typeof _win !== 'undefined') {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var packages = _win.__packages__ = _win.__packages__ || {}; // We allow either the global packages or local packages caches to invalidate so testing can\n    // just clear the global to set this state\n\n    if (!packages[packageName] || !packagesCache[packageName]) {\n      packagesCache[packageName] = packageVersion;\n      var versions = packages[packageName] = packages[packageName] || [];\n      versions.push(packageVersion);\n    }\n  }\n}","map":{"version":3,"sources":["setVersion.ts"],"names":[],"mappings":"AAAA;AACA;AACA,IAAM,aAAa,GAA+B,EAAlD,C,CAEA;;AACA,IAAI,IAAI,GAAuB,SAA/B;;AAEA,IAAI;AACF,EAAA,IAAI,GAAG,MAAP;AACD,CAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACD;;AAED,OAAM,SAAU,UAAV,CAAqB,WAArB,EAA0C,cAA1C,EAAgE;AACpE,MAAI,OAAO,IAAP,KAAgB,WAApB,EAAiC;AAC/B;AACA,QAAM,QAAQ,GAAK,IAAY,CAAC,YAAb,GAA6B,IAAY,CAAC,YAAb,IAA6B,EAA7E,CAF+B,CAI/B;AACA;;AACA,QAAI,CAAC,QAAQ,CAAC,WAAD,CAAT,IAA0B,CAAC,aAAa,CAAC,WAAD,CAA5C,EAA2D;AACzD,MAAA,aAAa,CAAC,WAAD,CAAb,GAA6B,cAA7B;AACA,UAAM,QAAQ,GAAI,QAAQ,CAAC,WAAD,CAAR,GAAwB,QAAQ,CAAC,WAAD,CAAR,IAAyB,EAAnE;AACA,MAAA,QAAQ,CAAC,IAAT,CAAc,cAAd;AACD;AACF;AACF","sourcesContent":["// A packages cache that makes sure that we don't inject the same packageName twice in the same bundle -\n// this cache is local to the module closure inside this bundle\nconst packagesCache: { [name: string]: string } = {};\n\n// Cache access to window to avoid IE11 memory leak.\nlet _win: Window | undefined = undefined;\n\ntry {\n  _win = window;\n} catch (e) {\n  /* no-op */\n}\n\nexport function setVersion(packageName: string, packageVersion: string): void {\n  if (typeof _win !== 'undefined') {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const packages = ((_win as any).__packages__ = (_win as any).__packages__ || {});\n\n    // We allow either the global packages or local packages caches to invalidate so testing can\n    // just clear the global to set this state\n    if (!packages[packageName] || !packagesCache[packageName]) {\n      packagesCache[packageName] = packageVersion;\n      const versions = (packages[packageName] = packages[packageName] || []);\n      versions.push(packageVersion);\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}