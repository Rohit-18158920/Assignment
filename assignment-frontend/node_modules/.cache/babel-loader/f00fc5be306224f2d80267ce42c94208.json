{"ast":null,"code":"/**\n * Determines whether a component is controlled.\n * @param props - Component props\n * @param valueProp - Prop containing the controlled value\n * @returns true if controlled, false if uncontrolled\n */\nexport function isControlled(props, valueProp) {\n  // React's built-in <input> considers a prop to be provided if its value is non-null/undefined.\n  // Mirror that behavior here (rather than checking for just undefined).\n  return props[valueProp] !== undefined && props[valueProp] !== null;\n}","map":{"version":3,"sources":["controlled.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AACH,OAAM,SAAU,YAAV,CAA0B,KAA1B,EAAoC,SAApC,EAAsD;AAC1D;AACA;AACA,SAAO,KAAK,CAAC,SAAD,CAAL,KAAqB,SAArB,IAAkC,KAAK,CAAC,SAAD,CAAL,KAAqB,IAA9D;AACD","sourcesContent":["/**\n * Determines whether a component is controlled.\n * @param props - Component props\n * @param valueProp - Prop containing the controlled value\n * @returns true if controlled, false if uncontrolled\n */\nexport function isControlled<P>(props: P, valueProp: keyof P): boolean {\n  // React's built-in <input> considers a prop to be provided if its value is non-null/undefined.\n  // Mirror that behavior here (rather than checking for just undefined).\n  return props[valueProp] !== undefined && props[valueProp] !== null;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}