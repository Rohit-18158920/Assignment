{"ast":null,"code":"/**\n * Determines the effective checked state of a menu item.\n *\n * @param item {IContextualMenuItem} to get the check state of.\n * @returns {true} if the item is checked.\n * @returns {false} if the item is unchecked.\n * @returns {null} if the item is not checkable.\n */\nexport function getIsChecked(item) {\n  if (item.canCheck) {\n    return !!(item.isChecked || item.checked);\n  }\n\n  if (typeof item.isChecked === 'boolean') {\n    return item.isChecked;\n  }\n\n  if (typeof item.checked === 'boolean') {\n    return item.checked;\n  } // Item is not checkable.\n\n\n  return null;\n}\nexport function hasSubmenu(item) {\n  return !!(item.subMenuProps || item.items);\n}\nexport function isItemDisabled(item) {\n  return !!(item.isDisabled || item.disabled);\n}\nexport function getMenuItemAriaRole(item) {\n  var isChecked = getIsChecked(item);\n  var canCheck = isChecked !== null;\n  return canCheck ? 'menuitemcheckbox' : 'menuitem';\n}","map":{"version":3,"sources":["utilities/contextualMenu/contextualMenuUtility.ts"],"names":[],"mappings":"AAEA;;;;;;;AAOG;AACH,OAAM,SAAU,YAAV,CAAuB,IAAvB,EAAgD;AACpD,MAAI,IAAI,CAAC,QAAT,EAAmB;AACjB,WAAO,CAAC,EAAE,IAAI,CAAC,SAAL,IAAkB,IAAI,CAAC,OAAzB,CAAR;AACD;;AAED,MAAI,OAAO,IAAI,CAAC,SAAZ,KAA0B,SAA9B,EAAyC;AACvC,WAAO,IAAI,CAAC,SAAZ;AACD;;AAED,MAAI,OAAO,IAAI,CAAC,OAAZ,KAAwB,SAA5B,EAAuC;AACrC,WAAO,IAAI,CAAC,OAAZ;AACD,GAXmD,CAapD;;;AACA,SAAO,IAAP;AACD;AAED,OAAM,SAAU,UAAV,CAAqB,IAArB,EAA8C;AAClD,SAAO,CAAC,EAAE,IAAI,CAAC,YAAL,IAAqB,IAAI,CAAC,KAA5B,CAAR;AACD;AAED,OAAM,SAAU,cAAV,CAAyB,IAAzB,EAAkD;AACtD,SAAO,CAAC,EAAE,IAAI,CAAC,UAAL,IAAmB,IAAI,CAAC,QAA1B,CAAR;AACD;AAED,OAAM,SAAU,mBAAV,CAA8B,IAA9B,EAAuD;AAC3D,MAAM,SAAS,GAAG,YAAY,CAAC,IAAD,CAA9B;AACA,MAAM,QAAQ,GAAY,SAAS,KAAK,IAAxC;AACA,SAAO,QAAQ,GAAG,kBAAH,GAAwB,UAAvC;AACD","sourcesContent":["import { IContextualMenuItem } from '../../index';\n\n/**\n * Determines the effective checked state of a menu item.\n *\n * @param item {IContextualMenuItem} to get the check state of.\n * @returns {true} if the item is checked.\n * @returns {false} if the item is unchecked.\n * @returns {null} if the item is not checkable.\n */\nexport function getIsChecked(item: IContextualMenuItem): boolean | null {\n  if (item.canCheck) {\n    return !!(item.isChecked || item.checked);\n  }\n\n  if (typeof item.isChecked === 'boolean') {\n    return item.isChecked;\n  }\n\n  if (typeof item.checked === 'boolean') {\n    return item.checked;\n  }\n\n  // Item is not checkable.\n  return null;\n}\n\nexport function hasSubmenu(item: IContextualMenuItem): boolean {\n  return !!(item.subMenuProps || item.items);\n}\n\nexport function isItemDisabled(item: IContextualMenuItem): boolean {\n  return !!(item.isDisabled || item.disabled);\n}\n\nexport function getMenuItemAriaRole(item: IContextualMenuItem): string {\n  const isChecked = getIsChecked(item);\n  const canCheck: boolean = isChecked !== null;\n  return canCheck ? 'menuitemcheckbox' : 'menuitem';\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}