{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { divProperties, getNativeProps, getId, KeyCodes, getDocument, classNamesFunction, initializeComponentRef, EventGroup, Async } from '../../Utilities';\nimport { OpenCardMode, HoverCardType } from './HoverCard.types';\nimport { ExpandingCard } from './ExpandingCard';\nimport { ExpandingCardMode } from './ExpandingCard.types';\nimport { PlainCard } from './PlainCard/PlainCard';\nvar getClassNames = classNamesFunction();\n\nvar HoverCardBase =\n/** @class */\nfunction (_super) {\n  __extends(HoverCardBase, _super); // Constructor\n\n\n  function HoverCardBase(props) {\n    var _this = _super.call(this, props) || this; // The wrapping div that gets the hover events\n\n\n    _this._hoverCard = React.createRef();\n\n    _this.dismiss = function (withTimeOut) {\n      _this._async.clearTimeout(_this._openTimerId);\n\n      _this._async.clearTimeout(_this._dismissTimerId);\n\n      if (!withTimeOut) {\n        _this._setDismissedState();\n      } else {\n        _this._dismissTimerId = _this._async.setTimeout(function () {\n          _this._setDismissedState();\n        }, _this.props.cardDismissDelay);\n      }\n    }; // Show HoverCard\n\n\n    _this._cardOpen = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (_this._shouldBlockHoverCard() || ev.type === 'keydown' && !(ev.which === _this.props.openHotKey)) {\n        return;\n      }\n\n      _this._async.clearTimeout(_this._dismissTimerId);\n\n      if (ev.type === 'mouseenter') {\n        _this._currentMouseTarget = ev.currentTarget;\n      }\n\n      _this._executeCardOpen(ev);\n    };\n\n    _this._executeCardOpen = function (ev) {\n      _this._async.clearTimeout(_this._openTimerId);\n\n      _this._openTimerId = _this._async.setTimeout(function () {\n        _this.setState(function (prevState) {\n          if (!prevState.isHoverCardVisible) {\n            return {\n              isHoverCardVisible: true,\n              mode: ExpandingCardMode.compact,\n              openMode: ev.type === 'keydown' ? OpenCardMode.hotKey : OpenCardMode.hover\n            };\n          }\n\n          return prevState;\n        });\n      }, _this.props.cardOpenDelay);\n    };\n    /**\n     * Hide HoverCard\n     * How we dismiss the card depends on where the callback is coming from.\n     * This is provided by the `isNativeEvent` argument.\n     *  true: Event is coming from event listeners set up in componentDidMount.\n     *  false: Event is coming from the `onLeave` prop from the HoverCard component.\n     */\n\n\n    _this._cardDismiss = function (isNativeEvent, ev) {\n      if (isNativeEvent) {\n        // We expect these to be MouseEvents, If not, return.\n        if (!(ev instanceof MouseEvent)) {\n          return;\n        } // eslint-disable-next-line deprecation/deprecation\n\n\n        if (ev.type === 'keydown' && ev.which !== KeyCodes.escape) {\n          return;\n        } // Dismiss if not sticky and currentTarget is the same element that mouse last entered\n        // eslint-disable-next-line deprecation/deprecation\n\n\n        if (!_this.props.sticky && (_this._currentMouseTarget === ev.currentTarget || ev.which === KeyCodes.escape)) {\n          _this.dismiss(true);\n        }\n      } else {\n        // If this is a mouseleave event and the component is sticky, do not dismiss.\n        if (_this.props.sticky && !(ev instanceof MouseEvent) && ev.nativeEvent instanceof MouseEvent && ev.type === 'mouseleave') {\n          return;\n        }\n\n        _this.dismiss(true);\n      }\n    };\n\n    _this._setDismissedState = function () {\n      _this.setState({\n        isHoverCardVisible: false,\n        mode: ExpandingCardMode.compact,\n        openMode: OpenCardMode.hover\n      });\n    };\n\n    _this._instantOpenAsExpanded = function (ev) {\n      _this._async.clearTimeout(_this._dismissTimerId);\n\n      _this.setState(function (prevState) {\n        if (!prevState.isHoverCardVisible) {\n          return {\n            isHoverCardVisible: true,\n            mode: ExpandingCardMode.expanded\n          };\n        }\n\n        return prevState;\n      });\n    };\n\n    _this._setEventListeners = function () {\n      var _a = _this.props,\n          trapFocus = _a.trapFocus,\n          instantOpenOnClick = _a.instantOpenOnClick,\n          eventListenerTarget = _a.eventListenerTarget;\n      var target = eventListenerTarget ? _this._getTargetElement(eventListenerTarget) : _this._getTargetElement(_this.props.target);\n      var nativeEventDismiss = _this._nativeDismissEvent; // target can be undefined if ref isn't available, only assign\n      // events when defined to avoid throwing exception.\n\n      if (target) {\n        _this._events.on(target, 'mouseenter', _this._cardOpen);\n\n        _this._events.on(target, 'mouseleave', nativeEventDismiss);\n\n        if (trapFocus) {\n          _this._events.on(target, 'keydown', _this._cardOpen);\n        } else {\n          _this._events.on(target, 'focus', _this._cardOpen);\n\n          _this._events.on(target, 'blur', nativeEventDismiss);\n        }\n\n        if (instantOpenOnClick) {\n          _this._events.on(target, 'click', _this._instantOpenAsExpanded);\n        } else {\n          _this._events.on(target, 'mousedown', nativeEventDismiss);\n\n          _this._events.on(target, 'keydown', nativeEventDismiss);\n        }\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    _this._nativeDismissEvent = _this._cardDismiss.bind(_this, true);\n    _this._childDismissEvent = _this._cardDismiss.bind(_this, false);\n    _this.state = {\n      isHoverCardVisible: false,\n      mode: ExpandingCardMode.compact,\n      openMode: OpenCardMode.hover\n    };\n    return _this;\n  }\n\n  HoverCardBase.prototype.componentDidMount = function () {\n    this._setEventListeners();\n  };\n\n  HoverCardBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n\n    this._events.dispose();\n  };\n\n  HoverCardBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _this = this;\n\n    if (prevProps.target !== this.props.target) {\n      this._events.off();\n\n      this._setEventListeners();\n    }\n\n    if (prevState.isHoverCardVisible !== this.state.isHoverCardVisible) {\n      if (this.state.isHoverCardVisible) {\n        this._async.setTimeout(function () {\n          _this.setState({\n            mode: ExpandingCardMode.expanded\n          }, function () {\n            _this.props.onCardExpand && _this.props.onCardExpand();\n          });\n        }, this.props.expandedCardOpenDelay);\n\n        this.props.onCardVisible && this.props.onCardVisible();\n      } else {\n        this.setState({\n          mode: ExpandingCardMode.compact\n        });\n        this.props.onCardHide && this.props.onCardHide();\n      }\n    }\n  }; // Render\n\n\n  HoverCardBase.prototype.render = function () {\n    var _a = this.props,\n        expandingCardProps = _a.expandingCardProps,\n        children = _a.children,\n        id = _a.id,\n        _b = _a.setAriaDescribedBy,\n        setAriaDescribedBy = _b === void 0 ? true : _b,\n        customStyles = _a.styles,\n        theme = _a.theme,\n        className = _a.className,\n        type = _a.type,\n        plainCardProps = _a.plainCardProps,\n        trapFocus = _a.trapFocus,\n        setInitialFocus = _a.setInitialFocus;\n    var _c = this.state,\n        isHoverCardVisible = _c.isHoverCardVisible,\n        mode = _c.mode,\n        openMode = _c.openMode;\n    var hoverCardId = id || getId('hoverCard');\n    this._classNames = getClassNames(customStyles, {\n      theme: theme,\n      className: className\n    }); // Common props for both card types.\n\n    var commonCardProps = __assign(__assign({}, getNativeProps(this.props, divProperties)), {\n      id: hoverCardId,\n      trapFocus: !!trapFocus,\n      firstFocus: setInitialFocus || openMode === OpenCardMode.hotKey,\n      targetElement: this._getTargetElement(this.props.target),\n      onEnter: this._cardOpen,\n      onLeave: this._childDismissEvent\n    });\n\n    var finalExpandedCardProps = __assign(__assign(__assign({}, expandingCardProps), commonCardProps), {\n      mode: mode\n    });\n\n    var finalPlainCardProps = __assign(__assign({}, plainCardProps), commonCardProps);\n\n    return React.createElement(\"div\", {\n      className: this._classNames.host,\n      ref: this._hoverCard,\n      \"aria-describedby\": setAriaDescribedBy && isHoverCardVisible ? hoverCardId : undefined,\n      \"data-is-focusable\": !this.props.target\n    }, children, isHoverCardVisible && (type === HoverCardType.expanding ? React.createElement(ExpandingCard, __assign({}, finalExpandedCardProps)) : React.createElement(PlainCard, __assign({}, finalPlainCardProps))));\n  };\n\n  HoverCardBase.prototype._getTargetElement = function (target) {\n    switch (typeof target) {\n      case 'string':\n        return getDocument().querySelector(target);\n\n      case 'object':\n        return target;\n\n      default:\n        return this._hoverCard.current || undefined;\n    }\n  };\n\n  HoverCardBase.prototype._shouldBlockHoverCard = function () {\n    return !!(this.props.shouldBlockHoverCard && this.props.shouldBlockHoverCard());\n  };\n\n  HoverCardBase.defaultProps = {\n    cardOpenDelay: 500,\n    cardDismissDelay: 100,\n    expandedCardOpenDelay: 1500,\n    instantOpenOnClick: false,\n    setInitialFocus: false,\n    openHotKey: KeyCodes.c,\n    type: HoverCardType.expanding\n  };\n  return HoverCardBase;\n}(React.Component);\n\nexport { HoverCardBase };","map":{"version":3,"sources":["components/HoverCard/HoverCard.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  divProperties,\n  getNativeProps,\n  getId,\n  KeyCodes,\n  getDocument,\n  classNamesFunction,\n  initializeComponentRef,\n  EventGroup,\n  Async,\n} from '../../Utilities';\nimport {\n  IHoverCardProps,\n  IHoverCardStyles,\n  IHoverCardStyleProps,\n  OpenCardMode,\n  HoverCardType,\n  IHoverCard,\n} from './HoverCard.types';\nimport { ExpandingCard } from './ExpandingCard';\nimport { ExpandingCardMode, IExpandingCardProps } from './ExpandingCard.types';\nimport { PlainCard } from './PlainCard/PlainCard';\nimport { IPlainCardProps } from './PlainCard/PlainCard.types';\n\nconst getClassNames = classNamesFunction<IHoverCardStyleProps, IHoverCardStyles>();\n\nexport interface IHoverCardState {\n  isHoverCardVisible?: boolean;\n  mode?: ExpandingCardMode;\n  openMode?: OpenCardMode;\n}\n\nexport class HoverCardBase extends React.Component<IHoverCardProps, IHoverCardState> implements IHoverCard {\n  public static defaultProps = {\n    cardOpenDelay: 500,\n    cardDismissDelay: 100,\n    expandedCardOpenDelay: 1500,\n    instantOpenOnClick: false,\n    setInitialFocus: false,\n    openHotKey: KeyCodes.c as KeyCodes,\n    type: HoverCardType.expanding,\n  };\n\n  // The wrapping div that gets the hover events\n  private _hoverCard = React.createRef<HTMLDivElement>();\n  private _dismissTimerId: number;\n  private _openTimerId: number;\n  private _currentMouseTarget: EventTarget | null;\n\n  private _nativeDismissEvent: (ev?: any) => void;\n  private _childDismissEvent: (ev?: any) => void;\n\n  private _classNames: { [key in keyof IHoverCardStyles]: string };\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  // Constructor\n  constructor(props: IHoverCardProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    this._nativeDismissEvent = this._cardDismiss.bind(this, true);\n    this._childDismissEvent = this._cardDismiss.bind(this, false);\n\n    this.state = {\n      isHoverCardVisible: false,\n      mode: ExpandingCardMode.compact,\n      openMode: OpenCardMode.hover,\n    };\n  }\n\n  public componentDidMount(): void {\n    this._setEventListeners();\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IHoverCardProps, prevState: IHoverCardState) {\n    if (prevProps.target !== this.props.target) {\n      this._events.off();\n      this._setEventListeners();\n    }\n\n    if (prevState.isHoverCardVisible !== this.state.isHoverCardVisible) {\n      if (this.state.isHoverCardVisible) {\n        this._async.setTimeout(() => {\n          this.setState(\n            {\n              mode: ExpandingCardMode.expanded,\n            },\n            () => {\n              this.props.onCardExpand && this.props.onCardExpand();\n            },\n          );\n        }, this.props.expandedCardOpenDelay!);\n        this.props.onCardVisible && this.props.onCardVisible();\n      } else {\n        this.setState({\n          mode: ExpandingCardMode.compact,\n        });\n        this.props.onCardHide && this.props.onCardHide();\n      }\n    }\n  }\n\n  public dismiss = (withTimeOut?: boolean): void => {\n    this._async.clearTimeout(this._openTimerId);\n    this._async.clearTimeout(this._dismissTimerId);\n    if (!withTimeOut) {\n      this._setDismissedState();\n    } else {\n      this._dismissTimerId = this._async.setTimeout(() => {\n        this._setDismissedState();\n      }, this.props.cardDismissDelay!);\n    }\n  };\n\n  // Render\n  public render(): JSX.Element {\n    const {\n      expandingCardProps,\n      children,\n      id,\n      setAriaDescribedBy = true,\n      styles: customStyles,\n      theme,\n      className,\n      type,\n      plainCardProps,\n      trapFocus,\n      setInitialFocus,\n    } = this.props;\n    const { isHoverCardVisible, mode, openMode } = this.state;\n    const hoverCardId = id || getId('hoverCard');\n\n    this._classNames = getClassNames(customStyles, {\n      theme: theme!,\n      className,\n    });\n\n    // Common props for both card types.\n    const commonCardProps = {\n      ...getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties),\n      id: hoverCardId,\n      trapFocus: !!trapFocus,\n      firstFocus: setInitialFocus || openMode === OpenCardMode.hotKey,\n      targetElement: this._getTargetElement(this.props.target),\n      onEnter: this._cardOpen,\n      onLeave: this._childDismissEvent,\n    };\n\n    const finalExpandedCardProps: IExpandingCardProps = { ...expandingCardProps, ...commonCardProps, mode };\n    const finalPlainCardProps: IPlainCardProps = { ...plainCardProps, ...commonCardProps };\n\n    return (\n      <div\n        className={this._classNames.host}\n        ref={this._hoverCard}\n        aria-describedby={setAriaDescribedBy && isHoverCardVisible ? hoverCardId : undefined}\n        data-is-focusable={!this.props.target}\n      >\n        {children}\n        {isHoverCardVisible &&\n          (type === HoverCardType.expanding ? (\n            <ExpandingCard {...finalExpandedCardProps} />\n          ) : (\n            <PlainCard {...finalPlainCardProps} />\n          ))}\n      </div>\n    );\n  }\n\n  private _getTargetElement(target?: HTMLElement | string | null): HTMLElement | undefined {\n    switch (typeof target) {\n      case 'string':\n        return getDocument()!.querySelector(target as string) as HTMLElement;\n\n      case 'object':\n        return target as HTMLElement;\n\n      default:\n        return this._hoverCard.current || undefined;\n    }\n  }\n\n  private _shouldBlockHoverCard(): boolean {\n    return !!(this.props.shouldBlockHoverCard && this.props.shouldBlockHoverCard());\n  }\n\n  // Show HoverCard\n  private _cardOpen = (ev: MouseEvent): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._shouldBlockHoverCard() || (ev.type === 'keydown' && !(ev.which === this.props.openHotKey))) {\n      return;\n    }\n    this._async.clearTimeout(this._dismissTimerId);\n    if (ev.type === 'mouseenter') {\n      this._currentMouseTarget = ev.currentTarget;\n    }\n\n    this._executeCardOpen(ev);\n  };\n\n  private _executeCardOpen = (ev: MouseEvent): void => {\n    this._async.clearTimeout(this._openTimerId);\n    this._openTimerId = this._async.setTimeout(() => {\n      this.setState((prevState: IHoverCardState) => {\n        if (!prevState.isHoverCardVisible) {\n          return {\n            isHoverCardVisible: true,\n            mode: ExpandingCardMode.compact,\n            openMode: ev.type === 'keydown' ? OpenCardMode.hotKey : OpenCardMode.hover,\n          };\n        }\n\n        return prevState;\n      });\n    }, this.props.cardOpenDelay!);\n  };\n\n  /**\n   * Hide HoverCard\n   * How we dismiss the card depends on where the callback is coming from.\n   * This is provided by the `isNativeEvent` argument.\n   *  true: Event is coming from event listeners set up in componentDidMount.\n   *  false: Event is coming from the `onLeave` prop from the HoverCard component.\n   */\n  private _cardDismiss = (\n    isNativeEvent: boolean,\n    ev: MouseEvent | React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n  ) => {\n    if (isNativeEvent) {\n      // We expect these to be MouseEvents, If not, return.\n      if (!(ev instanceof MouseEvent)) {\n        return;\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.type === 'keydown' && ev.which !== KeyCodes.escape) {\n        return;\n      }\n\n      // Dismiss if not sticky and currentTarget is the same element that mouse last entered\n      // eslint-disable-next-line deprecation/deprecation\n      if (!this.props.sticky && (this._currentMouseTarget === ev.currentTarget || ev.which === KeyCodes.escape)) {\n        this.dismiss(true);\n      }\n    } else {\n      // If this is a mouseleave event and the component is sticky, do not dismiss.\n      if (\n        this.props.sticky &&\n        !(ev instanceof MouseEvent) &&\n        ev.nativeEvent instanceof MouseEvent &&\n        ev.type === 'mouseleave'\n      ) {\n        return;\n      }\n\n      this.dismiss(true);\n    }\n  };\n\n  private _setDismissedState = () => {\n    this.setState({\n      isHoverCardVisible: false,\n      mode: ExpandingCardMode.compact,\n      openMode: OpenCardMode.hover,\n    });\n  };\n\n  private _instantOpenAsExpanded = (ev: React.MouseEvent<HTMLDivElement>): void => {\n    this._async.clearTimeout(this._dismissTimerId);\n\n    this.setState((prevState: IHoverCardState) => {\n      if (!prevState.isHoverCardVisible) {\n        return {\n          isHoverCardVisible: true,\n          mode: ExpandingCardMode.expanded,\n        };\n      }\n\n      return prevState;\n    });\n  };\n\n  private _setEventListeners = (): void => {\n    const { trapFocus, instantOpenOnClick, eventListenerTarget } = this.props;\n    const target = eventListenerTarget\n      ? this._getTargetElement(eventListenerTarget)\n      : this._getTargetElement(this.props.target);\n    const nativeEventDismiss = this._nativeDismissEvent;\n\n    // target can be undefined if ref isn't available, only assign\n    // events when defined to avoid throwing exception.\n    if (target) {\n      this._events.on(target, 'mouseenter', this._cardOpen);\n      this._events.on(target, 'mouseleave', nativeEventDismiss);\n      if (trapFocus) {\n        this._events.on(target, 'keydown', this._cardOpen);\n      } else {\n        this._events.on(target, 'focus', this._cardOpen);\n        this._events.on(target, 'blur', nativeEventDismiss);\n      }\n      if (instantOpenOnClick) {\n        this._events.on(target, 'click', this._instantOpenAsExpanded);\n      } else {\n        this._events.on(target, 'mousedown', nativeEventDismiss);\n        this._events.on(target, 'keydown', nativeEventDismiss);\n      }\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}