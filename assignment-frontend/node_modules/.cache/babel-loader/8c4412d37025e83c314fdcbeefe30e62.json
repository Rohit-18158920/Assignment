{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { TextField } from '../TextField';\nimport { initializeComponentRef, KeyCodes } from '../../../Utilities';\nimport { clearNext, clearPrev, clearRange, DEFAULT_MASK_FORMAT_CHARS, getLeftFormatIndex, getMaskDisplay, getRightFormatIndex, insertString, parseMask } from './inputMask';\nexport var DEFAULT_MASK_CHAR = '_';\n\nvar MaskedTextField =\n/** @class */\nfunction (_super) {\n  __extends(MaskedTextField, _super);\n\n  function MaskedTextField(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._textField = React.createRef();\n\n    _this._onFocus = function (event) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(event);\n      }\n\n      _this._isFocused = true; // Move the cursor position to the leftmost unfilled position\n\n      for (var i = 0; i < _this._maskCharData.length; i++) {\n        if (!_this._maskCharData[i].value) {\n          _this.setState({\n            maskCursorPosition: _this._maskCharData[i].displayIndex\n          });\n\n          break;\n        }\n      }\n    };\n\n    _this._onBlur = function (event) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(event);\n      }\n\n      _this._isFocused = false;\n      _this._moveCursorOnMouseUp = true;\n    };\n\n    _this._onMouseDown = function (event) {\n      if (_this.props.onMouseDown) {\n        _this.props.onMouseDown(event);\n      }\n\n      if (!_this._isFocused) {\n        _this._moveCursorOnMouseUp = true;\n      }\n    };\n\n    _this._onMouseUp = function (event) {\n      if (_this.props.onMouseUp) {\n        _this.props.onMouseUp(event);\n      } // Move the cursor on mouseUp after focusing the textField\n\n\n      if (_this._moveCursorOnMouseUp) {\n        _this._moveCursorOnMouseUp = false; // Move the cursor position to the rightmost unfilled position\n\n        for (var i = 0; i < _this._maskCharData.length; i++) {\n          if (!_this._maskCharData[i].value) {\n            _this.setState({\n              maskCursorPosition: _this._maskCharData[i].displayIndex\n            });\n\n            break;\n          }\n        }\n      }\n    };\n\n    _this._onInputChange = function (ev, value) {\n      var textField = _this._textField.current;\n\n      if (_this._changeSelectionData === null && textField) {\n        _this._changeSelectionData = {\n          changeType: 'default',\n          selectionStart: textField.selectionStart !== null ? textField.selectionStart : -1,\n          selectionEnd: textField.selectionEnd !== null ? textField.selectionEnd : -1\n        };\n      }\n\n      if (!_this._changeSelectionData) {\n        return;\n      }\n\n      var displayValue = _this.state.displayValue; // The initial value of cursorPos does not matter\n\n      var cursorPos = 0;\n      var _a = _this._changeSelectionData,\n          changeType = _a.changeType,\n          selectionStart = _a.selectionStart,\n          selectionEnd = _a.selectionEnd;\n\n      if (changeType === 'textPasted') {\n        var charsSelected = selectionEnd - selectionStart;\n        var charCount = value.length + charsSelected - displayValue.length;\n        var startPos = selectionStart;\n        var pastedString = value.substr(startPos, charCount); // Clear any selected characters\n\n        if (charsSelected) {\n          _this._maskCharData = clearRange(_this._maskCharData, selectionStart, charsSelected);\n        }\n\n        cursorPos = insertString(_this._maskCharData, startPos, pastedString);\n      } else if (changeType === 'delete' || changeType === 'backspace') {\n        // isDel is true If the characters are removed LTR, otherwise RTL\n        var isDel = changeType === 'delete';\n        var charCount = selectionEnd - selectionStart;\n\n        if (charCount) {\n          // charCount is > 0 if range was deleted\n          _this._maskCharData = clearRange(_this._maskCharData, selectionStart, charCount);\n          cursorPos = getRightFormatIndex(_this._maskCharData, selectionStart);\n        } else {\n          // If charCount === 0, there was no selection and a single character was deleted\n          if (isDel) {\n            _this._maskCharData = clearNext(_this._maskCharData, selectionStart);\n            cursorPos = getRightFormatIndex(_this._maskCharData, selectionStart);\n          } else {\n            _this._maskCharData = clearPrev(_this._maskCharData, selectionStart);\n            cursorPos = getLeftFormatIndex(_this._maskCharData, selectionStart);\n          }\n        }\n      } else if (value.length > displayValue.length) {\n        // This case is if the user added characters\n        var charCount = value.length - displayValue.length;\n        var startPos = selectionEnd - charCount;\n        var enteredString = value.substr(startPos, charCount);\n        cursorPos = insertString(_this._maskCharData, startPos, enteredString);\n      } else if (value.length <= displayValue.length) {\n        /**\n         * This case is reached only if the user has selected a block of 1 or more\n         * characters and input a character replacing the characters they've selected.\n         */\n        var charCount = 1;\n        var selectCount = displayValue.length + charCount - value.length;\n        var startPos = selectionEnd - charCount;\n        var enteredString = value.substr(startPos, charCount); // Clear the selected range\n\n        _this._maskCharData = clearRange(_this._maskCharData, startPos, selectCount); // Insert the printed character\n\n        cursorPos = insertString(_this._maskCharData, startPos, enteredString);\n      }\n\n      _this._changeSelectionData = null;\n      var newValue = getMaskDisplay(_this.props.mask, _this._maskCharData, _this.props.maskChar);\n\n      _this.setState({\n        displayValue: newValue,\n        maskCursorPosition: cursorPos\n      }); // Perform onChange after input has been processed. Return value is expected to be the displayed text\n\n\n      if (_this.props.onChange) {\n        _this.props.onChange(ev, newValue);\n      }\n    };\n\n    _this._onKeyDown = function (event) {\n      var current = _this._textField.current;\n\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(event);\n      }\n\n      _this._changeSelectionData = null;\n\n      if (current && current.value) {\n        var keyCode = event.keyCode,\n            ctrlKey = event.ctrlKey,\n            metaKey = event.metaKey; // Ignore ctrl and meta keydown\n\n        if (ctrlKey || metaKey) {\n          return;\n        } // On backspace or delete, store the selection and the keyCode\n\n\n        if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {\n          var selectionStart = event.target.selectionStart;\n          var selectionEnd = event.target.selectionEnd; // Check if backspace or delete press is valid.\n\n          if (!(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0) && !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < current.value.length)) {\n            return;\n          }\n\n          _this._changeSelectionData = {\n            changeType: keyCode === KeyCodes.backspace ? 'backspace' : 'delete',\n            selectionStart: selectionStart !== null ? selectionStart : -1,\n            selectionEnd: selectionEnd !== null ? selectionEnd : -1\n          };\n        }\n      }\n    };\n\n    _this._onPaste = function (event) {\n      if (_this.props.onPaste) {\n        _this.props.onPaste(event);\n      }\n\n      var selectionStart = event.target.selectionStart;\n      var selectionEnd = event.target.selectionEnd; // Store the paste selection range\n\n      _this._changeSelectionData = {\n        changeType: 'textPasted',\n        selectionStart: selectionStart !== null ? selectionStart : -1,\n        selectionEnd: selectionEnd !== null ? selectionEnd : -1\n      };\n    };\n\n    initializeComponentRef(_this); // Translate mask into charData\n\n    _this._maskCharData = parseMask(props.mask, props.maskFormat); // If an initial value is provided, use it to populate the format chars\n\n    props.value !== undefined && _this.setValue(props.value);\n    _this._isFocused = false;\n    _this._moveCursorOnMouseUp = false;\n    _this.state = {\n      displayValue: getMaskDisplay(props.mask, _this._maskCharData, props.maskChar)\n    };\n    return _this;\n  }\n\n  MaskedTextField.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    if (newProps.mask !== this.props.mask || newProps.value !== this.props.value) {\n      this._maskCharData = parseMask(newProps.mask, newProps.maskFormat);\n      newProps.value !== undefined && this.setValue(newProps.value);\n      this.setState({\n        displayValue: getMaskDisplay(newProps.mask, this._maskCharData, newProps.maskChar)\n      });\n    }\n  };\n\n  MaskedTextField.prototype.componentDidUpdate = function () {\n    // Move the cursor to the start of the mask format on update\n    if (this._isFocused && this.state.maskCursorPosition !== undefined && this._textField.current) {\n      this._textField.current.setSelectionRange(this.state.maskCursorPosition, this.state.maskCursorPosition);\n    }\n  };\n\n  MaskedTextField.prototype.render = function () {\n    return React.createElement(TextField, __assign({}, this.props, {\n      onFocus: this._onFocus,\n      onBlur: this._onBlur,\n      onMouseDown: this._onMouseDown,\n      onMouseUp: this._onMouseUp,\n      onChange: this._onInputChange,\n      onKeyDown: this._onKeyDown,\n      onPaste: this._onPaste,\n      value: this.state.displayValue || '',\n      componentRef: this._textField\n    }));\n  };\n\n  Object.defineProperty(MaskedTextField.prototype, \"value\", {\n    /**\n     * @returns The value of all filled format characters or undefined if not all format characters are filled\n     */\n    get: function () {\n      var value = '';\n\n      for (var i = 0; i < this._maskCharData.length; i++) {\n        if (!this._maskCharData[i].value) {\n          return undefined;\n        }\n\n        value += this._maskCharData[i].value;\n      }\n\n      return value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MaskedTextField.prototype.setValue = function (newValue) {\n    var valueIndex = 0;\n    var charDataIndex = 0;\n\n    while (valueIndex < newValue.length && charDataIndex < this._maskCharData.length) {\n      // Test if the next character in the new value fits the next format character\n      var testVal = newValue[valueIndex];\n\n      if (this._maskCharData[charDataIndex].format.test(testVal)) {\n        this._maskCharData[charDataIndex].value = testVal;\n        charDataIndex++;\n      }\n\n      valueIndex++;\n    }\n  };\n\n  MaskedTextField.prototype.focus = function () {\n    var current = this._textField.current;\n    current && current.focus();\n  };\n\n  MaskedTextField.prototype.blur = function () {\n    var current = this._textField.current;\n    current && current.blur();\n  };\n\n  MaskedTextField.prototype.select = function () {\n    var current = this._textField.current;\n    current && current.select();\n  };\n\n  MaskedTextField.prototype.setSelectionStart = function (value) {\n    var current = this._textField.current;\n    current && current.setSelectionStart(value);\n  };\n\n  MaskedTextField.prototype.setSelectionEnd = function (value) {\n    var current = this._textField.current;\n    current && current.setSelectionEnd(value);\n  };\n\n  MaskedTextField.prototype.setSelectionRange = function (start, end) {\n    var current = this._textField.current;\n    current && current.setSelectionRange(start, end);\n  };\n\n  Object.defineProperty(MaskedTextField.prototype, \"selectionStart\", {\n    get: function () {\n      var current = this._textField.current;\n      return current && current.selectionStart !== null ? current.selectionStart : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MaskedTextField.prototype, \"selectionEnd\", {\n    get: function () {\n      var current = this._textField.current;\n      return current && current.selectionEnd ? current.selectionEnd : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  MaskedTextField.defaultProps = {\n    maskChar: DEFAULT_MASK_CHAR,\n    maskFormat: DEFAULT_MASK_FORMAT_CHARS\n  };\n  return MaskedTextField;\n}(React.Component);\n\nexport { MaskedTextField };","map":{"version":3,"sources":["components/TextField/MaskedTextField/MaskedTextField.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { TextField } from '../TextField';\nimport { ITextField, IMaskedTextFieldProps } from '../TextField.types';\nimport { initializeComponentRef, KeyCodes } from '../../../Utilities';\n\nimport {\n  clearNext,\n  clearPrev,\n  clearRange,\n  DEFAULT_MASK_FORMAT_CHARS,\n  getLeftFormatIndex,\n  getMaskDisplay,\n  getRightFormatIndex,\n  IMaskValue,\n  insertString,\n  parseMask,\n} from './inputMask';\n\n/**\n * State for the MaskedTextField component.\n */\nexport interface IMaskedTextFieldState {\n  /**\n   * The mask string formatted with the input value.\n   * This is what is displayed inside the TextField\n   * @example\n   *  `Phone Number: 12_ - 4___`\n   */\n  displayValue: string;\n  /** The index into the rendered value of the first unfilled format character */\n  maskCursorPosition?: number;\n}\n\nexport const DEFAULT_MASK_CHAR = '_';\n\ntype InputChangeType = 'default' | 'backspace' | 'delete' | 'textPasted';\n\nexport class MaskedTextField extends React.Component<IMaskedTextFieldProps, IMaskedTextFieldState>\n  implements ITextField {\n  public static defaultProps: IMaskedTextFieldProps = {\n    maskChar: DEFAULT_MASK_CHAR,\n    maskFormat: DEFAULT_MASK_FORMAT_CHARS,\n  };\n\n  private _textField = React.createRef<ITextField>();\n\n  /**\n   *  An array of data containing information regarding the format characters,\n   *  their indices inside the display text, and their corresponding values.\n   * @example\n   * ```\n   *  [\n   *    { value: '1', displayIndex: 16, format: /[0-9]/ },\n   *    { value: '2', displayIndex: 17, format: /[0-9]/ },\n   *    { displayIndex: 18, format: /[0-9]/ },\n   *    { value: '4', displayIndex: 22, format: /[0-9]/ },\n   *    ...\n   *  ]\n   * ```\n   */\n  private _maskCharData: IMaskValue[];\n  /** True if the TextField is focused */\n  private _isFocused: boolean;\n  /** True if the TextField was not focused and it was clicked into */\n  private _moveCursorOnMouseUp: boolean;\n\n  /** The stored selection data prior to input change events. */\n  private _changeSelectionData: {\n    changeType: InputChangeType;\n    selectionStart: number;\n    selectionEnd: number;\n  } | null;\n\n  constructor(props: IMaskedTextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    // Translate mask into charData\n    this._maskCharData = parseMask(props.mask, props.maskFormat);\n    // If an initial value is provided, use it to populate the format chars\n    props.value !== undefined && this.setValue(props.value);\n\n    this._isFocused = false;\n    this._moveCursorOnMouseUp = false;\n\n    this.state = {\n      displayValue: getMaskDisplay(props.mask, this._maskCharData, props.maskChar),\n    };\n  }\n\n  public UNSAFE_componentWillReceiveProps(newProps: IMaskedTextFieldProps) {\n    if (newProps.mask !== this.props.mask || newProps.value !== this.props.value) {\n      this._maskCharData = parseMask(newProps.mask, newProps.maskFormat);\n      newProps.value !== undefined && this.setValue(newProps.value);\n\n      this.setState({\n        displayValue: getMaskDisplay(newProps.mask, this._maskCharData, newProps.maskChar),\n      });\n    }\n  }\n\n  public componentDidUpdate() {\n    // Move the cursor to the start of the mask format on update\n    if (this._isFocused && this.state.maskCursorPosition !== undefined && this._textField.current) {\n      this._textField.current.setSelectionRange(this.state.maskCursorPosition, this.state.maskCursorPosition);\n    }\n  }\n\n  public render() {\n    return (\n      <TextField\n        {...this.props}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onMouseDown={this._onMouseDown}\n        onMouseUp={this._onMouseUp}\n        onChange={this._onInputChange}\n        onKeyDown={this._onKeyDown}\n        onPaste={this._onPaste}\n        value={this.state.displayValue || ''}\n        componentRef={this._textField}\n      />\n    );\n  }\n\n  /**\n   * @returns The value of all filled format characters or undefined if not all format characters are filled\n   */\n  public get value(): string | undefined {\n    let value = '';\n\n    for (let i = 0; i < this._maskCharData.length; i++) {\n      if (!this._maskCharData[i].value) {\n        return undefined;\n      }\n      value += this._maskCharData[i].value;\n    }\n    return value;\n  }\n\n  public setValue(newValue: string): void {\n    let valueIndex = 0;\n    let charDataIndex = 0;\n\n    while (valueIndex < newValue.length && charDataIndex < this._maskCharData.length) {\n      // Test if the next character in the new value fits the next format character\n      const testVal = newValue[valueIndex];\n      if (this._maskCharData[charDataIndex].format.test(testVal)) {\n        this._maskCharData[charDataIndex].value = testVal;\n        charDataIndex++;\n      }\n      valueIndex++;\n    }\n  }\n\n  public focus(): void {\n    const { current } = this._textField;\n\n    current && current.focus();\n  }\n\n  public blur(): void {\n    const { current } = this._textField;\n\n    current && current.blur();\n  }\n\n  public select(): void {\n    const { current } = this._textField;\n\n    current && current.select();\n  }\n\n  public setSelectionStart(value: number): void {\n    const { current } = this._textField;\n\n    current && current.setSelectionStart(value);\n  }\n\n  public setSelectionEnd(value: number): void {\n    const { current } = this._textField;\n\n    current && current.setSelectionEnd(value);\n  }\n\n  public setSelectionRange(start: number, end: number): void {\n    const { current } = this._textField;\n    current && current.setSelectionRange(start, end);\n  }\n\n  public get selectionStart(): number | null {\n    const { current } = this._textField;\n\n    return current && current.selectionStart !== null ? current.selectionStart : -1;\n  }\n\n  public get selectionEnd(): number | null {\n    const { current } = this._textField;\n\n    return current && current.selectionEnd ? current.selectionEnd : -1;\n  }\n\n  private _onFocus = (event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n\n    this._isFocused = true;\n\n    // Move the cursor position to the leftmost unfilled position\n    for (let i = 0; i < this._maskCharData.length; i++) {\n      if (!this._maskCharData[i].value) {\n        this.setState({\n          maskCursorPosition: this._maskCharData[i].displayIndex,\n        });\n        break;\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n\n    this._isFocused = false;\n    this._moveCursorOnMouseUp = true;\n  };\n\n  private _onMouseDown = (event: React.MouseEvent<HTMLInputElement>) => {\n    if (this.props.onMouseDown) {\n      this.props.onMouseDown(event);\n    }\n\n    if (!this._isFocused) {\n      this._moveCursorOnMouseUp = true;\n    }\n  };\n\n  private _onMouseUp = (event: React.MouseEvent<HTMLInputElement>) => {\n    if (this.props.onMouseUp) {\n      this.props.onMouseUp(event);\n    }\n\n    // Move the cursor on mouseUp after focusing the textField\n    if (this._moveCursorOnMouseUp) {\n      this._moveCursorOnMouseUp = false;\n      // Move the cursor position to the rightmost unfilled position\n      for (let i = 0; i < this._maskCharData.length; i++) {\n        if (!this._maskCharData[i].value) {\n          this.setState({\n            maskCursorPosition: this._maskCharData[i].displayIndex,\n          });\n          break;\n        }\n      }\n    }\n  };\n\n  private _onInputChange = (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, value: string) => {\n    const textField = this._textField.current;\n    if (this._changeSelectionData === null && textField) {\n      this._changeSelectionData = {\n        changeType: 'default',\n        selectionStart: textField.selectionStart !== null ? textField.selectionStart : -1,\n        selectionEnd: textField.selectionEnd !== null ? textField.selectionEnd : -1,\n      };\n    }\n    if (!this._changeSelectionData) {\n      return;\n    }\n\n    const { displayValue } = this.state;\n\n    // The initial value of cursorPos does not matter\n    let cursorPos = 0;\n    const { changeType, selectionStart, selectionEnd } = this._changeSelectionData;\n\n    if (changeType === 'textPasted') {\n      const charsSelected = selectionEnd - selectionStart;\n      const charCount = value.length + charsSelected - displayValue.length;\n      const startPos = selectionStart;\n      const pastedString = value.substr(startPos, charCount);\n\n      // Clear any selected characters\n      if (charsSelected) {\n        this._maskCharData = clearRange(this._maskCharData, selectionStart, charsSelected);\n      }\n      cursorPos = insertString(this._maskCharData, startPos, pastedString);\n    } else if (changeType === 'delete' || changeType === 'backspace') {\n      // isDel is true If the characters are removed LTR, otherwise RTL\n      const isDel = changeType === 'delete';\n      const charCount = selectionEnd - selectionStart;\n\n      if (charCount) {\n        // charCount is > 0 if range was deleted\n        this._maskCharData = clearRange(this._maskCharData, selectionStart, charCount);\n        cursorPos = getRightFormatIndex(this._maskCharData, selectionStart);\n      } else {\n        // If charCount === 0, there was no selection and a single character was deleted\n        if (isDel) {\n          this._maskCharData = clearNext(this._maskCharData, selectionStart);\n          cursorPos = getRightFormatIndex(this._maskCharData, selectionStart);\n        } else {\n          this._maskCharData = clearPrev(this._maskCharData, selectionStart);\n          cursorPos = getLeftFormatIndex(this._maskCharData, selectionStart);\n        }\n      }\n    } else if (value.length > displayValue.length) {\n      // This case is if the user added characters\n      const charCount = value.length - displayValue.length;\n      const startPos = selectionEnd - charCount;\n      const enteredString = value.substr(startPos, charCount);\n\n      cursorPos = insertString(this._maskCharData, startPos, enteredString);\n    } else if (value.length <= displayValue.length) {\n      /**\n       * This case is reached only if the user has selected a block of 1 or more\n       * characters and input a character replacing the characters they've selected.\n       */\n      const charCount = 1;\n      const selectCount = displayValue.length + charCount - value.length;\n      const startPos = selectionEnd - charCount;\n      const enteredString = value.substr(startPos, charCount);\n\n      // Clear the selected range\n      this._maskCharData = clearRange(this._maskCharData, startPos, selectCount);\n      // Insert the printed character\n      cursorPos = insertString(this._maskCharData, startPos, enteredString);\n    }\n\n    this._changeSelectionData = null;\n\n    const newValue = getMaskDisplay(this.props.mask, this._maskCharData, this.props.maskChar);\n\n    this.setState({\n      displayValue: newValue,\n      maskCursorPosition: cursorPos,\n    });\n\n    // Perform onChange after input has been processed. Return value is expected to be the displayed text\n    if (this.props.onChange) {\n      this.props.onChange(ev, newValue);\n    }\n  };\n\n  private _onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const { current } = this._textField;\n\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(event);\n    }\n\n    this._changeSelectionData = null;\n    if (current && current.value) {\n      const { keyCode, ctrlKey, metaKey } = event;\n\n      // Ignore ctrl and meta keydown\n      if (ctrlKey || metaKey) {\n        return;\n      }\n\n      // On backspace or delete, store the selection and the keyCode\n      if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {\n        const selectionStart = (event.target as HTMLInputElement).selectionStart;\n        const selectionEnd = (event.target as HTMLInputElement).selectionEnd;\n\n        // Check if backspace or delete press is valid.\n        if (\n          !(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0) &&\n          !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < current.value.length)\n        ) {\n          return;\n        }\n\n        this._changeSelectionData = {\n          changeType: keyCode === KeyCodes.backspace ? 'backspace' : 'delete',\n          selectionStart: selectionStart !== null ? selectionStart : -1,\n          selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n        };\n      }\n    }\n  };\n\n  private _onPaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    if (this.props.onPaste) {\n      this.props.onPaste(event);\n    }\n\n    const selectionStart = (event.target as HTMLInputElement).selectionStart;\n    const selectionEnd = (event.target as HTMLInputElement).selectionEnd;\n    // Store the paste selection range\n    this._changeSelectionData = {\n      changeType: 'textPasted',\n      selectionStart: selectionStart !== null ? selectionStart : -1,\n      selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n    };\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}