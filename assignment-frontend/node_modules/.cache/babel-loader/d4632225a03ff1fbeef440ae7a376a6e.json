{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, getRTL, getId, KeyCodes, classNamesFunction } from '../../Utilities';\nimport { ColumnDragEndLocation, CheckboxVisibility } from './DetailsList.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon, FontIcon } from '../../Icon';\nimport { Layer } from '../../Layer';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\nimport { DragDropHelper } from '../../utilities/dragdrop/index';\nimport { DetailsColumn } from '../../components/DetailsList/DetailsColumn';\nimport { SelectAllVisibility } from './DetailsHeader.types';\nvar getClassNames = classNamesFunction();\nvar MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nvar MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nvar NO_COLUMNS = [];\n\nvar DetailsHeaderBase =\n/** @class */\nfunction (_super) {\n  __extends(DetailsHeaderBase, _super);\n\n  function DetailsHeaderBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._rootElement = React.createRef();\n    _this._rootComponent = React.createRef();\n    _this._draggedColumnIndex = -1;\n    _this._dropHintDetails = {};\n\n    _this._updateDroppingState = function (newValue, event) {\n      if (_this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\n        _this._resetDropHints();\n      }\n    };\n\n    _this._onDragOver = function (item, event) {\n      if (_this._draggedColumnIndex >= 0) {\n        event.stopPropagation();\n\n        _this._computeDropHintToBeShown(event.clientX);\n      }\n    };\n\n    _this._onDrop = function (item, event) {\n      // Safe to assume this is defined since we're handling a drop event\n      var columnReorderProps = _this._getColumnReorderProps(); // Target index will not get changed if draggeditem is after target item.\n\n\n      if (_this._draggedColumnIndex >= 0 && event) {\n        var targetIndex = _this._draggedColumnIndex > _this._currentDropHintIndex ? _this._currentDropHintIndex : _this._currentDropHintIndex - 1;\n\n        var isValidDrop = _this._isValidCurrentDropHintIndex();\n\n        event.stopPropagation();\n\n        if (isValidDrop) {\n          _this._onDropIndexInfo.sourceIndex = _this._draggedColumnIndex;\n          _this._onDropIndexInfo.targetIndex = targetIndex;\n\n          if (columnReorderProps.onColumnDrop) {\n            var dragDropDetails = {\n              draggedIndex: _this._draggedColumnIndex,\n              targetIndex: targetIndex\n            };\n            columnReorderProps.onColumnDrop(dragDropDetails);\n            /* eslint-disable deprecation/deprecation */\n          } else if (columnReorderProps.handleColumnReorder) {\n            columnReorderProps.handleColumnReorder(_this._draggedColumnIndex, targetIndex);\n            /* eslint-enable deprecation/deprecation */\n          }\n        }\n      }\n\n      _this._resetDropHints();\n\n      _this._dropHintDetails = {};\n      _this._draggedColumnIndex = -1;\n    };\n\n    _this._updateDragInfo = function (props, event) {\n      // Safe to assume this is defined since we're handling a drag event\n      var columnReorderProps = _this._getColumnReorderProps();\n\n      var itemIndex = props.itemIndex;\n\n      if (itemIndex >= 0) {\n        // Column index is set based on the checkbox\n        _this._draggedColumnIndex = _this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\n\n        _this._getDropHintPositions();\n\n        if (columnReorderProps.onColumnDragStart) {\n          columnReorderProps.onColumnDragStart(true);\n        }\n      } else if (event && _this._draggedColumnIndex >= 0) {\n        _this._resetDropHints();\n\n        _this._draggedColumnIndex = -1;\n        _this._dropHintDetails = {};\n\n        if (columnReorderProps.onColumnDragEnd) {\n          var columnDragEndLocation = _this._isEventOnHeader(event);\n\n          columnReorderProps.onColumnDragEnd({\n            dropLocation: columnDragEndLocation\n          }, event);\n        }\n      }\n    };\n\n    _this._getDropHintPositions = function () {\n      var _a = _this.props.columns,\n          columns = _a === void 0 ? NO_COLUMNS : _a; // Safe to assume this is defined since we're handling a drag/drop event\n\n      var columnReorderProps = _this._getColumnReorderProps();\n\n      var prevX = 0;\n      var prevMid = 0;\n      var prevRef;\n      var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n      var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n      for (var i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n        if (_this._rootElement.current) {\n          var dropHintElement = _this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0];\n\n          if (dropHintElement) {\n            if (i === frozenColumnCountFromStart) {\n              prevX = dropHintElement.offsetLeft;\n              prevMid = dropHintElement.offsetLeft;\n              prevRef = dropHintElement;\n            } else {\n              var newMid = (dropHintElement.offsetLeft + prevX) / 2;\n              _this._dropHintDetails[i - 1] = {\n                originX: prevX,\n                startX: prevMid,\n                endX: newMid,\n                dropHintElementRef: prevRef\n              };\n              prevMid = newMid;\n              prevRef = dropHintElement;\n              prevX = dropHintElement.offsetLeft;\n\n              if (i === columns.length - frozenColumnCountFromEnd) {\n                _this._dropHintDetails[i] = {\n                  originX: prevX,\n                  startX: prevMid,\n                  endX: dropHintElement.offsetLeft,\n                  dropHintElementRef: prevRef\n                };\n              }\n            }\n          }\n        }\n      }\n    };\n    /**\n     * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\n     */\n\n\n    _this._computeDropHintToBeShown = function (clientX) {\n      var isRtl = getRTL(_this.props.theme);\n\n      if (_this._rootElement.current) {\n        var clientRect = _this._rootElement.current.getBoundingClientRect();\n\n        var headerOriginX = clientRect.left;\n        var eventXRelativePosition = clientX - headerOriginX;\n        var currentDropHintIndex = _this._currentDropHintIndex;\n\n        if (_this._isValidCurrentDropHintIndex()) {\n          if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex].startX, _this._dropHintDetails[currentDropHintIndex].endX)) {\n            return;\n          }\n        }\n\n        var _a = _this.props.columns,\n            columns = _a === void 0 ? NO_COLUMNS : _a; // Safe to assume this is defined since we're handling a drag/drop event\n\n        var columnReorderProps = _this._getColumnReorderProps();\n\n        var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n        var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n        var currentIndex = frozenColumnCountFromStart;\n        var lastValidColumn = columns.length - frozenColumnCountFromEnd;\n        var indexToUpdate = -1;\n\n        if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[currentIndex].endX)) {\n          indexToUpdate = currentIndex;\n        } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[lastValidColumn].startX)) {\n          indexToUpdate = lastValidColumn;\n        } else if (_this._isValidCurrentDropHintIndex()) {\n          if (_this._dropHintDetails[currentDropHintIndex + 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex + 1].startX, _this._dropHintDetails[currentDropHintIndex + 1].endX)) {\n            indexToUpdate = currentDropHintIndex + 1;\n          } else if (_this._dropHintDetails[currentDropHintIndex - 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex - 1].startX, _this._dropHintDetails[currentDropHintIndex - 1].endX)) {\n            indexToUpdate = currentDropHintIndex - 1;\n          }\n        }\n\n        if (indexToUpdate === -1) {\n          var startIndex = frozenColumnCountFromStart;\n          var endIndex = lastValidColumn;\n\n          while (startIndex < endIndex) {\n            var middleIndex = Math.ceil((endIndex + startIndex) / 2);\n\n            if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].startX, _this._dropHintDetails[middleIndex].endX)) {\n              indexToUpdate = middleIndex;\n              break;\n            } else if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n              endIndex = middleIndex;\n            } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n              startIndex = middleIndex;\n            }\n          }\n        }\n\n        if (indexToUpdate === _this._draggedColumnIndex || indexToUpdate === _this._draggedColumnIndex + 1) {\n          if (_this._isValidCurrentDropHintIndex()) {\n            _this._resetDropHints();\n          }\n        } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n          _this._resetDropHints();\n\n          _this._updateDropHintElement(_this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n\n          _this._currentDropHintIndex = indexToUpdate;\n        }\n      }\n    };\n\n    _this._renderColumnSizer = function (_a) {\n      var _b;\n\n      var columnIndex = _a.columnIndex;\n      var _c = _this.props.columns,\n          columns = _c === void 0 ? NO_COLUMNS : _c;\n      var column = columns[columnIndex];\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      var classNames = _this._classNames;\n      return column.isResizable ? React.createElement(\"div\", {\n        key: column.key + \"_sizer\",\n        \"aria-hidden\": true,\n        role: \"button\",\n        \"data-is-focusable\": false,\n        onClick: _stopPropagation,\n        \"data-sizer-index\": columnIndex,\n        onBlur: _this._onSizerBlur,\n        className: css(classNames.cellSizer, columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd, (_b = {}, _b[classNames.cellIsResizing] = columnResizeDetails && columnResizeDetails.columnIndex === columnIndex, _b)),\n        onDoubleClick: _this._onSizerDoubleClick.bind(_this, columnIndex)\n      }) : null;\n    };\n\n    _this._onRenderColumnHeaderTooltip = function (tooltipHostProps) {\n      return React.createElement(\"span\", {\n        className: tooltipHostProps.hostClassName\n      }, tooltipHostProps.children);\n    };\n    /**\n     * Called when the select all toggle is clicked.\n     */\n\n\n    _this._onSelectAllClicked = function () {\n      var selection = _this.props.selection;\n\n      if (selection) {\n        selection.toggleAllSelected();\n      }\n    };\n\n    _this._onRootMouseDown = function (ev) {\n      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n      var columnIndex = Number(columnIndexAttr);\n      var _a = _this.props.columns,\n          columns = _a === void 0 ? NO_COLUMNS : _a;\n\n      if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n        // Ignore anything except the primary button.\n        return;\n      }\n\n      _this.setState({\n        columnResizeDetails: {\n          columnIndex: columnIndex,\n          columnMinWidth: columns[columnIndex].calculatedWidth,\n          originX: ev.clientX\n        }\n      });\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    _this._onRootMouseMove = function (ev) {\n      var _a = _this.state,\n          columnResizeDetails = _a.columnResizeDetails,\n          isSizing = _a.isSizing;\n\n      if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n        _this.setState({\n          isSizing: true\n        });\n      }\n    };\n\n    _this._onRootKeyDown = function (ev) {\n      var _a = _this.state,\n          columnResizeDetails = _a.columnResizeDetails,\n          isSizing = _a.isSizing;\n      var _b = _this.props,\n          _c = _b.columns,\n          columns = _c === void 0 ? NO_COLUMNS : _c,\n          onColumnResized = _b.onColumnResized;\n      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n\n      if (!columnIndexAttr || isSizing) {\n        return;\n      }\n\n      var columnIndex = Number(columnIndexAttr);\n\n      if (!columnResizeDetails) {\n        // eslint-disable-next-line deprecation/deprecation\n        if (ev.which === KeyCodes.enter) {\n          _this.setState({\n            columnResizeDetails: {\n              columnIndex: columnIndex,\n              columnMinWidth: columns[columnIndex].calculatedWidth\n            }\n          });\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      } else {\n        var increment = void 0; // eslint-disable-next-line deprecation/deprecation\n\n        if (ev.which === KeyCodes.enter) {\n          _this.setState({\n            columnResizeDetails: undefined\n          });\n\n          ev.preventDefault();\n          ev.stopPropagation(); // eslint-disable-next-line deprecation/deprecation\n        } else if (ev.which === KeyCodes.left) {\n          increment = getRTL(_this.props.theme) ? 1 : -1; // eslint-disable-next-line deprecation/deprecation\n        } else if (ev.which === KeyCodes.right) {\n          increment = getRTL(_this.props.theme) ? -1 : 1;\n        }\n\n        if (increment) {\n          if (!ev.shiftKey) {\n            increment *= 10;\n          }\n\n          _this.setState({\n            columnResizeDetails: __assign(__assign({}, columnResizeDetails), {\n              columnMinWidth: columnResizeDetails.columnMinWidth + increment\n            })\n          });\n\n          if (onColumnResized) {\n            onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    };\n    /**\n     * mouse move event handler in the header\n     * it will set isSizing state to true when user clicked on the sizer and move the mouse.\n     *\n     * @param ev - mouse move event\n     */\n\n\n    _this._onSizerMouseMove = function (ev) {\n      var // use buttons property here since ev.button in some edge case is not upding well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = ev.buttons;\n      var _a = _this.props,\n          onColumnIsSizingChanged = _a.onColumnIsSizingChanged,\n          onColumnResized = _a.onColumnResized,\n          _b = _a.columns,\n          columns = _b === void 0 ? NO_COLUMNS : _b;\n      var columnResizeDetails = _this.state.columnResizeDetails;\n\n      if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n        // cancel mouse down event and return early when the primary button is not pressed\n        _this._onSizerMouseUp(ev);\n\n        return;\n      }\n\n      if (ev.clientX !== columnResizeDetails.originX) {\n        if (onColumnIsSizingChanged) {\n          onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], true);\n        }\n      }\n\n      if (onColumnResized) {\n        var movement = ev.clientX - columnResizeDetails.originX;\n\n        if (getRTL(_this.props.theme)) {\n          movement = -movement;\n        }\n\n        onColumnResized(columns[columnResizeDetails.columnIndex], columnResizeDetails.columnMinWidth + movement, columnResizeDetails.columnIndex);\n      }\n    };\n\n    _this._onSizerBlur = function (ev) {\n      var columnResizeDetails = _this.state.columnResizeDetails;\n\n      if (columnResizeDetails) {\n        _this.setState({\n          columnResizeDetails: undefined,\n          isSizing: false\n        });\n      }\n    };\n    /**\n     * mouse up event handler in the header\n     * clear the resize related state.\n     * This is to ensure we can catch double click event\n     *\n     * @param ev - mouse up event\n     */\n\n\n    _this._onSizerMouseUp = function (ev) {\n      var _a = _this.props,\n          _b = _a.columns,\n          columns = _b === void 0 ? NO_COLUMNS : _b,\n          onColumnIsSizingChanged = _a.onColumnIsSizingChanged;\n      var columnResizeDetails = _this.state.columnResizeDetails;\n\n      _this.setState({\n        columnResizeDetails: undefined,\n        isSizing: false\n      });\n\n      if (onColumnIsSizingChanged) {\n        onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], false);\n      }\n    };\n\n    _this._onToggleCollapseAll = function () {\n      var onToggleCollapseAll = _this.props.onToggleCollapseAll;\n      var newCollapsed = !_this.state.isAllCollapsed;\n\n      _this.setState({\n        isAllCollapsed: newCollapsed\n      });\n\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(newCollapsed);\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._events = new EventGroup(_this);\n    _this.state = {\n      columnResizeDetails: undefined,\n      isAllCollapsed: _this.props.isAllCollapsed,\n      isAllSelected: !!_this.props.selection && _this.props.selection.isAllSelected()\n    };\n    _this._onDropIndexInfo = {\n      sourceIndex: -1,\n      targetIndex: -1\n    };\n    _this._id = getId('header');\n    _this._currentDropHintIndex = -1; // The drag drop handler won't do any work until subscribe() is called,\n    // so always set it up for convenience\n\n    _this._dragDropHelper = new DragDropHelper({\n      selection: {\n        getSelection: function () {\n          return;\n        }\n      },\n      minimumPixelsForDrag: _this.props.minimumPixelsForDrag\n    });\n    return _this;\n  }\n\n  DetailsHeaderBase.prototype.componentDidMount = function () {\n    var selection = this.props.selection;\n\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged); // this._rootElement.current will be null in tests using react-test-renderer\n\n\n    if (this._rootElement.current) {\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\n\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\n\n      if (this._getColumnReorderProps()) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());\n      }\n    }\n  };\n\n  DetailsHeaderBase.prototype.componentDidUpdate = function (prevProps) {\n    if (this._getColumnReorderProps()) {\n      if (!this._subscriptionObject && this._rootElement.current) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());\n      }\n    } else if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n\n      delete this._subscriptionObject;\n    }\n\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n      var _a = prevProps.columns,\n          previousColumns = _a === void 0 ? NO_COLUMNS : _a;\n      var _b = this.props.columns,\n          columns = _b === void 0 ? NO_COLUMNS : _b;\n\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n        this._onDropIndexInfo = {\n          sourceIndex: -1,\n          targetIndex: -1\n        };\n      }\n    }\n\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\n      this.setState({\n        isAllCollapsed: this.props.isAllCollapsed\n      });\n    }\n  };\n\n  DetailsHeaderBase.prototype.componentWillUnmount = function () {\n    if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n\n      delete this._subscriptionObject;\n    }\n\n    this._dragDropHelper.dispose();\n\n    this._events.dispose();\n  };\n\n  DetailsHeaderBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b,\n        ariaLabel = _a.ariaLabel,\n        ariaLabelForToggleAllGroupsButton = _a.ariaLabelForToggleAllGroupsButton,\n        ariaLabelForSelectAllCheckbox = _a.ariaLabelForSelectAllCheckbox,\n        selectAllVisibility = _a.selectAllVisibility,\n        ariaLabelForSelectionColumn = _a.ariaLabelForSelectionColumn,\n        indentWidth = _a.indentWidth,\n        onColumnClick = _a.onColumnClick,\n        onColumnContextMenu = _a.onColumnContextMenu,\n        _c = _a.onRenderColumnHeaderTooltip,\n        onRenderColumnHeaderTooltip = _c === void 0 ? this._onRenderColumnHeaderTooltip : _c,\n        styles = _a.styles,\n        selectionMode = _a.selectionMode,\n        theme = _a.theme,\n        onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox,\n        groupNestingDepth = _a.groupNestingDepth,\n        useFastIcons = _a.useFastIcons,\n        checkboxVisibility = _a.checkboxVisibility,\n        className = _a.className;\n    var _d = this.state,\n        isAllSelected = _d.isAllSelected,\n        columnResizeDetails = _d.columnResizeDetails,\n        isSizing = _d.isSizing,\n        isAllCollapsed = _d.isAllCollapsed;\n    var showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n    var isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n    var isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\n\n    var columnReorderProps = this._getColumnReorderProps();\n\n    var frozenColumnCountFromStart = columnReorderProps && columnReorderProps.frozenColumnCountFromStart ? columnReorderProps.frozenColumnCountFromStart : 0;\n    var frozenColumnCountFromEnd = columnReorderProps && columnReorderProps.frozenColumnCountFromEnd ? columnReorderProps.frozenColumnCountFromEnd : 0;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      isAllSelected: isAllSelected,\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n      isResizingColumn: !!columnResizeDetails && isSizing,\n      isSizing: isSizing,\n      isAllCollapsed: isAllCollapsed,\n      isCheckboxHidden: isCheckboxHidden,\n      className: className\n    });\n    var classNames = this._classNames;\n    var IconComponent = useFastIcons ? FontIcon : Icon;\n    var isRTL = getRTL(theme);\n    return React.createElement(FocusZone, {\n      role: \"row\",\n      \"aria-label\": ariaLabel,\n      className: classNames.root,\n      componentRef: this._rootComponent,\n      elementRef: this._rootElement,\n      onMouseMove: this._onRootMouseMove,\n      \"data-automationid\": \"DetailsHeader\",\n      direction: FocusZoneDirection.horizontal\n    }, showCheckbox ? [React.createElement(\"div\", {\n      key: \"__checkbox\",\n      className: classNames.cellIsCheck,\n      \"aria-labelledby\": this._id + \"-check\",\n      onClick: !isCheckboxHidden ? this._onSelectAllClicked : undefined,\n      \"aria-colindex\": 1,\n      role: 'columnheader'\n    }, onRenderColumnHeaderTooltip({\n      hostClassName: classNames.checkTooltip,\n      id: this._id + \"-checkTooltip\",\n      setAriaDescribedBy: false,\n      content: ariaLabelForSelectAllCheckbox,\n      children: React.createElement(DetailsRowCheck, {\n        id: this._id + \"-check\",\n        \"aria-label\": selectionMode === SelectionMode.multiple ? ariaLabelForSelectAllCheckbox : ariaLabelForSelectionColumn,\n        \"aria-describedby\": !isCheckboxHidden ? ariaLabelForSelectAllCheckbox && !this.props.onRenderColumnHeaderTooltip ? this._id + \"-checkTooltip\" : undefined : ariaLabelForSelectionColumn && !this.props.onRenderColumnHeaderTooltip ? this._id + \"-checkTooltip\" : undefined,\n        \"data-is-focusable\": !isCheckboxHidden || undefined,\n        isHeader: true,\n        selected: isAllSelected,\n        anySelected: false,\n        canSelect: !isCheckboxHidden,\n        className: classNames.check,\n        onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n        useFastIcons: useFastIcons,\n        isVisible: isCheckboxAlwaysVisible\n      })\n    }, this._onRenderColumnHeaderTooltip)), !this.props.onRenderColumnHeaderTooltip ? ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? React.createElement(\"label\", {\n      key: \"__checkboxLabel\",\n      id: this._id + \"-checkTooltip\",\n      className: classNames.accessibleLabel,\n      \"aria-hidden\": true\n    }, ariaLabelForSelectAllCheckbox) : ariaLabelForSelectionColumn && isCheckboxHidden ? React.createElement(\"label\", {\n      key: \"__checkboxLabel\",\n      id: this._id + \"-checkTooltip\",\n      className: classNames.accessibleLabel,\n      \"aria-hidden\": true\n    }, ariaLabelForSelectionColumn) : null : null] : null, groupNestingDepth > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible ? React.createElement(\"div\", {\n      className: classNames.cellIsGroupExpander,\n      onClick: this._onToggleCollapseAll,\n      \"data-is-focusable\": true,\n      \"aria-label\": ariaLabelForToggleAllGroupsButton,\n      \"aria-expanded\": !isAllCollapsed,\n      role: \"columnheader\"\n    }, React.createElement(IconComponent, {\n      className: classNames.collapseButton,\n      iconName: isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'\n    })) : null, React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      role: \"gridcell\",\n      count: groupNestingDepth - 1\n    }), columns.map(function (column, columnIndex) {\n      var _isDraggable = columnReorderProps ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd : false;\n\n      return [columnReorderProps && (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) && _this._renderDropHint(columnIndex), React.createElement(DetailsColumn, {\n        column: column,\n        styles: column.styles,\n        key: column.key,\n        columnIndex: (showCheckbox ? 2 : 1) + columnIndex,\n        parentId: _this._id,\n        isDraggable: _isDraggable,\n        updateDragInfo: _this._updateDragInfo,\n        dragDropHelper: _this._dragDropHelper,\n        onColumnClick: onColumnClick,\n        onColumnContextMenu: onColumnContextMenu,\n        // Do not render tooltips by default, but allow for override via props.\n        onRenderColumnHeaderTooltip: _this.props.onRenderColumnHeaderTooltip,\n        isDropped: _this._onDropIndexInfo.targetIndex === columnIndex,\n        cellStyleProps: _this.props.cellStyleProps,\n        useFastIcons: useFastIcons\n      }), _this._renderColumnDivider(columnIndex)];\n    }), columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length), isSizing && React.createElement(Layer, null, React.createElement(\"div\", {\n      className: classNames.sizingOverlay,\n      onMouseMove: this._onSizerMouseMove,\n      onMouseUp: this._onSizerMouseUp\n    })));\n  };\n  /** Set focus to the active thing in the focus area. */\n\n\n  DetailsHeaderBase.prototype.focus = function () {\n    var _a;\n\n    return !!((_a = this._rootComponent.current) === null || _a === void 0 ? void 0 : _a.focus());\n  };\n  /**\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\n   * (because drag/drop handling will only be set up if reorder props are given).\n   */\n\n\n  DetailsHeaderBase.prototype._getColumnReorderProps = function () {\n    var _a = this.props,\n        columnReorderOptions = _a.columnReorderOptions,\n        columnReorderProps = _a.columnReorderProps;\n    return columnReorderProps || columnReorderOptions && __assign(__assign({}, columnReorderOptions), {\n      onColumnDragEnd: undefined\n    });\n  };\n\n  DetailsHeaderBase.prototype._getHeaderDragDropOptions = function () {\n    var options = {\n      selectionIndex: 1,\n      context: {\n        data: this,\n        index: 0\n      },\n      canDrag: function () {\n        return false;\n      },\n      canDrop: function () {\n        return true;\n      },\n      onDragStart: function () {\n        return undefined;\n      },\n      updateDropState: this._updateDroppingState,\n      onDrop: this._onDrop,\n      onDragEnd: function () {\n        return undefined;\n      },\n      onDragOver: this._onDragOver\n    };\n    return options;\n  };\n\n  DetailsHeaderBase.prototype._isValidCurrentDropHintIndex = function () {\n    return this._currentDropHintIndex >= 0;\n  };\n  /**\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\n   */\n\n\n  DetailsHeaderBase.prototype._isCheckboxColumnHidden = function () {\n    var _a = this.props,\n        selectionMode = _a.selectionMode,\n        checkboxVisibility = _a.checkboxVisibility;\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n  };\n\n  DetailsHeaderBase.prototype._resetDropHints = function () {\n    if (this._currentDropHintIndex >= 0) {\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n\n      this._currentDropHintIndex = -1;\n    }\n  };\n\n  DetailsHeaderBase.prototype._updateDropHintElement = function (element, displayProperty) {\n    element.childNodes[1].style.display = displayProperty;\n    element.childNodes[0].style.display = displayProperty;\n  };\n\n  DetailsHeaderBase.prototype._isEventOnHeader = function (event) {\n    if (this._rootElement.current) {\n      var clientRect = this._rootElement.current.getBoundingClientRect();\n\n      if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {\n        return ColumnDragEndLocation.header;\n      }\n    }\n  };\n\n  DetailsHeaderBase.prototype._renderColumnDivider = function (columnIndex) {\n    var _a = this.props.columns,\n        columns = _a === void 0 ? NO_COLUMNS : _a;\n    var column = columns[columnIndex];\n    var onRenderDivider = column.onRenderDivider;\n    return onRenderDivider ? onRenderDivider({\n      column: column,\n      columnIndex: columnIndex\n    }, this._renderColumnSizer) : this._renderColumnSizer({\n      column: column,\n      columnIndex: columnIndex\n    });\n  };\n\n  DetailsHeaderBase.prototype._renderDropHint = function (dropHintIndex) {\n    var classNames = this._classNames;\n    var IconComponent = this.props.useFastIcons ? FontIcon : Icon;\n    return React.createElement(\"div\", {\n      key: 'dropHintKey',\n      className: classNames.dropHintStyle,\n      id: \"columnDropHint_\" + dropHintIndex\n    }, React.createElement(\"div\", {\n      role: \"presentation\",\n      key: \"dropHintCircleKey\",\n      className: classNames.dropHintCaretStyle,\n      \"data-is-focusable\": false,\n      \"data-sizer-index\": dropHintIndex,\n      \"aria-hidden\": true\n    }, React.createElement(IconComponent, {\n      iconName: 'CircleShapeSolid'\n    })), React.createElement(\"div\", {\n      key: \"dropHintLineKey\",\n      \"aria-hidden\": true,\n      \"data-is-focusable\": false,\n      \"data-sizer-index\": dropHintIndex,\n      className: classNames.dropHintLineStyle\n    }));\n  };\n  /**\n   * double click on the column sizer will auto ajust column width\n   * to fit the longest content among current rendered rows.\n   *\n   * @param columnIndex - index of the column user double clicked\n   * @param ev - mouse double click event\n   */\n\n\n  DetailsHeaderBase.prototype._onSizerDoubleClick = function (columnIndex, ev) {\n    var _a = this.props,\n        onColumnAutoResized = _a.onColumnAutoResized,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b;\n\n    if (onColumnAutoResized) {\n      onColumnAutoResized(columns[columnIndex], columnIndex);\n    }\n  };\n\n  DetailsHeaderBase.prototype._onSelectionChanged = function () {\n    var isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n\n    if (this.state.isAllSelected !== isAllSelected) {\n      this.setState({\n        isAllSelected: isAllSelected\n      });\n    }\n  };\n\n  DetailsHeaderBase.defaultProps = {\n    selectAllVisibility: SelectAllVisibility.visible,\n    collapseAllVisibility: CollapseAllVisibility.visible,\n    useFastIcons: true\n  };\n  return DetailsHeaderBase;\n}(React.Component);\n\nexport { DetailsHeaderBase };\n\nfunction _liesBetween(rtl, target, left, right) {\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\n}\n\nfunction _isBefore(rtl, a, b) {\n  return rtl ? a >= b : a <= b;\n}\n\nfunction _isAfter(rtl, a, b) {\n  return rtl ? a <= b : a >= b;\n}\n\nfunction _stopPropagation(ev) {\n  ev.stopPropagation();\n}","map":{"version":3,"sources":["components/DetailsList/DetailsHeader.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { IProcessedStyleSet } from '../../Styling';\r\nimport {\r\n  initializeComponentRef,\r\n  EventGroup,\r\n  IDisposable,\r\n  css,\r\n  getRTL,\r\n  getId,\r\n  KeyCodes,\r\n  classNamesFunction,\r\n} from '../../Utilities';\r\nimport {\r\n  IColumn,\r\n  IDetailsHeaderBaseProps,\r\n  IColumnDragDropDetails,\r\n  ColumnDragEndLocation,\r\n  CheckboxVisibility,\r\n} from './DetailsList.types';\r\nimport { IFocusZone, FocusZone, FocusZoneDirection } from '../../FocusZone';\r\nimport { Icon, FontIcon } from '../../Icon';\r\nimport { Layer } from '../../Layer';\r\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\r\nimport { CollapseAllVisibility } from '../../GroupedList';\r\nimport { DetailsRowCheck } from './DetailsRowCheck';\r\nimport { ITooltipHostProps } from '../../Tooltip';\r\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\r\nimport { IDragDropOptions, DragDropHelper } from '../../utilities/dragdrop/index';\r\nimport { DetailsColumn, IDetailsColumnProps } from '../../components/DetailsList/DetailsColumn';\r\nimport {\r\n  SelectAllVisibility,\r\n  IDropHintDetails,\r\n  IColumnReorderHeaderProps,\r\n  IDetailsHeaderState,\r\n} from './DetailsHeader.types';\r\nimport { IDetailsHeaderStyleProps, IDetailsHeaderStyles, IDetailsHeader } from './DetailsHeader.types';\r\n\r\nconst getClassNames = classNamesFunction<IDetailsHeaderStyleProps, IDetailsHeaderStyles>();\r\n\r\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\r\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\r\n\r\nconst NO_COLUMNS: IColumn[] = [];\r\n\r\nexport class DetailsHeaderBase extends React.Component<IDetailsHeaderBaseProps, IDetailsHeaderState>\r\n  implements IDetailsHeader {\r\n  public static defaultProps = {\r\n    selectAllVisibility: SelectAllVisibility.visible,\r\n    collapseAllVisibility: CollapseAllVisibility.visible,\r\n    useFastIcons: true,\r\n  };\r\n\r\n  private _classNames: IProcessedStyleSet<IDetailsHeaderStyles>;\r\n  private _rootElement = React.createRef<HTMLElement>();\r\n  private _events: EventGroup;\r\n  private _rootComponent = React.createRef<IFocusZone>();\r\n  private _id: string;\r\n  private _draggedColumnIndex = -1;\r\n  private _dropHintDetails: { [key: number]: IDropHintDetails } = {};\r\n  private _dragDropHelper: DragDropHelper;\r\n  private _currentDropHintIndex: number;\r\n  private _subscriptionObject: IDisposable;\r\n  private _onDropIndexInfo: {\r\n    sourceIndex: number;\r\n    targetIndex: number;\r\n  };\r\n\r\n  constructor(props: IDetailsHeaderBaseProps) {\r\n    super(props);\r\n\r\n    initializeComponentRef(this);\r\n    this._events = new EventGroup(this);\r\n\r\n    this.state = {\r\n      columnResizeDetails: undefined,\r\n      isAllCollapsed: this.props.isAllCollapsed,\r\n      isAllSelected: !!this.props.selection && this.props.selection.isAllSelected(),\r\n    };\r\n\r\n    this._onDropIndexInfo = {\r\n      sourceIndex: -1,\r\n      targetIndex: -1,\r\n    };\r\n    this._id = getId('header');\r\n    this._currentDropHintIndex = -1;\r\n\r\n    // The drag drop handler won't do any work until subscribe() is called,\r\n    // so always set it up for convenience\r\n    this._dragDropHelper = new DragDropHelper({\r\n      selection: {\r\n        getSelection: () => {\r\n          return;\r\n        },\r\n      } as ISelection,\r\n      minimumPixelsForDrag: this.props.minimumPixelsForDrag,\r\n    });\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    const { selection } = this.props;\r\n\r\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\r\n\r\n    // this._rootElement.current will be null in tests using react-test-renderer\r\n    if (this._rootElement.current) {\r\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\r\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\r\n\r\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\r\n\r\n      if (this._getColumnReorderProps()) {\r\n        this._subscriptionObject = this._dragDropHelper.subscribe(\r\n          this._rootElement.current,\r\n          this._events,\r\n          this._getHeaderDragDropOptions(),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void {\r\n    if (this._getColumnReorderProps()) {\r\n      if (!this._subscriptionObject && this._rootElement.current) {\r\n        this._subscriptionObject = this._dragDropHelper.subscribe(\r\n          this._rootElement.current,\r\n          this._events,\r\n          this._getHeaderDragDropOptions(),\r\n        );\r\n      }\r\n    } else if (this._subscriptionObject) {\r\n      this._subscriptionObject.dispose();\r\n      delete this._subscriptionObject;\r\n    }\r\n\r\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\r\n      const { columns: previousColumns = NO_COLUMNS } = prevProps;\r\n      const { columns = NO_COLUMNS } = this.props;\r\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\r\n        this._onDropIndexInfo = {\r\n          sourceIndex: -1,\r\n          targetIndex: -1,\r\n        };\r\n      }\r\n    }\r\n\r\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\r\n      this.setState({ isAllCollapsed: this.props.isAllCollapsed });\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    if (this._subscriptionObject) {\r\n      this._subscriptionObject.dispose();\r\n      delete this._subscriptionObject;\r\n    }\r\n\r\n    this._dragDropHelper.dispose();\r\n\r\n    this._events.dispose();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      columns = NO_COLUMNS,\r\n      ariaLabel,\r\n      ariaLabelForToggleAllGroupsButton,\r\n      ariaLabelForSelectAllCheckbox,\r\n      selectAllVisibility,\r\n      ariaLabelForSelectionColumn,\r\n      indentWidth,\r\n      onColumnClick,\r\n      onColumnContextMenu,\r\n      onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip,\r\n      styles,\r\n      selectionMode,\r\n      theme,\r\n      onRenderDetailsCheckbox,\r\n      groupNestingDepth,\r\n      useFastIcons,\r\n      checkboxVisibility,\r\n      className,\r\n    } = this.props;\r\n    const { isAllSelected, columnResizeDetails, isSizing, isAllCollapsed } = this.state;\r\n    const showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\r\n    const isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\r\n    const isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\r\n\r\n    const columnReorderProps = this._getColumnReorderProps();\r\n    const frozenColumnCountFromStart =\r\n      columnReorderProps && columnReorderProps.frozenColumnCountFromStart\r\n        ? columnReorderProps.frozenColumnCountFromStart\r\n        : 0;\r\n    const frozenColumnCountFromEnd =\r\n      columnReorderProps && columnReorderProps.frozenColumnCountFromEnd\r\n        ? columnReorderProps.frozenColumnCountFromEnd\r\n        : 0;\r\n\r\n    this._classNames = getClassNames(styles, {\r\n      theme: theme!,\r\n      isAllSelected,\r\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\r\n      isResizingColumn: !!columnResizeDetails && isSizing,\r\n      isSizing,\r\n      isAllCollapsed,\r\n      isCheckboxHidden,\r\n      className,\r\n    });\r\n\r\n    const classNames = this._classNames;\r\n    const IconComponent = useFastIcons ? FontIcon : Icon;\r\n\r\n    const isRTL = getRTL(theme);\r\n    return (\r\n      <FocusZone\r\n        role=\"row\"\r\n        aria-label={ariaLabel}\r\n        className={classNames.root}\r\n        componentRef={this._rootComponent}\r\n        elementRef={this._rootElement}\r\n        onMouseMove={this._onRootMouseMove}\r\n        data-automationid=\"DetailsHeader\"\r\n        direction={FocusZoneDirection.horizontal}\r\n      >\r\n        {showCheckbox\r\n          ? [\r\n              <div\r\n                key=\"__checkbox\"\r\n                className={classNames.cellIsCheck}\r\n                aria-labelledby={`${this._id}-check`}\r\n                onClick={!isCheckboxHidden ? this._onSelectAllClicked : undefined}\r\n                aria-colindex={1}\r\n                role={'columnheader'}\r\n              >\r\n                {onRenderColumnHeaderTooltip(\r\n                  {\r\n                    hostClassName: classNames.checkTooltip,\r\n                    id: `${this._id}-checkTooltip`,\r\n                    setAriaDescribedBy: false,\r\n                    content: ariaLabelForSelectAllCheckbox,\r\n                    children: (\r\n                      <DetailsRowCheck\r\n                        id={`${this._id}-check`}\r\n                        aria-label={\r\n                          selectionMode === SelectionMode.multiple\r\n                            ? ariaLabelForSelectAllCheckbox\r\n                            : ariaLabelForSelectionColumn\r\n                        }\r\n                        aria-describedby={\r\n                          !isCheckboxHidden\r\n                            ? ariaLabelForSelectAllCheckbox && !this.props.onRenderColumnHeaderTooltip\r\n                              ? `${this._id}-checkTooltip`\r\n                              : undefined\r\n                            : ariaLabelForSelectionColumn && !this.props.onRenderColumnHeaderTooltip\r\n                            ? `${this._id}-checkTooltip`\r\n                            : undefined\r\n                        }\r\n                        data-is-focusable={!isCheckboxHidden || undefined}\r\n                        isHeader={true}\r\n                        selected={isAllSelected}\r\n                        anySelected={false}\r\n                        canSelect={!isCheckboxHidden}\r\n                        className={classNames.check}\r\n                        onRenderDetailsCheckbox={onRenderDetailsCheckbox}\r\n                        useFastIcons={useFastIcons}\r\n                        isVisible={isCheckboxAlwaysVisible}\r\n                      />\r\n                    ),\r\n                  },\r\n                  this._onRenderColumnHeaderTooltip,\r\n                )}\r\n              </div>,\r\n              !this.props.onRenderColumnHeaderTooltip ? (\r\n                ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (\r\n                  <label\r\n                    key=\"__checkboxLabel\"\r\n                    id={`${this._id}-checkTooltip`}\r\n                    className={classNames.accessibleLabel}\r\n                    aria-hidden={true}\r\n                  >\r\n                    {ariaLabelForSelectAllCheckbox}\r\n                  </label>\r\n                ) : ariaLabelForSelectionColumn && isCheckboxHidden ? (\r\n                  <label\r\n                    key=\"__checkboxLabel\"\r\n                    id={`${this._id}-checkTooltip`}\r\n                    className={classNames.accessibleLabel}\r\n                    aria-hidden={true}\r\n                  >\r\n                    {ariaLabelForSelectionColumn}\r\n                  </label>\r\n                ) : null\r\n              ) : null,\r\n            ]\r\n          : null}\r\n        {groupNestingDepth! > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible ? (\r\n          <div\r\n            className={classNames.cellIsGroupExpander}\r\n            onClick={this._onToggleCollapseAll}\r\n            data-is-focusable={true}\r\n            aria-label={ariaLabelForToggleAllGroupsButton}\r\n            aria-expanded={!isAllCollapsed}\r\n            role=\"columnheader\"\r\n          >\r\n            <IconComponent\r\n              className={classNames.collapseButton}\r\n              iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'}\r\n            />\r\n          </div>\r\n        ) : null}\r\n        <GroupSpacer indentWidth={indentWidth} role=\"gridcell\" count={groupNestingDepth! - 1} />\r\n        {columns.map((column: IColumn, columnIndex: number) => {\r\n          const _isDraggable = columnReorderProps\r\n            ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd\r\n            : false;\r\n          return [\r\n            columnReorderProps &&\r\n              (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&\r\n              this._renderDropHint(columnIndex),\r\n            <DetailsColumn\r\n              column={column}\r\n              styles={column.styles}\r\n              key={column.key}\r\n              columnIndex={(showCheckbox ? 2 : 1) + columnIndex}\r\n              parentId={this._id}\r\n              isDraggable={_isDraggable}\r\n              updateDragInfo={this._updateDragInfo}\r\n              dragDropHelper={this._dragDropHelper}\r\n              onColumnClick={onColumnClick}\r\n              onColumnContextMenu={onColumnContextMenu}\r\n              // Do not render tooltips by default, but allow for override via props.\r\n              onRenderColumnHeaderTooltip={this.props.onRenderColumnHeaderTooltip}\r\n              isDropped={this._onDropIndexInfo.targetIndex === columnIndex}\r\n              cellStyleProps={this.props.cellStyleProps}\r\n              useFastIcons={useFastIcons}\r\n            />,\r\n            this._renderColumnDivider(columnIndex),\r\n          ];\r\n        })}\r\n        {columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length)}\r\n        {isSizing && (\r\n          <Layer>\r\n            <div\r\n              className={classNames.sizingOverlay}\r\n              onMouseMove={this._onSizerMouseMove}\r\n              onMouseUp={this._onSizerMouseUp}\r\n            />\r\n          </Layer>\r\n        )}\r\n      </FocusZone>\r\n    );\r\n  }\r\n\r\n  /** Set focus to the active thing in the focus area. */\r\n  public focus(): boolean {\r\n    return !!this._rootComponent.current?.focus();\r\n  }\r\n\r\n  /**\r\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\r\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\r\n   * (because drag/drop handling will only be set up if reorder props are given).\r\n   */\r\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\r\n    const { columnReorderOptions, columnReorderProps } = this.props;\r\n    return columnReorderProps || (columnReorderOptions && { ...columnReorderOptions, onColumnDragEnd: undefined });\r\n  }\r\n\r\n  private _getHeaderDragDropOptions(): IDragDropOptions {\r\n    const options = {\r\n      selectionIndex: 1,\r\n      context: { data: this, index: 0 },\r\n      canDrag: () => false,\r\n      canDrop: () => true,\r\n      onDragStart: () => undefined,\r\n      updateDropState: this._updateDroppingState,\r\n      onDrop: this._onDrop,\r\n      onDragEnd: () => undefined,\r\n      onDragOver: this._onDragOver,\r\n    };\r\n    return options;\r\n  }\r\n\r\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\r\n    if (this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\r\n      this._resetDropHints();\r\n    }\r\n  };\r\n\r\n  private _isValidCurrentDropHintIndex() {\r\n    return this._currentDropHintIndex >= 0;\r\n  }\r\n\r\n  private _onDragOver = (item: any, event: DragEvent): void => {\r\n    if (this._draggedColumnIndex >= 0) {\r\n      event.stopPropagation();\r\n      this._computeDropHintToBeShown(event.clientX);\r\n    }\r\n  };\r\n\r\n  private _onDrop = (item?: any, event?: DragEvent): void => {\r\n    // Safe to assume this is defined since we're handling a drop event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n\r\n    // Target index will not get changed if draggeditem is after target item.\r\n    if (this._draggedColumnIndex >= 0 && event) {\r\n      const targetIndex =\r\n        this._draggedColumnIndex > this._currentDropHintIndex\r\n          ? this._currentDropHintIndex\r\n          : this._currentDropHintIndex - 1;\r\n      const isValidDrop = this._isValidCurrentDropHintIndex();\r\n      event.stopPropagation();\r\n      if (isValidDrop) {\r\n        this._onDropIndexInfo.sourceIndex = this._draggedColumnIndex;\r\n        this._onDropIndexInfo.targetIndex = targetIndex;\r\n\r\n        if (columnReorderProps.onColumnDrop) {\r\n          const dragDropDetails: IColumnDragDropDetails = {\r\n            draggedIndex: this._draggedColumnIndex,\r\n            targetIndex: targetIndex,\r\n          };\r\n          columnReorderProps.onColumnDrop(dragDropDetails);\r\n          /* eslint-disable deprecation/deprecation */\r\n        } else if (columnReorderProps.handleColumnReorder) {\r\n          columnReorderProps.handleColumnReorder(this._draggedColumnIndex, targetIndex);\r\n          /* eslint-enable deprecation/deprecation */\r\n        }\r\n      }\r\n    }\r\n\r\n    this._resetDropHints();\r\n    this._dropHintDetails = {};\r\n    this._draggedColumnIndex = -1;\r\n  };\r\n\r\n  /**\r\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\r\n   */\r\n  private _isCheckboxColumnHidden(): boolean {\r\n    const { selectionMode, checkboxVisibility } = this.props;\r\n\r\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\r\n  }\r\n\r\n  private _updateDragInfo = (props: { itemIndex: number }, event?: MouseEvent) => {\r\n    // Safe to assume this is defined since we're handling a drag event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n    const itemIndex = props.itemIndex;\r\n    if (itemIndex >= 0) {\r\n      // Column index is set based on the checkbox\r\n      this._draggedColumnIndex = this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\r\n      this._getDropHintPositions();\r\n      if (columnReorderProps.onColumnDragStart) {\r\n        columnReorderProps.onColumnDragStart(true);\r\n      }\r\n    } else if (event && this._draggedColumnIndex >= 0) {\r\n      this._resetDropHints();\r\n      this._draggedColumnIndex = -1;\r\n      this._dropHintDetails = {};\r\n      if (columnReorderProps.onColumnDragEnd) {\r\n        const columnDragEndLocation = this._isEventOnHeader(event);\r\n        columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);\r\n      }\r\n    }\r\n  };\r\n\r\n  private _resetDropHints(): void {\r\n    if (this._currentDropHintIndex >= 0) {\r\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\r\n      this._currentDropHintIndex = -1;\r\n    }\r\n  }\r\n\r\n  private _updateDropHintElement(element: HTMLElement, displayProperty: string) {\r\n    (element.childNodes[1] as HTMLElement).style.display = displayProperty;\r\n    (element.childNodes[0] as HTMLElement).style.display = displayProperty;\r\n  }\r\n\r\n  private _getDropHintPositions = (): void => {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    // Safe to assume this is defined since we're handling a drag/drop event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n    let prevX = 0;\r\n    let prevMid = 0;\r\n    let prevRef: HTMLElement;\r\n    const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\r\n    const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\r\n\r\n    for (let i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\r\n      if (this._rootElement.current) {\r\n        const dropHintElement = this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0] as HTMLElement;\r\n        if (dropHintElement) {\r\n          if (i === frozenColumnCountFromStart) {\r\n            prevX = dropHintElement.offsetLeft;\r\n            prevMid = dropHintElement.offsetLeft;\r\n            prevRef = dropHintElement;\r\n          } else {\r\n            const newMid = (dropHintElement.offsetLeft + prevX!) / 2;\r\n            this._dropHintDetails[i - 1] = {\r\n              originX: prevX,\r\n              startX: prevMid!,\r\n              endX: newMid,\r\n              dropHintElementRef: prevRef!,\r\n            };\r\n            prevMid = newMid;\r\n            prevRef = dropHintElement;\r\n            prevX = dropHintElement.offsetLeft;\r\n            if (i === columns.length - frozenColumnCountFromEnd) {\r\n              this._dropHintDetails[i] = {\r\n                originX: prevX,\r\n                startX: prevMid!,\r\n                endX: dropHintElement.offsetLeft,\r\n                dropHintElementRef: prevRef,\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\r\n   */\r\n  private _computeDropHintToBeShown = (clientX: number): void => {\r\n    const isRtl = getRTL(this.props.theme);\r\n    if (this._rootElement.current) {\r\n      const clientRect = this._rootElement.current.getBoundingClientRect();\r\n      const headerOriginX = clientRect.left;\r\n      const eventXRelativePosition = clientX - headerOriginX;\r\n      const currentDropHintIndex = this._currentDropHintIndex;\r\n      if (this._isValidCurrentDropHintIndex()) {\r\n        if (\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex!].startX,\r\n            this._dropHintDetails[currentDropHintIndex!].endX,\r\n          )\r\n        ) {\r\n          return;\r\n        }\r\n      }\r\n      const { columns = NO_COLUMNS } = this.props;\r\n      // Safe to assume this is defined since we're handling a drag/drop event\r\n      const columnReorderProps = this._getColumnReorderProps()!;\r\n      const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\r\n      const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\r\n\r\n      const currentIndex: number = frozenColumnCountFromStart;\r\n      const lastValidColumn = columns.length - frozenColumnCountFromEnd;\r\n      let indexToUpdate = -1;\r\n      if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[currentIndex].endX)) {\r\n        indexToUpdate = currentIndex;\r\n      } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[lastValidColumn].startX)) {\r\n        indexToUpdate = lastValidColumn;\r\n      } else if (this._isValidCurrentDropHintIndex()) {\r\n        if (\r\n          this._dropHintDetails[currentDropHintIndex! + 1] &&\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex! + 1].startX,\r\n            this._dropHintDetails[currentDropHintIndex! + 1].endX,\r\n          )\r\n        ) {\r\n          indexToUpdate = currentDropHintIndex! + 1;\r\n        } else if (\r\n          this._dropHintDetails[currentDropHintIndex! - 1] &&\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex! - 1].startX,\r\n            this._dropHintDetails[currentDropHintIndex! - 1].endX,\r\n          )\r\n        ) {\r\n          indexToUpdate = currentDropHintIndex! - 1;\r\n        }\r\n      }\r\n      if (indexToUpdate === -1) {\r\n        let startIndex = frozenColumnCountFromStart;\r\n        let endIndex = lastValidColumn;\r\n        while (startIndex < endIndex) {\r\n          const middleIndex = Math.ceil((endIndex + startIndex!) / 2);\r\n          if (\r\n            _liesBetween(\r\n              isRtl,\r\n              eventXRelativePosition,\r\n              this._dropHintDetails[middleIndex].startX,\r\n              this._dropHintDetails[middleIndex].endX,\r\n            )\r\n          ) {\r\n            indexToUpdate = middleIndex;\r\n            break;\r\n          } else if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\r\n            endIndex = middleIndex;\r\n          } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\r\n            startIndex = middleIndex;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (indexToUpdate === this._draggedColumnIndex || indexToUpdate === this._draggedColumnIndex + 1) {\r\n        if (this._isValidCurrentDropHintIndex()) {\r\n          this._resetDropHints();\r\n        }\r\n      } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\r\n        this._resetDropHints();\r\n        this._updateDropHintElement(this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\r\n        this._currentDropHintIndex = indexToUpdate;\r\n      }\r\n    }\r\n  };\r\n\r\n  private _isEventOnHeader(event: MouseEvent): ColumnDragEndLocation | undefined {\r\n    if (this._rootElement.current) {\r\n      const clientRect = this._rootElement.current.getBoundingClientRect();\r\n      if (\r\n        event.clientX > clientRect.left &&\r\n        event.clientX < clientRect.right &&\r\n        event.clientY > clientRect.top &&\r\n        event.clientY < clientRect.bottom\r\n      ) {\r\n        return ColumnDragEndLocation.header;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _renderColumnSizer = ({ columnIndex }: IDetailsColumnProps): JSX.Element | null => {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    const column = columns[columnIndex];\r\n    const { columnResizeDetails } = this.state;\r\n    const classNames = this._classNames;\r\n\r\n    return column.isResizable ? (\r\n      <div\r\n        key={`${column.key}_sizer`}\r\n        aria-hidden={true}\r\n        role=\"button\"\r\n        data-is-focusable={false}\r\n        onClick={_stopPropagation}\r\n        data-sizer-index={columnIndex}\r\n        onBlur={this._onSizerBlur}\r\n        className={css(\r\n          classNames.cellSizer,\r\n          columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd,\r\n          {\r\n            [classNames.cellIsResizing]: columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,\r\n          },\r\n        )}\r\n        onDoubleClick={this._onSizerDoubleClick.bind(this, columnIndex)}\r\n      />\r\n    ) : null;\r\n  };\r\n\r\n  private _renderColumnDivider(columnIndex: number): JSX.Element | null {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    const column = columns[columnIndex];\r\n    const { onRenderDivider } = column;\r\n    return onRenderDivider\r\n      ? onRenderDivider({ column, columnIndex }, this._renderColumnSizer)\r\n      : this._renderColumnSizer({ column, columnIndex });\r\n  }\r\n\r\n  private _renderDropHint(dropHintIndex: number): JSX.Element {\r\n    const classNames = this._classNames;\r\n    const IconComponent = this.props.useFastIcons ? FontIcon : Icon;\r\n    return (\r\n      <div key={'dropHintKey'} className={classNames.dropHintStyle} id={`columnDropHint_${dropHintIndex}`}>\r\n        <div\r\n          role=\"presentation\"\r\n          key={`dropHintCircleKey`}\r\n          className={classNames.dropHintCaretStyle}\r\n          data-is-focusable={false}\r\n          data-sizer-index={dropHintIndex}\r\n          aria-hidden={true}\r\n        >\r\n          <IconComponent iconName={'CircleShapeSolid'} />\r\n        </div>\r\n        <div\r\n          key={`dropHintLineKey`}\r\n          aria-hidden={true}\r\n          data-is-focusable={false}\r\n          data-sizer-index={dropHintIndex}\r\n          className={classNames.dropHintLineStyle}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: ITooltipHostProps): JSX.Element => {\r\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\r\n  };\r\n\r\n  /**\r\n   * double click on the column sizer will auto ajust column width\r\n   * to fit the longest content among current rendered rows.\r\n   *\r\n   * @param columnIndex - index of the column user double clicked\r\n   * @param ev - mouse double click event\r\n   */\r\n  private _onSizerDoubleClick(columnIndex: number, ev: React.MouseEvent<HTMLElement>): void {\r\n    const { onColumnAutoResized, columns = NO_COLUMNS } = this.props;\r\n    if (onColumnAutoResized) {\r\n      onColumnAutoResized(columns[columnIndex], columnIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the select all toggle is clicked.\r\n   */\r\n  private _onSelectAllClicked = (): void => {\r\n    const { selection } = this.props;\r\n\r\n    if (selection) {\r\n      selection.toggleAllSelected();\r\n    }\r\n  };\r\n\r\n  private _onRootMouseDown = (ev: MouseEvent): void => {\r\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\r\n    const columnIndex = Number(columnIndexAttr);\r\n    const { columns = NO_COLUMNS } = this.props;\r\n\r\n    if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\r\n      // Ignore anything except the primary button.\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      columnResizeDetails: {\r\n        columnIndex: columnIndex,\r\n        columnMinWidth: columns[columnIndex].calculatedWidth!,\r\n        originX: ev.clientX,\r\n      },\r\n    });\r\n\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  };\r\n\r\n  private _onRootMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const { columnResizeDetails, isSizing } = this.state;\r\n\r\n    if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\r\n      this.setState({ isSizing: true });\r\n    }\r\n  };\r\n\r\n  private _onRootKeyDown = (ev: KeyboardEvent): void => {\r\n    const { columnResizeDetails, isSizing } = this.state;\r\n    const { columns = NO_COLUMNS, onColumnResized } = this.props;\r\n\r\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\r\n\r\n    if (!columnIndexAttr || isSizing) {\r\n      return;\r\n    }\r\n\r\n    const columnIndex = Number(columnIndexAttr);\r\n\r\n    if (!columnResizeDetails) {\r\n      // eslint-disable-next-line deprecation/deprecation\r\n      if (ev.which === KeyCodes.enter) {\r\n        this.setState({\r\n          columnResizeDetails: {\r\n            columnIndex: columnIndex,\r\n            columnMinWidth: columns[columnIndex].calculatedWidth!,\r\n          },\r\n        });\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n      }\r\n    } else {\r\n      let increment: number | undefined;\r\n\r\n      // eslint-disable-next-line deprecation/deprecation\r\n      if (ev.which === KeyCodes.enter) {\r\n        this.setState({\r\n          columnResizeDetails: undefined,\r\n        });\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n        // eslint-disable-next-line deprecation/deprecation\r\n      } else if (ev.which === KeyCodes.left) {\r\n        increment = getRTL(this.props.theme) ? 1 : -1;\r\n        // eslint-disable-next-line deprecation/deprecation\r\n      } else if (ev.which === KeyCodes.right) {\r\n        increment = getRTL(this.props.theme) ? -1 : 1;\r\n      }\r\n\r\n      if (increment) {\r\n        if (!ev.shiftKey) {\r\n          increment *= 10;\r\n        }\r\n\r\n        this.setState({\r\n          columnResizeDetails: {\r\n            ...columnResizeDetails,\r\n            columnMinWidth: columnResizeDetails.columnMinWidth + increment,\r\n          },\r\n        });\r\n\r\n        if (onColumnResized) {\r\n          onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\r\n        }\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * mouse move event handler in the header\r\n   * it will set isSizing state to true when user clicked on the sizer and move the mouse.\r\n   *\r\n   * @param ev - mouse move event\r\n   */\r\n  private _onSizerMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const {\r\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\r\n      // but firefox doesn't support it, so we set the default value when it is not defined.\r\n      buttons,\r\n    } = ev;\r\n    const { onColumnIsSizingChanged, onColumnResized, columns = NO_COLUMNS } = this.props;\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\r\n      // cancel mouse down event and return early when the primary button is not pressed\r\n      this._onSizerMouseUp(ev);\r\n      return;\r\n    }\r\n\r\n    if (ev.clientX !== columnResizeDetails!.originX) {\r\n      if (onColumnIsSizingChanged) {\r\n        onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], true);\r\n      }\r\n    }\r\n\r\n    if (onColumnResized) {\r\n      let movement = ev.clientX - columnResizeDetails!.originX!;\r\n\r\n      if (getRTL(this.props.theme)) {\r\n        movement = -movement;\r\n      }\r\n\r\n      onColumnResized(\r\n        columns[columnResizeDetails!.columnIndex],\r\n        columnResizeDetails!.columnMinWidth + movement,\r\n        columnResizeDetails!.columnIndex,\r\n      );\r\n    }\r\n  };\r\n\r\n  private _onSizerBlur = (ev: React.FocusEvent<HTMLElement>): void => {\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    if (columnResizeDetails) {\r\n      this.setState({\r\n        columnResizeDetails: undefined,\r\n        isSizing: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * mouse up event handler in the header\r\n   * clear the resize related state.\r\n   * This is to ensure we can catch double click event\r\n   *\r\n   * @param ev - mouse up event\r\n   */\r\n  private _onSizerMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const { columns = NO_COLUMNS, onColumnIsSizingChanged } = this.props;\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    this.setState({\r\n      columnResizeDetails: undefined,\r\n      isSizing: false,\r\n    });\r\n\r\n    if (onColumnIsSizingChanged) {\r\n      onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], false);\r\n    }\r\n  };\r\n\r\n  private _onSelectionChanged(): void {\r\n    const isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\r\n\r\n    if (this.state.isAllSelected !== isAllSelected) {\r\n      this.setState({\r\n        isAllSelected: isAllSelected,\r\n      });\r\n    }\r\n  }\r\n\r\n  private _onToggleCollapseAll = (): void => {\r\n    const { onToggleCollapseAll } = this.props;\r\n    const newCollapsed = !this.state.isAllCollapsed;\r\n    this.setState({\r\n      isAllCollapsed: newCollapsed,\r\n    });\r\n    if (onToggleCollapseAll) {\r\n      onToggleCollapseAll(newCollapsed);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _liesBetween(rtl: boolean, target: number, left: number, right: number): boolean {\r\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\r\n}\r\nfunction _isBefore(rtl: boolean, a: number, b: number): boolean {\r\n  return rtl ? a >= b : a <= b;\r\n}\r\nfunction _isAfter(rtl: boolean, a: number, b: number): boolean {\r\n  return rtl ? a <= b : a >= b;\r\n}\r\n\r\nfunction _stopPropagation(ev: React.MouseEvent<HTMLElement>): void {\r\n  ev.stopPropagation();\r\n}\r\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}