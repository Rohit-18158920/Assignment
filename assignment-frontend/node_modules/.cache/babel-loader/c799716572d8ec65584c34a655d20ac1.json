{"ast":null,"code":"import * as React from 'react';\nimport { DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, DATAKTP_ARIA_TARGET } from '../../utilities/keytips/index';\nimport { useKeytipData } from './useKeytipData';\n/**\n * Hook that creates a ref which is used for passing to Keytip target element.\n * The ref will handle setting the attributes needed for Keytip to work.\n */\n\nexport function useKeytipRef(options) {\n  var _a = useKeytipData(options),\n      keytipId = _a.keytipId,\n      ariaDescribedBy = _a.ariaDescribedBy;\n\n  var contentRef = React.useCallback(function (contentElement) {\n    if (!contentElement) {\n      return;\n    }\n\n    var targetElement = findFirstElement(contentElement, DATAKTP_TARGET) || contentElement;\n    var executeElement = findFirstElement(contentElement, DATAKTP_EXECUTE_TARGET) || targetElement;\n    var ariaElement = findFirstElement(contentElement, DATAKTP_ARIA_TARGET) || executeElement;\n    setAttribute(targetElement, DATAKTP_TARGET, keytipId);\n    setAttribute(executeElement, DATAKTP_EXECUTE_TARGET, keytipId);\n    setAttribute(ariaElement, 'aria-describedby', ariaDescribedBy, true);\n  }, [keytipId, ariaDescribedBy]);\n  return contentRef;\n}\nexport function setAttribute(element, attributeName, attributeValue, append) {\n  if (append === void 0) {\n    append = false;\n  }\n\n  if (element && attributeValue) {\n    var value = attributeValue;\n\n    if (append) {\n      var currentValue = element.getAttribute(attributeName);\n\n      if (currentValue && currentValue.indexOf(attributeValue) === -1) {\n        value = currentValue + \" \" + attributeValue;\n      }\n    }\n\n    element.setAttribute(attributeName, value);\n  }\n}\n\nfunction findFirstElement(rootElement, dataAttribute) {\n  return rootElement.querySelector(\"[\" + dataAttribute + \"]\");\n}","map":{"version":3,"sources":["components/KeytipData/useKeytipRef.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SAAS,cAAT,EAAyB,sBAAzB,EAAiD,mBAAjD,QAA4E,+BAA5E;AACA,SAAS,aAAT,QAA8B,iBAA9B;AAEA;;;AAGG;;AACH,OAAM,SAAU,YAAV,CACJ,OADI,EACsB;AAEpB,MAAA,EAAA,GAAA,aAAA,CAAA,OAAA,CAAA;AAAA,MAAE,QAAA,GAAA,EAAA,CAAA,QAAF;AAAA,MAAY,eAAA,GAAA,EAAA,CAAA,eAAZ;;AAEN,MAAM,UAAU,GAAwB,KAAK,CAAC,WAAN,CACtC,UAAC,cAAD,EAAgC;AAC9B,QAAI,CAAC,cAAL,EAAqB;AACnB;AACD;;AAED,QAAM,aAAa,GAAG,gBAAgB,CAAC,cAAD,EAAiB,cAAjB,CAAhB,IAAoD,cAA1E;AACA,QAAM,cAAc,GAAG,gBAAgB,CAAC,cAAD,EAAiB,sBAAjB,CAAhB,IAA4D,aAAnF;AACA,QAAM,WAAW,GAAG,gBAAgB,CAAC,cAAD,EAAiB,mBAAjB,CAAhB,IAAyD,cAA7E;AAEA,IAAA,YAAY,CAAC,aAAD,EAAgB,cAAhB,EAAgC,QAAhC,CAAZ;AACA,IAAA,YAAY,CAAC,cAAD,EAAiB,sBAAjB,EAAyC,QAAzC,CAAZ;AACA,IAAA,YAAY,CAAC,WAAD,EAAc,kBAAd,EAAkC,eAAlC,EAAmD,IAAnD,CAAZ;AACD,GAbqC,EActC,CAAC,QAAD,EAAW,eAAX,CAdsC,CAAxC;AAiBA,SAAO,UAAP;AACD;AAED,OAAM,SAAU,YAAV,CACJ,OADI,EAEJ,aAFI,EAGJ,cAHI,EAIJ,MAJI,EAImB;AAAvB,MAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,KAAA;AAAuB;;AAEvB,MAAI,OAAO,IAAI,cAAf,EAA+B;AAC7B,QAAI,KAAK,GAAG,cAAZ;;AACA,QAAI,MAAJ,EAAY;AACV,UAAM,YAAY,GAAG,OAAO,CAAC,YAAR,CAAqB,aAArB,CAArB;;AACA,UAAI,YAAY,IAAI,YAAY,CAAC,OAAb,CAAqB,cAArB,MAAyC,CAAC,CAA9D,EAAiE;AAC/D,QAAA,KAAK,GAAM,YAAY,GAAA,GAAZ,GAAgB,cAA3B;AACD;AACF;;AAED,IAAA,OAAO,CAAC,YAAR,CAAqB,aAArB,EAAoC,KAApC;AACD;AACF;;AAED,SAAS,gBAAT,CAA0B,WAA1B,EAAoD,aAApD,EAAyE;AACvE,SAAO,WAAW,CAAC,aAAZ,CAA0B,MAAI,aAAJ,GAAiB,GAA3C,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { KeytipDataOptions } from './KeytipData.types';\nimport { DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, DATAKTP_ARIA_TARGET } from '../../utilities/keytips/index';\nimport { useKeytipData } from './useKeytipData';\n\n/**\n * Hook that creates a ref which is used for passing to Keytip target element.\n * The ref will handle setting the attributes needed for Keytip to work.\n */\nexport function useKeytipRef<TElement extends HTMLElement = HTMLElement>(\n  options: KeytipDataOptions,\n): React.Ref<TElement> {\n  const { keytipId, ariaDescribedBy } = useKeytipData(options);\n\n  const contentRef: React.Ref<TElement> = React.useCallback(\n    (contentElement: TElement | null): void => {\n      if (!contentElement) {\n        return;\n      }\n\n      const targetElement = findFirstElement(contentElement, DATAKTP_TARGET) || contentElement;\n      const executeElement = findFirstElement(contentElement, DATAKTP_EXECUTE_TARGET) || targetElement;\n      const ariaElement = findFirstElement(contentElement, DATAKTP_ARIA_TARGET) || executeElement;\n\n      setAttribute(targetElement, DATAKTP_TARGET, keytipId);\n      setAttribute(executeElement, DATAKTP_EXECUTE_TARGET, keytipId);\n      setAttribute(ariaElement, 'aria-describedby', ariaDescribedBy, true);\n    },\n    [keytipId, ariaDescribedBy],\n  );\n\n  return contentRef;\n}\n\nexport function setAttribute(\n  element: HTMLElement | null,\n  attributeName: string,\n  attributeValue: string | undefined,\n  append: boolean = false,\n): void {\n  if (element && attributeValue) {\n    let value = attributeValue;\n    if (append) {\n      const currentValue = element.getAttribute(attributeName);\n      if (currentValue && currentValue.indexOf(attributeValue) === -1) {\n        value = `${currentValue} ${attributeValue}`;\n      }\n    }\n\n    element.setAttribute(attributeName, value);\n  }\n}\n\nfunction findFirstElement(rootElement: HTMLElement, dataAttribute: string): HTMLElement | null {\n  return rootElement.querySelector(`[${dataAttribute}]`);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}