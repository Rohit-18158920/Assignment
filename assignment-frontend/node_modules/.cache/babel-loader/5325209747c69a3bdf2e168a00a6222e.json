{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '../../Utilities';\nimport { CommandButton } from '../../Button';\n\nvar ButtonGridCell =\n/** @class */\nfunction (_super) {\n  __extends(ButtonGridCell, _super);\n\n  function ButtonGridCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._onClick = function () {\n      var _a = _this.props,\n          onClick = _a.onClick,\n          disabled = _a.disabled,\n          item = _a.item;\n\n      if (onClick && !disabled) {\n        onClick(item);\n      }\n    };\n\n    _this._onMouseEnter = function (ev) {\n      var _a = _this.props,\n          onHover = _a.onHover,\n          disabled = _a.disabled,\n          item = _a.item,\n          onMouseEnter = _a.onMouseEnter;\n      var didUpdateOnEnter = onMouseEnter && onMouseEnter(ev);\n\n      if (!didUpdateOnEnter && onHover && !disabled) {\n        onHover(item);\n      }\n    };\n\n    _this._onMouseMove = function (ev) {\n      var _a = _this.props,\n          onHover = _a.onHover,\n          disabled = _a.disabled,\n          item = _a.item,\n          onMouseMove = _a.onMouseMove;\n      var didUpdateOnMove = onMouseMove && onMouseMove(ev);\n\n      if (!didUpdateOnMove && onHover && !disabled) {\n        onHover(item);\n      }\n    };\n\n    _this._onMouseLeave = function (ev) {\n      var _a = _this.props,\n          onHover = _a.onHover,\n          disabled = _a.disabled,\n          onMouseLeave = _a.onMouseLeave;\n      var didUpdateOnLeave = onMouseLeave && onMouseLeave(ev);\n\n      if (!didUpdateOnLeave && onHover && !disabled) {\n        onHover();\n      }\n    };\n\n    _this._onFocus = function () {\n      var _a = _this.props,\n          onFocus = _a.onFocus,\n          disabled = _a.disabled,\n          item = _a.item;\n\n      if (onFocus && !disabled) {\n        onFocus(item);\n      }\n    };\n\n    return _this;\n  }\n\n  ButtonGridCell.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        item = _b.item,\n        id = _b.id,\n        className = _b.className,\n        role = _b.role,\n        selected = _b.selected,\n        disabled = _b.disabled,\n        onRenderItem = _b.onRenderItem,\n        cellDisabledStyle = _b.cellDisabledStyle,\n        cellIsSelectedStyle = _b.cellIsSelectedStyle,\n        index = _b.index,\n        label = _b.label,\n        getClassNames = _b.getClassNames;\n    return React.createElement(CommandButton, {\n      id: id,\n      \"data-index\": index,\n      \"data-is-focusable\": true,\n      disabled: disabled,\n      className: css(className, (_a = {}, _a['' + cellIsSelectedStyle] = selected, _a['' + cellDisabledStyle] = disabled, _a)),\n      onClick: this._onClick,\n      onMouseEnter: this._onMouseEnter,\n      onMouseMove: this._onMouseMove,\n      onMouseLeave: this._onMouseLeave,\n      onFocus: this._onFocus,\n      role: role,\n      \"aria-selected\": selected,\n      ariaLabel: label,\n      title: label,\n      getClassNames: getClassNames\n    }, onRenderItem(item));\n  };\n\n  ButtonGridCell.defaultProps = {\n    disabled: false\n  };\n  return ButtonGridCell;\n}(React.Component);\n\nexport { ButtonGridCell };\n/**\n * @deprecated - use ButtonGridCell instead\n */\n\nexport var GridCell = ButtonGridCell;","map":{"version":3,"sources":["utilities/ButtonGrid/ButtonGridCell.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '../../Utilities';\nimport { IButtonGridCellProps } from './ButtonGridCell.types';\nimport { CommandButton } from '../../Button';\n\nexport class ButtonGridCell<T, P extends IButtonGridCellProps<T>> extends React.Component<P, {}> {\n  public static defaultProps = {\n    disabled: false,\n  };\n\n  public render(): JSX.Element {\n    const {\n      item,\n      id,\n      className,\n      role,\n      selected,\n      disabled,\n      onRenderItem,\n      cellDisabledStyle,\n      cellIsSelectedStyle,\n      index,\n      label,\n      getClassNames,\n    } = this.props;\n\n    return (\n      <CommandButton\n        id={id}\n        data-index={index}\n        data-is-focusable={true}\n        disabled={disabled}\n        className={css(className, {\n          ['' + cellIsSelectedStyle]: selected,\n          ['' + cellDisabledStyle]: disabled,\n        })}\n        onClick={this._onClick}\n        onMouseEnter={this._onMouseEnter}\n        onMouseMove={this._onMouseMove}\n        onMouseLeave={this._onMouseLeave}\n        onFocus={this._onFocus}\n        role={role}\n        aria-selected={selected}\n        ariaLabel={label}\n        title={label}\n        getClassNames={getClassNames}\n      >\n        {onRenderItem(item)}\n      </CommandButton>\n    );\n  }\n\n  private _onClick = (): void => {\n    const { onClick, disabled, item } = this.props as P;\n\n    if (onClick && !disabled) {\n      onClick(item);\n    }\n  };\n\n  private _onMouseEnter = (ev: React.MouseEvent<HTMLButtonElement>): void => {\n    const { onHover, disabled, item, onMouseEnter } = this.props as P;\n\n    const didUpdateOnEnter = onMouseEnter && onMouseEnter(ev);\n\n    if (!didUpdateOnEnter && onHover && !disabled) {\n      onHover(item);\n    }\n  };\n\n  private _onMouseMove = (ev: React.MouseEvent<HTMLButtonElement>): void => {\n    const { onHover, disabled, item, onMouseMove } = this.props as P;\n\n    const didUpdateOnMove = onMouseMove && onMouseMove(ev);\n\n    if (!didUpdateOnMove && onHover && !disabled) {\n      onHover(item);\n    }\n  };\n\n  private _onMouseLeave = (ev: React.MouseEvent<HTMLButtonElement>): void => {\n    const { onHover, disabled, onMouseLeave } = this.props as P;\n\n    const didUpdateOnLeave = onMouseLeave && onMouseLeave(ev);\n\n    if (!didUpdateOnLeave && onHover && !disabled) {\n      onHover();\n    }\n  };\n\n  private _onFocus = (): void => {\n    const { onFocus, disabled, item } = this.props as P;\n\n    if (onFocus && !disabled) {\n      onFocus(item);\n    }\n  };\n}\n\n/**\n * @deprecated - use ButtonGridCell instead\n */\nexport const GridCell = ButtonGridCell;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}