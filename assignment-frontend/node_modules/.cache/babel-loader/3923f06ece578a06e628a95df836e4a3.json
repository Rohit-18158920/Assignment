{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n}; // Store the theming state in __themeState__ global scope for reuse in the case of duplicate\n// load-themed-styles hosted on the page.\n\n\nvar _root = typeof window === 'undefined' ? global : window; // eslint-disable-line @typescript-eslint/no-explicit-any\n// Nonce string to inject into script tag if one provided. This is used in CSP (Content Security Policy).\n\n\nvar _styleNonce = _root && _root.CSPSettings && _root.CSPSettings.nonce;\n\nvar _themeState = initializeThemeState();\n/**\n * Matches theming tokens. For example, \"[theme: themeSlotName, default: #FFF]\" (including the quotes).\n */\n\n\nvar _themeTokenRegex = /[\\'\\\"]\\[theme:\\s*(\\w+)\\s*(?:\\,\\s*default:\\s*([\\\\\"\\']?[\\.\\,\\(\\)\\#\\-\\s\\w]*[\\.\\,\\(\\)\\#\\-\\w][\\\"\\']?))?\\s*\\][\\'\\\"]/g;\n\nvar now = function () {\n  return typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n};\n\nfunction measure(func) {\n  var start = now();\n  func();\n  var end = now();\n  _themeState.perf.duration += end - start;\n}\n/**\n * initialize global state object\n */\n\n\nfunction initializeThemeState() {\n  var state = _root.__themeState__ || {\n    theme: undefined,\n    lastStyleElement: undefined,\n    registeredStyles: []\n  };\n\n  if (!state.runState) {\n    state = __assign(__assign({}, state), {\n      perf: {\n        count: 0,\n        duration: 0\n      },\n      runState: {\n        flushTimer: 0,\n        mode: 0\n        /* sync */\n        ,\n        buffer: []\n      }\n    });\n  }\n\n  if (!state.registeredThemableStyles) {\n    state = __assign(__assign({}, state), {\n      registeredThemableStyles: []\n    });\n  }\n\n  _root.__themeState__ = state;\n  return state;\n}\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load\n * event is fired.\n * @param {string | ThemableArray} styles Themable style text to register.\n * @param {boolean} loadAsync When true, always load styles in async mode, irrespective of current sync mode.\n */\n\n\nexport function loadStyles(styles, loadAsync) {\n  if (loadAsync === void 0) {\n    loadAsync = false;\n  }\n\n  measure(function () {\n    var styleParts = Array.isArray(styles) ? styles : splitStyles(styles);\n    var _a = _themeState.runState,\n        mode = _a.mode,\n        buffer = _a.buffer,\n        flushTimer = _a.flushTimer;\n\n    if (loadAsync || mode === 1\n    /* async */\n    ) {\n        buffer.push(styleParts);\n\n        if (!flushTimer) {\n          _themeState.runState.flushTimer = asyncLoadStyles();\n        }\n      } else {\n      applyThemableStyles(styleParts);\n    }\n  });\n}\n/**\n * Allows for customizable loadStyles logic. e.g. for server side rendering application\n * @param {(processedStyles: string, rawStyles?: string | ThemableArray) => void}\n * a loadStyles callback that gets called when styles are loaded or reloaded\n */\n\nexport function configureLoadStyles(loadStylesFn) {\n  _themeState.loadStyles = loadStylesFn;\n}\n/**\n * Configure run mode of load-themable-styles\n * @param mode load-themable-styles run mode, async or sync\n */\n\nexport function configureRunMode(mode) {\n  _themeState.runState.mode = mode;\n}\n/**\n * external code can call flush to synchronously force processing of currently buffered styles\n */\n\nexport function flush() {\n  measure(function () {\n    var styleArrays = _themeState.runState.buffer.slice();\n\n    _themeState.runState.buffer = [];\n    var mergedStyleArray = [].concat.apply([], styleArrays);\n\n    if (mergedStyleArray.length > 0) {\n      applyThemableStyles(mergedStyleArray);\n    }\n  });\n}\n/**\n * register async loadStyles\n */\n\nfunction asyncLoadStyles() {\n  return setTimeout(function () {\n    _themeState.runState.flushTimer = 0;\n    flush();\n  }, 0);\n}\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load event\n * is fired.\n * @param {string} styleText Style to register.\n * @param {IStyleRecord} styleRecord Existing style record to re-apply.\n */\n\n\nfunction applyThemableStyles(stylesArray, styleRecord) {\n  if (_themeState.loadStyles) {\n    _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);\n  } else {\n    registerStyles(stylesArray);\n  }\n}\n/**\n * Registers a set theme tokens to find and replace. If styles were already registered, they will be\n * replaced.\n * @param {theme} theme JSON object of theme tokens to values.\n */\n\n\nexport function loadTheme(theme) {\n  _themeState.theme = theme; // reload styles.\n\n  reloadStyles();\n}\n/**\n * Clear already registered style elements and style records in theme_State object\n * @param option - specify which group of registered styles should be cleared.\n * Default to be both themable and non-themable styles will be cleared\n */\n\nexport function clearStyles(option) {\n  if (option === void 0) {\n    option = 3\n    /* all */\n    ;\n  }\n\n  if (option === 3\n  /* all */\n  || option === 2\n  /* onlyNonThemable */\n  ) {\n      clearStylesInternal(_themeState.registeredStyles);\n      _themeState.registeredStyles = [];\n    }\n\n  if (option === 3\n  /* all */\n  || option === 1\n  /* onlyThemable */\n  ) {\n      clearStylesInternal(_themeState.registeredThemableStyles);\n      _themeState.registeredThemableStyles = [];\n    }\n}\n\nfunction clearStylesInternal(records) {\n  records.forEach(function (styleRecord) {\n    var styleElement = styleRecord && styleRecord.styleElement;\n\n    if (styleElement && styleElement.parentElement) {\n      styleElement.parentElement.removeChild(styleElement);\n    }\n  });\n}\n/**\n * Reloads styles.\n */\n\n\nfunction reloadStyles() {\n  if (_themeState.theme) {\n    var themableStyles = [];\n\n    for (var _i = 0, _a = _themeState.registeredThemableStyles; _i < _a.length; _i++) {\n      var styleRecord = _a[_i];\n      themableStyles.push(styleRecord.themableStyle);\n    }\n\n    if (themableStyles.length > 0) {\n      clearStyles(1\n      /* onlyThemable */\n      );\n      applyThemableStyles([].concat.apply([], themableStyles));\n    }\n  }\n}\n/**\n * Find theme tokens and replaces them with provided theme values.\n * @param {string} styles Tokenized styles to fix.\n */\n\n\nexport function detokenize(styles) {\n  if (styles) {\n    styles = resolveThemableArray(splitStyles(styles)).styleString;\n  }\n\n  return styles;\n}\n/**\n * Resolves ThemingInstruction objects in an array and joins the result into a string.\n * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.\n */\n\nfunction resolveThemableArray(splitStyleArray) {\n  var theme = _themeState.theme;\n  var themable = false; // Resolve the array of theming instructions to an array of strings.\n  // Then join the array to produce the final CSS string.\n\n  var resolvedArray = (splitStyleArray || []).map(function (currentValue) {\n    var themeSlot = currentValue.theme;\n\n    if (themeSlot) {\n      themable = true; // A theming annotation. Resolve it.\n\n      var themedValue = theme ? theme[themeSlot] : undefined;\n      var defaultValue = currentValue.defaultValue || 'inherit'; // Warn to console if we hit an unthemed value even when themes are provided, but only if \"DEBUG\" is true.\n      // Allow the themedValue to be undefined to explicitly request the default value.\n\n      if (theme && !themedValue && console && !(themeSlot in theme) && typeof DEBUG !== 'undefined' && DEBUG) {\n        console.warn(\"Theming value not provided for \\\"\" + themeSlot + \"\\\". Falling back to \\\"\" + defaultValue + \"\\\".\");\n      }\n\n      return themedValue || defaultValue;\n    } else {\n      // A non-themable string. Preserve it.\n      return currentValue.rawString;\n    }\n  });\n  return {\n    styleString: resolvedArray.join(''),\n    themable: themable\n  };\n}\n/**\n * Split tokenized CSS into an array of strings and theme specification objects\n * @param {string} styles Tokenized styles to split.\n */\n\n\nexport function splitStyles(styles) {\n  var result = [];\n\n  if (styles) {\n    var pos = 0; // Current position in styles.\n\n    var tokenMatch = void 0;\n\n    while (tokenMatch = _themeTokenRegex.exec(styles)) {\n      var matchIndex = tokenMatch.index;\n\n      if (matchIndex > pos) {\n        result.push({\n          rawString: styles.substring(pos, matchIndex)\n        });\n      }\n\n      result.push({\n        theme: tokenMatch[1],\n        defaultValue: tokenMatch[2] // May be undefined\n\n      }); // index of the first character after the current match\n\n      pos = _themeTokenRegex.lastIndex;\n    } // Push the rest of the string after the last match.\n\n\n    result.push({\n      rawString: styles.substring(pos)\n    });\n  }\n\n  return result;\n}\n/**\n * Registers a set of style text. If it is registered too early, we will register it when the\n * window.load event is fired.\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\n */\n\nfunction registerStyles(styleArray) {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.getElementsByTagName('head')[0];\n  var styleElement = document.createElement('style');\n\n  var _a = resolveThemableArray(styleArray),\n      styleString = _a.styleString,\n      themable = _a.themable;\n\n  styleElement.setAttribute('data-load-themed-styles', 'true');\n\n  if (_styleNonce) {\n    styleElement.setAttribute('nonce', _styleNonce);\n  }\n\n  styleElement.appendChild(document.createTextNode(styleString));\n  _themeState.perf.count++;\n  head.appendChild(styleElement);\n  var ev = document.createEvent('HTMLEvents');\n  ev.initEvent('styleinsert', true\n  /* bubbleEvent */\n  , false\n  /* cancelable */\n  );\n  ev.args = {\n    newStyle: styleElement\n  };\n  document.dispatchEvent(ev);\n  var record = {\n    styleElement: styleElement,\n    themableStyle: styleArray\n  };\n\n  if (themable) {\n    _themeState.registeredThemableStyles.push(record);\n  } else {\n    _themeState.registeredStyles.push(record);\n  }\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * An IThemingInstruction can specify a rawString to be preserved or a theme slot and a default value\r\n * to use if that slot is not specified by the theme.\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-use-before-define */\r\n\r\n// Declaring a global here in case that the execution environment is Node.js (without importing the\r\n// entire node.js d.ts for now)\r\ndeclare let global: any; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n\r\nexport interface IThemingInstruction {\r\n  theme?: string;\r\n  defaultValue?: string;\r\n  rawString?: string;\r\n}\r\n\r\nexport type ThemableArray = IThemingInstruction[];\r\n\r\nexport interface ITheme {\r\n  [key: string]: string;\r\n}\r\n\r\ninterface IStyleSheet {\r\n  cssText: string;\r\n}\r\n\r\ninterface IExtendedHtmlStyleElement extends HTMLStyleElement {\r\n  styleSheet: IStyleSheet;\r\n}\r\n\r\n/**\r\n * Performance Measurement of loading styles\r\n */\r\ninterface IMeasurement {\r\n  /**\r\n   * Count of style element injected, which is the slow operation in IE\r\n   */\r\n  count: number;\r\n  /**\r\n   * Total duration of all loadStyles exections\r\n   */\r\n  duration: number;\r\n}\r\n\r\ninterface IRunState {\r\n  mode: Mode;\r\n  buffer: ThemableArray[];\r\n  flushTimer: number;\r\n}\r\n\r\ninterface IThemeState {\r\n  theme: ITheme | undefined;\r\n  lastStyleElement: IExtendedHtmlStyleElement;\r\n  registeredStyles: IStyleRecord[]; // records of already registered non-themable styles\r\n  registeredThemableStyles: IStyleRecord[]; // records of already registered themable styles\r\n  loadStyles: ((processedStyles: string, rawStyles?: string | ThemableArray) => void) | undefined;\r\n  perf: IMeasurement;\r\n  runState: IRunState;\r\n}\r\n\r\ninterface IStyleRecord {\r\n  styleElement: Element;\r\n  themableStyle: ThemableArray;\r\n}\r\n\r\ninterface ICustomEvent<T> extends Event {\r\n  args?: T;\r\n}\r\n\r\n/**\r\n * object returned from resolveThemableArray function\r\n */\r\ninterface IThemableArrayResolveResult {\r\n  /** this string is the processed styles in string */\r\n  styleString: string;\r\n\r\n  /** this boolean indicates if this style array is themable */\r\n  themable: boolean;\r\n}\r\n\r\n/**\r\n * In sync mode, styles are registered as style elements synchronously with loadStyles() call.\r\n * In async mode, styles are buffered and registered as batch in async timer for performance purpose.\r\n */\r\nexport const enum Mode {\r\n  sync,\r\n  async\r\n}\r\n\r\n/**\r\n * Themable styles and non-themable styles are tracked separately\r\n * Specify ClearStyleOptions when calling clearStyles API to specify which group of registered styles should be cleared.\r\n */\r\nexport const enum ClearStyleOptions {\r\n  /** only themable styles will be cleared */\r\n  onlyThemable = 1,\r\n  /** only non-themable styles will be cleared */\r\n  onlyNonThemable = 2,\r\n  /** both themable and non-themable styles will be cleared */\r\n  all = 3\r\n}\r\n\r\n// Store the theming state in __themeState__ global scope for reuse in the case of duplicate\r\n// load-themed-styles hosted on the page.\r\nconst _root: any = typeof window === 'undefined' ? global : window; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n\r\n// Nonce string to inject into script tag if one provided. This is used in CSP (Content Security Policy).\r\nconst _styleNonce: string = _root && _root.CSPSettings && _root.CSPSettings.nonce;\r\n\r\nconst _themeState: IThemeState = initializeThemeState();\r\n\r\n/**\r\n * Matches theming tokens. For example, \"[theme: themeSlotName, default: #FFF]\" (including the quotes).\r\n */\r\nconst _themeTokenRegex: RegExp = /[\\'\\\"]\\[theme:\\s*(\\w+)\\s*(?:\\,\\s*default:\\s*([\\\\\"\\']?[\\.\\,\\(\\)\\#\\-\\s\\w]*[\\.\\,\\(\\)\\#\\-\\w][\\\"\\']?))?\\s*\\][\\'\\\"]/g;\r\n\r\nconst now: () => number = () =>\r\n  typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\r\n\r\nfunction measure(func: () => void): void {\r\n  const start: number = now();\r\n  func();\r\n  const end: number = now();\r\n  _themeState.perf.duration += end - start;\r\n}\r\n\r\n/**\r\n * initialize global state object\r\n */\r\nfunction initializeThemeState(): IThemeState {\r\n  let state: IThemeState = _root.__themeState__ || {\r\n    theme: undefined,\r\n    lastStyleElement: undefined,\r\n    registeredStyles: []\r\n  };\r\n\r\n  if (!state.runState) {\r\n    state = {\r\n      ...state,\r\n      perf: {\r\n        count: 0,\r\n        duration: 0\r\n      },\r\n      runState: {\r\n        flushTimer: 0,\r\n        mode: Mode.sync,\r\n        buffer: []\r\n      }\r\n    };\r\n  }\r\n  if (!state.registeredThemableStyles) {\r\n    state = {\r\n      ...state,\r\n      registeredThemableStyles: []\r\n    };\r\n  }\r\n  _root.__themeState__ = state;\r\n  return state;\r\n}\r\n\r\n/**\r\n * Loads a set of style text. If it is registered too early, we will register it when the window.load\r\n * event is fired.\r\n * @param {string | ThemableArray} styles Themable style text to register.\r\n * @param {boolean} loadAsync When true, always load styles in async mode, irrespective of current sync mode.\r\n */\r\nexport function loadStyles(styles: string | ThemableArray, loadAsync: boolean = false): void {\r\n  measure(() => {\r\n    const styleParts: ThemableArray = Array.isArray(styles) ? styles : splitStyles(styles);\r\n    const { mode, buffer, flushTimer } = _themeState.runState;\r\n    if (loadAsync || mode === Mode.async) {\r\n      buffer.push(styleParts);\r\n      if (!flushTimer) {\r\n        _themeState.runState.flushTimer = asyncLoadStyles();\r\n      }\r\n    } else {\r\n      applyThemableStyles(styleParts);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Allows for customizable loadStyles logic. e.g. for server side rendering application\r\n * @param {(processedStyles: string, rawStyles?: string | ThemableArray) => void}\r\n * a loadStyles callback that gets called when styles are loaded or reloaded\r\n */\r\nexport function configureLoadStyles(\r\n  loadStylesFn: ((processedStyles: string, rawStyles?: string | ThemableArray) => void) | undefined\r\n): void {\r\n  _themeState.loadStyles = loadStylesFn;\r\n}\r\n\r\n/**\r\n * Configure run mode of load-themable-styles\r\n * @param mode load-themable-styles run mode, async or sync\r\n */\r\nexport function configureRunMode(mode: Mode): void {\r\n  _themeState.runState.mode = mode;\r\n}\r\n\r\n/**\r\n * external code can call flush to synchronously force processing of currently buffered styles\r\n */\r\nexport function flush(): void {\r\n  measure(() => {\r\n    const styleArrays: ThemableArray[] = _themeState.runState.buffer.slice();\r\n    _themeState.runState.buffer = [];\r\n    const mergedStyleArray: ThemableArray = ([] as ThemableArray).concat.apply([], styleArrays);\r\n    if (mergedStyleArray.length > 0) {\r\n      applyThemableStyles(mergedStyleArray);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * register async loadStyles\r\n */\r\nfunction asyncLoadStyles(): number {\r\n  return setTimeout(() => {\r\n    _themeState.runState.flushTimer = 0;\r\n    flush();\r\n  }, 0);\r\n}\r\n\r\n/**\r\n * Loads a set of style text. If it is registered too early, we will register it when the window.load event\r\n * is fired.\r\n * @param {string} styleText Style to register.\r\n * @param {IStyleRecord} styleRecord Existing style record to re-apply.\r\n */\r\nfunction applyThemableStyles(stylesArray: ThemableArray, styleRecord?: IStyleRecord): void {\r\n  if (_themeState.loadStyles) {\r\n    _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);\r\n  } else {\r\n    registerStyles(stylesArray);\r\n  }\r\n}\r\n\r\n/**\r\n * Registers a set theme tokens to find and replace. If styles were already registered, they will be\r\n * replaced.\r\n * @param {theme} theme JSON object of theme tokens to values.\r\n */\r\nexport function loadTheme(theme: ITheme | undefined): void {\r\n  _themeState.theme = theme;\r\n\r\n  // reload styles.\r\n  reloadStyles();\r\n}\r\n\r\n/**\r\n * Clear already registered style elements and style records in theme_State object\r\n * @param option - specify which group of registered styles should be cleared.\r\n * Default to be both themable and non-themable styles will be cleared\r\n */\r\nexport function clearStyles(option: ClearStyleOptions = ClearStyleOptions.all): void {\r\n  if (option === ClearStyleOptions.all || option === ClearStyleOptions.onlyNonThemable) {\r\n    clearStylesInternal(_themeState.registeredStyles);\r\n    _themeState.registeredStyles = [];\r\n  }\r\n  if (option === ClearStyleOptions.all || option === ClearStyleOptions.onlyThemable) {\r\n    clearStylesInternal(_themeState.registeredThemableStyles);\r\n    _themeState.registeredThemableStyles = [];\r\n  }\r\n}\r\n\r\nfunction clearStylesInternal(records: IStyleRecord[]): void {\r\n  records.forEach((styleRecord: IStyleRecord) => {\r\n    const styleElement: HTMLStyleElement = styleRecord && (styleRecord.styleElement as HTMLStyleElement);\r\n    if (styleElement && styleElement.parentElement) {\r\n      styleElement.parentElement.removeChild(styleElement);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Reloads styles.\r\n */\r\nfunction reloadStyles(): void {\r\n  if (_themeState.theme) {\r\n    const themableStyles: ThemableArray[] = [];\r\n    for (const styleRecord of _themeState.registeredThemableStyles) {\r\n      themableStyles.push(styleRecord.themableStyle);\r\n    }\r\n    if (themableStyles.length > 0) {\r\n      clearStyles(ClearStyleOptions.onlyThemable);\r\n      applyThemableStyles(([] as ThemableArray).concat.apply([], themableStyles));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Find theme tokens and replaces them with provided theme values.\r\n * @param {string} styles Tokenized styles to fix.\r\n */\r\nexport function detokenize(styles: string | undefined): string | undefined {\r\n  if (styles) {\r\n    styles = resolveThemableArray(splitStyles(styles)).styleString;\r\n  }\r\n\r\n  return styles;\r\n}\r\n\r\n/**\r\n * Resolves ThemingInstruction objects in an array and joins the result into a string.\r\n * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.\r\n */\r\nfunction resolveThemableArray(splitStyleArray: ThemableArray): IThemableArrayResolveResult {\r\n  const { theme }: IThemeState = _themeState;\r\n  let themable: boolean = false;\r\n  // Resolve the array of theming instructions to an array of strings.\r\n  // Then join the array to produce the final CSS string.\r\n  const resolvedArray: (string | undefined)[] = (splitStyleArray || []).map(\r\n    (currentValue: IThemingInstruction) => {\r\n      const themeSlot: string | undefined = currentValue.theme;\r\n      if (themeSlot) {\r\n        themable = true;\r\n        // A theming annotation. Resolve it.\r\n        const themedValue: string | undefined = theme ? theme[themeSlot] : undefined;\r\n        const defaultValue: string = currentValue.defaultValue || 'inherit';\r\n\r\n        // Warn to console if we hit an unthemed value even when themes are provided, but only if \"DEBUG\" is true.\r\n        // Allow the themedValue to be undefined to explicitly request the default value.\r\n        if (\r\n          theme &&\r\n          !themedValue &&\r\n          console &&\r\n          !(themeSlot in theme) &&\r\n          typeof DEBUG !== 'undefined' &&\r\n          DEBUG\r\n        ) {\r\n          console.warn(`Theming value not provided for \"${themeSlot}\". Falling back to \"${defaultValue}\".`);\r\n        }\r\n\r\n        return themedValue || defaultValue;\r\n      } else {\r\n        // A non-themable string. Preserve it.\r\n        return currentValue.rawString;\r\n      }\r\n    }\r\n  );\r\n\r\n  return {\r\n    styleString: resolvedArray.join(''),\r\n    themable: themable\r\n  };\r\n}\r\n\r\n/**\r\n * Split tokenized CSS into an array of strings and theme specification objects\r\n * @param {string} styles Tokenized styles to split.\r\n */\r\nexport function splitStyles(styles: string): ThemableArray {\r\n  const result: ThemableArray = [];\r\n  if (styles) {\r\n    let pos: number = 0; // Current position in styles.\r\n    let tokenMatch: RegExpExecArray | null;\r\n    while ((tokenMatch = _themeTokenRegex.exec(styles))) {\r\n      const matchIndex: number = tokenMatch.index;\r\n      if (matchIndex > pos) {\r\n        result.push({\r\n          rawString: styles.substring(pos, matchIndex)\r\n        });\r\n      }\r\n\r\n      result.push({\r\n        theme: tokenMatch[1],\r\n        defaultValue: tokenMatch[2] // May be undefined\r\n      });\r\n\r\n      // index of the first character after the current match\r\n      pos = _themeTokenRegex.lastIndex;\r\n    }\r\n\r\n    // Push the rest of the string after the last match.\r\n    result.push({\r\n      rawString: styles.substring(pos)\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Registers a set of style text. If it is registered too early, we will register it when the\r\n * window.load event is fired.\r\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\r\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\r\n */\r\nfunction registerStyles(styleArray: ThemableArray): void {\r\n  if (typeof document === 'undefined') {\r\n    return;\r\n  }\r\n  const head: HTMLHeadElement = document.getElementsByTagName('head')[0];\r\n  const styleElement: HTMLStyleElement = document.createElement('style');\r\n  const { styleString, themable } = resolveThemableArray(styleArray);\r\n\r\n  styleElement.setAttribute('data-load-themed-styles', 'true');\r\n  if (_styleNonce) {\r\n    styleElement.setAttribute('nonce', _styleNonce);\r\n  }\r\n  styleElement.appendChild(document.createTextNode(styleString));\r\n  _themeState.perf.count++;\r\n  head.appendChild(styleElement);\r\n\r\n  const ev: ICustomEvent<{ newStyle: HTMLStyleElement }> = document.createEvent('HTMLEvents');\r\n  ev.initEvent('styleinsert', true /* bubbleEvent */, false /* cancelable */);\r\n  ev.args = {\r\n    newStyle: styleElement\r\n  };\r\n  document.dispatchEvent(ev);\r\n\r\n  const record: IStyleRecord = {\r\n    styleElement: styleElement,\r\n    themableStyle: styleArray\r\n  };\r\n\r\n  if (themable) {\r\n    _themeState.registeredThemableStyles.push(record);\r\n  } else {\r\n    _themeState.registeredStyles.push(record);\r\n  }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}