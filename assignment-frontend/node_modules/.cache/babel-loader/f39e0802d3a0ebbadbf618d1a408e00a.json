{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { DayOfWeek, FirstWeekOfYear, DateRangeType } from '../../utilities/dateValues/DateValues';\nimport { CalendarDay } from './CalendarDay';\nimport { CalendarMonth } from './CalendarMonth';\nimport { compareDates, getDateRangeArray } from '../../utilities/dateMath/DateMath';\nimport { css, elementContains, KeyCodes, getNativeProps, divProperties, initializeComponentRef, FocusRects } from '../../Utilities';\nimport * as stylesImport from './Calendar.scss';\nvar styles = stylesImport;\nvar leftArrow = 'Up';\nvar rightArrow = 'Down';\nvar closeIcon = 'CalculatorMultiply';\nvar iconStrings = {\n  leftNavigation: leftArrow,\n  rightNavigation: rightArrow,\n  closeIcon: closeIcon\n};\nvar defaultWorkWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\nvar dateTimeFormatterCallbacks = {\n  formatMonthDayYear: function (date, strings) {\n    return strings.months[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();\n  },\n  formatMonthYear: function (date, strings) {\n    return strings.months[date.getMonth()] + ' ' + date.getFullYear();\n  },\n  formatDay: function (date) {\n    return date.getDate().toString();\n  },\n  formatYear: function (date) {\n    return date.getFullYear().toString();\n  }\n};\n\nvar Calendar =\n/** @class */\nfunction (_super) {\n  __extends(Calendar, _super);\n\n  function Calendar(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._dayPicker = React.createRef();\n    _this._monthPicker = React.createRef();\n    _this._hasFocus = false;\n\n    _this._onBlur = function (event) {\n      if (!elementContains(event.currentTarget, event.relatedTarget)) {\n        _this._hasFocus = false;\n        _this.props.onBlur && _this.props.onBlur(event);\n      }\n    };\n\n    _this._onFocus = function (event) {\n      if (!_this._hasFocus) {\n        _this._hasFocus = true;\n        _this.props.onFocus && _this.props.onFocus(event);\n      }\n    };\n\n    _this._navigateDayPickerDay = function (date) {\n      _this.setState({\n        navigatedDayDate: date,\n        navigatedMonthDate: date\n      });\n    };\n\n    _this._navigateMonthPickerDay = function (date) {\n      _this.setState({\n        navigatedMonthDate: date\n      });\n    };\n\n    _this._onNavigateDayDate = function (date, focusOnNavigatedDay) {\n      _this._navigateDayPickerDay(date);\n\n      _this._focusOnUpdate = focusOnNavigatedDay;\n    };\n\n    _this._onNavigateMonthDate = function (date, focusOnNavigatedDay) {\n      if (!focusOnNavigatedDay) {\n        _this._navigateMonthPickerDay(date);\n\n        _this._focusOnUpdate = focusOnNavigatedDay;\n        return;\n      }\n\n      var monthPickerOnly = !_this.props.showMonthPickerAsOverlay && !_this.props.isDayPickerVisible;\n\n      if (monthPickerOnly) {\n        _this._onSelectDate(date);\n      }\n\n      _this._navigateDayPickerDay(date);\n    };\n\n    _this._onSelectDate = function (date, selectedDateRangeArray) {\n      var onSelectDate = _this.props.onSelectDate;\n\n      _this.setState({\n        selectedDate: date\n      });\n\n      if (onSelectDate) {\n        onSelectDate(date, selectedDateRangeArray);\n      }\n    };\n\n    _this._onHeaderSelect = function (focus) {\n      _this.setState({\n        isDayPickerVisible: !_this.state.isDayPickerVisible,\n        isMonthPickerVisible: !_this.state.isMonthPickerVisible\n      });\n\n      if (focus) {\n        _this._focusOnUpdate = true;\n      }\n    };\n\n    _this._onGotoToday = function () {\n      var _a = _this.props,\n          dateRangeType = _a.dateRangeType,\n          firstDayOfWeek = _a.firstDayOfWeek,\n          today = _a.today,\n          workWeekDays = _a.workWeekDays,\n          selectDateOnClick = _a.selectDateOnClick;\n\n      if (selectDateOnClick) {\n        // When using Defaultprops, TypeScript doesn't know that React is going to inject defaults\n        // so we use exclamation mark as a hint to the type checker (see link below)\n        // https://decembersoft.com/posts/error-ts2532-optional-react-component-props-in-typescript/\n        var dates = getDateRangeArray(today, dateRangeType, firstDayOfWeek, workWeekDays);\n\n        _this._onSelectDate(today, dates);\n      }\n\n      _this._navigateDayPickerDay(today);\n\n      _this._focusOnUpdate = true;\n    };\n\n    _this._onGotoTodayClick = function (ev) {\n      _this._onGotoToday();\n    };\n\n    _this._onGotoTodayKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        ev.preventDefault();\n\n        _this._onGotoToday();\n      }\n    };\n\n    _this._onDatePickerPopupKeyDown = function (ev) {\n      switch (ev.which) {\n        case KeyCodes.enter:\n          ev.preventDefault();\n          break;\n\n        case KeyCodes.backspace:\n          ev.preventDefault();\n          break;\n\n        case KeyCodes.escape:\n          _this._handleEscKey(ev);\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this._handleEscKey = function (ev) {\n      if (_this.props.onDismiss) {\n        _this.props.onDismiss();\n      }\n    };\n\n    initializeComponentRef(_this);\n    var currentDate = props.value && !isNaN(props.value.getTime()) ? props.value : props.today || new Date();\n    _this.state = {\n      selectedDate: currentDate,\n      navigatedDayDate: currentDate,\n      navigatedMonthDate: currentDate,\n\n      /** When showMonthPickerAsOverlay is active it overrides isMonthPickerVisible/isDayPickerVisible props\n       (These props permanently set the visibility of their respective calendars). */\n      isMonthPickerVisible: _this.props.showMonthPickerAsOverlay ? false : _this.props.isMonthPickerVisible,\n      isDayPickerVisible: _this.props.showMonthPickerAsOverlay ? true : _this.props.isDayPickerVisible\n    };\n    _this._focusOnUpdate = false;\n    return _this;\n  }\n\n  Calendar.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n    var autoNavigateOnSelection = nextProps.autoNavigateOnSelection,\n        value = nextProps.value,\n        _a = nextProps.today,\n        today = _a === void 0 ? new Date() : _a; // Make sure auto-navigation is supported for programmatic changes to selected date, i.e.,\n    // if selected date is updated via props, we may need to modify the navigated date\n\n    var overrideNavigatedDate = autoNavigateOnSelection && !compareDates(value, this.props.value);\n\n    if (overrideNavigatedDate) {\n      this.setState({\n        navigatedMonthDate: value,\n        navigatedDayDate: value\n      });\n    }\n\n    this.setState({\n      selectedDate: value || today\n    });\n  };\n\n  Calendar.prototype.componentDidUpdate = function () {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  };\n\n  Calendar.prototype.render = function () {\n    var _a;\n\n    var rootClass = 'ms-DatePicker';\n    var _b = this.props,\n        firstDayOfWeek = _b.firstDayOfWeek,\n        dateRangeType = _b.dateRangeType,\n        strings = _b.strings,\n        showMonthPickerAsOverlay = _b.showMonthPickerAsOverlay,\n        autoNavigateOnSelection = _b.autoNavigateOnSelection,\n        showGoToToday = _b.showGoToToday,\n        highlightCurrentMonth = _b.highlightCurrentMonth,\n        highlightSelectedMonth = _b.highlightSelectedMonth,\n        navigationIcons = _b.navigationIcons,\n        minDate = _b.minDate,\n        maxDate = _b.maxDate,\n        restrictedDates = _b.restrictedDates,\n        className = _b.className,\n        showCloseButton = _b.showCloseButton,\n        allFocusable = _b.allFocusable,\n        yearPickerHidden = _b.yearPickerHidden,\n        today = _b.today;\n    var nativeProps = getNativeProps(this.props, divProperties, ['value']);\n    var _c = this.state,\n        selectedDate = _c.selectedDate,\n        navigatedDayDate = _c.navigatedDayDate,\n        navigatedMonthDate = _c.navigatedMonthDate,\n        isMonthPickerVisible = _c.isMonthPickerVisible,\n        isDayPickerVisible = _c.isDayPickerVisible;\n    var onHeaderSelect = showMonthPickerAsOverlay ? this._onHeaderSelect : undefined;\n    var monthPickerOnly = !showMonthPickerAsOverlay && !isDayPickerVisible;\n    var overlayedWithButton = showMonthPickerAsOverlay && showGoToToday;\n    var goTodayEnabled = showGoToToday;\n\n    if (goTodayEnabled && navigatedDayDate && navigatedMonthDate && today) {\n      goTodayEnabled = navigatedDayDate.getFullYear() !== today.getFullYear() || navigatedDayDate.getMonth() !== today.getMonth() || navigatedMonthDate.getFullYear() !== today.getFullYear() || navigatedMonthDate.getMonth() !== today.getMonth();\n    }\n\n    return React.createElement(\"div\", {\n      className: css(rootClass, styles.root, className),\n      role: \"application\"\n    }, React.createElement(\"div\", __assign({}, nativeProps, {\n      onBlur: this._onBlur,\n      onFocus: this._onFocus,\n      className: css('ms-DatePicker-picker ms-DatePicker-picker--opened ms-DatePicker-picker--focused', styles.picker, styles.pickerIsOpened, styles.pickerIsFocused, isMonthPickerVisible && 'ms-DatePicker-monthPickerVisible ' + styles.monthPickerVisible, isMonthPickerVisible && isDayPickerVisible && 'ms-DatePicker-calendarsInline ' + styles.calendarsInline, monthPickerOnly && 'ms-DatePicker-monthPickerOnly ' + styles.monthPickerOnly, showMonthPickerAsOverlay && 'ms-DatePicker-monthPickerAsOverlay ' + styles.monthPickerAsOverlay)\n    }), React.createElement(\"div\", {\n      className: css('ms-DatePicker-holder ms-slideDownIn10', styles.holder, overlayedWithButton && styles.holderWithButton),\n      onKeyDown: this._onDatePickerPopupKeyDown\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-frame', styles.frame)\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-wrap', styles.wrap, showGoToToday && styles.goTodaySpacing)\n    }, isDayPickerVisible && React.createElement(CalendarDay, {\n      selectedDate: selectedDate,\n      navigatedDate: navigatedDayDate,\n      today: this.props.today,\n      onSelectDate: this._onSelectDate,\n      onNavigateDate: this._onNavigateDayDate,\n      onDismiss: this.props.onDismiss,\n      firstDayOfWeek: firstDayOfWeek,\n      dateRangeType: dateRangeType,\n      autoNavigateOnSelection: autoNavigateOnSelection,\n      strings: strings,\n      onHeaderSelect: onHeaderSelect,\n      navigationIcons: navigationIcons,\n      showWeekNumbers: this.props.showWeekNumbers,\n      firstWeekOfYear: this.props.firstWeekOfYear,\n      dateTimeFormatter: this.props.dateTimeFormatter,\n      showSixWeeksByDefault: this.props.showSixWeeksByDefault,\n      minDate: minDate,\n      maxDate: maxDate,\n      restrictedDates: restrictedDates,\n      workWeekDays: this.props.workWeekDays,\n      componentRef: this._dayPicker,\n      showCloseButton: showCloseButton,\n      allFocusable: allFocusable\n    }), isDayPickerVisible && isMonthPickerVisible && React.createElement(\"div\", {\n      className: styles.divider\n    }), isMonthPickerVisible && React.createElement(CalendarMonth, {\n      navigatedDate: navigatedMonthDate,\n      selectedDate: navigatedDayDate,\n      strings: strings,\n      onNavigateDate: this._onNavigateMonthDate,\n      today: this.props.today,\n      highlightCurrentMonth: highlightCurrentMonth,\n      highlightSelectedMonth: highlightSelectedMonth,\n      onHeaderSelect: onHeaderSelect,\n      navigationIcons: navigationIcons,\n      dateTimeFormatter: this.props.dateTimeFormatter,\n      minDate: minDate,\n      maxDate: maxDate,\n      componentRef: this._monthPicker,\n      yearPickerHidden: yearPickerHidden || showMonthPickerAsOverlay\n    }), showGoToToday && React.createElement(\"button\", {\n      role: \"button\",\n      className: css('ms-DatePicker-goToday js-goToday', styles.goToday, (_a = {}, _a[styles.goTodayInlineMonth] = isMonthPickerVisible, _a[styles.goToTodayIsDisabled] = !goTodayEnabled, _a)),\n      onClick: this._onGotoTodayClick,\n      onKeyDown: this._onGotoTodayKeyDown,\n      tabIndex: 0,\n      disabled: !goTodayEnabled,\n      type: \"button\"\n    }, strings.goToToday))))), React.createElement(FocusRects, null));\n  };\n\n  Calendar.prototype.focus = function () {\n    if (this.state.isDayPickerVisible && this._dayPicker.current) {\n      this._dayPicker.current.focus();\n    } else if (this.state.isMonthPickerVisible && this._monthPicker.current) {\n      this._monthPicker.current.focus();\n    }\n  };\n\n  Calendar.defaultProps = {\n    onSelectDate: undefined,\n    onDismiss: undefined,\n    isMonthPickerVisible: true,\n    isDayPickerVisible: true,\n    showMonthPickerAsOverlay: false,\n    value: undefined,\n    today: new Date(),\n    firstDayOfWeek: DayOfWeek.Sunday,\n    dateRangeType: DateRangeType.Day,\n    autoNavigateOnSelection: false,\n    showGoToToday: true,\n    strings: null,\n    highlightCurrentMonth: false,\n    highlightSelectedMonth: false,\n    navigationIcons: iconStrings,\n    showWeekNumbers: false,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    dateTimeFormatter: dateTimeFormatterCallbacks,\n    showSixWeeksByDefault: false,\n    workWeekDays: defaultWorkWeekDays,\n    showCloseButton: false,\n    allFocusable: false\n  };\n  return Calendar;\n}(React.Component);\n\nexport { Calendar };","map":{"version":3,"sources":["components/Calendar/Calendar.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ICalendar,\n  ICalendarProps,\n  ICalendarStrings,\n  ICalendarIconStrings,\n  ICalendarFormatDateCallbacks,\n} from './Calendar.types';\nimport { DayOfWeek, FirstWeekOfYear, DateRangeType } from '../../utilities/dateValues/DateValues';\nimport { CalendarDay, ICalendarDay } from './CalendarDay';\nimport { CalendarMonth, ICalendarMonth } from './CalendarMonth';\nimport { compareDates, getDateRangeArray } from '../../utilities/dateMath/DateMath';\nimport {\n  css,\n  elementContains,\n  KeyCodes,\n  getNativeProps,\n  divProperties,\n  initializeComponentRef,\n  FocusRects,\n} from '../../Utilities';\nimport * as stylesImport from './Calendar.scss';\nconst styles: any = stylesImport;\n\nconst leftArrow = 'Up';\nconst rightArrow = 'Down';\nconst closeIcon = 'CalculatorMultiply';\nconst iconStrings: ICalendarIconStrings = {\n  leftNavigation: leftArrow,\n  rightNavigation: rightArrow,\n  closeIcon: closeIcon,\n};\nconst defaultWorkWeekDays: DayOfWeek[] = [\n  DayOfWeek.Monday,\n  DayOfWeek.Tuesday,\n  DayOfWeek.Wednesday,\n  DayOfWeek.Thursday,\n  DayOfWeek.Friday,\n];\n\nconst dateTimeFormatterCallbacks: ICalendarFormatDateCallbacks = {\n  formatMonthDayYear: (date: Date, strings: ICalendarStrings) =>\n    strings.months[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear(),\n  formatMonthYear: (date: Date, strings: ICalendarStrings) =>\n    strings.months[date.getMonth()] + ' ' + date.getFullYear(),\n  formatDay: (date: Date) => date.getDate().toString(),\n  formatYear: (date: Date) => date.getFullYear().toString(),\n};\n\nexport interface ICalendarState {\n  /** The currently focused date in the day picker, but not necessarily selected */\n  navigatedDayDate?: Date;\n\n  /** The currently focused date in the month picker, but not necessarily selected */\n  navigatedMonthDate?: Date;\n\n  /** The currently selected date in the calendar */\n  selectedDate?: Date;\n\n  /** State used to show/hide month picker */\n  isMonthPickerVisible?: boolean;\n\n  /** State used to show/hide day picker */\n  isDayPickerVisible?: boolean;\n}\n\nexport class Calendar extends React.Component<ICalendarProps, ICalendarState> implements ICalendar {\n  public static defaultProps: ICalendarProps = {\n    onSelectDate: undefined,\n    onDismiss: undefined,\n    isMonthPickerVisible: true,\n    isDayPickerVisible: true,\n    showMonthPickerAsOverlay: false,\n    value: undefined,\n    today: new Date(),\n    firstDayOfWeek: DayOfWeek.Sunday,\n    dateRangeType: DateRangeType.Day,\n    autoNavigateOnSelection: false,\n    showGoToToday: true,\n    strings: null,\n    highlightCurrentMonth: false,\n    highlightSelectedMonth: false,\n    navigationIcons: iconStrings,\n    showWeekNumbers: false,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    dateTimeFormatter: dateTimeFormatterCallbacks,\n    showSixWeeksByDefault: false,\n    workWeekDays: defaultWorkWeekDays,\n    showCloseButton: false,\n    allFocusable: false,\n  };\n\n  private _dayPicker = React.createRef<ICalendarDay>();\n  private _monthPicker = React.createRef<ICalendarMonth>();\n  private _hasFocus = false;\n\n  private _focusOnUpdate: boolean;\n\n  constructor(props: ICalendarProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    const currentDate = props.value && !isNaN(props.value.getTime()) ? props.value : props.today || new Date();\n\n    this.state = {\n      selectedDate: currentDate,\n      navigatedDayDate: currentDate,\n      navigatedMonthDate: currentDate,\n\n      /** When showMonthPickerAsOverlay is active it overrides isMonthPickerVisible/isDayPickerVisible props\n       (These props permanently set the visibility of their respective calendars). */\n      isMonthPickerVisible: this.props.showMonthPickerAsOverlay ? false : this.props.isMonthPickerVisible,\n      isDayPickerVisible: this.props.showMonthPickerAsOverlay ? true : this.props.isDayPickerVisible,\n    };\n\n    this._focusOnUpdate = false;\n  }\n\n  public UNSAFE_componentWillReceiveProps(nextProps: ICalendarProps): void {\n    const { autoNavigateOnSelection, value, today = new Date() } = nextProps;\n\n    // Make sure auto-navigation is supported for programmatic changes to selected date, i.e.,\n    // if selected date is updated via props, we may need to modify the navigated date\n    const overrideNavigatedDate = autoNavigateOnSelection && !compareDates(value!, this.props.value!);\n    if (overrideNavigatedDate) {\n      this.setState({\n        navigatedMonthDate: value,\n        navigatedDayDate: value,\n      });\n    }\n\n    this.setState({\n      selectedDate: value || today,\n    });\n  }\n\n  public componentDidUpdate(): void {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  }\n\n  public render(): JSX.Element {\n    const rootClass = 'ms-DatePicker';\n    const {\n      firstDayOfWeek,\n      dateRangeType,\n      strings,\n      showMonthPickerAsOverlay,\n      autoNavigateOnSelection,\n      showGoToToday,\n      highlightCurrentMonth,\n      highlightSelectedMonth,\n      navigationIcons,\n      minDate,\n      maxDate,\n      restrictedDates,\n      className,\n      showCloseButton,\n      allFocusable,\n      yearPickerHidden,\n      today,\n    } = this.props;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['value']);\n    const { selectedDate, navigatedDayDate, navigatedMonthDate, isMonthPickerVisible, isDayPickerVisible } = this.state;\n    const onHeaderSelect = showMonthPickerAsOverlay ? this._onHeaderSelect : undefined;\n    const monthPickerOnly = !showMonthPickerAsOverlay && !isDayPickerVisible;\n    const overlayedWithButton = showMonthPickerAsOverlay && showGoToToday;\n\n    let goTodayEnabled = showGoToToday;\n\n    if (goTodayEnabled && navigatedDayDate && navigatedMonthDate && today) {\n      goTodayEnabled =\n        navigatedDayDate.getFullYear() !== today.getFullYear() ||\n        navigatedDayDate.getMonth() !== today.getMonth() ||\n        navigatedMonthDate.getFullYear() !== today.getFullYear() ||\n        navigatedMonthDate.getMonth() !== today.getMonth();\n    }\n\n    return (\n      <div className={css(rootClass, styles.root, className)} role=\"application\">\n        <div\n          {...nativeProps}\n          onBlur={this._onBlur}\n          onFocus={this._onFocus}\n          className={css(\n            'ms-DatePicker-picker ms-DatePicker-picker--opened ms-DatePicker-picker--focused',\n            styles.picker,\n            styles.pickerIsOpened,\n            styles.pickerIsFocused,\n            isMonthPickerVisible && 'ms-DatePicker-monthPickerVisible ' + styles.monthPickerVisible,\n            isMonthPickerVisible && isDayPickerVisible && 'ms-DatePicker-calendarsInline ' + styles.calendarsInline,\n            monthPickerOnly && 'ms-DatePicker-monthPickerOnly ' + styles.monthPickerOnly,\n            showMonthPickerAsOverlay && 'ms-DatePicker-monthPickerAsOverlay ' + styles.monthPickerAsOverlay,\n          )}\n        >\n          <div\n            className={css(\n              'ms-DatePicker-holder ms-slideDownIn10',\n              styles.holder,\n              overlayedWithButton && styles.holderWithButton,\n            )}\n            onKeyDown={this._onDatePickerPopupKeyDown}\n          >\n            <div className={css('ms-DatePicker-frame', styles.frame)}>\n              <div className={css('ms-DatePicker-wrap', styles.wrap, showGoToToday && styles.goTodaySpacing)}>\n                {isDayPickerVisible && (\n                  <CalendarDay\n                    selectedDate={selectedDate!}\n                    navigatedDate={navigatedDayDate!}\n                    today={this.props.today}\n                    onSelectDate={this._onSelectDate}\n                    onNavigateDate={this._onNavigateDayDate}\n                    onDismiss={this.props.onDismiss}\n                    firstDayOfWeek={firstDayOfWeek!}\n                    dateRangeType={dateRangeType!}\n                    autoNavigateOnSelection={autoNavigateOnSelection!}\n                    strings={strings!}\n                    onHeaderSelect={onHeaderSelect}\n                    navigationIcons={navigationIcons!}\n                    showWeekNumbers={this.props.showWeekNumbers}\n                    firstWeekOfYear={this.props.firstWeekOfYear!}\n                    dateTimeFormatter={this.props.dateTimeFormatter!}\n                    showSixWeeksByDefault={this.props.showSixWeeksByDefault}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    restrictedDates={restrictedDates}\n                    workWeekDays={this.props.workWeekDays}\n                    componentRef={this._dayPicker}\n                    showCloseButton={showCloseButton}\n                    allFocusable={allFocusable}\n                  />\n                )}\n                {isDayPickerVisible && isMonthPickerVisible && <div className={styles.divider} />}\n                {isMonthPickerVisible && (\n                  <CalendarMonth\n                    navigatedDate={navigatedMonthDate!}\n                    selectedDate={navigatedDayDate!}\n                    strings={strings!}\n                    onNavigateDate={this._onNavigateMonthDate}\n                    today={this.props.today}\n                    highlightCurrentMonth={highlightCurrentMonth!}\n                    highlightSelectedMonth={highlightSelectedMonth!}\n                    onHeaderSelect={onHeaderSelect}\n                    navigationIcons={navigationIcons!}\n                    dateTimeFormatter={this.props.dateTimeFormatter!}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    componentRef={this._monthPicker}\n                    yearPickerHidden={yearPickerHidden || showMonthPickerAsOverlay}\n                  />\n                )}\n\n                {showGoToToday && (\n                  <button\n                    role=\"button\"\n                    className={css('ms-DatePicker-goToday js-goToday', styles.goToday, {\n                      [styles.goTodayInlineMonth]: isMonthPickerVisible,\n                      [styles.goToTodayIsDisabled]: !goTodayEnabled,\n                    })}\n                    onClick={this._onGotoTodayClick}\n                    onKeyDown={this._onGotoTodayKeyDown}\n                    tabIndex={0}\n                    disabled={!goTodayEnabled}\n                    type=\"button\"\n                  >\n                    {strings!.goToToday}\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        <FocusRects />\n      </div>\n    );\n  }\n\n  public focus() {\n    if (this.state.isDayPickerVisible && this._dayPicker.current) {\n      this._dayPicker.current.focus();\n    } else if (this.state.isMonthPickerVisible && this._monthPicker.current) {\n      this._monthPicker.current.focus();\n    }\n  }\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>) => {\n    if (!elementContains(event.currentTarget, event.relatedTarget as HTMLElement)) {\n      this._hasFocus = false;\n      this.props.onBlur && this.props.onBlur(event);\n    }\n  };\n\n  private _onFocus = (event: React.FocusEvent<HTMLElement>) => {\n    if (!this._hasFocus) {\n      this._hasFocus = true;\n      this.props.onFocus && this.props.onFocus(event);\n    }\n  };\n\n  private _navigateDayPickerDay = (date: Date): void => {\n    this.setState({\n      navigatedDayDate: date,\n      navigatedMonthDate: date,\n    });\n  };\n\n  private _navigateMonthPickerDay = (date: Date): void => {\n    this.setState({\n      navigatedMonthDate: date,\n    });\n  };\n\n  private _onNavigateDayDate = (date: Date, focusOnNavigatedDay: boolean): void => {\n    this._navigateDayPickerDay(date);\n    this._focusOnUpdate = focusOnNavigatedDay;\n  };\n\n  private _onNavigateMonthDate = (date: Date, focusOnNavigatedDay: boolean): void => {\n    if (!focusOnNavigatedDay) {\n      this._navigateMonthPickerDay(date);\n      this._focusOnUpdate = focusOnNavigatedDay;\n      return;\n    }\n\n    const monthPickerOnly = !this.props.showMonthPickerAsOverlay && !this.props.isDayPickerVisible;\n\n    if (monthPickerOnly) {\n      this._onSelectDate(date);\n    }\n\n    this._navigateDayPickerDay(date);\n  };\n\n  private _onSelectDate = (date: Date, selectedDateRangeArray?: Date[]): void => {\n    const { onSelectDate } = this.props;\n\n    this.setState({\n      selectedDate: date,\n    });\n\n    if (onSelectDate) {\n      onSelectDate(date, selectedDateRangeArray);\n    }\n  };\n\n  private _onHeaderSelect = (focus: boolean): void => {\n    this.setState({\n      isDayPickerVisible: !this.state.isDayPickerVisible,\n      isMonthPickerVisible: !this.state.isMonthPickerVisible,\n    });\n\n    if (focus) {\n      this._focusOnUpdate = true;\n    }\n  };\n\n  private _onGotoToday = (): void => {\n    const { dateRangeType, firstDayOfWeek, today, workWeekDays, selectDateOnClick } = this.props;\n\n    if (selectDateOnClick) {\n      // When using Defaultprops, TypeScript doesn't know that React is going to inject defaults\n      // so we use exclamation mark as a hint to the type checker (see link below)\n      // https://decembersoft.com/posts/error-ts2532-optional-react-component-props-in-typescript/\n      const dates = getDateRangeArray(today!, dateRangeType!, firstDayOfWeek!, workWeekDays!);\n      this._onSelectDate(today!, dates);\n    }\n\n    this._navigateDayPickerDay(today!);\n    this._focusOnUpdate = true;\n  };\n\n  private _onGotoTodayClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._onGotoToday();\n  };\n\n  private _onGotoTodayKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n      this._onGotoToday();\n    }\n  };\n\n  private _onDatePickerPopupKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    switch (ev.which) {\n      case KeyCodes.enter:\n        ev.preventDefault();\n        break;\n\n      case KeyCodes.backspace:\n        ev.preventDefault();\n        break;\n\n      case KeyCodes.escape:\n        this._handleEscKey(ev);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  private _handleEscKey = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (this.props.onDismiss) {\n      this.props.onDismiss();\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}