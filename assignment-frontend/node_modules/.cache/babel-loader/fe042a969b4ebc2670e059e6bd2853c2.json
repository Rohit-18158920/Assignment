{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List } from '../../List';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nvar getClassNames = classNamesFunction();\nvar ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.rowHeight,\n    COMPACT_ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.compactRowHeight;\n\nvar GroupedListBase =\n/** @class */\nfunction (_super) {\n  __extends(GroupedListBase, _super);\n\n  function GroupedListBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._list = React.createRef();\n\n    _this._renderGroup = function (group, groupIndex) {\n      var _a = _this.props,\n          dragDropEvents = _a.dragDropEvents,\n          dragDropHelper = _a.dragDropHelper,\n          eventsToRegister = _a.eventsToRegister,\n          groupProps = _a.groupProps,\n          items = _a.items,\n          listProps = _a.listProps,\n          onRenderCell = _a.onRenderCell,\n          selectionMode = _a.selectionMode,\n          selection = _a.selection,\n          viewport = _a.viewport,\n          onShouldVirtualize = _a.onShouldVirtualize,\n          groups = _a.groups,\n          compact = _a.compact; // override group header/footer props as needed\n\n      var dividerProps = {\n        onToggleSelectGroup: _this._onToggleSelectGroup,\n        onToggleCollapse: _this._onToggleCollapse,\n        onToggleSummarize: _this._onToggleSummarize\n      };\n\n      var headerProps = __assign(__assign({}, groupProps.headerProps), dividerProps);\n\n      var showAllProps = __assign(__assign({}, groupProps.showAllProps), dividerProps);\n\n      var footerProps = __assign(__assign({}, groupProps.footerProps), dividerProps);\n\n      var groupNestingDepth = _this._getGroupNestingDepth();\n\n      if (!groupProps.showEmptyGroups && group && group.count === 0) {\n        return null;\n      }\n\n      var finalListProps = __assign(__assign({}, listProps || {}), {\n        version: _this.state.version\n      });\n\n      return React.createElement(GroupedListSection, {\n        key: _this._getGroupKey(group, groupIndex),\n        dragDropEvents: dragDropEvents,\n        dragDropHelper: dragDropHelper,\n        eventsToRegister: eventsToRegister,\n        footerProps: footerProps,\n        getGroupItemLimit: groupProps && groupProps.getGroupItemLimit,\n        group: group,\n        groupIndex: groupIndex,\n        groupNestingDepth: groupNestingDepth,\n        groupProps: groupProps,\n        headerProps: headerProps,\n        listProps: finalListProps,\n        items: items,\n        onRenderCell: onRenderCell,\n        onRenderGroupHeader: groupProps.onRenderHeader,\n        onRenderGroupShowAll: groupProps.onRenderShowAll,\n        onRenderGroupFooter: groupProps.onRenderFooter,\n        selectionMode: selectionMode,\n        selection: selection,\n        showAllProps: showAllProps,\n        viewport: viewport,\n        onShouldVirtualize: onShouldVirtualize,\n        groupedListClassNames: _this._classNames,\n        groups: groups,\n        compact: compact\n      });\n    };\n\n    _this._getDefaultGroupItemLimit = function (group) {\n      return group.count;\n    };\n\n    _this._getGroupItemLimit = function (group) {\n      var groupProps = _this.props.groupProps;\n      var getGroupItemLimit = groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : _this._getDefaultGroupItemLimit;\n      return getGroupItemLimit(group);\n    };\n\n    _this._getGroupHeight = function (group) {\n      var rowHeight = _this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n      return rowHeight + (group.isCollapsed ? 0 : rowHeight * _this._getGroupItemLimit(group));\n    };\n\n    _this._getPageHeight = function (itemIndex) {\n      var groups = _this.state.groups;\n      var _a = _this.props.getGroupHeight,\n          getGroupHeight = _a === void 0 ? _this._getGroupHeight : _a;\n      var pageGroup = groups && groups[itemIndex];\n\n      if (pageGroup) {\n        return getGroupHeight(pageGroup, itemIndex);\n      } else {\n        return 0;\n      }\n    };\n\n    _this._onToggleCollapse = function (group) {\n      var groupProps = _this.props.groupProps;\n      var onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n      if (group) {\n        if (onToggleCollapse) {\n          onToggleCollapse(group);\n        }\n\n        group.isCollapsed = !group.isCollapsed;\n\n        _this._updateIsSomeGroupExpanded();\n\n        _this.forceUpdate();\n      }\n    };\n\n    _this._onToggleSelectGroup = function (group) {\n      var _a = _this.props,\n          selection = _a.selection,\n          selectionMode = _a.selectionMode;\n\n      if (group && selection && selectionMode === SelectionMode.multiple) {\n        selection.toggleRangeSelected(group.startIndex, group.count);\n      }\n    };\n\n    _this._isInnerZoneKeystroke = function (ev) {\n      return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n    };\n\n    _this._onToggleSummarize = function (group) {\n      var groupProps = _this.props.groupProps;\n      var onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n      if (onToggleSummarize) {\n        onToggleSummarize(group);\n      } else {\n        if (group) {\n          group.isShowingAll = !group.isShowingAll;\n        }\n\n        _this.forceUpdate();\n      }\n    };\n\n    _this._getPageSpecification = function (itemIndex) {\n      var groups = _this.state.groups;\n      var pageGroup = groups && groups[itemIndex];\n      return {\n        key: pageGroup && pageGroup.key\n      };\n    };\n\n    initializeComponentRef(_this);\n    _this._isSomeGroupExpanded = _this._computeIsSomeGroupExpanded(props.groups);\n    var _a = props.listProps,\n        _b = (_a === void 0 ? {} : _a).version,\n        version = _b === void 0 ? {} : _b;\n    _this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version: version\n    };\n    return _this;\n  }\n\n  GroupedListBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    var groups = nextProps.groups,\n        selectionMode = nextProps.selectionMode,\n        compact = nextProps.compact,\n        items = nextProps.items,\n        listProps = nextProps.listProps;\n    var listVersion = listProps && listProps.version;\n\n    var nextState = __assign(__assign({}, previousState), {\n      selectionMode: selectionMode,\n      compact: compact,\n      groups: groups,\n      listProps: listProps\n    });\n\n    var shouldForceUpdates = false;\n    var previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (listVersion !== previousListVersion || items !== previousState.items || groups !== previousState.groups || selectionMode !== previousState.selectionMode || compact !== previousState.compact) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = __assign(__assign({}, nextState), {\n        version: {}\n      });\n    }\n\n    return nextState;\n  };\n\n  GroupedListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  };\n\n  GroupedListBase.prototype.getStartItemIndexInView = function () {\n    return this._list.current.getStartItemIndexInView() || 0;\n  };\n\n  GroupedListBase.prototype.componentDidMount = function () {\n    var _a = this.props,\n        groupProps = _a.groupProps,\n        _b = _a.groups,\n        groups = _b === void 0 ? [] : _b;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  };\n\n  GroupedListBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        usePageCache = _a.usePageCache,\n        onShouldVirtualize = _a.onShouldVirtualize,\n        theme = _a.theme,\n        _b = _a.role,\n        role = _b === void 0 ? 'treegrid' : _b,\n        styles = _a.styles,\n        compact = _a.compact,\n        _c = _a.focusZoneProps,\n        focusZoneProps = _c === void 0 ? {} : _c,\n        _d = _a.rootListProps,\n        rootListProps = _d === void 0 ? {} : _d;\n    var _e = this.state,\n        groups = _e.groups,\n        version = _e.version;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      compact: compact\n    });\n    var _f = focusZoneProps.shouldEnterInnerZone,\n        shouldEnterInnerZone = _f === void 0 ? this._isInnerZoneKeystroke : _f;\n    return React.createElement(FocusZone, __assign({\n      direction: FocusZoneDirection.vertical,\n      \"data-automationid\": \"GroupedList\",\n      \"data-is-scrollable\": \"false\",\n      role: \"presentation\"\n    }, focusZoneProps, {\n      shouldEnterInnerZone: shouldEnterInnerZone,\n      className: css(this._classNames.root, focusZoneProps.className)\n    }), !groups ? this._renderGroup(undefined, 0) : React.createElement(List, __assign({\n      ref: this._list,\n      role: role,\n      items: groups,\n      onRenderCell: this._renderGroup,\n      getItemCountForPage: this._returnOne,\n      getPageHeight: this._getPageHeight,\n      getPageSpecification: this._getPageSpecification,\n      usePageCache: usePageCache,\n      onShouldVirtualize: onShouldVirtualize,\n      version: version\n    }, rootListProps)));\n  };\n\n  GroupedListBase.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n\n    this._forceListUpdates();\n  };\n\n  GroupedListBase.prototype.toggleCollapseAll = function (allCollapsed) {\n    var _a = this.state.groups,\n        groups = _a === void 0 ? [] : _a;\n    var groupProps = this.props.groupProps;\n    var onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  };\n\n  GroupedListBase.prototype._setGroupsCollapsedState = function (groups, isCollapsed) {\n    for (var groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  };\n\n  GroupedListBase.prototype._returnOne = function () {\n    return 1;\n  };\n\n  GroupedListBase.prototype._getGroupKey = function (group, index) {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  };\n\n  GroupedListBase.prototype._getGroupNestingDepth = function () {\n    var groups = this.state.groups;\n    var level = 0;\n    var groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  };\n\n  GroupedListBase.prototype._forceListUpdates = function (groups) {\n    this.setState({\n      version: {}\n    });\n  };\n\n  GroupedListBase.prototype._computeIsSomeGroupExpanded = function (groups) {\n    var _this = this;\n\n    return !!(groups && groups.some(function (group) {\n      return group.children ? _this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed;\n    }));\n  };\n\n  GroupedListBase.prototype._updateIsSomeGroupExpanded = function () {\n    var groups = this.state.groups;\n    var onGroupExpandStateChanged = this.props.onGroupExpandStateChanged;\n\n    var newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  };\n\n  GroupedListBase.defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false\n  };\n  return GroupedListBase;\n}(React.Component);\n\nexport { GroupedListBase };","map":{"version":3,"sources":["components/GroupedList/GroupedList.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup,\n  IGroupedListStyleProps,\n  IGroupedListStyles,\n} from './GroupedList.types';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List, ScrollToMode, IListProps } from '../../List';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { IGroupHeaderProps } from './GroupHeader';\nimport { IGroupShowAllProps } from './GroupShowAll.styles';\nimport { IGroupFooterProps } from './GroupFooter.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\nconst { rowHeight: ROW_HEIGHT, compactRowHeight: COMPACT_ROW_HEIGHT } = DEFAULT_ROW_HEIGHTS;\n\nexport interface IGroupedListState {\n  selectionMode?: IGroupedListProps['selectionMode'];\n  compact?: IGroupedListProps['compact'];\n  groups?: IGroup[];\n  items?: IGroupedListProps['items'];\n  listProps?: IGroupedListProps['listProps'];\n  version: {};\n}\n\nexport class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false,\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupedListStyles>;\n\n  private _list = React.createRef<List>();\n\n  private _isSomeGroupExpanded: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupedListProps,\n    previousState: IGroupedListState,\n  ): IGroupedListState {\n    const { groups, selectionMode, compact, items, listProps } = nextProps;\n    const listVersion = listProps && listProps.version;\n\n    let nextState = {\n      ...previousState,\n      selectionMode,\n      compact,\n      groups,\n      listProps,\n    };\n\n    let shouldForceUpdates = false;\n\n    const previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (\n      listVersion !== previousListVersion ||\n      items !== previousState.items ||\n      groups !== previousState.groups ||\n      selectionMode !== previousState.selectionMode ||\n      compact !== previousState.compact\n    ) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  }\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    const { listProps: { version = {} } = {} } = props;\n\n    this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version,\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current!.getStartItemIndexInView() || 0;\n  }\n\n  public componentDidMount() {\n    const { groupProps, groups = [] } = this.props;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      usePageCache,\n      onShouldVirtualize,\n      theme,\n      role = 'treegrid',\n      styles,\n      compact,\n      focusZoneProps = {},\n      rootListProps = {},\n    } = this.props;\n    const { groups, version } = this.state;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      compact: compact,\n    });\n\n    const { shouldEnterInnerZone = this._isInnerZoneKeystroke } = focusZoneProps;\n\n    return (\n      <FocusZone\n        direction={FocusZoneDirection.vertical}\n        data-automationid=\"GroupedList\"\n        data-is-scrollable=\"false\"\n        role=\"presentation\"\n        {...focusZoneProps}\n        shouldEnterInnerZone={shouldEnterInnerZone}\n        className={css(this._classNames.root, focusZoneProps.className)}\n      >\n        {!groups ? (\n          this._renderGroup(undefined, 0)\n        ) : (\n          <List\n            ref={this._list}\n            role={role}\n            items={groups}\n            onRenderCell={this._renderGroup}\n            getItemCountForPage={this._returnOne}\n            getPageHeight={this._getPageHeight}\n            getPageSpecification={this._getPageSpecification}\n            usePageCache={usePageCache}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            {...rootListProps}\n          />\n        )}\n      </FocusZone>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups = [] } = this.state;\n    const { groupProps } = this.props;\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  private _setGroupsCollapsedState(groups: IGroup[], isCollapsed: boolean): void {\n    for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  }\n\n  private _renderGroup = (group: IGroup | undefined, groupIndex: number): React.ReactNode => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport,\n      onShouldVirtualize,\n      groups,\n      compact,\n    } = this.props;\n\n    // override group header/footer props as needed\n    const dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize,\n    };\n\n    const headerProps: IGroupHeaderProps = { ...groupProps!.headerProps, ...dividerProps };\n    const showAllProps: IGroupShowAllProps = { ...groupProps!.showAllProps, ...dividerProps };\n    const footerProps: IGroupFooterProps = { ...groupProps!.footerProps, ...dividerProps };\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\n      return null;\n    }\n\n    const finalListProps: IListProps = {\n      ...(listProps || {}),\n      version: this.state.version,\n    };\n\n    return (\n      <GroupedListSection\n        key={this._getGroupKey(group, groupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={groupProps && groupProps.getGroupItemLimit}\n        group={group}\n        groupIndex={groupIndex}\n        groupNestingDepth={groupNestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        listProps={finalListProps}\n        items={items}\n        onRenderCell={onRenderCell}\n        onRenderGroupHeader={groupProps!.onRenderHeader}\n        onRenderGroupShowAll={groupProps!.onRenderShowAll}\n        onRenderGroupFooter={groupProps!.onRenderFooter}\n        selectionMode={selectionMode}\n        selection={selection}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onShouldVirtualize={onShouldVirtualize}\n        groupedListClassNames={this._classNames}\n        groups={groups}\n        compact={compact}\n      />\n    );\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getDefaultGroupItemLimit = (group: IGroup): number => {\n    return group.count;\n  };\n\n  private _getGroupItemLimit = (group: IGroup): number => {\n    const { groupProps } = this.props;\n    const getGroupItemLimit =\n      groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : this._getDefaultGroupItemLimit;\n\n    return getGroupItemLimit(group);\n  };\n\n  private _getGroupHeight = (group: IGroup): number => {\n    const rowHeight = this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n\n    return rowHeight + (group.isCollapsed ? 0 : rowHeight * this._getGroupItemLimit(group));\n  };\n\n  private _getPageHeight: IListProps['getPageHeight'] = (itemIndex: number) => {\n    const { groups } = this.state;\n    const { getGroupHeight = this._getGroupHeight } = this.props;\n    const pageGroup = groups && groups[itemIndex];\n\n    if (pageGroup) {\n      return getGroupHeight(pageGroup, itemIndex);\n    } else {\n      return 0;\n    }\n  };\n\n  private _getGroupKey(group: IGroup | undefined, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onToggleCollapse = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n\n  private _onToggleSelectGroup = (group: IGroup): void => {\n    const { selection, selectionMode } = this.props;\n\n    if (group && selection && selectionMode === SelectionMode.multiple) {\n      selection.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  private _isInnerZoneKeystroke = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n  };\n\n  private _forceListUpdates(groups?: IGroup[]): void {\n    this.setState({\n      version: {},\n    });\n  }\n\n  private _onToggleSummarize = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  };\n\n  private _getPageSpecification = (\n    itemIndex: number,\n  ): {\n    key?: string;\n  } => {\n    const groups = this.state.groups;\n    const pageGroup = groups && groups[itemIndex];\n    return {\n      key: pageGroup && pageGroup.key,\n    };\n  };\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(\n      groups &&\n      groups.some(group => (group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed))\n    );\n  }\n\n  private _updateIsSomeGroupExpanded(): void {\n    const { groups } = this.state;\n    const { onGroupExpandStateChanged } = this.props;\n\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}