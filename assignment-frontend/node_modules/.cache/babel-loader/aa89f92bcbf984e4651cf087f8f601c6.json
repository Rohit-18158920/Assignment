{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { ActionButton } from '../../Button';\nimport { buttonStyles } from './Nav.styles';\nimport { classNamesFunction, divProperties, getNativeProps, getWindow, initializeComponentRef } from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon } from '../../Icon';\nimport { composeComponentAs, composeRenderFunction } from '@uifabric/utilities'; // The number pixels per indentation level for Nav links.\n\nvar _indentationSize = 14; // The number of pixels of left margin\n\nvar _baseIndent = 3; // global var used in _isLinkSelectedKey\n\nvar _urlResolver;\n\nexport function isRelativeUrl(url) {\n  // A URL is relative if it has no protocol.\n  return !!url && !/^[a-z0-9+-.]+:\\/\\//i.test(url);\n}\nvar getClassNames = classNamesFunction();\n\nvar NavBase =\n/** @class */\nfunction (_super) {\n  __extends(NavBase, _super);\n\n  function NavBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusZone = React.createRef();\n\n    _this._onRenderLink = function (link) {\n      var _a = _this.props,\n          styles = _a.styles,\n          groups = _a.groups,\n          theme = _a.theme;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        groups: groups\n      });\n      return React.createElement(\"div\", {\n        className: classNames.linkText\n      }, link.name);\n    };\n\n    _this._renderGroup = function (group, groupIndex) {\n      var _a = _this.props,\n          styles = _a.styles,\n          groups = _a.groups,\n          theme = _a.theme,\n          _b = _a.onRenderGroupHeader,\n          onRenderGroupHeader = _b === void 0 ? _this._renderGroupHeader : _b;\n\n      var isExpanded = _this._isGroupExpanded(group);\n\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        isGroup: true,\n        isExpanded: isExpanded,\n        groups: groups\n      });\n\n      var finalOnHeaderClick = function (ev, isCollapsing) {\n        _this._onGroupHeaderClicked(group, ev);\n      };\n\n      var groupProps = __assign(__assign({}, group), {\n        isExpanded: isExpanded,\n        onHeaderClick: finalOnHeaderClick\n      });\n\n      return React.createElement(\"div\", {\n        key: groupIndex,\n        className: classNames.group\n      }, groupProps.name ? onRenderGroupHeader(groupProps, _this._renderGroupHeader) : null, React.createElement(\"div\", {\n        className: classNames.groupContent\n      }, _this._renderLinks(groupProps.links, 0\n      /* nestingLevel */\n      )));\n    };\n\n    _this._renderGroupHeader = function (group) {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          styles = _a.styles,\n          groups = _a.groups,\n          theme = _a.theme,\n          expandButtonAriaLabel = _a.expandButtonAriaLabel;\n      var isExpanded = group.isExpanded;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        isGroup: true,\n        isExpanded: isExpanded,\n        groups: groups\n      });\n      var label = (isExpanded ? group.collapseAriaLabel : group.expandAriaLabel) || expandButtonAriaLabel;\n      var onHeaderClick = group.onHeaderClick;\n      var onClick = onHeaderClick ? function (ev) {\n        onHeaderClick(ev, isExpanded);\n      } : undefined;\n      return React.createElement(\"button\", {\n        className: classNames.chevronButton,\n        onClick: onClick,\n        \"aria-label\": label,\n        \"aria-expanded\": isExpanded\n      }, React.createElement(Icon, {\n        className: classNames.chevronIcon,\n        iconName: \"ChevronDown\"\n      }), group.name);\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      isGroupCollapsed: {},\n      // TODO: consider removing\n      // eslint-disable-next-line react/no-unused-state\n      isLinkExpandStateChanged: false,\n      selectedKey: props.initialSelectedKey || props.selectedKey\n    };\n    return _this;\n  }\n\n  NavBase.prototype.render = function () {\n    var _a = this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        className = _a.className,\n        isOnTop = _a.isOnTop,\n        theme = _a.theme;\n\n    if (!groups) {\n      return null;\n    }\n\n    var groupElements = groups.map(this._renderGroup);\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isOnTop: isOnTop,\n      groups: groups\n    });\n    return React.createElement(FocusZone, {\n      direction: FocusZoneDirection.vertical,\n      componentRef: this._focusZone\n    }, React.createElement(\"nav\", {\n      role: \"navigation\",\n      className: classNames.root,\n      \"aria-label\": this.props.ariaLabel\n    }, groupElements));\n  };\n\n  Object.defineProperty(NavBase.prototype, \"selectedKey\", {\n    get: function () {\n      return this.state.selectedKey;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n   * if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n\n  NavBase.prototype.focus = function (forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    if (this._focusZone && this._focusZone.current) {\n      return this._focusZone.current.focus(forceIntoFirstElement);\n    }\n\n    return false;\n  };\n\n  NavBase.prototype._renderNavLink = function (link, linkIndex, nestingLevel) {\n    var _a = this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme;\n    var isLinkWithIcon = link.icon || link.iconProps;\n\n    var isSelectedLink = this._isLinkSelected(link);\n\n    var _b = link.ariaCurrent,\n        ariaCurrent = _b === void 0 ? 'page' : _b;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      isSelected: isSelectedLink,\n      isDisabled: link.disabled,\n      isButtonEntry: link.onClick && !link.forceAnchor,\n      leftPadding: _indentationSize * nestingLevel + _baseIndent + (isLinkWithIcon ? 0 : 24),\n      groups: groups\n    }); // Prevent hijacking of the parent window if link.target is defined\n\n    var rel = link.url && link.target && !isRelativeUrl(link.url) ? 'noopener noreferrer' : undefined;\n    var LinkAs = this.props.linkAs ? composeComponentAs(this.props.linkAs, ActionButton) : ActionButton;\n    var onRenderLink = this.props.onRenderLink ? composeRenderFunction(this.props.onRenderLink, this._onRenderLink) : this._onRenderLink;\n    return React.createElement(LinkAs, {\n      className: classNames.link,\n      styles: buttonStyles,\n      href: link.url || (link.forceAnchor ? '#' : undefined),\n      iconProps: link.iconProps || {\n        iconName: link.icon\n      },\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick: link.onClick ? this._onNavButtonLinkClicked.bind(this, link) : this._onNavAnchorLinkClicked.bind(this, link),\n      title: link.title !== undefined ? link.title : link.name,\n      target: link.target,\n      rel: rel,\n      disabled: link.disabled,\n      \"aria-current\": isSelectedLink ? ariaCurrent : undefined,\n      \"aria-label\": link.ariaLabel ? link.ariaLabel : undefined,\n      link: link\n    }, onRenderLink(link));\n  };\n\n  NavBase.prototype._renderCompositeLink = function (link, linkIndex, nestingLevel) {\n    var divProps = __assign({}, getNativeProps(link, divProperties, ['onClick'])); // eslint-disable-next-line deprecation/deprecation\n\n\n    var _a = this.props,\n        expandButtonAriaLabel = _a.expandButtonAriaLabel,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      isExpanded: !!link.isExpanded,\n      isSelected: this._isLinkSelected(link),\n      isLink: true,\n      isDisabled: link.disabled,\n      position: _indentationSize * nestingLevel + 1,\n      groups: groups\n    });\n    var finalExpandBtnAriaLabel = '';\n\n    if (link.links && link.links.length > 0) {\n      if (link.collapseAriaLabel || link.expandAriaLabel) {\n        finalExpandBtnAriaLabel = link.isExpanded ? link.collapseAriaLabel : link.expandAriaLabel;\n      } else {\n        // TODO remove when `expandButtonAriaLabel` is removed. This is not an ideal concatenation for localization.\n        finalExpandBtnAriaLabel = expandButtonAriaLabel ? link.name + \" \" + expandButtonAriaLabel : link.name;\n      }\n    }\n\n    return React.createElement(\"div\", __assign({}, divProps, {\n      key: link.key || linkIndex,\n      className: classNames.compositeLink\n    }), link.links && link.links.length > 0 ? React.createElement(\"button\", {\n      className: classNames.chevronButton,\n      onClick: this._onLinkExpandClicked.bind(this, link),\n      \"aria-label\": finalExpandBtnAriaLabel,\n      \"aria-expanded\": link.isExpanded ? 'true' : 'false'\n    }, React.createElement(Icon, {\n      className: classNames.chevronIcon,\n      iconName: \"ChevronDown\"\n    })) : null, this._renderNavLink(link, linkIndex, nestingLevel));\n  };\n\n  NavBase.prototype._renderLink = function (link, linkIndex, nestingLevel) {\n    var _a = this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      groups: groups\n    });\n    return React.createElement(\"li\", {\n      key: link.key || linkIndex,\n      role: \"listitem\",\n      className: classNames.navItem\n    }, this._renderCompositeLink(link, linkIndex, nestingLevel), link.isExpanded ? this._renderLinks(link.links, ++nestingLevel) : null);\n  };\n\n  NavBase.prototype._renderLinks = function (links, nestingLevel) {\n    var _this = this;\n\n    if (!links || !links.length) {\n      return null;\n    }\n\n    var linkElements = links.map(function (link, linkIndex) {\n      return _this._renderLink(link, linkIndex, nestingLevel);\n    });\n    var _a = this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      groups: groups\n    });\n    return React.createElement(\"ul\", {\n      role: \"list\",\n      className: classNames.navItems\n    }, linkElements);\n  };\n\n  NavBase.prototype._onGroupHeaderClicked = function (group, ev) {\n    if (group.onHeaderClick) {\n      group.onHeaderClick(ev, this._isGroupExpanded(group));\n    }\n\n    this._toggleCollapsed(group);\n\n    if (ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n\n  NavBase.prototype._onLinkExpandClicked = function (link, ev) {\n    var onLinkExpandClick = this.props.onLinkExpandClick;\n\n    if (onLinkExpandClick) {\n      onLinkExpandClick(ev, link);\n    }\n\n    if (!ev.defaultPrevented) {\n      link.isExpanded = !link.isExpanded; // eslint-disable-next-line react/no-unused-state\n\n      this.setState({\n        isLinkExpandStateChanged: true\n      });\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  NavBase.prototype._preventBounce = function (link, ev) {\n    if (!link.url && link.forceAnchor) {\n      ev.preventDefault();\n    }\n  };\n\n  NavBase.prototype._onNavAnchorLinkClicked = function (link, ev) {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n\n    if (this.props.onLinkClick) {\n      this.props.onLinkClick(ev, link);\n    }\n\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n\n    this.setState({\n      selectedKey: link.key\n    });\n  };\n\n  NavBase.prototype._onNavButtonLinkClicked = function (link, ev) {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n\n    if (link.onClick) {\n      link.onClick(ev, link);\n    }\n\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n\n    this.setState({\n      selectedKey: link.key\n    });\n  };\n\n  NavBase.prototype._isLinkSelected = function (link) {\n    // if caller passes in selectedKey, use it as first choice or\n    // if current state.selectedKey (from addressbar) is match to the link or\n    // check if URL is matching location.href (if link.url exists)\n    if (this.props.selectedKey !== undefined) {\n      return link.key === this.props.selectedKey;\n    } else if (this.state.selectedKey !== undefined) {\n      return link.key === this.state.selectedKey;\n    } else if (typeof getWindow() === 'undefined' || !link.url) {\n      // resolve is not supported for ssr\n      return false;\n    } else {\n      // If selectedKey is undefined in props and state, then check URL\n      _urlResolver = _urlResolver || document.createElement('a');\n      _urlResolver.href = link.url || '';\n      var target = _urlResolver.href;\n\n      if (location.href === target) {\n        return true;\n      } // If selectedKey is not defined in state, then check URL to determine link selected status\n\n\n      if (location.protocol + '//' + location.host + location.pathname === target) {\n        return true;\n      }\n\n      if (location.hash) {\n        // Match the hash to the url.\n        if (location.hash === link.url) {\n          return true;\n        } // Match a rebased url. (e.g. #foo becomes http://hostname/foo)\n\n\n        _urlResolver.href = location.hash.substring(1);\n        return _urlResolver.href === target;\n      }\n    }\n\n    return false;\n  };\n\n  NavBase.prototype._isGroupExpanded = function (group) {\n    if (group.name && this.state.isGroupCollapsed.hasOwnProperty(group.name)) {\n      return !this.state.isGroupCollapsed[group.name];\n    }\n\n    if (group.collapseByDefault !== undefined) {\n      return !group.collapseByDefault;\n    }\n\n    return true;\n  };\n\n  NavBase.prototype._toggleCollapsed = function (group) {\n    var _a;\n\n    if (group.name) {\n      var newGroupCollapsed = __assign(__assign({}, this.state.isGroupCollapsed), (_a = {}, _a[group.name] = this._isGroupExpanded(group), _a));\n\n      this.setState({\n        isGroupCollapsed: newGroupCollapsed\n      });\n    }\n  };\n\n  NavBase.defaultProps = {\n    groups: null\n  };\n  return NavBase;\n}(React.Component);\n\nexport { NavBase };","map":{"version":3,"sources":["components/Nav/Nav.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ActionButton } from '../../Button';\nimport { buttonStyles } from './Nav.styles';\nimport { classNamesFunction, divProperties, getNativeProps, getWindow, initializeComponentRef } from '../../Utilities';\nimport { FocusZone, FocusZoneDirection, IFocusZone } from '../../FocusZone';\nimport { Icon } from '../../Icon';\nimport {\n  INav,\n  INavLink,\n  INavLinkGroup,\n  INavProps,\n  INavStyleProps,\n  INavStyles,\n  IRenderGroupHeaderProps,\n} from './Nav.types';\nimport { composeComponentAs, composeRenderFunction } from '@uifabric/utilities';\n\n// The number pixels per indentation level for Nav links.\nconst _indentationSize = 14;\n\n// The number of pixels of left margin\nconst _baseIndent = 3;\n\n// global var used in _isLinkSelectedKey\nlet _urlResolver: HTMLAnchorElement | undefined;\n\nexport function isRelativeUrl(url: string): boolean {\n  // A URL is relative if it has no protocol.\n  return !!url && !/^[a-z0-9+-.]+:\\/\\//i.test(url);\n}\n\nconst getClassNames = classNamesFunction<INavStyleProps, INavStyles>();\n\nexport interface INavState {\n  isGroupCollapsed: { [key: string]: boolean };\n  isLinkExpandStateChanged?: boolean;\n  selectedKey?: string;\n}\n\nexport class NavBase extends React.Component<INavProps, INavState> implements INav {\n  public static defaultProps: INavProps = {\n    groups: null,\n  };\n\n  private _focusZone = React.createRef<IFocusZone>();\n  constructor(props: INavProps) {\n    super(props);\n    initializeComponentRef(this);\n    this.state = {\n      isGroupCollapsed: {},\n      // TODO: consider removing\n      // eslint-disable-next-line react/no-unused-state\n      isLinkExpandStateChanged: false,\n      selectedKey: props.initialSelectedKey || props.selectedKey,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const { styles, groups, className, isOnTop, theme } = this.props;\n\n    if (!groups) {\n      return null;\n    }\n\n    const groupElements: React.ReactElement<{}>[] = groups.map(this._renderGroup);\n\n    const classNames = getClassNames(styles!, { theme: theme!, className, isOnTop, groups });\n\n    return (\n      <FocusZone direction={FocusZoneDirection.vertical} componentRef={this._focusZone}>\n        <nav role=\"navigation\" className={classNames.root} aria-label={this.props.ariaLabel}>\n          {groupElements}\n        </nav>\n      </FocusZone>\n    );\n  }\n\n  public get selectedKey(): string | undefined {\n    return this.state.selectedKey;\n  }\n\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n   * if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    if (this._focusZone && this._focusZone.current) {\n      return this._focusZone.current.focus(forceIntoFirstElement);\n    }\n    return false;\n  }\n\n  private _onRenderLink = (link: INavLink): JSX.Element => {\n    const { styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, { theme: theme!, groups });\n    return <div className={classNames.linkText}>{link.name}</div>;\n  };\n\n  private _renderNavLink(link: INavLink, linkIndex: number, nestingLevel: number): JSX.Element {\n    const { styles, groups, theme } = this.props;\n    const isLinkWithIcon = link.icon || link.iconProps;\n    const isSelectedLink = this._isLinkSelected(link);\n    const { ariaCurrent = 'page' } = link;\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isSelected: isSelectedLink,\n      isDisabled: link.disabled,\n      isButtonEntry: link.onClick && !link.forceAnchor,\n      leftPadding: _indentationSize * nestingLevel + _baseIndent + (isLinkWithIcon ? 0 : 24),\n      groups,\n    });\n\n    // Prevent hijacking of the parent window if link.target is defined\n    const rel = link.url && link.target && !isRelativeUrl(link.url) ? 'noopener noreferrer' : undefined;\n\n    const LinkAs = this.props.linkAs ? composeComponentAs(this.props.linkAs, ActionButton) : ActionButton;\n    const onRenderLink = this.props.onRenderLink\n      ? composeRenderFunction(this.props.onRenderLink, this._onRenderLink)\n      : this._onRenderLink;\n\n    return (\n      <LinkAs\n        className={classNames.link}\n        styles={buttonStyles}\n        href={link.url || (link.forceAnchor ? '#' : undefined)}\n        iconProps={link.iconProps || { iconName: link.icon }}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={\n          link.onClick ? this._onNavButtonLinkClicked.bind(this, link) : this._onNavAnchorLinkClicked.bind(this, link)\n        }\n        title={link.title !== undefined ? link.title : link.name}\n        target={link.target}\n        rel={rel}\n        disabled={link.disabled}\n        aria-current={isSelectedLink ? ariaCurrent : undefined}\n        aria-label={link.ariaLabel ? link.ariaLabel : undefined}\n        link={link}\n      >\n        {onRenderLink(link)}\n      </LinkAs>\n    );\n  }\n\n  private _renderCompositeLink(link: INavLink, linkIndex: number, nestingLevel: number): React.ReactElement<{}> {\n    const divProps: React.HTMLProps<HTMLDivElement> = { ...getNativeProps(link, divProperties, ['onClick']) };\n    // eslint-disable-next-line deprecation/deprecation\n    const { expandButtonAriaLabel, styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isExpanded: !!link.isExpanded,\n      isSelected: this._isLinkSelected(link),\n      isLink: true,\n      isDisabled: link.disabled,\n      position: _indentationSize * nestingLevel + 1,\n      groups,\n    });\n\n    let finalExpandBtnAriaLabel = '';\n    if (link.links && link.links.length > 0) {\n      if (link.collapseAriaLabel || link.expandAriaLabel) {\n        finalExpandBtnAriaLabel = link.isExpanded ? link.collapseAriaLabel! : link.expandAriaLabel!;\n      } else {\n        // TODO remove when `expandButtonAriaLabel` is removed. This is not an ideal concatenation for localization.\n        finalExpandBtnAriaLabel = expandButtonAriaLabel ? `${link.name} ${expandButtonAriaLabel}` : link.name;\n      }\n    }\n\n    return (\n      <div {...divProps} key={link.key || linkIndex} className={classNames.compositeLink}>\n        {link.links && link.links.length > 0 ? (\n          <button\n            className={classNames.chevronButton}\n            onClick={this._onLinkExpandClicked.bind(this, link)}\n            aria-label={finalExpandBtnAriaLabel}\n            aria-expanded={link.isExpanded ? 'true' : 'false'}\n          >\n            <Icon className={classNames.chevronIcon} iconName=\"ChevronDown\" />\n          </button>\n        ) : null}\n        {this._renderNavLink(link, linkIndex, nestingLevel)}\n      </div>\n    );\n  }\n\n  private _renderLink(link: INavLink, linkIndex: number, nestingLevel: number): React.ReactElement<{}> {\n    const { styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, { theme: theme!, groups });\n\n    return (\n      <li key={link.key || linkIndex} role=\"listitem\" className={classNames.navItem}>\n        {this._renderCompositeLink(link, linkIndex, nestingLevel)}\n        {link.isExpanded ? this._renderLinks(link.links, ++nestingLevel) : null}\n      </li>\n    );\n  }\n\n  private _renderLinks(links: INavLink[] | undefined, nestingLevel: number): React.ReactElement<{}> | null {\n    if (!links || !links.length) {\n      return null;\n    }\n    const linkElements: React.ReactElement<{}>[] = links.map((link: INavLink, linkIndex: number) =>\n      this._renderLink(link, linkIndex, nestingLevel),\n    );\n\n    const { styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, { theme: theme!, groups });\n\n    return (\n      <ul role=\"list\" className={classNames.navItems}>\n        {linkElements}\n      </ul>\n    );\n  }\n\n  private _renderGroup = (group: INavLinkGroup, groupIndex: number): React.ReactElement<{}> => {\n    const { styles, groups, theme, onRenderGroupHeader = this._renderGroupHeader } = this.props;\n\n    const isExpanded = this._isGroupExpanded(group);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isGroup: true,\n      isExpanded,\n      groups,\n    });\n\n    const finalOnHeaderClick = (\n      ev?: React.MouseEvent<HTMLElement, MouseEvent> | undefined,\n      isCollapsing?: boolean | undefined,\n    ) => {\n      this._onGroupHeaderClicked(group, ev);\n    };\n\n    const groupProps: IRenderGroupHeaderProps = {\n      ...group,\n      isExpanded,\n      onHeaderClick: finalOnHeaderClick,\n    };\n\n    return (\n      <div key={groupIndex} className={classNames.group}>\n        {groupProps.name ? onRenderGroupHeader(groupProps, this._renderGroupHeader) : null}\n        <div className={classNames.groupContent}>{this._renderLinks(groupProps.links, 0 /* nestingLevel */)}</div>\n      </div>\n    );\n  };\n\n  private _renderGroupHeader = (group: IRenderGroupHeaderProps): React.ReactElement<{}> => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { styles, groups, theme, expandButtonAriaLabel } = this.props;\n\n    const { isExpanded } = group;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isGroup: true,\n      isExpanded,\n      groups,\n    });\n\n    const label = (isExpanded ? group.collapseAriaLabel : group.expandAriaLabel) || expandButtonAriaLabel;\n\n    const { onHeaderClick } = group;\n\n    const onClick = onHeaderClick\n      ? (ev?: React.MouseEvent<HTMLElement, MouseEvent> | undefined) => {\n          onHeaderClick(ev, isExpanded);\n        }\n      : undefined;\n\n    return (\n      <button className={classNames.chevronButton} onClick={onClick} aria-label={label} aria-expanded={isExpanded}>\n        <Icon className={classNames.chevronIcon} iconName=\"ChevronDown\" />\n        {group.name}\n      </button>\n    );\n  };\n\n  private _onGroupHeaderClicked(group: INavLinkGroup, ev?: React.MouseEvent<HTMLElement>): void {\n    if (group.onHeaderClick) {\n      group.onHeaderClick(ev, this._isGroupExpanded(group));\n    }\n\n    this._toggleCollapsed(group);\n\n    if (ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onLinkExpandClicked(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    const { onLinkExpandClick } = this.props;\n\n    if (onLinkExpandClick) {\n      onLinkExpandClick(ev, link);\n    }\n\n    if (!ev.defaultPrevented) {\n      link.isExpanded = !link.isExpanded;\n      // eslint-disable-next-line react/no-unused-state\n      this.setState({ isLinkExpandStateChanged: true });\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  private _preventBounce(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    if (!link.url && link.forceAnchor) {\n      ev.preventDefault();\n    }\n  }\n\n  private _onNavAnchorLinkClicked(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n\n    if (this.props.onLinkClick) {\n      this.props.onLinkClick(ev, link);\n    }\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n\n    this.setState({ selectedKey: link.key });\n  }\n\n  private _onNavButtonLinkClicked(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n\n    if (link.onClick) {\n      link.onClick(ev, link);\n    }\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n\n    this.setState({ selectedKey: link.key });\n  }\n\n  private _isLinkSelected(link: INavLink): boolean {\n    // if caller passes in selectedKey, use it as first choice or\n    // if current state.selectedKey (from addressbar) is match to the link or\n    // check if URL is matching location.href (if link.url exists)\n    if (this.props.selectedKey !== undefined) {\n      return link.key === this.props.selectedKey;\n    } else if (this.state.selectedKey !== undefined) {\n      return link.key === this.state.selectedKey;\n    } else if (typeof getWindow() === 'undefined' || !link.url) {\n      // resolve is not supported for ssr\n      return false;\n    } else {\n      // If selectedKey is undefined in props and state, then check URL\n      _urlResolver = _urlResolver || document.createElement('a');\n\n      _urlResolver.href = link.url || '';\n      const target: string = _urlResolver.href;\n\n      if (location.href === target) {\n        return true;\n      }\n\n      // If selectedKey is not defined in state, then check URL to determine link selected status\n      if (location.protocol + '//' + location.host + location.pathname === target) {\n        return true;\n      }\n\n      if (location.hash) {\n        // Match the hash to the url.\n        if (location.hash === link.url) {\n          return true;\n        }\n\n        // Match a rebased url. (e.g. #foo becomes http://hostname/foo)\n        _urlResolver.href = location.hash.substring(1);\n\n        return _urlResolver.href === target;\n      }\n    }\n\n    return false;\n  }\n\n  private _isGroupExpanded(group: INavLinkGroup): boolean {\n    if (group.name && this.state.isGroupCollapsed.hasOwnProperty(group.name)) {\n      return !this.state.isGroupCollapsed[group.name];\n    }\n    if (group.collapseByDefault !== undefined) {\n      return !group.collapseByDefault;\n    }\n    return true;\n  }\n\n  private _toggleCollapsed(group: INavLinkGroup): void {\n    if (group.name) {\n      const newGroupCollapsed = {\n        ...this.state.isGroupCollapsed, // Make a copy in order to not modify state\n        [group.name]: this._isGroupExpanded(group), // sic - presently open will be collapsed after setState\n      };\n      this.setState({ isGroupCollapsed: newGroupCollapsed });\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}