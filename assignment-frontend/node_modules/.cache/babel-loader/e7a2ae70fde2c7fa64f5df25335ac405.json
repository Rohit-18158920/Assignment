{"ast":null,"code":"import { getColorFromRGBA } from './getColorFromRGBA';\n/**\n * Gets a color with a single RGBA component updated to a new value.\n * Does not modify the original `color`. Alpha defaults to 100 if not set.\n */\n\nexport function updateRGB(color, component, value) {\n  var _a;\n\n  return getColorFromRGBA((_a = {\n    r: color.r,\n    g: color.g,\n    b: color.b,\n    a: color.a\n  }, _a[component] = value, _a));\n}","map":{"version":3,"sources":["utilities/color/updateRGB.ts"],"names":[],"mappings":"AACA,SAAS,gBAAT,QAAiC,oBAAjC;AAEA;;;AAGG;;AACH,OAAM,SAAU,SAAV,CAAoB,KAApB,EAAmC,SAAnC,EAA0D,KAA1D,EAAuE;;;AAC3E,SAAO,gBAAgB,EAAA,EAAA,GAAA;AACrB,IAAA,CAAC,EAAE,KAAK,CAAC,CADY;AAErB,IAAA,CAAC,EAAE,KAAK,CAAC,CAFY;AAGrB,IAAA,CAAC,EAAE,KAAK,CAAC,CAHY;AAIrB,IAAA,CAAC,EAAE,KAAK,CAAC;AAJY,GAAA,EAKrB,EAAA,CAAC,SAAD,CAAA,GAAa,KALQ,EAMrB,EANqB,EAAvB;AAOD","sourcesContent":["import { IColor, IRGB } from './interfaces';\nimport { getColorFromRGBA } from './getColorFromRGBA';\n\n/**\n * Gets a color with a single RGBA component updated to a new value.\n * Does not modify the original `color`. Alpha defaults to 100 if not set.\n */\nexport function updateRGB(color: IColor, component: keyof IRGB, value: number): IColor {\n  return getColorFromRGBA({\n    r: color.r,\n    g: color.g,\n    b: color.b,\n    a: color.a,\n    [component]: value,\n  });\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}