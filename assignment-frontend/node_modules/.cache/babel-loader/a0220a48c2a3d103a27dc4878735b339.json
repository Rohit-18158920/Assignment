{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport elementType from 'prop-types-extra/lib/elementType';\nimport warning from 'warning';\nimport FormControlFeedback from './FormControlFeedback';\nimport FormControlStatic from './FormControlStatic';\nimport { prefix, bsClass, getClassSet, splitBsProps, bsSizes } from './utils/bootstrapUtils';\nimport { SIZE_MAP, Size } from './utils/StyleConfig';\nvar propTypes = {\n  componentClass: elementType,\n\n  /**\n   * Only relevant if `componentClass` is `'input'`.\n   */\n  type: PropTypes.string,\n\n  /**\n   * Uses `controlId` from `<FormGroup>` if not explicitly specified.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Attaches a ref to the `<input>` element. Only functions can be used here.\n   *\n   * ```js\n   * <FormControl inputRef={ref => { this.input = ref; }} />\n   * ```\n   */\n  inputRef: PropTypes.func\n};\nvar defaultProps = {\n  componentClass: 'input'\n};\nvar contextTypes = {\n  $bs_formGroup: PropTypes.object\n};\n\nvar FormControl = function (_React$Component) {\n  _inherits(FormControl, _React$Component);\n\n  function FormControl() {\n    _classCallCheck(this, FormControl);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  FormControl.prototype.render = function render() {\n    var formGroup = this.context.$bs_formGroup;\n    var controlId = formGroup && formGroup.controlId;\n\n    var _props = this.props,\n        Component = _props.componentClass,\n        type = _props.type,\n        _props$id = _props.id,\n        id = _props$id === undefined ? controlId : _props$id,\n        inputRef = _props.inputRef,\n        className = _props.className,\n        bsSize = _props.bsSize,\n        props = _objectWithoutProperties(_props, ['componentClass', 'type', 'id', 'inputRef', 'className', 'bsSize']);\n\n    var _splitBsProps = splitBsProps(props),\n        bsProps = _splitBsProps[0],\n        elementProps = _splitBsProps[1];\n\n    process.env.NODE_ENV !== 'production' ? warning(controlId == null || id === controlId, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : void 0; // input[type=\"file\"] should not have .form-control.\n\n    var classes = void 0;\n\n    if (type !== 'file') {\n      classes = getClassSet(bsProps);\n    } // If user provides a size, make sure to append it to classes as input-\n    // e.g. if bsSize is small, it will append input-sm\n\n\n    if (bsSize) {\n      var size = SIZE_MAP[bsSize] || bsSize;\n      classes[prefix({\n        bsClass: 'input'\n      }, size)] = true;\n    }\n\n    return React.createElement(Component, _extends({}, elementProps, {\n      type: type,\n      id: id,\n      ref: inputRef,\n      className: classNames(className, classes)\n    }));\n  };\n\n  return FormControl;\n}(React.Component);\n\nFormControl.propTypes = propTypes;\nFormControl.defaultProps = defaultProps;\nFormControl.contextTypes = contextTypes;\nFormControl.Feedback = FormControlFeedback;\nFormControl.Static = FormControlStatic;\nexport default bsClass('form-control', bsSizes([Size.SMALL, Size.LARGE], FormControl));","map":{"version":3,"sources":["D:/personalWork/assignment-frontend/node_modules/react-bootstrap/es/FormControl.js"],"names":["_extends","_objectWithoutProperties","_classCallCheck","_possibleConstructorReturn","_inherits","classNames","React","PropTypes","elementType","warning","FormControlFeedback","FormControlStatic","prefix","bsClass","getClassSet","splitBsProps","bsSizes","SIZE_MAP","Size","propTypes","componentClass","type","string","id","inputRef","func","defaultProps","contextTypes","$bs_formGroup","object","FormControl","_React$Component","apply","arguments","prototype","render","formGroup","context","controlId","_props","props","Component","_props$id","undefined","className","bsSize","_splitBsProps","bsProps","elementProps","process","env","NODE_ENV","classes","size","createElement","ref","Feedback","Static","SMALL","LARGE"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,wBAAP,MAAqC,+CAArC;AACA,OAAOC,eAAP,MAA4B,sCAA5B;AACA,OAAOC,0BAAP,MAAuC,iDAAvC;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,WAA1B,EAAuCC,YAAvC,EAAqDC,OAArD,QAAoE,wBAApE;AACA,SAASC,QAAT,EAAmBC,IAAnB,QAA+B,qBAA/B;AAEA,IAAIC,SAAS,GAAG;AACdC,EAAAA,cAAc,EAAEZ,WADF;;AAEd;AACF;AACA;AACEa,EAAAA,IAAI,EAAEd,SAAS,CAACe,MALF;;AAMd;AACF;AACA;AACEC,EAAAA,EAAE,EAAEhB,SAAS,CAACe,MATA;;AAUd;AACF;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,QAAQ,EAAEjB,SAAS,CAACkB;AAjBN,CAAhB;AAoBA,IAAIC,YAAY,GAAG;AACjBN,EAAAA,cAAc,EAAE;AADC,CAAnB;AAIA,IAAIO,YAAY,GAAG;AACjBC,EAAAA,aAAa,EAAErB,SAAS,CAACsB;AADR,CAAnB;;AAIA,IAAIC,WAAW,GAAG,UAAUC,gBAAV,EAA4B;AAC5C3B,EAAAA,SAAS,CAAC0B,WAAD,EAAcC,gBAAd,CAAT;;AAEA,WAASD,WAAT,GAAuB;AACrB5B,IAAAA,eAAe,CAAC,IAAD,EAAO4B,WAAP,CAAf;;AAEA,WAAO3B,0BAA0B,CAAC,IAAD,EAAO4B,gBAAgB,CAACC,KAAjB,CAAuB,IAAvB,EAA6BC,SAA7B,CAAP,CAAjC;AACD;;AAEDH,EAAAA,WAAW,CAACI,SAAZ,CAAsBC,MAAtB,GAA+B,SAASA,MAAT,GAAkB;AAC/C,QAAIC,SAAS,GAAG,KAAKC,OAAL,CAAaT,aAA7B;AACA,QAAIU,SAAS,GAAGF,SAAS,IAAIA,SAAS,CAACE,SAAvC;;AAEA,QAAIC,MAAM,GAAG,KAAKC,KAAlB;AAAA,QACIC,SAAS,GAAGF,MAAM,CAACnB,cADvB;AAAA,QAEIC,IAAI,GAAGkB,MAAM,CAAClB,IAFlB;AAAA,QAGIqB,SAAS,GAAGH,MAAM,CAAChB,EAHvB;AAAA,QAIIA,EAAE,GAAGmB,SAAS,KAAKC,SAAd,GAA0BL,SAA1B,GAAsCI,SAJ/C;AAAA,QAKIlB,QAAQ,GAAGe,MAAM,CAACf,QALtB;AAAA,QAMIoB,SAAS,GAAGL,MAAM,CAACK,SANvB;AAAA,QAOIC,MAAM,GAAGN,MAAM,CAACM,MAPpB;AAAA,QAQIL,KAAK,GAAGvC,wBAAwB,CAACsC,MAAD,EAAS,CAAC,gBAAD,EAAmB,MAAnB,EAA2B,IAA3B,EAAiC,UAAjC,EAA6C,WAA7C,EAA0D,QAA1D,CAAT,CARpC;;AAUA,QAAIO,aAAa,GAAG/B,YAAY,CAACyB,KAAD,CAAhC;AAAA,QACIO,OAAO,GAAGD,aAAa,CAAC,CAAD,CAD3B;AAAA,QAEIE,YAAY,GAAGF,aAAa,CAAC,CAAD,CAFhC;;AAIAG,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC1C,OAAO,CAAC6B,SAAS,IAAI,IAAb,IAAqBf,EAAE,KAAKe,SAA7B,EAAwC,mEAAxC,CAA/C,GAA8J,KAAK,CAAnK,CAlB+C,CAoB/C;;AACA,QAAIc,OAAO,GAAG,KAAK,CAAnB;;AACA,QAAI/B,IAAI,KAAK,MAAb,EAAqB;AACnB+B,MAAAA,OAAO,GAAGtC,WAAW,CAACiC,OAAD,CAArB;AACD,KAxB8C,CA0B/C;AACA;;;AACA,QAAIF,MAAJ,EAAY;AACV,UAAIQ,IAAI,GAAGpC,QAAQ,CAAC4B,MAAD,CAAR,IAAoBA,MAA/B;AACAO,MAAAA,OAAO,CAACxC,MAAM,CAAC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAD,EAAuBwC,IAAvB,CAAP,CAAP,GAA8C,IAA9C;AACD;;AAED,WAAO/C,KAAK,CAACgD,aAAN,CAAoBb,SAApB,EAA+BzC,QAAQ,CAAC,EAAD,EAAKgD,YAAL,EAAmB;AAC/D3B,MAAAA,IAAI,EAAEA,IADyD;AAE/DE,MAAAA,EAAE,EAAEA,EAF2D;AAG/DgC,MAAAA,GAAG,EAAE/B,QAH0D;AAI/DoB,MAAAA,SAAS,EAAEvC,UAAU,CAACuC,SAAD,EAAYQ,OAAZ;AAJ0C,KAAnB,CAAvC,CAAP;AAMD,GAvCD;;AAyCA,SAAOtB,WAAP;AACD,CAnDiB,CAmDhBxB,KAAK,CAACmC,SAnDU,CAAlB;;AAqDAX,WAAW,CAACX,SAAZ,GAAwBA,SAAxB;AACAW,WAAW,CAACJ,YAAZ,GAA2BA,YAA3B;AACAI,WAAW,CAACH,YAAZ,GAA2BA,YAA3B;AAEAG,WAAW,CAAC0B,QAAZ,GAAuB9C,mBAAvB;AACAoB,WAAW,CAAC2B,MAAZ,GAAqB9C,iBAArB;AAEA,eAAeE,OAAO,CAAC,cAAD,EAAiBG,OAAO,CAAC,CAACE,IAAI,CAACwC,KAAN,EAAaxC,IAAI,CAACyC,KAAlB,CAAD,EAA2B7B,WAA3B,CAAxB,CAAtB","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport elementType from 'prop-types-extra/lib/elementType';\nimport warning from 'warning';\n\nimport FormControlFeedback from './FormControlFeedback';\nimport FormControlStatic from './FormControlStatic';\nimport { prefix, bsClass, getClassSet, splitBsProps, bsSizes } from './utils/bootstrapUtils';\nimport { SIZE_MAP, Size } from './utils/StyleConfig';\n\nvar propTypes = {\n  componentClass: elementType,\n  /**\n   * Only relevant if `componentClass` is `'input'`.\n   */\n  type: PropTypes.string,\n  /**\n   * Uses `controlId` from `<FormGroup>` if not explicitly specified.\n   */\n  id: PropTypes.string,\n  /**\n   * Attaches a ref to the `<input>` element. Only functions can be used here.\n   *\n   * ```js\n   * <FormControl inputRef={ref => { this.input = ref; }} />\n   * ```\n   */\n  inputRef: PropTypes.func\n};\n\nvar defaultProps = {\n  componentClass: 'input'\n};\n\nvar contextTypes = {\n  $bs_formGroup: PropTypes.object\n};\n\nvar FormControl = function (_React$Component) {\n  _inherits(FormControl, _React$Component);\n\n  function FormControl() {\n    _classCallCheck(this, FormControl);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  FormControl.prototype.render = function render() {\n    var formGroup = this.context.$bs_formGroup;\n    var controlId = formGroup && formGroup.controlId;\n\n    var _props = this.props,\n        Component = _props.componentClass,\n        type = _props.type,\n        _props$id = _props.id,\n        id = _props$id === undefined ? controlId : _props$id,\n        inputRef = _props.inputRef,\n        className = _props.className,\n        bsSize = _props.bsSize,\n        props = _objectWithoutProperties(_props, ['componentClass', 'type', 'id', 'inputRef', 'className', 'bsSize']);\n\n    var _splitBsProps = splitBsProps(props),\n        bsProps = _splitBsProps[0],\n        elementProps = _splitBsProps[1];\n\n    process.env.NODE_ENV !== 'production' ? warning(controlId == null || id === controlId, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : void 0;\n\n    // input[type=\"file\"] should not have .form-control.\n    var classes = void 0;\n    if (type !== 'file') {\n      classes = getClassSet(bsProps);\n    }\n\n    // If user provides a size, make sure to append it to classes as input-\n    // e.g. if bsSize is small, it will append input-sm\n    if (bsSize) {\n      var size = SIZE_MAP[bsSize] || bsSize;\n      classes[prefix({ bsClass: 'input' }, size)] = true;\n    }\n\n    return React.createElement(Component, _extends({}, elementProps, {\n      type: type,\n      id: id,\n      ref: inputRef,\n      className: classNames(className, classes)\n    }));\n  };\n\n  return FormControl;\n}(React.Component);\n\nFormControl.propTypes = propTypes;\nFormControl.defaultProps = defaultProps;\nFormControl.contextTypes = contextTypes;\n\nFormControl.Feedback = FormControlFeedback;\nFormControl.Static = FormControlStatic;\n\nexport default bsClass('form-control', bsSizes([Size.SMALL, Size.LARGE], FormControl));"]},"metadata":{},"sourceType":"module"}