{"ast":null,"code":"/**\n * Concatination helper, which can merge class names together. Skips over falsey values.\n *\n * @public\n */\nexport function css() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var classes = [];\n\n  for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n    var arg = args_1[_a];\n\n    if (arg) {\n      if (typeof arg === 'string') {\n        classes.push(arg);\n      } else if (arg.hasOwnProperty('toString') && typeof arg.toString === 'function') {\n        classes.push(arg.toString());\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        for (var key in arg) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          if (arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n  }\n\n  return classes.join(' ');\n}","map":{"version":3,"sources":["css.ts"],"names":[],"mappings":"AAyBA;;;;AAIG;AACH,OAAM,SAAU,GAAV,GAAa;AAAC,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAoB;AAApB,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAClB,MAAI,OAAO,GAAG,EAAd;;AAEA,OAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,MAAA,GAAA,IAAhB,EAAgB,EAAA,GAAA,MAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAAsB;AAAjB,QAAI,GAAG,GAAA,MAAA,CAAA,EAAA,CAAP;;AACH,QAAI,GAAJ,EAAS;AACP,UAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B,QAAA,OAAO,CAAC,IAAR,CAAa,GAAb;AACD,OAFD,MAEO,IAAI,GAAG,CAAC,cAAJ,CAAmB,UAAnB,KAAkC,OAAO,GAAG,CAAC,QAAX,KAAwB,UAA9D,EAA0E;AAC/E,QAAA,OAAO,CAAC,IAAR,CAAa,GAAG,CAAC,QAAJ,EAAb;AACD,OAFM,MAEA;AACL;AACA,aAAK,IAAI,GAAT,IAAgB,GAAhB,EAA4B;AAC1B;AACA,cAAK,GAAW,CAAC,GAAD,CAAhB,EAAuB;AACrB,YAAA,OAAO,CAAC,IAAR,CAAa,GAAb;AACD;AACF;AACF;AACF;AACF;;AAED,SAAO,OAAO,CAAC,IAAR,CAAa,GAAb,CAAP;AACD","sourcesContent":["/**\n * Dictionary of booleans.\n *\n * @internal\n */\nexport interface IDictionary {\n  [className: string]: boolean;\n}\n\n/**\n * Serializable object.\n *\n * @internal\n */\nexport interface ISerializableObject {\n  toString?: () => string;\n}\n\n/**\n * css input type.\n *\n * @internal\n */\nexport type ICssInput = string | ISerializableObject | IDictionary | null | undefined | boolean;\n\n/**\n * Concatination helper, which can merge class names together. Skips over falsey values.\n *\n * @public\n */\nexport function css(...args: ICssInput[]): string {\n  let classes = [];\n\n  for (let arg of args) {\n    if (arg) {\n      if (typeof arg === 'string') {\n        classes.push(arg);\n      } else if (arg.hasOwnProperty('toString') && typeof arg.toString === 'function') {\n        classes.push(arg.toString());\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        for (let key in arg as any) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          if ((arg as any)[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n  }\n\n  return classes.join(' ');\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}