{"ast":null,"code":"import { MAX_COLOR_ALPHA } from './consts';\nimport { hsl2rgb } from './hsl2rgb';\n/**\n * Converts a valid CSS color string to an RGB color.\n * Note that hex colors *must* be prefixed with # to be considered valid.\n * Alpha in returned color defaults to 100.\n * Four and eight digit hex values (with alpha) are supported if the current browser supports them.\n */\n\nexport function cssColor(color) {\n  if (!color) {\n    return undefined;\n  } // Need to check the following valid color formats: RGB(A), HSL(A), hex, named color\n  // First check for well formatted RGB(A), HSL(A), and hex formats at the start.\n  // This is for perf (no creating an element) and catches the intentional \"transparent\" color\n  //   case early on.\n\n\n  var easyColor = _rgba(color) || _hex6(color) || _hex3(color) || _hsla(color);\n\n  if (easyColor) {\n    return easyColor;\n  } // if the above fails, do the more expensive catch-all\n\n\n  return _browserCompute(color);\n}\n/**\n * Uses the browser's getComputedStyle() to determine what the passed-in color is.\n * This assumes _rgba, _hex6, _hex3, and _hsla have already been tried and all failed.\n * This works by attaching an element to the DOM, which may fail in server-side rendering\n *   or with headless browsers.\n */\n\nfunction _browserCompute(str) {\n  if (typeof document === 'undefined') {\n    // don't throw an error when used server-side\n    return undefined;\n  }\n\n  var elem = document.createElement('div');\n  elem.style.backgroundColor = str; // This element must be attached to the DOM for getComputedStyle() to have a value\n\n  elem.style.position = 'absolute';\n  elem.style.top = '-9999px';\n  elem.style.left = '-9999px';\n  elem.style.height = '1px';\n  elem.style.width = '1px';\n  document.body.appendChild(elem);\n  var eComputedStyle = getComputedStyle(elem);\n  var computedColor = eComputedStyle && eComputedStyle.backgroundColor;\n  document.body.removeChild(elem); // computedColor is always an RGB(A) string, except for invalid colors in IE/Edge which return 'transparent'\n  // browsers return one of these if the color string is invalid,\n  // so need to differentiate between an actual error and intentionally passing in this color\n\n  if (computedColor === 'rgba(0, 0, 0, 0)' || computedColor === 'transparent') {\n    switch (str.trim()) {\n      // RGB and HSL were already checked at the start of the function\n      case 'transparent':\n      case '#0000':\n      case '#00000000':\n        return {\n          r: 0,\n          g: 0,\n          b: 0,\n          a: 0\n        };\n    }\n\n    return undefined;\n  }\n\n  return _rgba(computedColor);\n}\n/**\n * If `str` is in valid `rgb()` or `rgba()` format, returns an RGB color (alpha defaults to 100).\n * Otherwise returns undefined.\n */\n\n\nfunction _rgba(str) {\n  if (!str) {\n    return undefined;\n  }\n\n  var match = str.match(/^rgb(a?)\\(([\\d., ]+)\\)$/);\n\n  if (match) {\n    var hasAlpha = !!match[1];\n    var expectedPartCount = hasAlpha ? 4 : 3;\n    var parts = match[2].split(/ *, */).map(Number);\n\n    if (parts.length === expectedPartCount) {\n      return {\n        r: parts[0],\n        g: parts[1],\n        b: parts[2],\n        a: hasAlpha ? parts[3] * 100 : MAX_COLOR_ALPHA\n      };\n    }\n  }\n}\n/**\n * If `str` is in `hsl()` or `hsla()` format, returns an RGB color (alpha defaults to 100).\n * Otherwise returns undefined.\n */\n\n\nfunction _hsla(str) {\n  var match = str.match(/^hsl(a?)\\(([\\d., ]+)\\)$/);\n\n  if (match) {\n    var hasAlpha = !!match[1];\n    var expectedPartCount = hasAlpha ? 4 : 3;\n    var parts = match[2].split(/ *, */).map(Number);\n\n    if (parts.length === expectedPartCount) {\n      var rgba = hsl2rgb(parts[0], parts[1], parts[2]);\n      rgba.a = hasAlpha ? parts[3] * 100 : MAX_COLOR_ALPHA;\n      return rgba;\n    }\n  }\n}\n/**\n * If `str` is in valid 6-digit hex format *with* # prefix, returns an RGB color (with alpha 100).\n * Otherwise returns undefined.\n */\n\n\nfunction _hex6(str) {\n  if (str[0] === '#' && str.length === 7 && /^#[\\da-fA-F]{6}$/.test(str)) {\n    return {\n      r: parseInt(str.slice(1, 3), 16),\n      g: parseInt(str.slice(3, 5), 16),\n      b: parseInt(str.slice(5, 7), 16),\n      a: MAX_COLOR_ALPHA\n    };\n  }\n}\n/**\n * If `str` is in valid 3-digit hex format *with* # prefix, returns an RGB color (with alpha 100).\n * Otherwise returns undefined.\n */\n\n\nfunction _hex3(str) {\n  if (str[0] === '#' && str.length === 4 && /^#[\\da-fA-F]{3}$/.test(str)) {\n    return {\n      r: parseInt(str[1] + str[1], 16),\n      g: parseInt(str[2] + str[2], 16),\n      b: parseInt(str[3] + str[3], 16),\n      a: MAX_COLOR_ALPHA\n    };\n  }\n}","map":{"version":3,"sources":["utilities/color/cssColor.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRGB } from './interfaces';\nimport { MAX_COLOR_ALPHA } from './consts';\nimport { hsl2rgb } from './hsl2rgb';\n\n/**\n * Converts a valid CSS color string to an RGB color.\n * Note that hex colors *must* be prefixed with # to be considered valid.\n * Alpha in returned color defaults to 100.\n * Four and eight digit hex values (with alpha) are supported if the current browser supports them.\n */\nexport function cssColor(color?: string): IRGB | undefined {\n  if (!color) {\n    return undefined;\n  }\n\n  // Need to check the following valid color formats: RGB(A), HSL(A), hex, named color\n\n  // First check for well formatted RGB(A), HSL(A), and hex formats at the start.\n  // This is for perf (no creating an element) and catches the intentional \"transparent\" color\n  //   case early on.\n  const easyColor: IRGB | undefined = _rgba(color) || _hex6(color) || _hex3(color) || _hsla(color);\n  if (easyColor) {\n    return easyColor;\n  }\n\n  // if the above fails, do the more expensive catch-all\n  return _browserCompute(color);\n}\n\n/**\n * Uses the browser's getComputedStyle() to determine what the passed-in color is.\n * This assumes _rgba, _hex6, _hex3, and _hsla have already been tried and all failed.\n * This works by attaching an element to the DOM, which may fail in server-side rendering\n *   or with headless browsers.\n */\nfunction _browserCompute(str: string): IRGB | undefined {\n  if (typeof document === 'undefined') {\n    // don't throw an error when used server-side\n    return undefined;\n  }\n  const elem = document.createElement('div');\n  elem.style.backgroundColor = str;\n  // This element must be attached to the DOM for getComputedStyle() to have a value\n  elem.style.position = 'absolute';\n  elem.style.top = '-9999px';\n  elem.style.left = '-9999px';\n  elem.style.height = '1px';\n  elem.style.width = '1px';\n  document.body.appendChild(elem);\n  const eComputedStyle = getComputedStyle(elem);\n  const computedColor = eComputedStyle && eComputedStyle.backgroundColor;\n  document.body.removeChild(elem);\n  // computedColor is always an RGB(A) string, except for invalid colors in IE/Edge which return 'transparent'\n\n  // browsers return one of these if the color string is invalid,\n  // so need to differentiate between an actual error and intentionally passing in this color\n  if (computedColor === 'rgba(0, 0, 0, 0)' || computedColor === 'transparent') {\n    switch (str.trim()) {\n      // RGB and HSL were already checked at the start of the function\n      case 'transparent':\n      case '#0000':\n      case '#00000000':\n        return { r: 0, g: 0, b: 0, a: 0 };\n    }\n    return undefined;\n  }\n\n  return _rgba(computedColor);\n}\n\n/**\n * If `str` is in valid `rgb()` or `rgba()` format, returns an RGB color (alpha defaults to 100).\n * Otherwise returns undefined.\n */\nfunction _rgba(str?: string | null): IRGB | undefined {\n  if (!str) {\n    return undefined;\n  }\n\n  const match = str.match(/^rgb(a?)\\(([\\d., ]+)\\)$/);\n  if (match) {\n    const hasAlpha = !!match[1];\n    const expectedPartCount = hasAlpha ? 4 : 3;\n    const parts = match[2].split(/ *, */).map(Number);\n\n    if (parts.length === expectedPartCount) {\n      return {\n        r: parts[0],\n        g: parts[1],\n        b: parts[2],\n        a: hasAlpha ? parts[3] * 100 : MAX_COLOR_ALPHA,\n      };\n    }\n  }\n}\n\n/**\n * If `str` is in `hsl()` or `hsla()` format, returns an RGB color (alpha defaults to 100).\n * Otherwise returns undefined.\n */\nfunction _hsla(str: string): IRGB | undefined {\n  const match = str.match(/^hsl(a?)\\(([\\d., ]+)\\)$/);\n  if (match) {\n    const hasAlpha = !!match[1];\n    const expectedPartCount = hasAlpha ? 4 : 3;\n    const parts = match[2].split(/ *, */).map(Number);\n\n    if (parts.length === expectedPartCount) {\n      const rgba = hsl2rgb(parts[0], parts[1], parts[2]);\n      rgba.a = hasAlpha ? parts[3] * 100 : MAX_COLOR_ALPHA;\n      return rgba;\n    }\n  }\n}\n\n/**\n * If `str` is in valid 6-digit hex format *with* # prefix, returns an RGB color (with alpha 100).\n * Otherwise returns undefined.\n */\nfunction _hex6(str: string): IRGB | undefined {\n  if (str[0] === '#' && str.length === 7 && /^#[\\da-fA-F]{6}$/.test(str)) {\n    return {\n      r: parseInt(str.slice(1, 3), 16),\n      g: parseInt(str.slice(3, 5), 16),\n      b: parseInt(str.slice(5, 7), 16),\n      a: MAX_COLOR_ALPHA,\n    };\n  }\n}\n\n/**\n * If `str` is in valid 3-digit hex format *with* # prefix, returns an RGB color (with alpha 100).\n * Otherwise returns undefined.\n */\nfunction _hex3(str: string): IRGB | undefined {\n  if (str[0] === '#' && str.length === 4 && /^#[\\da-fA-F]{3}$/.test(str)) {\n    return {\n      r: parseInt(str[1] + str[1], 16),\n      g: parseInt(str[2] + str[2], 16),\n      b: parseInt(str[3] + str[3], 16),\n      a: MAX_COLOR_ALPHA,\n    };\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}