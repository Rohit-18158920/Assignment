{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { createMemoizer } from '../memoize';\n\nfunction createComposedComponent(outer) {\n  var Outer = outer;\n  var outerMemoizer = createMemoizer(function (inner) {\n    if (outer === inner) {\n      throw new Error('Attempted to compose a component with itself.');\n    }\n\n    var Inner = inner;\n    var innerMemoizer = createMemoizer(function (defaultRender) {\n      var InnerWithDefaultRender = function InnerWithDefaultRender(innerProps) {\n        return React.createElement(Inner, __assign({}, innerProps, {\n          defaultRender: defaultRender\n        }));\n      };\n\n      return InnerWithDefaultRender;\n    });\n\n    var OuterWithDefaultRender = function OuterWithDefaultRender(outerProps) {\n      var defaultRender = outerProps.defaultRender;\n      return React.createElement(Outer, __assign({}, outerProps, {\n        defaultRender: defaultRender ? innerMemoizer(defaultRender) : Inner\n      }));\n    };\n\n    return OuterWithDefaultRender;\n  });\n  return outerMemoizer;\n}\n\nvar componentAsMemoizer = createMemoizer(createComposedComponent);\n/**\n * Composes two components which conform to the `IComponentAs` specification; that is, two\n * components which accept a `defaultRender` prop, which is a 'default' implementation of\n * a component which accepts the same overall props.\n *\n * @public\n */\n\nexport function composeComponentAs(outer, inner) {\n  return componentAsMemoizer(outer)(inner);\n}","map":{"version":3,"sources":["componentAs/composeComponentAs.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SAAS,cAAT,QAA+B,YAA/B;;AAMA,SAAS,uBAAT,CACE,KADF,EAC6B;AAE3B,MAAM,KAAK,GAAG,KAAd;AAEA,MAAM,aAAa,GAAG,cAAc,CAAC,UAAC,KAAD,EAA4B;AAC/D,QAAI,KAAK,KAAK,KAAd,EAAqB;AACnB,YAAM,IAAI,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,QAAM,KAAK,GAAG,KAAd;AAEA,QAAM,aAAa,GAAG,cAAc,CAAC,UAAC,aAAD,EAAoC;AACvE,UAAM,sBAAsB,GAAmD,SAAzE,sBAAyE,CAC7E,UAD6E,EACxC;AAErC,eAAO,KAAA,CAAA,aAAA,CAAC,KAAD,EAAM,QAAA,CAAA,EAAA,EAAK,UAAL,EAAe;AAAE,UAAA,aAAa,EAAE;AAAjB,SAAf,CAAN,CAAP;AACD,OAJD;;AAMA,aAAO,sBAAP;AACD,KARmC,CAApC;;AAUA,QAAM,sBAAsB,GAAmD,SAAzE,sBAAyE,CAC7E,UAD6E,EACxC;AAE7B,UAAA,aAAA,GAAA,UAAA,CAAA,aAAA;AAER,aAAO,KAAA,CAAA,aAAA,CAAC,KAAD,EAAM,QAAA,CAAA,EAAA,EAAK,UAAL,EAAe;AAAE,QAAA,aAAa,EAAE,aAAa,GAAG,aAAa,CAAC,aAAD,CAAhB,GAAkC;AAAhE,OAAf,CAAN,CAAP;AACD,KAND;;AAQA,WAAO,sBAAP;AACD,GA1BmC,CAApC;AA4BA,SAAO,aAAP;AACD;;AAED,IAAM,mBAAmB,GAAG,cAAc,CAAsB,uBAAtB,CAA1C;AAEA;;;;;;AAMG;;AACH,OAAM,SAAU,kBAAV,CACJ,KADI,EAEJ,KAFI,EAEuB;AAE3B,SAAO,mBAAmB,CAAC,KAAD,CAAnB,CAA2B,KAA3B,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { IComponentAs, IComponentAsProps } from '../IComponentAs';\nimport { createMemoizer } from '../memoize';\n\ninterface IComposeComponentAs {\n  <TProps>(outer: IComponentAs<TProps>): (inner: IComponentAs<TProps>) => IComponentAs<TProps>;\n}\n\nfunction createComposedComponent<TProps>(\n  outer: IComponentAs<TProps>,\n): (inner: IComponentAs<TProps>) => IComponentAs<TProps> {\n  const Outer = outer;\n\n  const outerMemoizer = createMemoizer((inner: IComponentAs<TProps>) => {\n    if (outer === inner) {\n      throw new Error('Attempted to compose a component with itself.');\n    }\n\n    const Inner = inner;\n\n    const innerMemoizer = createMemoizer((defaultRender: IComponentAs<TProps>) => {\n      const InnerWithDefaultRender: React.ComponentType<IComponentAsProps<TProps>> = (\n        innerProps: IComponentAsProps<TProps>,\n      ): JSX.Element => {\n        return <Inner {...innerProps} defaultRender={defaultRender} />;\n      };\n\n      return InnerWithDefaultRender;\n    });\n\n    const OuterWithDefaultRender: React.ComponentType<IComponentAsProps<TProps>> = (\n      outerProps: IComponentAsProps<TProps>,\n    ): JSX.Element => {\n      const { defaultRender } = outerProps;\n\n      return <Outer {...outerProps} defaultRender={defaultRender ? innerMemoizer(defaultRender) : Inner} />;\n    };\n\n    return OuterWithDefaultRender;\n  });\n\n  return outerMemoizer;\n}\n\nconst componentAsMemoizer = createMemoizer<IComposeComponentAs>(createComposedComponent);\n\n/**\n * Composes two components which conform to the `IComponentAs` specification; that is, two\n * components which accept a `defaultRender` prop, which is a 'default' implementation of\n * a component which accepts the same overall props.\n *\n * @public\n */\nexport function composeComponentAs<TProps>(\n  outer: IComponentAs<TProps>,\n  inner: IComponentAs<TProps>,\n): IComponentAs<TProps> {\n  return componentAsMemoizer(outer)(inner);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}