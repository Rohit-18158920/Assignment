{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Selection } from '../../Selection';\nimport { initializeComponentRef } from '../../Utilities';\n\nvar BaseSelectedItemsList =\n/** @class */\nfunction (_super) {\n  __extends(BaseSelectedItemsList, _super);\n\n  function BaseSelectedItemsList(basePickerProps) {\n    var _this = _super.call(this, basePickerProps) || this;\n\n    _this.addItems = function (items) {\n      var processedItems = _this.props.onItemSelected ? _this.props.onItemSelected(items) : items;\n      var processedItemObjects = processedItems;\n      var processedItemPromiseLikes = processedItems;\n\n      if (processedItemPromiseLikes && processedItemPromiseLikes.then) {\n        processedItemPromiseLikes.then(function (resolvedProcessedItems) {\n          var newItems = _this.state.items.concat(resolvedProcessedItems);\n\n          _this.updateItems(newItems);\n        });\n      } else {\n        var newItems = _this.state.items.concat(processedItemObjects);\n\n        _this.updateItems(newItems);\n      }\n    };\n\n    _this.removeItemAt = function (index) {\n      var items = _this.state.items;\n\n      if (_this._canRemoveItem(items[index])) {\n        if (index > -1) {\n          if (_this.props.onItemsDeleted) {\n            _this.props.onItemsDeleted([items[index]]);\n          }\n\n          var newItems = items.slice(0, index).concat(items.slice(index + 1));\n\n          _this.updateItems(newItems);\n        }\n      }\n    };\n\n    _this.removeItem = function (item) {\n      var items = _this.state.items;\n      var index = items.indexOf(item);\n\n      _this.removeItemAt(index);\n    };\n\n    _this.replaceItem = function (itemToReplace, itemsToReplaceWith) {\n      var items = _this.state.items;\n      var index = items.indexOf(itemToReplace);\n\n      if (index > -1) {\n        var newItems = items.slice(0, index).concat(itemsToReplaceWith).concat(items.slice(index + 1));\n\n        _this.updateItems(newItems);\n      }\n    };\n\n    _this.removeItems = function (itemsToRemove) {\n      var items = _this.state.items;\n      var itemsCanRemove = itemsToRemove.filter(function (item) {\n        return _this._canRemoveItem(item);\n      });\n      var newItems = items.filter(function (item) {\n        return itemsCanRemove.indexOf(item) === -1;\n      });\n      var firstItemToRemove = itemsCanRemove[0];\n      var index = items.indexOf(firstItemToRemove);\n\n      if (_this.props.onItemsDeleted) {\n        _this.props.onItemsDeleted(itemsCanRemove);\n      }\n\n      _this.updateItems(newItems, index);\n    };\n\n    _this.onCopy = function (ev) {\n      if (_this.props.onCopyItems && _this.selection.getSelectedCount() > 0) {\n        var selectedItems = _this.selection.getSelection();\n\n        _this.copyItems(selectedItems);\n      }\n    };\n\n    _this.renderItems = function () {\n      var removeButtonAriaLabel = _this.props.removeButtonAriaLabel;\n      var onRenderItem = _this.props.onRenderItem;\n      var items = _this.state.items;\n      return items.map(function (item, index) {\n        return onRenderItem({\n          item: item,\n          index: index,\n          key: item.key ? item.key : index,\n          selected: _this.selection.isIndexSelected(index),\n          onRemoveItem: function () {\n            return _this.removeItem(item);\n          },\n          onItemChange: _this.onItemChange,\n          removeButtonAriaLabel: removeButtonAriaLabel,\n          onCopyItem: function (itemToCopy) {\n            return _this.copyItems([itemToCopy]);\n          }\n        });\n      });\n    };\n\n    _this.onSelectionChanged = function () {\n      _this.forceUpdate();\n    };\n\n    _this.onItemChange = function (changedItem, index) {\n      var items = _this.state.items;\n\n      if (index >= 0) {\n        var newItems = items;\n        newItems[index] = changedItem;\n\n        _this.updateItems(newItems);\n      }\n    };\n\n    initializeComponentRef(_this);\n    var items = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\n    _this.state = {\n      items: items\n    }; // Create a new selection if one is not specified\n\n    _this.selection = _this.props.selection ? _this.props.selection : new Selection({\n      onSelectionChanged: _this.onSelectionChanged\n    });\n    return _this;\n  }\n\n  Object.defineProperty(BaseSelectedItemsList.prototype, \"items\", {\n    get: function () {\n      return this.state.items;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BaseSelectedItemsList.prototype.removeSelectedItems = function () {\n    if (this.state.items.length && this.selection.getSelectedCount() > 0) {\n      this.removeItems(this.selection.getSelection());\n    }\n  };\n  /**\n   * Controls what happens whenever there is an action that impacts the selected items.\n   * If selectedItems is provided, this will act as a controlled component and will not update its own state.\n   */\n\n\n  BaseSelectedItemsList.prototype.updateItems = function (items, focusIndex) {\n    var _this = this;\n\n    if (this.props.selectedItems) {\n      // If the component is a controlled component then the controlling component will need to pass the new props\n      this.onChange(items);\n    } else {\n      this.setState({\n        items: items\n      }, function () {\n        _this._onSelectedItemsUpdated(items, focusIndex);\n      });\n    }\n  };\n\n  BaseSelectedItemsList.prototype.hasSelectedItems = function () {\n    return this.selection.getSelectedCount() > 0;\n  };\n\n  BaseSelectedItemsList.prototype.unselectAll = function () {\n    this.selection.setAllSelected(false);\n  };\n\n  BaseSelectedItemsList.prototype.highlightedItems = function () {\n    return this.selection.getSelection();\n  };\n\n  BaseSelectedItemsList.prototype.UNSAFE_componentWillUpdate = function (newProps, newState) {\n    if (newState.items && newState.items !== this.state.items) {\n      this.selection.setItems(newState.items);\n    }\n  };\n\n  BaseSelectedItemsList.prototype.componentDidMount = function () {\n    this.selection.setItems(this.state.items);\n  };\n\n  BaseSelectedItemsList.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    var newItems = newProps.selectedItems;\n\n    if (newItems) {\n      this.setState({\n        items: newItems\n      });\n    }\n\n    if (newProps.selection) {\n      this.selection = newProps.selection;\n    }\n  };\n\n  BaseSelectedItemsList.prototype.render = function () {\n    return this.renderItems();\n  };\n\n  BaseSelectedItemsList.prototype.onChange = function (items) {\n    if (this.props.onChange) {\n      this.props.onChange(items);\n    }\n  };\n\n  BaseSelectedItemsList.prototype.copyItems = function (items) {\n    if (this.props.onCopyItems) {\n      var copyText = this.props.onCopyItems(items);\n      var copyInput = document.createElement('input');\n      document.body.appendChild(copyInput);\n\n      try {\n        // Try to copy the text directly to the clipboard\n        copyInput.value = copyText;\n        copyInput.select();\n\n        if (!document.execCommand('copy')) {\n          // The command failed. Fallback to the method below.\n          throw new Error();\n        }\n      } catch (err) {// no op\n      } finally {\n        document.body.removeChild(copyInput);\n      }\n    }\n  };\n\n  BaseSelectedItemsList.prototype._onSelectedItemsUpdated = function (items, focusIndex) {\n    this.onChange(items);\n  };\n\n  BaseSelectedItemsList.prototype._canRemoveItem = function (item) {\n    return !this.props.canRemoveItem || this.props.canRemoveItem(item);\n  };\n\n  return BaseSelectedItemsList;\n}(React.Component);\n\nexport { BaseSelectedItemsList };","map":{"version":3,"sources":["components/SelectedItemsList/BaseSelectedItemsList.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Selection } from '../../Selection';\n\nimport { IBaseSelectedItemsList, IBaseSelectedItemsListProps, ISelectedItemProps } from './BaseSelectedItemsList.types';\nimport { initializeComponentRef } from '../../Utilities';\n\nexport interface IBaseSelectedItemsListState<T = any> {\n  items: T[];\n}\n\nexport class BaseSelectedItemsList<T, P extends IBaseSelectedItemsListProps<T>>\n  extends React.Component<P, IBaseSelectedItemsListState<T>>\n  implements IBaseSelectedItemsList<T> {\n  protected root: HTMLElement;\n  protected selection: Selection;\n\n  constructor(basePickerProps: P) {\n    super(basePickerProps);\n\n    initializeComponentRef(this);\n    const items: T[] = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\n    this.state = {\n      items: items,\n    };\n\n    // Create a new selection if one is not specified\n    this.selection = this.props.selection\n      ? (this.props.selection as Selection)\n      : new Selection({ onSelectionChanged: this.onSelectionChanged });\n  }\n\n  public get items(): T[] {\n    return this.state.items;\n  }\n\n  public addItems = (items: T[]): void => {\n    const processedItems: T[] | PromiseLike<T[]> = this.props.onItemSelected\n      ? (this.props.onItemSelected as any)(items)\n      : items;\n\n    const processedItemObjects: T[] = processedItems as T[];\n    const processedItemPromiseLikes: PromiseLike<T[]> = processedItems as PromiseLike<T[]>;\n\n    if (processedItemPromiseLikes && processedItemPromiseLikes.then) {\n      processedItemPromiseLikes.then((resolvedProcessedItems: T[]) => {\n        const newItems: T[] = this.state.items.concat(resolvedProcessedItems);\n        this.updateItems(newItems);\n      });\n    } else {\n      const newItems: T[] = this.state.items.concat(processedItemObjects);\n      this.updateItems(newItems);\n    }\n  };\n\n  public removeItemAt = (index: number): void => {\n    const { items } = this.state;\n\n    if (this._canRemoveItem(items[index])) {\n      if (index > -1) {\n        if (this.props.onItemsDeleted) {\n          (this.props.onItemsDeleted as (item: T[]) => void)([items[index]]);\n        }\n\n        const newItems = items.slice(0, index).concat(items.slice(index + 1));\n        this.updateItems(newItems);\n      }\n    }\n  };\n\n  public removeItem = (item: T): void => {\n    const { items } = this.state;\n    const index: number = items.indexOf(item);\n\n    this.removeItemAt(index);\n  };\n\n  public replaceItem = (itemToReplace: T, itemsToReplaceWith: T[]): void => {\n    const { items } = this.state;\n    const index: number = items.indexOf(itemToReplace);\n    if (index > -1) {\n      const newItems = items\n        .slice(0, index)\n        .concat(itemsToReplaceWith)\n        .concat(items.slice(index + 1));\n      this.updateItems(newItems);\n    }\n  };\n\n  public removeItems = (itemsToRemove: any[]): void => {\n    const { items } = this.state;\n    const itemsCanRemove = itemsToRemove.filter((item: any) => this._canRemoveItem(item));\n    const newItems: T[] = items.filter((item: any) => itemsCanRemove.indexOf(item) === -1);\n    const firstItemToRemove = itemsCanRemove[0];\n    const index: number = items.indexOf(firstItemToRemove);\n\n    if (this.props.onItemsDeleted) {\n      (this.props.onItemsDeleted as (item: T[]) => void)(itemsCanRemove);\n    }\n\n    this.updateItems(newItems, index);\n  };\n\n  public removeSelectedItems(): void {\n    if (this.state.items.length && this.selection.getSelectedCount() > 0) {\n      this.removeItems(this.selection.getSelection());\n    }\n  }\n\n  /**\n   * Controls what happens whenever there is an action that impacts the selected items.\n   * If selectedItems is provided, this will act as a controlled component and will not update its own state.\n   */\n  public updateItems(items: T[], focusIndex?: number): void {\n    if (this.props.selectedItems) {\n      // If the component is a controlled component then the controlling component will need to pass the new props\n      this.onChange(items);\n    } else {\n      this.setState({ items: items }, () => {\n        this._onSelectedItemsUpdated(items, focusIndex);\n      });\n    }\n  }\n\n  public onCopy = (ev: React.ClipboardEvent<HTMLElement>): void => {\n    if (this.props.onCopyItems && this.selection.getSelectedCount() > 0) {\n      const selectedItems: T[] = this.selection.getSelection() as T[];\n      this.copyItems(selectedItems);\n    }\n  };\n\n  public hasSelectedItems(): boolean {\n    return this.selection.getSelectedCount() > 0;\n  }\n\n  public unselectAll(): void {\n    this.selection.setAllSelected(false);\n  }\n\n  public highlightedItems(): T[] {\n    return this.selection.getSelection() as T[];\n  }\n\n  public UNSAFE_componentWillUpdate(newProps: P, newState: IBaseSelectedItemsListState): void {\n    if (newState.items && newState.items !== this.state.items) {\n      this.selection.setItems(newState.items);\n    }\n  }\n\n  public componentDidMount(): void {\n    this.selection.setItems(this.state.items);\n  }\n\n  public UNSAFE_componentWillReceiveProps(newProps: P): void {\n    const newItems = newProps.selectedItems;\n\n    if (newItems) {\n      this.setState({ items: newItems });\n    }\n\n    if (newProps.selection) {\n      this.selection = newProps.selection;\n    }\n  }\n\n  public render(): any {\n    return this.renderItems();\n  }\n\n  protected renderItems = (): JSX.Element[] => {\n    const { removeButtonAriaLabel } = this.props;\n    const onRenderItem = this.props.onRenderItem as (props: ISelectedItemProps<T>) => JSX.Element;\n\n    const { items } = this.state;\n    return items.map((item: any, index: number) =>\n      onRenderItem({\n        item,\n        index,\n        key: item.key ? item.key : index,\n        selected: this.selection.isIndexSelected(index),\n        onRemoveItem: () => this.removeItem(item),\n        onItemChange: this.onItemChange,\n        removeButtonAriaLabel: removeButtonAriaLabel,\n        onCopyItem: (itemToCopy: T) => this.copyItems([itemToCopy]),\n      }),\n    );\n  };\n\n  protected onSelectionChanged = (): void => {\n    this.forceUpdate();\n  };\n\n  protected onChange(items?: T[]): void {\n    if (this.props.onChange) {\n      (this.props.onChange as (items?: T[]) => void)(items);\n    }\n  }\n\n  protected onItemChange = (changedItem: T, index: number): void => {\n    const { items } = this.state;\n\n    if (index >= 0) {\n      const newItems: T[] = items;\n      newItems[index] = changedItem;\n\n      this.updateItems(newItems);\n    }\n  };\n\n  protected copyItems(items: T[]): void {\n    if (this.props.onCopyItems) {\n      const copyText = (this.props.onCopyItems as any)(items);\n\n      const copyInput = document.createElement('input') as HTMLInputElement;\n      document.body.appendChild(copyInput);\n\n      try {\n        // Try to copy the text directly to the clipboard\n        copyInput.value = copyText;\n        copyInput.select();\n        if (!document.execCommand('copy')) {\n          // The command failed. Fallback to the method below.\n          throw new Error();\n        }\n      } catch (err) {\n        // no op\n      } finally {\n        document.body.removeChild(copyInput);\n      }\n    }\n  }\n\n  private _onSelectedItemsUpdated(items?: T[], focusIndex?: number): void {\n    this.onChange(items);\n  }\n\n  private _canRemoveItem(item: T): boolean {\n    return !this.props.canRemoveItem || this.props.canRemoveItem(item);\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}