{"ast":null,"code":"import { getGlobalClassNames, getInputFocusStyle, hiddenContentStyle, HighContrastSelector } from '../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-BasePicker',\n  text: 'ms-BasePicker-text',\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\n  input: 'ms-BasePicker-input'\n};\nexport function getStyles(props) {\n  var _a;\n\n  var className = props.className,\n      theme = props.theme,\n      isFocused = props.isFocused,\n      inputClassName = props.inputClassName,\n      disabled = props.disabled;\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\n  }\n\n  var semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      fonts = theme.fonts;\n  var inputBorder = semanticColors.inputBorder,\n      inputBorderHovered = semanticColors.inputBorderHovered,\n      inputFocusBorderAlt = semanticColors.inputFocusBorderAlt;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme); // The following lines are to create a semi-transparent color overlay for the disabled state with designer's approval.\n  // @todo: investigate the performance cost of the calculation below and apply if negligible.\n  //   Replacing with a static color for now.\n  // const rgbColor: IRGB | undefined = cssColor(palette.neutralQuaternaryAlt);\n  // const disabledOverlayColor = rgbColor ? `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0.29)` : 'transparent';\n\n  var disabledOverlayColor = 'rgba(218, 218, 218, 0.29)';\n  return {\n    root: [classNames.root, className],\n    text: [classNames.text, {\n      display: 'flex',\n      position: 'relative',\n      flexWrap: 'wrap',\n      alignItems: 'center',\n      boxSizing: 'border-box',\n      minWidth: 180,\n      minHeight: 30,\n      border: \"1px solid \" + inputBorder,\n      borderRadius: effects.roundedCorner2\n    }, !isFocused && !disabled && {\n      selectors: {\n        ':hover': {\n          borderColor: inputBorderHovered\n        }\n      }\n    }, isFocused && !disabled && getInputFocusStyle(inputFocusBorderAlt, effects.roundedCorner2), disabled && {\n      borderColor: disabledOverlayColor,\n      selectors: (_a = {\n        ':after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0,\n          background: disabledOverlayColor\n        }\n      }, _a[HighContrastSelector] = {\n        borderColor: 'GrayText',\n        selectors: {\n          ':after': {\n            background: 'none'\n          }\n        }\n      }, _a)\n    }],\n    itemsWrapper: [classNames.itemsWrapper, {\n      display: 'flex',\n      flexWrap: 'wrap',\n      maxWidth: '100%'\n    }],\n    input: [classNames.input, fonts.medium, {\n      height: 30,\n      border: 'none',\n      flexGrow: 1,\n      outline: 'none',\n      padding: '0 6px 0',\n      alignSelf: 'flex-end',\n      borderRadius: effects.roundedCorner2,\n      backgroundColor: 'transparent',\n      color: semanticColors.inputText,\n      selectors: {\n        '::-ms-clear': {\n          display: 'none'\n        }\n      }\n    }, inputClassName],\n    screenReaderText: hiddenContentStyle\n  };\n}","map":{"version":3,"sources":["components/pickers/BasePicker.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { getGlobalClassNames, getInputFocusStyle, hiddenContentStyle, HighContrastSelector } from '../../Styling';\nimport { IBasePickerStyleProps, IBasePickerStyles } from './BasePicker.types';\n\nconst GlobalClassNames = {\n  root: 'ms-BasePicker',\n  text: 'ms-BasePicker-text',\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\n  input: 'ms-BasePicker-input',\n};\n\nexport function getStyles(props: IBasePickerStyleProps): IBasePickerStyles {\n  const { className, theme, isFocused, inputClassName, disabled } = props;\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\n  }\n  const { semanticColors, effects, fonts } = theme;\n  const { inputBorder, inputBorderHovered, inputFocusBorderAlt } = semanticColors;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // The following lines are to create a semi-transparent color overlay for the disabled state with designer's approval.\n  // @todo: investigate the performance cost of the calculation below and apply if negligible.\n  //   Replacing with a static color for now.\n  // const rgbColor: IRGB | undefined = cssColor(palette.neutralQuaternaryAlt);\n  // const disabledOverlayColor = rgbColor ? `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0.29)` : 'transparent';\n  const disabledOverlayColor = 'rgba(218, 218, 218, 0.29)';\n\n  return {\n    root: [classNames.root, className],\n    text: [\n      classNames.text,\n      {\n        display: 'flex',\n        position: 'relative',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        boxSizing: 'border-box',\n        minWidth: 180,\n        minHeight: 30,\n        border: `1px solid ${inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n      },\n      !isFocused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: inputBorderHovered,\n            },\n          },\n        },\n      isFocused && !disabled && getInputFocusStyle(inputFocusBorderAlt, effects.roundedCorner2),\n      disabled && {\n        borderColor: disabledOverlayColor,\n        selectors: {\n          ':after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            background: disabledOverlayColor,\n          },\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n            selectors: {\n              ':after': {\n                background: 'none',\n              },\n            },\n          },\n        },\n      },\n    ],\n    itemsWrapper: [\n      classNames.itemsWrapper,\n      {\n        display: 'flex',\n        flexWrap: 'wrap',\n        maxWidth: '100%',\n      },\n    ],\n    input: [\n      classNames.input,\n      fonts.medium,\n      {\n        height: 30,\n        border: 'none',\n        flexGrow: 1,\n        outline: 'none',\n        padding: '0 6px 0',\n        alignSelf: 'flex-end',\n        borderRadius: effects.roundedCorner2,\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        selectors: {\n          '::-ms-clear': {\n            display: 'none',\n          },\n        },\n      },\n      inputClassName,\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}