{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n/** @jsxRuntime classic */\n\n/** @jsx withSlots */\n\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles } from './Stack.styles';\nimport { StackItem } from './StackItem/StackItem';\n\nvar StackView = function (props) {\n  var _a = props.as,\n      RootType = _a === void 0 ? 'div' : _a,\n      disableShrink = props.disableShrink,\n      wrap = props.wrap,\n      rest = __rest(props, [\"as\", \"disableShrink\", \"wrap\"]);\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding'\n  });\n  var stackChildren = React.Children.map(props.children, function (child, index) {\n    if (!child) {\n      return null;\n    }\n\n    if (_isStackItem(child)) {\n      var defaultItemProps = {\n        shrink: !disableShrink\n      };\n      return React.cloneElement(child, __assign(__assign({}, defaultItemProps), child.props));\n    }\n\n    return child;\n  });\n  var nativeProps = getNativeProps(rest, htmlElementProperties);\n  var Slots = getSlots(props, {\n    root: RootType,\n    inner: 'div'\n  });\n\n  if (wrap) {\n    return withSlots(Slots.root, __assign({}, nativeProps), withSlots(Slots.inner, null, stackChildren));\n  }\n\n  return withSlots(Slots.root, __assign({}, nativeProps), stackChildren);\n};\n\nfunction _isStackItem(item) {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return !!item && typeof item === 'object' && !!item.type && // StackItem is generated by createComponent, so we need to check its displayName instead of name\n  item.type.displayName === StackItem.displayName;\n}\n\nvar StackStatics = {\n  Item: StackItem\n};\nexport var Stack = createComponent(StackView, {\n  displayName: 'Stack',\n  styles: styles,\n  statics: StackStatics\n});\nexport default Stack;","map":{"version":3,"sources":["components/Stack/Stack.tsx"],"names":[],"mappings":";AAAA;;AACA;;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,SAAT,EAAoB,eAApB,EAAqC,QAArC,QAAqD,kBAArD;AACA,SAAS,cAAT,EAAyB,qBAAzB,EAAgD,gBAAhD,QAAwE,iBAAxE;AACA,SAAS,MAAT,QAAuB,gBAAvB;AAEA,SAAS,SAAT,QAA0B,uBAA1B;;AAGA,IAAM,SAAS,GAA4B,UAAA,KAAA,EAAK;AACtC,MAAA,EAAA,GAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,EAAA;AAAA,MAAsB,aAAA,GAAA,KAAA,CAAA,aAAtB;AAAA,MAAqC,IAAA,GAAA,KAAA,CAAA,IAArC;AAAA,MAA2C,IAAA,GAAA,MAAA,CAAA,KAAA,EAAA,CAAA,IAAA,EAAA,eAAA,EAAA,MAAA,CAAA,CAA3C;;AAER,EAAA,gBAAgB,CAAC,OAAD,EAAU,KAAV,EAAiB;AAC/B,IAAA,GAAG,EAAE,oBAD0B;AAE/B,IAAA,SAAS,EAAE,kBAFoB;AAG/B,IAAA,QAAQ,EAAE,iBAHqB;AAI/B,IAAA,OAAO,EAAE;AAJsB,GAAjB,CAAhB;AAOA,MAAM,aAAa,GAAmD,KAAK,CAAC,QAAN,CAAe,GAAf,CACpE,KAAK,CAAC,QAD8D,EAEpE,UAAC,KAAD,EAA6C,KAA7C,EAA0D;AACxD,QAAI,CAAC,KAAL,EAAY;AACV,aAAO,IAAP;AACD;;AAED,QAAI,YAAY,CAAC,KAAD,CAAhB,EAAyB;AACvB,UAAM,gBAAgB,GAAoB;AACxC,QAAA,MAAM,EAAE,CAAC;AAD+B,OAA1C;AAIA,aAAO,KAAK,CAAC,YAAN,CAAmB,KAAnB,EAAwB,QAAA,CAAA,QAAA,CAAA,EAAA,EAC1B,gBAD0B,CAAA,EAE1B,KAAK,CAAC,KAFoB,CAAxB,CAAP;AAID;;AAED,WAAO,KAAP;AACD,GAnBmE,CAAtE;AAsBA,MAAM,WAAW,GAAG,cAAc,CAAuC,IAAvC,EAA6C,qBAA7C,CAAlC;AAEA,MAAM,KAAK,GAAG,QAAQ,CAA2B,KAA3B,EAAkC;AACtD,IAAA,IAAI,EAAE,QADgD;AAEtD,IAAA,KAAK,EAAE;AAF+C,GAAlC,CAAtB;;AAKA,MAAI,IAAJ,EAAU;AACR,WACE,SAAA,CAAC,KAAK,CAAC,IAAP,EAAW,QAAA,CAAA,EAAA,EAAK,WAAL,CAAX,EACE,SAAA,CAAC,KAAK,CAAC,KAAP,EAAY,IAAZ,EAAc,aAAd,CADF,CADF;AAKD;;AAED,SAAO,SAAA,CAAC,KAAK,CAAC,IAAP,EAAW,QAAA,CAAA,EAAA,EAAK,WAAL,CAAX,EAA8B,aAA9B,CAAP;AACD,CAhDD;;AAkDA,SAAS,YAAT,CAAsB,IAAtB,EAA2C;AACzC;AACA;AACA;AACA,SACE,CAAC,CAAC,IAAF,IACA,OAAO,IAAP,KAAgB,QADhB,IAEA,CAAC,CAAE,IAA2B,CAAC,IAF/B,IAGA;AACE,EAAA,IAA2B,CAAC,IAA5B,CAAyD,WAAzD,KAAyE,SAAS,CAAC,WALvF;AAOD;;AAED,IAAM,YAAY,GAAG;AACnB,EAAA,IAAI,EAAE;AADa,CAArB;AAIA,OAAO,IAAM,KAAK,GAEd,eAAe,CAAC,SAAD,EAAY;AAC7B,EAAA,WAAW,EAAE,OADgB;AAE7B,EAAA,MAAM,EAAA,MAFuB;AAG7B,EAAA,OAAO,EAAE;AAHoB,CAAZ,CAFZ;AAQP,eAAe,KAAf","sourcesContent":["/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles } from './Stack.styles';\nimport { IStackComponent, IStackProps, IStackSlots } from './Stack.types';\nimport { StackItem } from './StackItem/StackItem';\nimport { IStackItemProps } from './StackItem/StackItem.types';\n\nconst StackView: IStackComponent['view'] = props => {\n  const { as: RootType = 'div', disableShrink, wrap, ...rest } = props;\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding',\n  });\n\n  const stackChildren: (React.ReactChild | null)[] | null | undefined = React.Children.map(\n    props.children,\n    (child: React.ReactElement<IStackItemProps>, index: number) => {\n      if (!child) {\n        return null;\n      }\n\n      if (_isStackItem(child)) {\n        const defaultItemProps: IStackItemProps = {\n          shrink: !disableShrink,\n        };\n\n        return React.cloneElement(child, {\n          ...defaultItemProps,\n          ...child.props,\n        });\n      }\n\n      return child;\n    },\n  );\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(rest, htmlElementProperties);\n\n  const Slots = getSlots<IStackProps, IStackSlots>(props, {\n    root: RootType,\n    inner: 'div',\n  });\n\n  if (wrap) {\n    return (\n      <Slots.root {...nativeProps}>\n        <Slots.inner>{stackChildren}</Slots.inner>\n      </Slots.root>\n    );\n  }\n\n  return <Slots.root {...nativeProps}>{stackChildren}</Slots.root>;\n};\n\nfunction _isStackItem(item: React.ReactNode): item is typeof StackItem {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return (\n    !!item &&\n    typeof item === 'object' &&\n    !!(item as React.ReactElement).type &&\n    // StackItem is generated by createComponent, so we need to check its displayName instead of name\n    ((item as React.ReactElement).type as React.ComponentType).displayName === StackItem.displayName\n  );\n}\n\nconst StackStatics = {\n  Item: StackItem,\n};\n\nexport const Stack: React.FunctionComponent<IStackProps> & {\n  Item: React.FunctionComponent<IStackItemProps>;\n} = createComponent(StackView, {\n  displayName: 'Stack',\n  styles,\n  statics: StackStatics,\n});\n\nexport default Stack;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}