{"ast":null,"code":"import { warn } from './warn';\nimport { isControlled as checkIsControlled } from '../controlled';\nvar warningsMap;\n\nif (process.env.NODE_ENV !== 'production') {\n  warningsMap = {\n    valueOnChange: {},\n    valueDefaultValue: {},\n    controlledToUncontrolled: {},\n    uncontrolledToControlled: {}\n  };\n}\n/** Reset controlled usage warnings for testing purposes. */\n\n\nexport function resetControlledWarnings() {\n  if (process.env.NODE_ENV !== 'production') {\n    warningsMap.valueOnChange = {};\n    warningsMap.valueDefaultValue = {};\n    warningsMap.controlledToUncontrolled = {};\n    warningsMap.uncontrolledToControlled = {};\n  }\n}\n/**\n * Check for and warn on the following error conditions with a form component:\n * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n *    and the component is not read-only\n * - Both the value and defaultValue props are provided\n * - The component is attempting to switch between controlled and uncontrolled\n *\n * The messages mimic the warnings React gives for these error conditions on input elements.\n * The warning will only be displayed once per component ID.\n */\n\nexport function warnControlledUsage(params) {\n  if (process.env.NODE_ENV !== 'production') {\n    var componentId = params.componentId,\n        componentName = params.componentName,\n        defaultValueProp = params.defaultValueProp,\n        props = params.props,\n        oldProps = params.oldProps,\n        onChangeProp = params.onChangeProp,\n        readOnlyProp = params.readOnlyProp,\n        valueProp = params.valueProp; // This warning logic closely follows what React does for native <input> elements.\n\n    var oldIsControlled = oldProps ? checkIsControlled(oldProps, valueProp) : undefined;\n    var newIsControlled = checkIsControlled(props, valueProp);\n\n    if (newIsControlled) {\n      // onChange (or readOnly) must be provided if value is provided\n      var hasOnChange = !!props[onChangeProp];\n      var isReadOnly = !!(readOnlyProp && props[readOnlyProp]);\n\n      if (!(hasOnChange || isReadOnly) && !warningsMap.valueOnChange[componentId]) {\n        warningsMap.valueOnChange[componentId] = true;\n        warn(\"Warning: You provided a '\" + valueProp + \"' prop to a \" + componentName + \" without an '\" + onChangeProp + \"' handler. \" + (\"This will render a read-only field. If the field should be mutable use '\" + defaultValueProp + \"'. \") + (\"Otherwise, set '\" + onChangeProp + \"'\" + (readOnlyProp ? \" or '\" + readOnlyProp + \"'\" : '') + \".\"));\n      } // value and defaultValue are mutually exclusive\n\n\n      var defaultValue = props[defaultValueProp];\n\n      if (defaultValue !== undefined && defaultValue !== null && !warningsMap.valueDefaultValue[componentId]) {\n        warningsMap.valueDefaultValue[componentId] = true;\n        warn(\"Warning: You provided both '\" + valueProp + \"' and '\" + defaultValueProp + \"' to a \" + componentName + \". \" + (\"Form fields must be either controlled or uncontrolled (specify either the '\" + valueProp + \"' prop, \") + (\"or the '\" + defaultValueProp + \"' prop, but not both). Decide between using a controlled or uncontrolled \") + (componentName + \" and remove one of these props. More info: https://fb.me/react-controlled-components\"));\n      }\n    } // Warn if switching between uncontrolled and controlled. (One difference between this implementation\n    // and React's <input> is that if oldIsControlled is indeterminate and newIsControlled true, we don't warn.)\n\n\n    if (oldProps && newIsControlled !== oldIsControlled) {\n      var oldType = oldIsControlled ? 'a controlled' : 'an uncontrolled';\n      var newType = oldIsControlled ? 'uncontrolled' : 'controlled';\n      var warnMap = oldIsControlled ? warningsMap.controlledToUncontrolled : warningsMap.uncontrolledToControlled;\n\n      if (!warnMap[componentId]) {\n        warnMap[componentId] = true;\n        warn(\"Warning: A component is changing \" + oldType + \" \" + componentName + \" to be \" + newType + \". \" + (componentName + \"s should not switch from controlled to uncontrolled (or vice versa). \") + \"Decide between using controlled or uncontrolled for the lifetime of the component. \" + \"More info: https://fb.me/react-controlled-components\");\n      }\n    }\n  }\n}","map":{"version":3,"sources":["warn/warnControlledUsage.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,QAAqB,QAArB;AACA,SAAS,YAAY,IAAI,iBAAzB,QAAkD,eAAlD;AAIA,IAAI,WAAJ;;AAMA,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,EAAA,WAAW,GAAG;AACZ,IAAA,aAAa,EAAE,EADH;AAEZ,IAAA,iBAAiB,EAAE,EAFP;AAGZ,IAAA,wBAAwB,EAAE,EAHd;AAIZ,IAAA,wBAAwB,EAAE;AAJd,GAAd;AAMD;AAED;;;AACA,OAAM,SAAU,uBAAV,GAAiC;AACrC,MAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,IAAA,WAAW,CAAC,aAAZ,GAA4B,EAA5B;AACA,IAAA,WAAW,CAAC,iBAAZ,GAAgC,EAAhC;AACA,IAAA,WAAW,CAAC,wBAAZ,GAAuC,EAAvC;AACA,IAAA,WAAW,CAAC,wBAAZ,GAAuC,EAAvC;AACD;AACF;AAqBD;;;;;;;;;AASG;;AACH,OAAM,SAAU,mBAAV,CAAiC,MAAjC,EAAsE;AAC1E,MAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AAEvC,QAAA,WAAA,GAAA,MAAA,CAAA,WAAA;AAAA,QACA,aAAA,GAAA,MAAA,CAAA,aADA;AAAA,QAEA,gBAAA,GAAA,MAAA,CAAA,gBAFA;AAAA,QAGA,KAAA,GAAA,MAAA,CAAA,KAHA;AAAA,QAIA,QAAA,GAAA,MAAA,CAAA,QAJA;AAAA,QAKA,YAAA,GAAA,MAAA,CAAA,YALA;AAAA,QAMA,YAAA,GAAA,MAAA,CAAA,YANA;AAAA,QAOA,SAAA,GAAA,MAAA,CAAA,SAPA,CAFuC,CAYzC;;AAEA,QAAM,eAAe,GAAG,QAAQ,GAAG,iBAAiB,CAAC,QAAD,EAAW,SAAX,CAApB,GAA4C,SAA5E;AACA,QAAM,eAAe,GAAG,iBAAiB,CAAC,KAAD,EAAQ,SAAR,CAAzC;;AAEA,QAAI,eAAJ,EAAqB;AACnB;AACA,UAAM,WAAW,GAAG,CAAC,CAAC,KAAK,CAAC,YAAD,CAA3B;AACA,UAAM,UAAU,GAAG,CAAC,EAAE,YAAY,IAAI,KAAK,CAAC,YAAD,CAAvB,CAApB;;AACA,UAAI,EAAE,WAAW,IAAI,UAAjB,KAAgC,CAAC,WAAW,CAAC,aAAZ,CAA0B,WAA1B,CAArC,EAA6E;AAC3E,QAAA,WAAW,CAAC,aAAZ,CAA0B,WAA1B,IAAyC,IAAzC;AACA,QAAA,IAAI,CACF,8BAA4B,SAA5B,GAAqC,cAArC,GAAoD,aAApD,GAAiE,eAAjE,GAAiF,YAAjF,GAA6F,aAA7F,IACE,6EAA2E,gBAA3E,GAA2F,KAD7F,KAEE,qBAAmB,YAAnB,GAA+B,GAA/B,IAAmC,YAAY,GAAG,UAAQ,YAAR,GAAoB,GAAvB,GAA6B,EAA5E,IAA8E,GAFhF,CADE,CAAJ;AAKD,OAXkB,CAanB;;;AACA,UAAM,YAAY,GAAG,KAAK,CAAC,gBAAD,CAA1B;;AACA,UAAI,YAAY,KAAK,SAAjB,IAA8B,YAAY,KAAK,IAA/C,IAAuD,CAAC,WAAW,CAAC,iBAAZ,CAA8B,WAA9B,CAA5D,EAAwG;AACtG,QAAA,WAAW,CAAC,iBAAZ,CAA8B,WAA9B,IAA6C,IAA7C;AACA,QAAA,IAAI,CACF,iCAA+B,SAA/B,GAAwC,SAAxC,GAAkD,gBAAlD,GAAkE,SAAlE,GAA4E,aAA5E,GAAyF,IAAzF,IACE,gFAA8E,SAA9E,GAAuF,UADzF,KAEE,aAAW,gBAAX,GAA2B,2EAF7B,KAGK,aAAa,GAAA,sFAHlB,CADE,CAAJ;AAMD;AACF,KAzCwC,CA2CzC;AACA;;;AACA,QAAI,QAAQ,IAAI,eAAe,KAAK,eAApC,EAAqD;AACnD,UAAM,OAAO,GAAG,eAAe,GAAG,cAAH,GAAoB,iBAAnD;AACA,UAAM,OAAO,GAAG,eAAe,GAAG,cAAH,GAAoB,YAAnD;AACA,UAAM,OAAO,GAAG,eAAe,GAAG,WAAW,CAAC,wBAAf,GAA0C,WAAW,CAAC,wBAArF;;AACA,UAAI,CAAC,OAAO,CAAC,WAAD,CAAZ,EAA2B;AACzB,QAAA,OAAO,CAAC,WAAD,CAAP,GAAuB,IAAvB;AACA,QAAA,IAAI,CACF,sCAAoC,OAApC,GAA2C,GAA3C,GAA+C,aAA/C,GAA4D,SAA5D,GAAsE,OAAtE,GAA6E,IAA7E,IACK,aAAa,GAAA,uEADlB,IAEE,qFAFF,GAGE,sDAJA,CAAJ;AAMD;AACF;AACF;AACF","sourcesContent":["import { warn } from './warn';\nimport { isControlled as checkIsControlled } from '../controlled';\n\ntype WarningMap = { [id: string]: boolean };\n\nlet warningsMap: {\n  valueOnChange: WarningMap;\n  valueDefaultValue: WarningMap;\n  controlledToUncontrolled: WarningMap;\n  uncontrolledToControlled: WarningMap;\n};\nif (process.env.NODE_ENV !== 'production') {\n  warningsMap = {\n    valueOnChange: {},\n    valueDefaultValue: {},\n    controlledToUncontrolled: {},\n    uncontrolledToControlled: {},\n  };\n}\n\n/** Reset controlled usage warnings for testing purposes. */\nexport function resetControlledWarnings(): void {\n  if (process.env.NODE_ENV !== 'production') {\n    warningsMap.valueOnChange = {};\n    warningsMap.valueDefaultValue = {};\n    warningsMap.controlledToUncontrolled = {};\n    warningsMap.uncontrolledToControlled = {};\n  }\n}\n\nexport interface IWarnControlledUsageParams<P> {\n  /** ID of the component instance. Used to prevent showing warnings repeatedly. */\n  componentId: string;\n  /** Name of the component class. */\n  componentName: string;\n  /** Current props to evaluate. */\n  props: P;\n  /** Previous props to evaluate (undefined if called in the constructor). */\n  oldProps?: P;\n  /** Name of the prop for the controlled value. */\n  valueProp: keyof P;\n  /** Name of the prop for the uncontrolled initial value. */\n  defaultValueProp: keyof P;\n  /** Name of the change handler prop. */\n  onChangeProp: keyof P;\n  /** Name of the read-only prop. */\n  readOnlyProp?: keyof P;\n}\n\n/**\n * Check for and warn on the following error conditions with a form component:\n * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n *    and the component is not read-only\n * - Both the value and defaultValue props are provided\n * - The component is attempting to switch between controlled and uncontrolled\n *\n * The messages mimic the warnings React gives for these error conditions on input elements.\n * The warning will only be displayed once per component ID.\n */\nexport function warnControlledUsage<P>(params: IWarnControlledUsageParams<P>): void {\n  if (process.env.NODE_ENV !== 'production') {\n    const {\n      componentId,\n      componentName,\n      defaultValueProp,\n      props,\n      oldProps,\n      onChangeProp,\n      readOnlyProp,\n      valueProp,\n    } = params;\n\n    // This warning logic closely follows what React does for native <input> elements.\n\n    const oldIsControlled = oldProps ? checkIsControlled(oldProps, valueProp) : undefined;\n    const newIsControlled = checkIsControlled(props, valueProp);\n\n    if (newIsControlled) {\n      // onChange (or readOnly) must be provided if value is provided\n      const hasOnChange = !!props[onChangeProp];\n      const isReadOnly = !!(readOnlyProp && props[readOnlyProp]);\n      if (!(hasOnChange || isReadOnly) && !warningsMap.valueOnChange[componentId]) {\n        warningsMap.valueOnChange[componentId] = true;\n        warn(\n          `Warning: You provided a '${valueProp}' prop to a ${componentName} without an '${onChangeProp}' handler. ` +\n            `This will render a read-only field. If the field should be mutable use '${defaultValueProp}'. ` +\n            `Otherwise, set '${onChangeProp}'${readOnlyProp ? ` or '${readOnlyProp}'` : ''}.`,\n        );\n      }\n\n      // value and defaultValue are mutually exclusive\n      const defaultValue = props[defaultValueProp];\n      if (defaultValue !== undefined && defaultValue !== null && !warningsMap.valueDefaultValue[componentId]) {\n        warningsMap.valueDefaultValue[componentId] = true;\n        warn(\n          `Warning: You provided both '${valueProp}' and '${defaultValueProp}' to a ${componentName}. ` +\n            `Form fields must be either controlled or uncontrolled (specify either the '${valueProp}' prop, ` +\n            `or the '${defaultValueProp}' prop, but not both). Decide between using a controlled or uncontrolled ` +\n            `${componentName} and remove one of these props. More info: https://fb.me/react-controlled-components`,\n        );\n      }\n    }\n\n    // Warn if switching between uncontrolled and controlled. (One difference between this implementation\n    // and React's <input> is that if oldIsControlled is indeterminate and newIsControlled true, we don't warn.)\n    if (oldProps && newIsControlled !== oldIsControlled) {\n      const oldType = oldIsControlled ? 'a controlled' : 'an uncontrolled';\n      const newType = oldIsControlled ? 'uncontrolled' : 'controlled';\n      const warnMap = oldIsControlled ? warningsMap.controlledToUncontrolled : warningsMap.uncontrolledToControlled;\n      if (!warnMap[componentId]) {\n        warnMap[componentId] = true;\n        warn(\n          `Warning: A component is changing ${oldType} ${componentName} to be ${newType}. ` +\n            `${componentName}s should not switch from controlled to uncontrolled (or vice versa). ` +\n            `Decide between using controlled or uncontrolled for the lifetime of the component. ` +\n            `More info: https://fb.me/react-controlled-components`,\n        );\n      }\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}