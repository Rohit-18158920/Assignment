{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport { Async, DelayedRender, classNamesFunction, getId, getNativeProps, getWindow, initializeComponentRef, inputProperties, isControlled, isIE11, textAreaProperties, warn, warnControlledUsage, warnMutuallyExclusive } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_STATE_VALUE = '';\nvar COMPONENT_NAME = 'TextField';\nvar REVEAL_ICON_NAME = 'RedEye';\nvar HIDE_ICON_NAME = 'Hide';\n\nvar TextFieldBase =\n/** @class */\nfunction (_super) {\n  __extends(TextFieldBase, _super);\n\n  function TextFieldBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._textElement = React.createRef();\n\n    _this._onFocus = function (ev) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(ev);\n      }\n\n      _this.setState({\n        isFocused: true\n      }, function () {\n        if (_this.props.validateOnFocusIn) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n\n    _this._onBlur = function (ev) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(ev);\n      }\n\n      _this.setState({\n        isFocused: false\n      }, function () {\n        if (_this.props.validateOnFocusOut) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n\n    _this._onRenderLabel = function (props) {\n      var label = props.label,\n          required = props.required; // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n\n      var labelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : undefined;\n\n      if (label) {\n        return React.createElement(Label, {\n          required: required,\n          htmlFor: _this._id,\n          styles: labelStyles,\n          disabled: props.disabled,\n          id: _this._labelId\n        }, props.label);\n      }\n\n      return null;\n    };\n\n    _this._onRenderDescription = function (props) {\n      if (props.description) {\n        return React.createElement(\"span\", {\n          className: _this._classNames.description\n        }, props.description);\n      }\n\n      return null;\n    };\n\n    _this._onRevealButtonClick = function (event) {\n      _this.setState(function (prevState) {\n        return {\n          isRevealingPassword: !prevState.isRevealingPassword\n        };\n      });\n    };\n\n    _this._onInputChange = function (event) {\n      // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n      // which have *probably* been fixed now:\n      // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n      // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n      // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n      // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n      var element = event.target;\n      var value = element.value; // Ignore this event if the value is undefined (in case one of the IE bugs comes back)\n\n      if (value === undefined || value === _this._lastChangeValue) {\n        return;\n      }\n\n      _this._lastChangeValue = value; // This is so developers can access the event properties in asynchronous callbacks\n      // https://reactjs.org/docs/events.html#event-pooling\n\n      event.persist();\n      var isSameValue;\n\n      _this.setState(function (prevState, props) {\n        var prevValue = _getValue(props, prevState) || '';\n        isSameValue = value === prevValue; // Avoid doing unnecessary work when the value has not changed.\n\n        if (isSameValue) {\n          return null;\n        } // ONLY if this is an uncontrolled component, update the displayed value.\n        // (Controlled components must update the `value` prop from `onChange`.)\n\n\n        return _this._isControlled ? null : {\n          uncontrolledValue: value\n        };\n      }, function () {\n        // If the value actually changed, call onChange (for either controlled or uncontrolled)\n        var onChange = _this.props.onChange;\n\n        if (!isSameValue && onChange) {\n          onChange(event, value);\n        }\n      });\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage'\n      });\n    }\n\n    _this._fallbackId = getId(COMPONENT_NAME);\n    _this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    _this._labelId = getId(COMPONENT_NAME + 'Label');\n\n    _this._warnControlledUsage();\n\n    var _a = props.defaultValue,\n        defaultValue = _a === void 0 ? DEFAULT_STATE_VALUE : _a;\n\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n\n    _this.state = {\n      uncontrolledValue: _this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: ''\n    };\n    _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);\n    _this._lastValidation = 0;\n    return _this;\n  }\n\n  Object.defineProperty(TextFieldBase.prototype, \"value\", {\n    /**\n     * Gets the current value of the text field.\n     */\n    get: function () {\n      return _getValue(this.props, this.state);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TextFieldBase.prototype.componentDidMount = function () {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  };\n\n  TextFieldBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n\n  TextFieldBase.prototype.getSnapshotBeforeUpdate = function (prevProps, prevState) {\n    return {\n      selection: [this.selectionStart, this.selectionEnd]\n    };\n  };\n\n  TextFieldBase.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {\n    var props = this.props;\n    var _a = (snapshot || {}).selection,\n        selection = _a === void 0 ? [null, null] : _a;\n    var start = selection[0],\n        end = selection[1];\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    var prevValue = _getValue(prevProps, prevState);\n\n    var value = this.value;\n\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps); // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n\n\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({\n          errorMessage: ''\n        });\n      } // Adjust height if needed based on new value\n\n\n      this._adjustInputHeight(); // Reset the record of the last value seen by a change/input event\n\n\n      this._lastChangeValue = undefined; // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  };\n\n  TextFieldBase.prototype.render = function () {\n    var _a = this.props,\n        borderless = _a.borderless,\n        className = _a.className,\n        disabled = _a.disabled,\n        iconProps = _a.iconProps,\n        inputClassName = _a.inputClassName,\n        label = _a.label,\n        multiline = _a.multiline,\n        required = _a.required,\n        underlined = _a.underlined,\n        prefix = _a.prefix,\n        resizable = _a.resizable,\n        suffix = _a.suffix,\n        theme = _a.theme,\n        styles = _a.styles,\n        autoAdjustHeight = _a.autoAdjustHeight,\n        canRevealPassword = _a.canRevealPassword,\n        type = _a.type,\n        _b = _a.onRenderPrefix,\n        onRenderPrefix = _b === void 0 ? this._onRenderPrefix : _b,\n        _c = _a.onRenderSuffix,\n        onRenderSuffix = _c === void 0 ? this._onRenderSuffix : _c,\n        _d = _a.onRenderLabel,\n        onRenderLabel = _d === void 0 ? this._onRenderLabel : _d,\n        _e = _a.onRenderDescription,\n        onRenderDescription = _e === void 0 ? this._onRenderDescription : _e;\n    var _f = this.state,\n        isFocused = _f.isFocused,\n        isRevealingPassword = _f.isRevealingPassword;\n    var errorMessage = this._errorMessage;\n\n    var hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    var classNames = this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      focused: isFocused,\n      required: required,\n      multiline: multiline,\n      hasLabel: !!label,\n      hasErrorMessage: !!errorMessage,\n      borderless: borderless,\n      resizable: resizable,\n      hasIcon: !!iconProps,\n      underlined: underlined,\n      inputClassName: inputClassName,\n      autoAdjustHeight: autoAdjustHeight,\n      hasRevealButton: hasRevealButton\n    });\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, React.createElement(\"div\", {\n      className: classNames.wrapper\n    }, onRenderLabel(this.props, this._onRenderLabel), React.createElement(\"div\", {\n      className: classNames.fieldGroup\n    }, (prefix !== undefined || this.props.onRenderPrefix) && React.createElement(\"div\", {\n      className: classNames.prefix\n    }, onRenderPrefix(this.props, this._onRenderPrefix)), multiline ? this._renderTextArea() : this._renderInput(), iconProps && React.createElement(Icon, __assign({\n      className: classNames.icon\n    }, iconProps)), hasRevealButton && // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n    React.createElement(\"button\", {\n      className: classNames.revealButton,\n      onClick: this._onRevealButtonClick,\n      type: \"button\"\n    }, React.createElement(\"span\", {\n      className: classNames.revealSpan\n    }, React.createElement(Icon, {\n      className: classNames.revealIcon,\n      iconName: isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME\n    }))), (suffix !== undefined || this.props.onRenderSuffix) && React.createElement(\"div\", {\n      className: classNames.suffix\n    }, onRenderSuffix(this.props, this._onRenderSuffix)))), this._isDescriptionAvailable && React.createElement(\"span\", {\n      id: this._descriptionId\n    }, onRenderDescription(this.props, this._onRenderDescription), errorMessage && React.createElement(\"div\", {\n      role: \"alert\"\n    }, React.createElement(DelayedRender, null, React.createElement(\"p\", {\n      className: classNames.errorMessage\n    }, React.createElement(\"span\", {\n      \"data-automation-id\": \"error-message\"\n    }, errorMessage))))));\n  };\n  /**\n   * Sets focus on the text field\n   */\n\n\n  TextFieldBase.prototype.focus = function () {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  };\n  /**\n   * Blurs the text field.\n   */\n\n\n  TextFieldBase.prototype.blur = function () {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  };\n  /**\n   * Selects the text field\n   */\n\n\n  TextFieldBase.prototype.select = function () {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  };\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n\n\n  TextFieldBase.prototype.setSelectionStart = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  };\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n\n\n  TextFieldBase.prototype.setSelectionEnd = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"selectionStart\", {\n    /**\n     * Gets the selection start of the text field\n     */\n    get: function () {\n      return this._textElement.current ? this._textElement.current.selectionStart : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"selectionEnd\", {\n    /**\n     * Gets the selection end of the text field\n     */\n    get: function () {\n      return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n\n  TextFieldBase.prototype.setSelectionRange = function (start, end) {\n    if (this._textElement.current) {\n      this._textElement.current.setSelectionRange(start, end);\n    }\n  };\n\n  TextFieldBase.prototype._warnControlledUsage = function (prevProps) {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly'\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\"Warning: 'value' prop on '\" + COMPONENT_NAME + \"' should not be null. Consider using an \" + 'empty string to clear the component or undefined to indicate an uncontrolled component.');\n    }\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"_id\", {\n    /** Returns `props.id` if available, or a fallback if not. */\n    get: function () {\n      return this.props.id || this._fallbackId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"_isControlled\", {\n    get: function () {\n      return isControlled(this.props, 'value');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TextFieldBase.prototype._onRenderPrefix = function (props) {\n    var prefix = props.prefix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, prefix);\n  };\n\n  TextFieldBase.prototype._onRenderSuffix = function (props) {\n    var suffix = props.suffix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, suffix);\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"_errorMessage\", {\n    /**\n     * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n     *\n     * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n     * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n     */\n    get: function () {\n      var _a = this.props.errorMessage,\n          errorMessage = _a === void 0 ? this.state.errorMessage : _a;\n      return errorMessage || '';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"_isDescriptionAvailable\", {\n    /**\n     * If a custom description render function is supplied then treat description as always available.\n     * Otherwise defer to the presence of description or error message text.\n     */\n    get: function () {\n      var props = this.props;\n      return !!(props.onRenderDescription || props.description || this._errorMessage);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TextFieldBase.prototype._renderTextArea = function () {\n    var textAreaProps = getNativeProps(this.props, textAreaProperties, ['defaultValue']);\n    var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return React.createElement(\"textarea\", __assign({\n      id: this._id\n    }, textAreaProps, {\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      \"aria-invalid\": !!this._errorMessage,\n      \"aria-label\": this.props.ariaLabel,\n      readOnly: this.props.readOnly,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    }));\n  };\n\n  TextFieldBase.prototype._renderInput = function () {\n    var _a;\n\n    var inputProps = getNativeProps(this.props, inputProperties, ['defaultValue', 'type']);\n    var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    var type = this.state.isRevealingPassword ? 'text' : (_a = this.props.type, _a !== null && _a !== void 0 ? _a : 'text');\n    return React.createElement(\"input\", __assign({\n      type: type,\n      id: this._id,\n      \"aria-labelledby\": ariaLabelledBy\n    }, inputProps, {\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      \"aria-label\": this.props.ariaLabel,\n      \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      \"aria-invalid\": !!this._errorMessage,\n      readOnly: this.props.readOnly,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    }));\n  };\n\n  TextFieldBase.prototype._validate = function (value) {\n    var _this = this; // In case _validate is called again while validation promise is executing\n\n\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    var onGetErrorMessage = this.props.onGetErrorMessage;\n    var result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({\n          errorMessage: result\n        });\n\n        this._notifyAfterValidate(value, result);\n      } else {\n        var currentValidation_1 = ++this._lastValidation;\n        result.then(function (errorMessage) {\n          if (currentValidation_1 === _this._lastValidation) {\n            _this.setState({\n              errorMessage: errorMessage\n            });\n          }\n\n          _this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  };\n\n  TextFieldBase.prototype._notifyAfterValidate = function (value, errorMessage) {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  };\n\n  TextFieldBase.prototype._adjustInputHeight = function () {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      var textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  };\n\n  TextFieldBase.defaultProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n    canRevealPassword: false\n  };\n  return TextFieldBase;\n}(React.Component);\n\nexport { TextFieldBase };\n/** Get the value from the given state and props (converting from number to string if needed) */\n\nfunction _getValue(props, state) {\n  var _a = props.value,\n      value = _a === void 0 ? state.uncontrolledValue : _a;\n\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n\n  return value;\n}\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\n\n\nfunction _shouldValidateAllChanges(props) {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n} // Only calculate this once across all TextFields, since will stay the same\n\n\nvar __browserNeedsRevealButton;\n\nfunction _browserNeedsRevealButton() {\n  var _a;\n\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    var win = getWindow();\n\n    if ((_a = win) === null || _a === void 0 ? void 0 : _a.navigator) {\n      // Edge, Chromium Edge\n      var isEdge = /Edg/.test(win.navigator.userAgent || '');\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n\n  return __browserNeedsRevealButton;\n}","map":{"version":3,"sources":["components/TextField/TextField.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { Label, ILabelStyleProps, ILabelStyles } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  DelayedRender,\n  IStyleFunctionOrObject,\n  classNamesFunction,\n  getId,\n  getNativeProps,\n  getWindow,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  isIE11,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n\n  /**\n   * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\n   * currently being revealed.\n   */\n  isRevealingPassword?: boolean;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nconst REVEAL_ICON_NAME = 'RedEye';\nconst HIDE_ICON_NAME = 'Hide';\n\nexport class TextFieldBase extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n    canRevealPassword: false,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // Reset the record of the last value seen by a change/input event\n      this._lastChangeValue = undefined;\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      canRevealPassword,\n      type,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused, isRevealingPassword } = this.state;\n    const errorMessage = this._errorMessage;\n\n    const hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    const classNames = (this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: !!errorMessage,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n      hasRevealButton,\n    }));\n\n    return (\n      <div className={classNames.root}>\n        <div className={classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={classNames.prefix}>{onRenderPrefix(this.props, this._onRenderPrefix)}</div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={classNames.icon} {...iconProps} />}\n            {hasRevealButton && (\n              // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n              <button className={classNames.revealButton} onClick={this._onRevealButtonClick} type=\"button\">\n                <span className={classNames.revealSpan}>\n                  <Icon\n                    className={classNames.revealIcon}\n                    iconName={isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME}\n                  />\n                </span>\n              </button>\n            )}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={classNames.suffix}>{onRenderSuffix(this.props, this._onRenderSuffix)}</div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>\n                  <p className={classNames.errorMessage}>\n                    <span data-automation-id=\"error-message\">{errorMessage}</span>\n                  </p>\n                </DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): React.ReactElement<React.HTMLAttributes<HTMLInputElement>> {\n    const inputProps = getNativeProps<React.HTMLAttributes<HTMLInputElement>>(this.props, inputProperties, [\n      'defaultValue',\n      'type',\n    ]);\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    const type = this.state.isRevealingPassword ? 'text' : this.props.type ?? 'text';\n    return (\n      <input\n        type={type}\n        id={this._id}\n        aria-labelledby={ariaLabelledBy}\n        {...inputProps}\n        ref={this._textElement as React.RefObject<HTMLInputElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-label={this.props.ariaLabel}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _onRevealButtonClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState(prevState => ({ isRevealingPassword: !prevState.isRevealingPassword }));\n  };\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if the value is undefined (in case one of the IE bugs comes back)\n    if (value === undefined || value === this._lastChangeValue) {\n      return;\n    }\n    this._lastChangeValue = value;\n\n    // This is so developers can access the event properties in asynchronous callbacks\n    // https://reactjs.org/docs/events.html#event-pooling\n    event.persist();\n\n    let isSameValue: boolean;\n    this.setState(\n      (prevState: ITextFieldState, props: ITextFieldProps) => {\n        const prevValue = _getValue(props, prevState) || '';\n        isSameValue = value === prevValue;\n        // Avoid doing unnecessary work when the value has not changed.\n        if (isSameValue) {\n          return null;\n        }\n\n        // ONLY if this is an uncontrolled component, update the displayed value.\n        // (Controlled components must update the `value` prop from `onChange`.)\n        return this._isControlled ? null : { uncontrolledValue: value };\n      },\n      () => {\n        // If the value actually changed, call onChange (for either controlled or uncontrolled)\n        const { onChange } = this.props;\n        if (!isSameValue && onChange) {\n          onChange(event, value);\n        }\n      },\n    );\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n\n// Only calculate this once across all TextFields, since will stay the same\nlet __browserNeedsRevealButton: boolean | undefined;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    const win = getWindow();\n\n    if (win?.navigator) {\n      // Edge, Chromium Edge\n      const isEdge = /Edg/.test(win.navigator.userAgent || '');\n\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}