{"ast":null,"code":"import { getParent } from './getParent';\n/**\n * Finds the first parent element where the matchFunction returns true\n * @param element - element to start searching at\n * @param matchFunction - the function that determines if the element is a match\n * @returns the matched element or null no match was found\n */\n\nexport function findElementRecursive(element, matchFunction) {\n  if (!element || element === document.body) {\n    return null;\n  }\n\n  return matchFunction(element) ? element : findElementRecursive(getParent(element), matchFunction);\n}","map":{"version":3,"sources":["findElementRecursive.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,aAA1B;AACA;;;;;AAKG;;AACH,OAAM,SAAU,oBAAV,CACJ,OADI,EAEJ,aAFI,EAE4C;AAEhD,MAAI,CAAC,OAAD,IAAY,OAAO,KAAK,QAAQ,CAAC,IAArC,EAA2C;AACzC,WAAO,IAAP;AACD;;AACD,SAAO,aAAa,CAAC,OAAD,CAAb,GAAyB,OAAzB,GAAmC,oBAAoB,CAAC,SAAS,CAAC,OAAD,CAAV,EAAqB,aAArB,CAA9D;AACD","sourcesContent":["import { getParent } from './getParent';\n/**\n * Finds the first parent element where the matchFunction returns true\n * @param element - element to start searching at\n * @param matchFunction - the function that determines if the element is a match\n * @returns the matched element or null no match was found\n */\nexport function findElementRecursive(\n  element: HTMLElement | null,\n  matchFunction: (element: HTMLElement) => boolean,\n): HTMLElement | null {\n  if (!element || element === document.body) {\n    return null;\n  }\n  return matchFunction(element) ? element : findElementRecursive(getParent(element), matchFunction);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}