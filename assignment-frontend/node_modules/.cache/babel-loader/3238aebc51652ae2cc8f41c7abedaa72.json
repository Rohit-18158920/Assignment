{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties, Async, initializeComponentRef } from '../../Utilities';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\nvar TRANSITION_ANIMATION_INTERVAL = 200;\n/* ms */\n\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Shimmer}\n */\n\nvar ShimmerBase =\n/** @class */\nfunction (_super) {\n  __extends(ShimmerBase, _super);\n\n  function ShimmerBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    initializeComponentRef(_this);\n    _this.state = {\n      contentLoaded: props.isDataLoaded\n    };\n    _this._async = new Async(_this);\n    return _this;\n  }\n\n  ShimmerBase.prototype.componentDidUpdate = function (prevProps) {\n    var _this = this;\n\n    var isDataLoaded = this.props.isDataLoaded;\n\n    if (isDataLoaded !== prevProps.isDataLoaded) {\n      this._async.clearTimeout(this._lastTimeoutId); // Removing the shimmerWrapper div from the DOM only after the fade out animation completed.\n\n\n      if (isDataLoaded) {\n        this._lastTimeoutId = this._async.setTimeout(function () {\n          _this.setState({\n            contentLoaded: isDataLoaded\n          });\n        }, TRANSITION_ANIMATION_INTERVAL);\n      } else {\n        this.setState({\n          contentLoaded: isDataLoaded\n        });\n      }\n    }\n  };\n\n  ShimmerBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n\n  ShimmerBase.prototype.render = function () {\n    var _a = this.props,\n        styles = _a.styles,\n        shimmerElements = _a.shimmerElements,\n        children = _a.children,\n        isDataLoaded = _a.isDataLoaded,\n        width = _a.width,\n        className = _a.className,\n        customElementsGroup = _a.customElementsGroup,\n        theme = _a.theme,\n        ariaLabel = _a.ariaLabel,\n        shimmerColors = _a.shimmerColors;\n    var contentLoaded = this.state.contentLoaded;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      isDataLoaded: isDataLoaded,\n      className: className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n      shimmerColor: shimmerColors && shimmerColors.shimmer,\n      shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave\n    });\n    var divProps = getNativeProps(this.props, divProperties);\n    return React.createElement(\"div\", __assign({}, divProps, {\n      className: this._classNames.root\n    }), !contentLoaded && React.createElement(\"div\", {\n      style: {\n        width: width ? width : '100%'\n      },\n      className: this._classNames.shimmerWrapper\n    }, React.createElement(\"div\", {\n      className: this._classNames.shimmerGradient\n    }), customElementsGroup ? customElementsGroup : React.createElement(ShimmerElementsGroup, {\n      shimmerElements: shimmerElements,\n      backgroundColor: shimmerColors && shimmerColors.background\n    })), children && React.createElement(\"div\", {\n      className: this._classNames.dataWrapper\n    }, children), ariaLabel && !isDataLoaded && React.createElement(\"div\", {\n      role: \"status\",\n      \"aria-live\": \"polite\"\n    }, React.createElement(DelayedRender, null, React.createElement(\"div\", {\n      className: this._classNames.screenReaderText\n    }, ariaLabel))));\n  };\n\n  ShimmerBase.defaultProps = {\n    isDataLoaded: false\n  };\n  return ShimmerBase;\n}(React.Component);\n\nexport { ShimmerBase };","map":{"version":3,"sources":["components/Shimmer/Shimmer.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  classNamesFunction,\n  DelayedRender,\n  getNativeProps,\n  divProperties,\n  Async,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { IShimmerProps, IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\n\nexport interface IShimmerState {\n  /**\n   * Flag for knowing when to remove the shimmerWrapper from the DOM.\n   */\n  contentLoaded?: boolean;\n}\n\nconst TRANSITION_ANIMATION_INTERVAL = 200; /* ms */\n\nconst getClassNames = classNamesFunction<IShimmerStyleProps, IShimmerStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport class ShimmerBase extends React.Component<IShimmerProps, IShimmerState> {\n  public static defaultProps: IShimmerProps = {\n    isDataLoaded: false,\n  };\n\n  private _classNames: { [key in keyof IShimmerStyles]: string };\n  private _lastTimeoutId: number;\n  private _async: Async;\n\n  constructor(props: IShimmerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      contentLoaded: props.isDataLoaded,\n    };\n\n    this._async = new Async(this);\n  }\n\n  public componentDidUpdate(prevProps: IShimmerProps): void {\n    const { isDataLoaded } = this.props;\n\n    if (isDataLoaded !== prevProps.isDataLoaded) {\n      this._async.clearTimeout(this._lastTimeoutId);\n\n      // Removing the shimmerWrapper div from the DOM only after the fade out animation completed.\n      if (isDataLoaded) {\n        this._lastTimeoutId = this._async.setTimeout(() => {\n          this.setState({\n            contentLoaded: isDataLoaded,\n          });\n        }, TRANSITION_ANIMATION_INTERVAL);\n      } else {\n        this.setState({\n          contentLoaded: isDataLoaded,\n        });\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const {\n      styles,\n      shimmerElements,\n      children,\n      isDataLoaded,\n      width,\n      className,\n      customElementsGroup,\n      theme,\n      ariaLabel,\n      shimmerColors,\n    } = this.props;\n\n    const { contentLoaded } = this.state;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      isDataLoaded,\n      className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n      shimmerColor: shimmerColors && shimmerColors.shimmer,\n      shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave,\n    });\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    return (\n      <div {...divProps} className={this._classNames.root}>\n        {!contentLoaded && (\n          <div style={{ width: width ? width : '100%' }} className={this._classNames.shimmerWrapper}>\n            <div className={this._classNames.shimmerGradient} />\n            {customElementsGroup ? (\n              customElementsGroup\n            ) : (\n              <ShimmerElementsGroup\n                shimmerElements={shimmerElements}\n                backgroundColor={shimmerColors && shimmerColors.background}\n              />\n            )}\n          </div>\n        )}\n        {children && <div className={this._classNames.dataWrapper}>{children}</div>}\n        {ariaLabel && !isDataLoaded && (\n          <div role=\"status\" aria-live=\"polite\">\n            <DelayedRender>\n              <div className={this._classNames.screenReaderText}>{ariaLabel}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}