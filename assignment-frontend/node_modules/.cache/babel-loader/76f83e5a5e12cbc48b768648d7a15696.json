{"ast":null,"code":"import * as React from 'react';\nimport { useConst } from './useConst';\n/**\n * Hook to store a value and generate callbacks for setting the value to true or false.\n * The identity of the callbacks will always stay the same.\n *\n * @param initialState - Initial value\n * @returns Array with the current value and an object containing the updater callbacks.\n */\n\nexport function useBoolean(initialState) {\n  var _a = React.useState(initialState),\n      value = _a[0],\n      setValue = _a[1]; // Storing the value in a ref is redundant but allows the `toggle` callback to have a\n  // constant identity, which overall is probably better for consumers' perf.\n\n\n  var valueRef = React.useRef(value);\n  var setTrue = useConst(function () {\n    return function () {\n      setValue(true);\n      valueRef.current = true;\n    };\n  });\n  var setFalse = useConst(function () {\n    return function () {\n      setValue(false);\n      valueRef.current = false;\n    };\n  });\n  var toggle = useConst(function () {\n    return function () {\n      return valueRef.current ? setFalse() : setTrue();\n    };\n  });\n  return [value, {\n    setTrue: setTrue,\n    setFalse: setFalse,\n    toggle: toggle\n  }];\n}","map":{"version":3,"sources":["useBoolean.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,QAAT,QAAyB,YAAzB;AAYA;;;;;;AAMG;;AACH,OAAM,SAAU,UAAV,CAAqB,YAArB,EAA0C;AACxC,MAAA,EAAA,GAAA,KAAA,CAAA,QAAA,CAAA,YAAA,CAAA;AAAA,MAAC,KAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAQ,QAAA,GAAA,EAAA,CAAA,CAAA,CAAR,CADwC,CAE9C;AACA;;;AACA,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAN,CAAa,KAAb,CAAjB;AAEA,MAAM,OAAO,GAAG,QAAQ,CAAC,YAAA;AAAM,WAAA,YAAA;AAC7B,MAAA,QAAQ,CAAC,IAAD,CAAR;AACA,MAAA,QAAQ,CAAC,OAAT,GAAmB,IAAnB;AAF6B,KAAA;AAG9B,GAHuB,CAAxB;AAIA,MAAM,QAAQ,GAAG,QAAQ,CAAC,YAAA;AAAM,WAAA,YAAA;AAC9B,MAAA,QAAQ,CAAC,KAAD,CAAR;AACA,MAAA,QAAQ,CAAC,OAAT,GAAmB,KAAnB;AAF8B,KAAA;AAG/B,GAHwB,CAAzB;AAIA,MAAM,MAAM,GAAG,QAAQ,CAAC,YAAA;AAAM,WAAA,YAAA;AAAM,aAAC,QAAQ,CAAC,OAAT,GAAmB,QAAQ,EAA3B,GAAgC,OAAjC,EAAA;AAAN,KAAA;AAAiD,GAAxD,CAAvB;AAEA,SAAO,CAAC,KAAD,EAAQ;AAAE,IAAA,OAAO,EAAA,OAAT;AAAW,IAAA,QAAQ,EAAA,QAAnB;AAAqB,IAAA,MAAM,EAAA;AAA3B,GAAR,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { useConst } from './useConst';\n\n/** Updater callbacks returned by `useBoolean`. */\nexport interface IUseBooleanCallbacks {\n  /** Set the value to true. Always has the same identity. */\n  setTrue: () => void;\n  /** Set the value to false. Always has the same identity. */\n  setFalse: () => void;\n  /** Toggle the value. Always has the same identity. */\n  toggle: () => void;\n}\n\n/**\n * Hook to store a value and generate callbacks for setting the value to true or false.\n * The identity of the callbacks will always stay the same.\n *\n * @param initialState - Initial value\n * @returns Array with the current value and an object containing the updater callbacks.\n */\nexport function useBoolean(initialState: boolean): [boolean, IUseBooleanCallbacks] {\n  const [value, setValue] = React.useState(initialState);\n  // Storing the value in a ref is redundant but allows the `toggle` callback to have a\n  // constant identity, which overall is probably better for consumers' perf.\n  const valueRef = React.useRef(value);\n\n  const setTrue = useConst(() => () => {\n    setValue(true);\n    valueRef.current = true;\n  });\n  const setFalse = useConst(() => () => {\n    setValue(false);\n    valueRef.current = false;\n  });\n  const toggle = useConst(() => () => (valueRef.current ? setFalse() : setTrue()));\n\n  return [value, { setTrue, setFalse, toggle }];\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}