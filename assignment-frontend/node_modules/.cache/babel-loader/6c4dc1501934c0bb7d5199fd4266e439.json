{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, on, initializeComponentRef, KeyCodes, getId } from '../../../Utilities';\nimport { MAX_COLOR_SATURATION, MAX_COLOR_VALUE } from '../../../utilities/color/consts';\nimport { getFullColorString } from '../../../utilities/color/getFullColorString';\nimport { updateSV } from '../../../utilities/color/updateSV';\nimport { clamp } from '../../../utilities/color/clamp';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory ColorPicker}\n */\n\nvar ColorRectangleBase =\n/** @class */\nfunction (_super) {\n  __extends(ColorRectangleBase, _super);\n\n  function ColorRectangleBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._disposables = [];\n    _this._root = React.createRef();\n    _this._isAdjustingSaturation = true;\n    _this._descriptionId = getId('ColorRectangle-description');\n\n    _this._onKeyDown = function (ev) {\n      var color = _this.state.color;\n      var s = color.s,\n          v = color.v;\n      var increment = ev.shiftKey ? 10 : 1; // Intentionally DO NOT flip the color picker in RTL: its orientation is not very meaningful,\n      // and getting all the math and styles flipped correctly is tricky\n\n      switch (ev.which) {\n        case KeyCodes.up:\n          {\n            _this._isAdjustingSaturation = false;\n            v += increment; // V = 100 (lightest) is at the top\n\n            break;\n          }\n\n        case KeyCodes.down:\n          {\n            _this._isAdjustingSaturation = false;\n            v -= increment; // V = 0 (darkest) is at the bottom\n\n            break;\n          }\n\n        case KeyCodes.left:\n          {\n            _this._isAdjustingSaturation = true;\n            s -= increment;\n            break;\n          }\n\n        case KeyCodes.right:\n          {\n            _this._isAdjustingSaturation = true;\n            s += increment;\n            break;\n          }\n\n        default:\n          return;\n      }\n\n      _this._updateColor(ev, updateSV(color, clamp(s, MAX_COLOR_SATURATION), clamp(v, MAX_COLOR_VALUE)));\n    };\n\n    _this._onMouseDown = function (ev) {\n      _this._disposables.push(on(window, 'mousemove', _this._onMouseMove, true), on(window, 'mouseup', _this._disposeListeners, true));\n\n      _this._onMouseMove(ev);\n    };\n\n    _this._onMouseMove = function (ev) {\n      if (!_this._root.current) {\n        return;\n      } // Leaving the following commented code which is sometimes necessary for debugging:\n      // If the primary button (1) isn't pressed, the user is no longer dragging, so turn off\n      // the event handlers and exit.\n      // if (!(ev.buttons & 1)) {\n      //   this._disposeListeners();\n      //   return;\n      // }\n\n\n      var newColor = _getNewColor(ev, _this.state.color, _this._root.current);\n\n      if (newColor) {\n        _this._updateColor(ev, newColor);\n      }\n    };\n\n    _this._disposeListeners = function () {\n      _this._disposables.forEach(function (dispose) {\n        return dispose();\n      });\n\n      _this._disposables = [];\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      color: props.color\n    };\n    return _this;\n  }\n\n  Object.defineProperty(ColorRectangleBase.prototype, \"color\", {\n    get: function () {\n      return this.state.color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ColorRectangleBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // if props changed (as opposed to a state update), set the value\n    // TODO: switch to strict controlled pattern instead\n    if (prevProps !== this.props && this.props.color) {\n      this.setState({\n        color: this.props.color\n      });\n    }\n  };\n\n  ColorRectangleBase.prototype.componentWillUnmount = function () {\n    this._disposeListeners();\n  };\n\n  ColorRectangleBase.prototype.render = function () {\n    var _a = this.props,\n        minSize = _a.minSize,\n        theme = _a.theme,\n        className = _a.className,\n        styles = _a.styles,\n        ariaValueFormat = _a.ariaValueFormat,\n        ariaLabel = _a.ariaLabel,\n        ariaDescription = _a.ariaDescription;\n    var color = this.state.color;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      minSize: minSize\n    });\n    var valueText = ariaValueFormat.replace('{0}', String(color.s)).replace('{1}', String(color.v));\n    return React.createElement(\"div\", {\n      ref: this._root,\n      tabIndex: 0,\n      className: classNames.root,\n      style: {\n        backgroundColor: getFullColorString(color)\n      },\n      onMouseDown: this._onMouseDown,\n      onKeyDown: this._onKeyDown,\n      role: \"slider\",\n      \"aria-valuetext\": valueText,\n      \"aria-valuenow\": this._isAdjustingSaturation ? color.s : color.v,\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": MAX_COLOR_VALUE,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": this._descriptionId,\n      \"data-is-focusable\": true\n    }, React.createElement(\"div\", {\n      className: classNames.description,\n      id: this._descriptionId\n    }, ariaDescription), React.createElement(\"div\", {\n      className: classNames.light\n    }), React.createElement(\"div\", {\n      className: classNames.dark\n    }), React.createElement(\"div\", {\n      className: classNames.thumb,\n      style: {\n        left: color.s + '%',\n        top: MAX_COLOR_VALUE - color.v + '%',\n        backgroundColor: color.str\n      }\n    }));\n  };\n\n  ColorRectangleBase.prototype._updateColor = function (ev, color) {\n    var onChange = this.props.onChange;\n    var oldColor = this.state.color;\n\n    if (color.s === oldColor.s && color.v === oldColor.v) {\n      return; // no change\n    }\n\n    if (onChange) {\n      onChange(ev, color);\n    }\n\n    if (!ev.defaultPrevented) {\n      this.setState({\n        color: color\n      });\n      ev.preventDefault();\n    }\n  };\n\n  ColorRectangleBase.defaultProps = {\n    minSize: 220,\n    ariaLabel: 'Saturation and brightness',\n    ariaValueFormat: 'Saturation {0} brightness {1}',\n    ariaDescription: 'Use left and right arrow keys to set saturation. Use up and down arrow keys to set brightness.'\n  };\n  return ColorRectangleBase;\n}(React.Component);\n\nexport { ColorRectangleBase };\n/**\n * Exported for testing only.\n * @internal\n */\n\nexport function _getNewColor(ev, prevColor, root) {\n  var rectSize = root.getBoundingClientRect();\n  var sPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n  var vPercentage = (ev.clientY - rectSize.top) / rectSize.height;\n  return updateSV(prevColor, clamp(Math.round(sPercentage * MAX_COLOR_SATURATION), MAX_COLOR_SATURATION), clamp(Math.round(MAX_COLOR_VALUE - vPercentage * MAX_COLOR_VALUE), MAX_COLOR_VALUE));\n}","map":{"version":3,"sources":["components/ColorPicker/ColorRectangle/ColorRectangle.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,kBAAT,EAA6B,EAA7B,EAAiC,sBAAjC,EAAyD,QAAzD,EAAmE,KAAnE,QAAgF,oBAAhF;AAUA,SAAS,oBAAT,EAA+B,eAA/B,QAAsD,iCAAtD;AACA,SAAS,kBAAT,QAAmC,6CAAnC;AACA,SAAS,QAAT,QAAyB,mCAAzB;AACA,SAAS,KAAT,QAAsB,gCAAtB;AAEA,IAAM,aAAa,GAAG,kBAAkB,EAAxC;AAMA;;AAEG;;AACH,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;;AActC,WAAA,kBAAA,CAAY,KAAZ,EAAuC;AAAvC,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADd;;AALQ,IAAA,KAAA,CAAA,YAAA,GAA+B,EAA/B;AACA,IAAA,KAAA,CAAA,KAAA,GAAQ,KAAK,CAAC,SAAN,EAAR;AACA,IAAA,KAAA,CAAA,sBAAA,GAAkC,IAAlC;AACA,IAAA,KAAA,CAAA,cAAA,GAAiB,KAAK,CAAC,4BAAD,CAAtB;;AA4EA,IAAA,KAAA,CAAA,UAAA,GAAa,UAAC,EAAD,EAAqC;AAChD,UAAA,KAAA,GAAA,KAAA,CAAA,KAAA,CAAA,KAAA;AACF,UAAA,CAAA,GAAA,KAAA,CAAA,CAAA;AAAA,UAAG,CAAA,GAAA,KAAA,CAAA,CAAH;AAEN,UAAM,SAAS,GAAG,EAAE,CAAC,QAAH,GAAc,EAAd,GAAmB,CAArC,CAJwD,CAMxD;AACA;;AACA,cAAQ,EAAE,CAAC,KAAX;AACE,aAAK,QAAQ,CAAC,EAAd;AAAkB;AAChB,YAAA,KAAI,CAAC,sBAAL,GAA8B,KAA9B;AACA,YAAA,CAAC,IAAI,SAAL,CAFgB,CAEA;;AAChB;AACD;;AACD,aAAK,QAAQ,CAAC,IAAd;AAAoB;AAClB,YAAA,KAAI,CAAC,sBAAL,GAA8B,KAA9B;AACA,YAAA,CAAC,IAAI,SAAL,CAFkB,CAEF;;AAChB;AACD;;AACD,aAAK,QAAQ,CAAC,IAAd;AAAoB;AAClB,YAAA,KAAI,CAAC,sBAAL,GAA8B,IAA9B;AACA,YAAA,CAAC,IAAI,SAAL;AACA;AACD;;AACD,aAAK,QAAQ,CAAC,KAAd;AAAqB;AACnB,YAAA,KAAI,CAAC,sBAAL,GAA8B,IAA9B;AACA,YAAA,CAAC,IAAI,SAAL;AACA;AACD;;AACD;AACE;AAtBJ;;AAyBA,MAAA,KAAI,CAAC,YAAL,CAAkB,EAAlB,EAAsB,QAAQ,CAAC,KAAD,EAAQ,KAAK,CAAC,CAAD,EAAI,oBAAJ,CAAb,EAAwC,KAAK,CAAC,CAAD,EAAI,eAAJ,CAA7C,CAA9B;AACD,KAlCO;;AAsDA,IAAA,KAAA,CAAA,YAAA,GAAe,UAAC,EAAD,EAAqB;AAC1C,MAAA,KAAI,CAAC,YAAL,CAAkB,IAAlB,CACE,EAAE,CAAC,MAAD,EAAS,WAAT,EAAsB,KAAI,CAAC,YAA3B,EAAqE,IAArE,CADJ,EAEE,EAAE,CAAC,MAAD,EAAS,SAAT,EAAoB,KAAI,CAAC,iBAAzB,EAA4C,IAA5C,CAFJ;;AAKA,MAAA,KAAI,CAAC,YAAL,CAAkB,EAAlB;AACD,KAPO;;AASA,IAAA,KAAA,CAAA,YAAA,GAAe,UAAC,EAAD,EAAkC;AACvD,UAAI,CAAC,KAAI,CAAC,KAAL,CAAW,OAAhB,EAAyB;AACvB;AACD,OAHsD,CAKvD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,UAAM,QAAQ,GAAG,YAAY,CAAC,EAAD,EAAK,KAAI,CAAC,KAAL,CAAW,KAAhB,EAAuB,KAAI,CAAC,KAAL,CAAW,OAAlC,CAA7B;;AACA,UAAI,QAAJ,EAAc;AACZ,QAAA,KAAI,CAAC,YAAL,CAAkB,EAAlB,EAAsB,QAAtB;AACD;AACF,KAjBO;;AAmBA,IAAA,KAAA,CAAA,iBAAA,GAAoB,YAAA;AAC1B,MAAA,KAAI,CAAC,YAAL,CAAkB,OAAlB,CAA0B,UAAA,OAAA,EAAO;AAAI,eAAA,OAAA,EAAA;AAAS,OAA9C;;AACA,MAAA,KAAI,CAAC,YAAL,GAAoB,EAApB;AACD,KAHO;;AAzJN,IAAA,sBAAsB,CAAC,KAAD,CAAtB;AAEA,IAAA,KAAI,CAAC,KAAL,GAAa;AAAE,MAAA,KAAK,EAAE,KAAK,CAAC;AAAf,KAAb;;AACD;;AAED,EAAA,MAAA,CAAA,cAAA,CAAW,kBAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;SAAhB,YAAA;AACE,aAAO,KAAK,KAAL,CAAW,KAAlB;AACD,KAFe;oBAAA;;AAAA,GAAhB;;AAIO,EAAA,kBAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UACE,SADF,EAEE,SAFF,EAE2C;AAEzC;AACA;AACA,QAAI,SAAS,KAAK,KAAK,KAAnB,IAA4B,KAAK,KAAL,CAAW,KAA3C,EAAkD;AAChD,WAAK,QAAL,CAAc;AAAE,QAAA,KAAK,EAAE,KAAK,KAAL,CAAW;AAApB,OAAd;AACD;AACF,GATM;;AAWA,EAAA,kBAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,YAAA;AACE,SAAK,iBAAL;AACD,GAFM;;AAIA,EAAA,kBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACQ,QAAA,EAAA,GAAA,KAAA,KAAA;AAAA,QAAE,OAAA,GAAA,EAAA,CAAA,OAAF;AAAA,QAAW,KAAA,GAAA,EAAA,CAAA,KAAX;AAAA,QAAkB,SAAA,GAAA,EAAA,CAAA,SAAlB;AAAA,QAA6B,MAAA,GAAA,EAAA,CAAA,MAA7B;AAAA,QAAqC,eAAA,GAAA,EAAA,CAAA,eAArC;AAAA,QAAsD,SAAA,GAAA,EAAA,CAAA,SAAtD;AAAA,QAAiE,eAAA,GAAA,EAAA,CAAA,eAAjE;AACE,QAAA,KAAA,GAAA,KAAA,KAAA,CAAA,KAAA;AAER,QAAM,UAAU,GAAG,aAAa,CAAC,MAAD,EAAU;AACxC,MAAA,KAAK,EAAE,KADiC;AAExC,MAAA,SAAS,EAAA,SAF+B;AAGxC,MAAA,OAAO,EAAA;AAHiC,KAAV,CAAhC;AAMA,QAAM,SAAS,GAAG,eAAgB,CAAC,OAAjB,CAAyB,KAAzB,EAAgC,MAAM,CAAC,KAAK,CAAC,CAAP,CAAtC,EAAiD,OAAjD,CAAyD,KAAzD,EAAgE,MAAM,CAAC,KAAK,CAAC,CAAP,CAAtE,CAAlB;AAEA,WACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,MAAA,GAAG,EAAE,KAAK,KADZ;AAEE,MAAA,QAAQ,EAAE,CAFZ;AAGE,MAAA,SAAS,EAAE,UAAU,CAAC,IAHxB;AAIE,MAAA,KAAK,EAAE;AAAE,QAAA,eAAe,EAAE,kBAAkB,CAAC,KAAD;AAArC,OAJT;AAKE,MAAA,WAAW,EAAE,KAAK,YALpB;AAME,MAAA,SAAS,EAAE,KAAK,UANlB;AAOE,MAAA,IAAI,EAAC,QAPP;AAOe,wBAGG,SAVlB;AAU2B,uBAIV,KAAK,sBAAL,GAA8B,KAAK,CAAC,CAApC,GAAwC,KAAK,CAAC,CAd/D;AAcgE,uBAC/C,CAfjB;AAekB,uBACD,eAhBjB;AAgBgC,oBAClB,SAjBd;AAiBuB,0BACH,KAAK,cAlBzB;AAkBuC,2BAClB;AAnBrB,KAAA,EAqBE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAE,UAAU,CAAC,WAA3B;AAAwC,MAAA,EAAE,EAAE,KAAK;AAAjD,KAAA,EACG,eADH,CArBF,EAwBE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAE,UAAU,CAAC;AAA3B,KAAA,CAxBF,EAyBE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAE,UAAU,CAAC;AAA3B,KAAA,CAzBF,EA0BE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,MAAA,SAAS,EAAE,UAAU,CAAC,KADxB;AAEE,MAAA,KAAK,EAAE;AAAE,QAAA,IAAI,EAAE,KAAM,CAAC,CAAP,GAAW,GAAnB;AAAwB,QAAA,GAAG,EAAE,eAAe,GAAG,KAAM,CAAC,CAAzB,GAA6B,GAA1D;AAA+D,QAAA,eAAe,EAAE,KAAM,CAAC;AAAvF;AAFT,KAAA,CA1BF,CADF;AAiCD,GA7CM;;AAmFC,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,EAArB,EAA8F,KAA9F,EAA2G;AACjG,QAAA,QAAA,GAAA,KAAA,KAAA,CAAA,QAAA;AAER,QAAM,QAAQ,GAAG,KAAK,KAAL,CAAW,KAA5B;;AACA,QAAI,KAAK,CAAC,CAAN,KAAY,QAAQ,CAAC,CAArB,IAA0B,KAAK,CAAC,CAAN,KAAY,QAAQ,CAAC,CAAnD,EAAsD;AACpD,aADoD,CAC5C;AACT;;AAED,QAAI,QAAJ,EAAc;AACZ,MAAA,QAAQ,CAAC,EAAD,EAA+C,KAA/C,CAAR;AACD;;AAED,QAAI,CAAC,EAAE,CAAC,gBAAR,EAA0B;AACxB,WAAK,QAAL,CAAc;AAAE,QAAA,KAAK,EAAA;AAAP,OAAd;AACA,MAAA,EAAE,CAAC,cAAH;AACD;AACF,GAhBO;;AA1HM,EAAA,kBAAA,CAAA,YAAA,GAA8C;AAC1D,IAAA,OAAO,EAAE,GADiD;AAE1D,IAAA,SAAS,EAAE,2BAF+C;AAG1D,IAAA,eAAe,EAAE,+BAHyC;AAI1D,IAAA,eAAe,EAAE;AAJyC,GAA9C;AA4KhB,SAAA,kBAAA;AAAC,CA9KD,CAAwC,KAAK,CAAC,SAA9C,CAAA;;SAAa,kB;AAgLb;;;AAGG;;AACH,OAAM,SAAU,YAAV,CACJ,EADI,EAEJ,SAFI,EAGJ,IAHI,EAGa;AAEjB,MAAM,QAAQ,GAAG,IAAI,CAAC,qBAAL,EAAjB;AAEA,MAAM,WAAW,GAAG,CAAC,EAAE,CAAC,OAAH,GAAa,QAAQ,CAAC,IAAvB,IAA+B,QAAQ,CAAC,KAA5D;AACA,MAAM,WAAW,GAAG,CAAC,EAAE,CAAC,OAAH,GAAa,QAAQ,CAAC,GAAvB,IAA8B,QAAQ,CAAC,MAA3D;AAEA,SAAO,QAAQ,CACb,SADa,EAEb,KAAK,CAAC,IAAI,CAAC,KAAL,CAAW,WAAW,GAAG,oBAAzB,CAAD,EAAiD,oBAAjD,CAFQ,EAGb,KAAK,CAAC,IAAI,CAAC,KAAL,CAAW,eAAe,GAAG,WAAW,GAAG,eAA3C,CAAD,EAA8D,eAA9D,CAHQ,CAAf;AAKD","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, on, initializeComponentRef, KeyCodes, getId } from '../../../Utilities';\nimport {\n  IColorRectangleProps,\n  IColorRectangleStyleProps,\n  IColorRectangleStyles,\n  IColorRectangle,\n} from './ColorRectangle.types';\n\n// These imports are separated to help with bundling\nimport { IColor } from '../../../utilities/color/interfaces';\nimport { MAX_COLOR_SATURATION, MAX_COLOR_VALUE } from '../../../utilities/color/consts';\nimport { getFullColorString } from '../../../utilities/color/getFullColorString';\nimport { updateSV } from '../../../utilities/color/updateSV';\nimport { clamp } from '../../../utilities/color/clamp';\n\nconst getClassNames = classNamesFunction<IColorRectangleStyleProps, IColorRectangleStyles>();\n\nexport interface IColorRectangleState {\n  color: IColor;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorRectangleBase extends React.Component<IColorRectangleProps, IColorRectangleState>\n  implements IColorRectangle {\n  public static defaultProps: Partial<IColorRectangleProps> = {\n    minSize: 220,\n    ariaLabel: 'Saturation and brightness',\n    ariaValueFormat: 'Saturation {0} brightness {1}',\n    ariaDescription: 'Use left and right arrow keys to set saturation. Use up and down arrow keys to set brightness.',\n  };\n\n  private _disposables: (() => void)[] = [];\n  private _root = React.createRef<HTMLDivElement>();\n  private _isAdjustingSaturation: boolean = true;\n  private _descriptionId = getId('ColorRectangle-description');\n\n  constructor(props: IColorRectangleProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = { color: props.color };\n  }\n\n  public get color(): IColor {\n    return this.state.color;\n  }\n\n  public componentDidUpdate(\n    prevProps: Readonly<IColorRectangleProps>,\n    prevState: Readonly<IColorRectangleState>,\n  ): void {\n    // if props changed (as opposed to a state update), set the value\n    // TODO: switch to strict controlled pattern instead\n    if (prevProps !== this.props && this.props.color) {\n      this.setState({ color: this.props.color });\n    }\n  }\n\n  public componentWillUnmount() {\n    this._disposeListeners();\n  }\n\n  public render(): JSX.Element {\n    const { minSize, theme, className, styles, ariaValueFormat, ariaLabel, ariaDescription } = this.props;\n    const { color } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      minSize,\n    });\n\n    const valueText = ariaValueFormat!.replace('{0}', String(color.s)).replace('{1}', String(color.v));\n\n    return (\n      <div\n        ref={this._root}\n        tabIndex={0}\n        className={classNames.root}\n        style={{ backgroundColor: getFullColorString(color) }}\n        onMouseDown={this._onMouseDown}\n        onKeyDown={this._onKeyDown}\n        role=\"slider\"\n        // Proper description of the current hue *and* saturation\n        // (screen reader typically chooses this over aria-valuenow)\n        aria-valuetext={valueText}\n        // Narrator reads aria-valuetext first, but it also reads aria-valuenow after a pause, and\n        // per the aria spec this defaults to halfway between min/max (50) if we don't provide it.\n        // So provide the value of the most recently adjusted thing.\n        aria-valuenow={this._isAdjustingSaturation ? color.s : color.v}\n        aria-valuemin={0}\n        aria-valuemax={MAX_COLOR_VALUE}\n        aria-label={ariaLabel}\n        aria-describedby={this._descriptionId}\n        data-is-focusable={true}\n      >\n        <div className={classNames.description} id={this._descriptionId}>\n          {ariaDescription}\n        </div>\n        <div className={classNames.light} />\n        <div className={classNames.dark} />\n        <div\n          className={classNames.thumb}\n          style={{ left: color!.s + '%', top: MAX_COLOR_VALUE - color!.v + '%', backgroundColor: color!.str }}\n        />\n      </div>\n    );\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { color } = this.state;\n    let { s, v } = color;\n\n    const increment = ev.shiftKey ? 10 : 1;\n\n    // Intentionally DO NOT flip the color picker in RTL: its orientation is not very meaningful,\n    // and getting all the math and styles flipped correctly is tricky\n    switch (ev.which) {\n      case KeyCodes.up: {\n        this._isAdjustingSaturation = false;\n        v += increment; // V = 100 (lightest) is at the top\n        break;\n      }\n      case KeyCodes.down: {\n        this._isAdjustingSaturation = false;\n        v -= increment; // V = 0 (darkest) is at the bottom\n        break;\n      }\n      case KeyCodes.left: {\n        this._isAdjustingSaturation = true;\n        s -= increment;\n        break;\n      }\n      case KeyCodes.right: {\n        this._isAdjustingSaturation = true;\n        s += increment;\n        break;\n      }\n      default:\n        return;\n    }\n\n    this._updateColor(ev, updateSV(color, clamp(s, MAX_COLOR_SATURATION), clamp(v, MAX_COLOR_VALUE)));\n  };\n\n  private _updateColor(ev: MouseEvent | KeyboardEvent | React.MouseEvent | React.KeyboardEvent, color: IColor): void {\n    const { onChange } = this.props;\n\n    const oldColor = this.state.color;\n    if (color.s === oldColor.s && color.v === oldColor.v) {\n      return; // no change\n    }\n\n    if (onChange) {\n      onChange(ev as React.MouseEvent | React.KeyboardEvent, color);\n    }\n\n    if (!ev.defaultPrevented) {\n      this.setState({ color });\n      ev.preventDefault();\n    }\n  }\n\n  private _onMouseDown = (ev: React.MouseEvent): void => {\n    this._disposables.push(\n      on(window, 'mousemove', this._onMouseMove as (ev: MouseEvent) => void, true),\n      on(window, 'mouseup', this._disposeListeners, true),\n    );\n\n    this._onMouseMove(ev);\n  };\n\n  private _onMouseMove = (ev: MouseEvent | React.MouseEvent): void => {\n    if (!this._root.current) {\n      return;\n    }\n\n    // Leaving the following commented code which is sometimes necessary for debugging:\n    // If the primary button (1) isn't pressed, the user is no longer dragging, so turn off\n    // the event handlers and exit.\n    // if (!(ev.buttons & 1)) {\n    //   this._disposeListeners();\n    //   return;\n    // }\n\n    const newColor = _getNewColor(ev, this.state.color, this._root.current);\n    if (newColor) {\n      this._updateColor(ev, newColor);\n    }\n  };\n\n  private _disposeListeners = (): void => {\n    this._disposables.forEach(dispose => dispose());\n    this._disposables = [];\n  };\n}\n\n/**\n * Exported for testing only.\n * @internal\n */\nexport function _getNewColor(\n  ev: MouseEvent | React.MouseEvent,\n  prevColor: IColor,\n  root: HTMLElement,\n): IColor | undefined {\n  const rectSize = root.getBoundingClientRect();\n\n  const sPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n  const vPercentage = (ev.clientY - rectSize.top) / rectSize.height;\n\n  return updateSV(\n    prevColor,\n    clamp(Math.round(sPercentage * MAX_COLOR_SATURATION), MAX_COLOR_SATURATION),\n    clamp(Math.round(MAX_COLOR_VALUE - vPercentage * MAX_COLOR_VALUE), MAX_COLOR_VALUE),\n  );\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}