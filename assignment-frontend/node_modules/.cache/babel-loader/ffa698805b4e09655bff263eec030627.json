{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { anchorProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\n\nvar ContextualMenuAnchor =\n/** @class */\nfunction (_super) {\n  __extends(ContextualMenuAnchor, _super);\n\n  function ContextualMenuAnchor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._anchor = React.createRef();\n    _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n      return __assign(__assign({}, keytipProps), {\n        hasMenu: true\n      });\n    });\n\n    _this._getSubmenuTarget = function () {\n      return _this._anchor.current ? _this._anchor.current : undefined;\n    };\n\n    _this._onItemClick = function (ev) {\n      var _a = _this.props,\n          item = _a.item,\n          onItemClick = _a.onItemClick;\n\n      if (onItemClick) {\n        onItemClick(item, ev);\n      }\n    };\n\n    _this._renderAriaDescription = function (ariaDescription, className) {\n      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n      return ariaDescription ? React.createElement(\"span\", {\n        id: _this._ariaDescriptionId,\n        className: className\n      }, ariaDescription) : null;\n    };\n\n    return _this;\n  }\n\n  ContextualMenuAnchor.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        item = _a.item,\n        classNames = _a.classNames,\n        index = _a.index,\n        focusableElementIndex = _a.focusableElementIndex,\n        totalItemCount = _a.totalItemCount,\n        hasCheckmarks = _a.hasCheckmarks,\n        hasIcons = _a.hasIcons,\n        _b = _a.contextualMenuItemAs,\n        ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n        expandedMenuItemKey = _a.expandedMenuItemKey,\n        onItemClick = _a.onItemClick,\n        openSubMenu = _a.openSubMenu,\n        dismissSubMenu = _a.dismissSubMenu,\n        dismissMenu = _a.dismissMenu;\n    var anchorRel = item.rel;\n\n    if (item.target && item.target.toLowerCase() === '_blank') {\n      anchorRel = anchorRel ? anchorRel : 'nofollow noopener noreferrer'; // Safe default to prevent tabjacking\n    }\n\n    var subMenuId = this._getSubMenuId(item);\n\n    var itemHasSubmenu = hasSubmenu(item);\n    var nativeProps = getNativeProps(item, anchorProperties);\n    var disabled = isItemDisabled(item);\n    var itemProps = item.itemProps,\n        ariaDescription = item.ariaDescription;\n    var keytipProps = item.keytipProps;\n\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    } // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n\n\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    return React.createElement(\"div\", null, React.createElement(KeytipData, {\n      keytipProps: item.keytipProps,\n      ariaDescribedBy: nativeProps['aria-describedby'],\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return React.createElement(\"a\", __assign({}, nativeProps, keytipAttributes, {\n        ref: _this._anchor,\n        href: item.href,\n        target: item.target,\n        rel: anchorRel,\n        className: classNames.root,\n        role: \"menuitem\",\n        \"aria-owns\": item.key === expandedMenuItemKey ? subMenuId : undefined,\n        \"aria-haspopup\": itemHasSubmenu || undefined,\n        \"aria-expanded\": itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n        \"aria-posinset\": focusableElementIndex + 1,\n        \"aria-setsize\": totalItemCount,\n        \"aria-disabled\": isItemDisabled(item),\n        \"aria-describedby\": mergeAriaAttributeValues(ariaDescription ? _this._ariaDescriptionId : undefined, keytipAttributes ? keytipAttributes['aria-describedby'] : undefined),\n        // eslint-disable-next-line deprecation/deprecation\n        style: item.style,\n        onClick: _this._onItemClick,\n        onMouseEnter: _this._onItemMouseEnter,\n        onMouseLeave: _this._onItemMouseLeave,\n        onMouseMove: _this._onItemMouseMove,\n        onKeyDown: itemHasSubmenu ? _this._onItemKeyDown : undefined\n      }), React.createElement(ChildrenRenderer, __assign({\n        componentRef: item.componentRef,\n        item: item,\n        classNames: classNames,\n        index: index,\n        onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,\n        hasIcons: hasIcons,\n        openSubMenu: openSubMenu,\n        dismissSubMenu: dismissSubMenu,\n        dismissMenu: dismissMenu,\n        getSubmenuTarget: _this._getSubmenuTarget\n      }, itemProps)), _this._renderAriaDescription(ariaDescription, classNames.screenReaderText));\n    }));\n  };\n\n  return ContextualMenuAnchor;\n}(ContextualMenuItemWrapper);\n\nexport { ContextualMenuAnchor };","map":{"version":3,"sources":["components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuAnchor.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { anchorProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport { IKeytipProps } from '../../Keytip/Keytip.types';\n\nexport class ContextualMenuAnchor extends ContextualMenuItemWrapper {\n  private _anchor = React.createRef<HTMLAnchorElement>();\n  private _ariaDescriptionId: string;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  public render() {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      expandedMenuItemKey,\n      onItemClick,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    let anchorRel = item.rel;\n    if (item.target && item.target.toLowerCase() === '_blank') {\n      anchorRel = anchorRel ? anchorRel : 'nofollow noopener noreferrer'; // Safe default to prevent tabjacking\n    }\n\n    const subMenuId = this._getSubMenuId(item);\n    const itemHasSubmenu = hasSubmenu(item);\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLAnchorElement>>(item, anchorProperties);\n    const disabled = isItemDisabled(item);\n    const { itemProps, ariaDescription } = item;\n\n    let { keytipProps } = item;\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    return (\n      <div>\n        <KeytipData\n          keytipProps={item.keytipProps}\n          ariaDescribedBy={nativeProps['aria-describedby']}\n          disabled={disabled}\n        >\n          {(keytipAttributes: any): JSX.Element => (\n            <a\n              {...nativeProps}\n              {...keytipAttributes}\n              ref={this._anchor}\n              href={item.href}\n              target={item.target}\n              rel={anchorRel}\n              className={classNames.root}\n              role=\"menuitem\"\n              aria-owns={item.key === expandedMenuItemKey ? subMenuId : undefined}\n              aria-haspopup={itemHasSubmenu || undefined}\n              aria-expanded={itemHasSubmenu ? item.key === expandedMenuItemKey : undefined}\n              aria-posinset={focusableElementIndex + 1}\n              aria-setsize={totalItemCount}\n              aria-disabled={isItemDisabled(item)}\n              aria-describedby={mergeAriaAttributeValues(\n                ariaDescription ? this._ariaDescriptionId : undefined,\n                keytipAttributes ? keytipAttributes['aria-describedby'] : undefined,\n              )}\n              // eslint-disable-next-line deprecation/deprecation\n              style={item.style}\n              onClick={this._onItemClick}\n              onMouseEnter={this._onItemMouseEnter}\n              onMouseLeave={this._onItemMouseLeave}\n              onMouseMove={this._onItemMouseMove}\n              onKeyDown={itemHasSubmenu ? this._onItemKeyDown : undefined}\n            >\n              <ChildrenRenderer\n                componentRef={item.componentRef}\n                item={item}\n                classNames={classNames}\n                index={index}\n                onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n                hasIcons={hasIcons}\n                openSubMenu={openSubMenu}\n                dismissSubMenu={dismissSubMenu}\n                dismissMenu={dismissMenu}\n                getSubmenuTarget={this._getSubmenuTarget}\n                {...itemProps}\n              />\n              {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n            </a>\n          )}\n        </KeytipData>\n      </div>\n    );\n  }\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._anchor.current ? this._anchor.current : undefined;\n  };\n\n  protected _onItemClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemClick } = this.props;\n    if (onItemClick) {\n      onItemClick(item, ev);\n    }\n  };\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}