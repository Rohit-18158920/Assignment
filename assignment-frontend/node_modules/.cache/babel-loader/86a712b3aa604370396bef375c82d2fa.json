{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { DelayedRender, getId, classNamesFunction, getNativeProps, htmlElementProperties, css, initializeComponentRef } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nvar getClassNames = classNamesFunction();\n\nvar MessageBarBase =\n/** @class */\nfunction (_super) {\n  __extends(MessageBarBase, _super);\n\n  function MessageBarBase(props) {\n    var _a;\n\n    var _this = _super.call(this, props) || this;\n\n    _this.ICON_MAP = (_a = {}, _a[MessageBarType.info] = 'Info', _a[MessageBarType.warning] = 'Info', _a[MessageBarType.error] = 'ErrorBadge', _a[MessageBarType.blocked] = 'Blocked2', _a[MessageBarType.severeWarning] = 'Warning', _a[MessageBarType.success] = 'Completed', _a);\n\n    _this._getRegionProps = function () {\n      var hasActions = !!_this._getActionsDiv() || !!_this._getDismissDiv();\n      var regionProps = {\n        'aria-describedby': _this.state.labelId,\n        role: 'region'\n      };\n      return hasActions ? regionProps : {};\n    };\n\n    _this._onClick = function (ev) {\n      _this.setState({\n        expandSingleLine: !_this.state.expandSingleLine\n      });\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      labelId: getId('MessageBar'),\n      // eslint-disable-next-line react/no-unused-state\n      showContent: false,\n      expandSingleLine: false\n    };\n    return _this;\n  }\n\n  MessageBarBase.prototype.render = function () {\n    var isMultiline = this.props.isMultiline;\n    this._classNames = this._getClassNames();\n    return isMultiline ? this._renderMultiLine() : this._renderSingleLine();\n  };\n\n  MessageBarBase.prototype._getActionsDiv = function () {\n    if (this.props.actions) {\n      return React.createElement(\"div\", {\n        className: this._classNames.actions\n      }, this.props.actions);\n    }\n\n    return null;\n  };\n\n  MessageBarBase.prototype._getDismissDiv = function () {\n    var _a = this.props,\n        onDismiss = _a.onDismiss,\n        dismissIconProps = _a.dismissIconProps;\n\n    if (onDismiss) {\n      return React.createElement(IconButton, {\n        disabled: false,\n        className: this._classNames.dismissal,\n        onClick: onDismiss,\n        iconProps: dismissIconProps ? dismissIconProps : {\n          iconName: 'Clear'\n        },\n        title: this.props.dismissButtonAriaLabel,\n        ariaLabel: this.props.dismissButtonAriaLabel\n      });\n    }\n\n    return null;\n  };\n\n  MessageBarBase.prototype._getDismissSingleLine = function () {\n    if (this.props.onDismiss) {\n      return React.createElement(\"div\", {\n        className: this._classNames.dismissSingleLine\n      }, this._getDismissDiv());\n    }\n\n    return null;\n  };\n\n  MessageBarBase.prototype._getExpandSingleLine = function () {\n    if (!this.props.actions && this.props.truncated) {\n      return React.createElement(\"div\", {\n        className: this._classNames.expandSingleLine\n      }, React.createElement(IconButton, {\n        disabled: false,\n        className: this._classNames.expand,\n        onClick: this._onClick,\n        iconProps: {\n          iconName: this.state.expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown'\n        },\n        ariaLabel: this.props.overflowButtonAriaLabel,\n        \"aria-expanded\": this.state.expandSingleLine\n      }));\n    }\n\n    return null;\n  };\n\n  MessageBarBase.prototype._getIconSpan = function () {\n    var messageBarIconProps = this.props.messageBarIconProps;\n    return React.createElement(\"div\", {\n      className: this._classNames.iconContainer,\n      \"aria-hidden\": true\n    }, messageBarIconProps ? React.createElement(Icon, __assign({}, messageBarIconProps, {\n      className: css(this._classNames.icon, messageBarIconProps.className)\n    })) : React.createElement(Icon, {\n      iconName: this.ICON_MAP[this.props.messageBarType],\n      className: this._classNames.icon\n    }));\n  };\n\n  MessageBarBase.prototype._renderMultiLine = function () {\n    return React.createElement(\"div\", __assign({\n      className: this._classNames.root\n    }, this._getRegionProps()), React.createElement(\"div\", {\n      className: this._classNames.content\n    }, this._getIconSpan(), this._renderInnerText(), this._getDismissDiv()), this._getActionsDiv());\n  };\n\n  MessageBarBase.prototype._renderSingleLine = function () {\n    return React.createElement(\"div\", __assign({\n      className: this._classNames.root\n    }, this._getRegionProps()), React.createElement(\"div\", {\n      className: this._classNames.content\n    }, this._getIconSpan(), this._renderInnerText(), this._getExpandSingleLine(), this._getActionsDiv(), this._getDismissSingleLine()));\n  };\n\n  MessageBarBase.prototype._renderInnerText = function () {\n    var nativeProps = getNativeProps(this.props, htmlElementProperties, ['className']);\n    return React.createElement(\"div\", {\n      className: this._classNames.text,\n      id: this.state.labelId,\n      role: \"status\",\n      \"aria-live\": this._getAnnouncementPriority()\n    }, React.createElement(\"span\", __assign({\n      className: this._classNames.innerText\n    }, nativeProps), React.createElement(DelayedRender, null, React.createElement(\"span\", null, this.props.children))));\n  };\n\n  MessageBarBase.prototype._getClassNames = function () {\n    var _a = this.props,\n        theme = _a.theme,\n        className = _a.className,\n        messageBarType = _a.messageBarType,\n        onDismiss = _a.onDismiss,\n        actions = _a.actions,\n        truncated = _a.truncated,\n        isMultiline = _a.isMultiline;\n    var expandSingleLine = this.state.expandSingleLine;\n    return getClassNames(this.props.styles, {\n      theme: theme,\n      messageBarType: messageBarType || MessageBarType.info,\n      onDismiss: onDismiss !== undefined,\n      actions: actions !== undefined,\n      truncated: truncated,\n      isMultiline: isMultiline,\n      expandSingleLine: expandSingleLine,\n      className: className\n    });\n  };\n\n  MessageBarBase.prototype._getAnnouncementPriority = function () {\n    switch (this.props.messageBarType) {\n      case MessageBarType.blocked:\n      case MessageBarType.error:\n      case MessageBarType.severeWarning:\n        return 'assertive';\n    }\n\n    return 'polite';\n  };\n\n  MessageBarBase.defaultProps = {\n    messageBarType: MessageBarType.info,\n    onDismiss: undefined,\n    isMultiline: true\n  };\n  return MessageBarBase;\n}(React.Component);\n\nexport { MessageBarBase };","map":{"version":3,"sources":["components/MessageBar/MessageBar.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  DelayedRender,\n  getId,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties,\n  css,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles, MessageBarType } from './MessageBar.types';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nexport interface IMessageBarState {\n  labelId?: string;\n  showContent?: boolean;\n  expandSingleLine?: boolean;\n}\n\nexport class MessageBarBase extends React.Component<IMessageBarProps, IMessageBarState> {\n  public static defaultProps: IMessageBarProps = {\n    messageBarType: MessageBarType.info,\n    onDismiss: undefined,\n    isMultiline: true,\n  };\n\n  private ICON_MAP = {\n    [MessageBarType.info]: 'Info',\n    [MessageBarType.warning]: 'Info',\n    [MessageBarType.error]: 'ErrorBadge',\n    [MessageBarType.blocked]: 'Blocked2',\n    [MessageBarType.severeWarning]: 'Warning',\n    [MessageBarType.success]: 'Completed',\n  };\n\n  private _classNames: { [key in keyof IMessageBarStyles]: string };\n\n  constructor(props: IMessageBarProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this.state = {\n      labelId: getId('MessageBar'),\n      // eslint-disable-next-line react/no-unused-state\n      showContent: false,\n      expandSingleLine: false,\n    };\n  }\n\n  public render(): JSX.Element {\n    const { isMultiline } = this.props;\n\n    this._classNames = this._getClassNames();\n\n    return isMultiline ? this._renderMultiLine() : this._renderSingleLine();\n  }\n\n  private _getActionsDiv(): JSX.Element | null {\n    if (this.props.actions) {\n      return <div className={this._classNames.actions}>{this.props.actions}</div>;\n    }\n    return null;\n  }\n\n  private _getDismissDiv(): JSX.Element | null {\n    const { onDismiss, dismissIconProps } = this.props;\n    if (onDismiss) {\n      return (\n        <IconButton\n          disabled={false}\n          className={this._classNames.dismissal}\n          onClick={onDismiss}\n          iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n          title={this.props.dismissButtonAriaLabel}\n          ariaLabel={this.props.dismissButtonAriaLabel}\n        />\n      );\n    }\n    return null;\n  }\n\n  private _getDismissSingleLine(): JSX.Element | null {\n    if (this.props.onDismiss) {\n      return <div className={this._classNames.dismissSingleLine}>{this._getDismissDiv()}</div>;\n    }\n    return null;\n  }\n\n  private _getExpandSingleLine(): JSX.Element | null {\n    if (!this.props.actions && this.props.truncated) {\n      return (\n        <div className={this._classNames.expandSingleLine}>\n          <IconButton\n            disabled={false}\n            className={this._classNames.expand}\n            onClick={this._onClick}\n            iconProps={{ iconName: this.state.expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' }}\n            ariaLabel={this.props.overflowButtonAriaLabel}\n            aria-expanded={this.state.expandSingleLine}\n          />\n        </div>\n      );\n    }\n    return null;\n  }\n\n  private _getIconSpan(): JSX.Element {\n    const { messageBarIconProps } = this.props;\n    return (\n      <div className={this._classNames.iconContainer} aria-hidden>\n        {messageBarIconProps ? (\n          <Icon {...messageBarIconProps} className={css(this._classNames.icon, messageBarIconProps.className)} />\n        ) : (\n          <Icon iconName={this.ICON_MAP[this.props.messageBarType!]} className={this._classNames.icon} />\n        )}\n      </div>\n    );\n  }\n\n  private _renderMultiLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    return (\n      <div className={this._classNames.root} {...this._getRegionProps()}>\n        <div className={this._classNames.content}>\n          {this._getIconSpan()}\n          {this._renderInnerText()}\n          {this._getDismissDiv()}\n        </div>\n        {this._getActionsDiv()}\n      </div>\n    );\n  }\n\n  private _renderSingleLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    return (\n      <div className={this._classNames.root} {...this._getRegionProps()}>\n        <div className={this._classNames.content}>\n          {this._getIconSpan()}\n          {this._renderInnerText()}\n          {this._getExpandSingleLine()}\n          {this._getActionsDiv()}\n          {this._getDismissSingleLine()}\n        </div>\n      </div>\n    );\n  }\n\n  private _renderInnerText(): JSX.Element {\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(this.props, htmlElementProperties, [\n      'className',\n    ]);\n\n    return (\n      <div\n        className={this._classNames.text}\n        id={this.state.labelId}\n        role=\"status\"\n        aria-live={this._getAnnouncementPriority()}\n      >\n        <span className={this._classNames.innerText} {...nativeProps}>\n          <DelayedRender>\n            <span>{this.props.children}</span>\n          </DelayedRender>\n        </span>\n      </div>\n    );\n  }\n\n  private _getRegionProps = () => {\n    const hasActions = !!this._getActionsDiv() || !!this._getDismissDiv();\n    const regionProps = {\n      'aria-describedby': this.state.labelId,\n      role: 'region',\n    };\n\n    return hasActions ? regionProps : {};\n  };\n\n  private _getClassNames(): { [key in keyof IMessageBarStyles]: string } {\n    const { theme, className, messageBarType, onDismiss, actions, truncated, isMultiline } = this.props;\n    const { expandSingleLine } = this.state;\n\n    return getClassNames(this.props.styles!, {\n      theme: theme!,\n      messageBarType: messageBarType || MessageBarType.info,\n      onDismiss: onDismiss !== undefined,\n      actions: actions !== undefined,\n      truncated: truncated,\n      isMultiline: isMultiline,\n      expandSingleLine: expandSingleLine,\n      className,\n    });\n  }\n\n  private _getAnnouncementPriority(): 'assertive' | 'polite' {\n    switch (this.props.messageBarType) {\n      case MessageBarType.blocked:\n      case MessageBarType.error:\n      case MessageBarType.severeWarning:\n        return 'assertive';\n    }\n    return 'polite';\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    this.setState({ expandSingleLine: !this.state.expandSingleLine });\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}