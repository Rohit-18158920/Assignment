{"ast":null,"code":"import { labelProperties, audioProperties, videoProperties, olProperties, liProperties, anchorProperties, buttonProperties, inputProperties, textAreaProperties, selectProperties, optionProperties, tableProperties, trProperties, thProperties, tdProperties, colGroupProperties, colProperties, formProperties, iframeProperties, imgProperties, htmlElementProperties, getNativeProps } from './properties';\nvar nativeElementMap = {\n  label: labelProperties,\n  audio: audioProperties,\n  video: videoProperties,\n  ol: olProperties,\n  li: liProperties,\n  a: anchorProperties,\n  button: buttonProperties,\n  input: inputProperties,\n  textarea: textAreaProperties,\n  select: selectProperties,\n  option: optionProperties,\n  table: tableProperties,\n  tr: trProperties,\n  th: thProperties,\n  td: tdProperties,\n  colGroup: colGroupProperties,\n  col: colProperties,\n  form: formProperties,\n  iframe: iframeProperties,\n  img: imgProperties\n};\n/**\n * Given an element tagname and user props, filters the props to only allowed props for the given\n * element type.\n * @param tagName - Tag name (e.g. \"div\")\n * @param props - Props object\n * @param excludedPropNames - List of props to disallow\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function getNativeElementProps(tagName, props, excludedPropNames) {\n  var allowedPropNames = tagName && nativeElementMap[tagName] || htmlElementProperties;\n  return getNativeProps(props, allowedPropNames, excludedPropNames);\n}","map":{"version":3,"sources":["getNativeElementProps.ts"],"names":[],"mappings":"AAAA,SACE,eADF,EAEE,eAFF,EAGE,eAHF,EAIE,YAJF,EAKE,YALF,EAME,gBANF,EAOE,gBAPF,EAQE,eARF,EASE,kBATF,EAUE,gBAVF,EAWE,gBAXF,EAYE,eAZF,EAaE,YAbF,EAcE,YAdF,EAeE,YAfF,EAgBE,kBAhBF,EAiBE,aAjBF,EAkBE,cAlBF,EAmBE,gBAnBF,EAoBE,aApBF,EAqBE,qBArBF,EAsBE,cAtBF,QAuBO,cAvBP;AA0BA,IAAM,gBAAgB,GAA2C;AAC/D,EAAA,KAAK,EAAE,eADwD;AAE/D,EAAA,KAAK,EAAE,eAFwD;AAG/D,EAAA,KAAK,EAAE,eAHwD;AAI/D,EAAA,EAAE,EAAE,YAJ2D;AAK/D,EAAA,EAAE,EAAE,YAL2D;AAM/D,EAAA,CAAC,EAAE,gBAN4D;AAO/D,EAAA,MAAM,EAAE,gBAPuD;AAQ/D,EAAA,KAAK,EAAE,eARwD;AAS/D,EAAA,QAAQ,EAAE,kBATqD;AAU/D,EAAA,MAAM,EAAE,gBAVuD;AAW/D,EAAA,MAAM,EAAE,gBAXuD;AAY/D,EAAA,KAAK,EAAE,eAZwD;AAa/D,EAAA,EAAE,EAAE,YAb2D;AAc/D,EAAA,EAAE,EAAE,YAd2D;AAe/D,EAAA,EAAE,EAAE,YAf2D;AAgB/D,EAAA,QAAQ,EAAE,kBAhBqD;AAiB/D,EAAA,GAAG,EAAE,aAjB0D;AAkB/D,EAAA,IAAI,EAAE,cAlByD;AAmB/D,EAAA,MAAM,EAAE,gBAnBuD;AAoB/D,EAAA,GAAG,EAAE;AApB0D,CAAjE;AAuBA;;;;;;AAMG;AACH;;AACA,OAAM,SAAU,qBAAV,CACJ,OADI,EAEJ,KAFI,EAGJ,iBAHI,EAGwB;AAE5B,MAAM,gBAAgB,GAAI,OAAO,IAAI,gBAAgB,CAAC,OAAD,CAA5B,IAA0C,qBAAnE;AAEA,SAAO,cAAc,CAAC,KAAD,EAAQ,gBAAR,EAA0B,iBAA1B,CAArB;AACD","sourcesContent":["import {\n  labelProperties,\n  audioProperties,\n  videoProperties,\n  olProperties,\n  liProperties,\n  anchorProperties,\n  buttonProperties,\n  inputProperties,\n  textAreaProperties,\n  selectProperties,\n  optionProperties,\n  tableProperties,\n  trProperties,\n  thProperties,\n  tdProperties,\n  colGroupProperties,\n  colProperties,\n  formProperties,\n  iframeProperties,\n  imgProperties,\n  htmlElementProperties,\n  getNativeProps,\n} from './properties';\nimport * as React from 'react';\n\nconst nativeElementMap: Record<string, Record<string, number>> = {\n  label: labelProperties,\n  audio: audioProperties,\n  video: videoProperties,\n  ol: olProperties,\n  li: liProperties,\n  a: anchorProperties,\n  button: buttonProperties,\n  input: inputProperties,\n  textarea: textAreaProperties,\n  select: selectProperties,\n  option: optionProperties,\n  table: tableProperties,\n  tr: trProperties,\n  th: thProperties,\n  td: tdProperties,\n  colGroup: colGroupProperties,\n  col: colProperties,\n  form: formProperties,\n  iframe: iframeProperties,\n  img: imgProperties,\n};\n\n/**\n * Given an element tagname and user props, filters the props to only allowed props for the given\n * element type.\n * @param tagName - Tag name (e.g. \"div\")\n * @param props - Props object\n * @param excludedPropNames - List of props to disallow\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getNativeElementProps<TAttributes extends React.HTMLAttributes<any>>(\n  tagName: string,\n  props: {},\n  excludedPropNames?: string[],\n): TAttributes {\n  const allowedPropNames = (tagName && nativeElementMap[tagName]) || htmlElementProperties;\n\n  return getNativeProps(props, allowedPropNames, excludedPropNames);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}