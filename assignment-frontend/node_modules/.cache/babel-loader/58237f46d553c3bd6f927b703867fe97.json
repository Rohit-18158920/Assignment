{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { KTP_SEPARATOR, KTP_PREFIX, DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, KTP_LAYER_ID } from './KeytipConstants';\nimport { addElementAtIndex } from '../../Utilities';\n/**\n * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified\n * keySequences should not include the initial keytip 'start' sequence.\n *\n * @param keySequences - Full path of IKeySequences for one keytip.\n * @returns String to use for the keytip ID.\n */\n\nexport function sequencesToID(keySequences) {\n  return keySequences.reduce(function (prevValue, keySequence) {\n    return prevValue + KTP_SEPARATOR + keySequence.split('').join(KTP_SEPARATOR);\n  }, KTP_PREFIX);\n}\n/**\n * Merges an overflow sequence with a key sequence.\n *\n * @param keySequences - Full sequence for one keytip.\n * @param overflowKeySequences - Full overflow keytip sequence.\n * @returns Sequence that will be used by the keytip when in the overflow.\n */\n\nexport function mergeOverflows(keySequences, overflowKeySequences) {\n  var overflowSequenceLen = overflowKeySequences.length;\n\n  var overflowSequence = __spreadArrays(overflowKeySequences).pop();\n\n  var newKeySequences = __spreadArrays(keySequences);\n\n  return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence);\n}\n/**\n * Constructs the data-ktp-target attribute selector from a full key sequence.\n *\n * @param keySequences - Full string[] for a Keytip.\n * @returns String selector to use to query for the keytip target.\n */\n\nexport function ktpTargetFromSequences(keySequences) {\n  return '[' + DATAKTP_TARGET + '=\"' + sequencesToID(keySequences) + '\"]';\n}\n/**\n * Constructs the data-ktp-execute-target attribute selector from a keytip ID.\n *\n * @param keytipId - ID of the Keytip.\n * @returns String selector to use to query for the keytip execute target.\n */\n\nexport function ktpTargetFromId(keytipId) {\n  return '[' + DATAKTP_EXECUTE_TARGET + '=\"' + keytipId + '\"]';\n}\n/**\n * Gets the aria-describedby value to put on the component with this keytip.\n *\n * @param keySequences - KeySequences of the keytip.\n * @returns The aria-describedby value to set on the component with this keytip.\n */\n\nexport function getAriaDescribedBy(keySequences) {\n  var describedby = ' ' + KTP_LAYER_ID;\n\n  if (!keySequences.length) {\n    // Return just the layer ID\n    return describedby;\n  }\n\n  return describedby + ' ' + sequencesToID(keySequences);\n}","map":{"version":3,"sources":["utilities/keytips/KeytipUtils.ts"],"names":[],"mappings":";AAAA,SAAS,aAAT,EAAwB,UAAxB,EAAoC,cAApC,EAAoD,sBAApD,EAA4E,YAA5E,QAAgG,mBAAhG;AACA,SAAS,iBAAT,QAAkC,iBAAlC;AAEA;;;;;;AAMG;;AACH,OAAM,SAAU,aAAV,CAAwB,YAAxB,EAA8C;AAClD,SAAO,YAAY,CAAC,MAAb,CAAoB,UAAC,SAAD,EAAoB,WAApB,EAAuC;AAChE,WAAO,SAAS,GAAG,aAAZ,GAA4B,WAAW,CAAC,KAAZ,CAAkB,EAAlB,EAAsB,IAAtB,CAA2B,aAA3B,CAAnC;AACD,GAFM,EAEJ,UAFI,CAAP;AAGD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,cAAV,CAAyB,YAAzB,EAAiD,oBAAjD,EAA+E;AACnF,MAAM,mBAAmB,GAAG,oBAAoB,CAAC,MAAjD;;AACA,MAAM,gBAAgB,GAAG,cAAA,CAAI,oBAAJ,CAAA,CAA0B,GAA1B,EAAzB;;AACA,MAAM,eAAe,GAAA,cAAA,CAAO,YAAP,CAArB;;AACA,SAAO,iBAAiB,CAAC,eAAD,EAAkB,mBAAmB,GAAG,CAAxC,EAA2C,gBAA3C,CAAxB;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,sBAAV,CAAiC,YAAjC,EAAuD;AAC3D,SAAO,MAAM,cAAN,GAAuB,IAAvB,GAA8B,aAAa,CAAC,YAAD,CAA3C,GAA4D,IAAnE;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,eAAV,CAA0B,QAA1B,EAA0C;AAC9C,SAAO,MAAM,sBAAN,GAA+B,IAA/B,GAAsC,QAAtC,GAAiD,IAAxD;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,kBAAV,CAA6B,YAA7B,EAAmD;AACvD,MAAM,WAAW,GAAG,MAAM,YAA1B;;AACA,MAAI,CAAC,YAAY,CAAC,MAAlB,EAA0B;AACxB;AACA,WAAO,WAAP;AACD;;AAED,SAAO,WAAW,GAAG,GAAd,GAAoB,aAAa,CAAC,YAAD,CAAxC;AACD","sourcesContent":["import { KTP_SEPARATOR, KTP_PREFIX, DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, KTP_LAYER_ID } from './KeytipConstants';\nimport { addElementAtIndex } from '../../Utilities';\n\n/**\n * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified\n * keySequences should not include the initial keytip 'start' sequence.\n *\n * @param keySequences - Full path of IKeySequences for one keytip.\n * @returns String to use for the keytip ID.\n */\nexport function sequencesToID(keySequences: string[]): string {\n  return keySequences.reduce((prevValue: string, keySequence: string): string => {\n    return prevValue + KTP_SEPARATOR + keySequence.split('').join(KTP_SEPARATOR);\n  }, KTP_PREFIX);\n}\n\n/**\n * Merges an overflow sequence with a key sequence.\n *\n * @param keySequences - Full sequence for one keytip.\n * @param overflowKeySequences - Full overflow keytip sequence.\n * @returns Sequence that will be used by the keytip when in the overflow.\n */\nexport function mergeOverflows(keySequences: string[], overflowKeySequences: string[]): string[] {\n  const overflowSequenceLen = overflowKeySequences.length;\n  const overflowSequence = [...overflowKeySequences].pop();\n  const newKeySequences = [...keySequences];\n  return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence!);\n}\n\n/**\n * Constructs the data-ktp-target attribute selector from a full key sequence.\n *\n * @param keySequences - Full string[] for a Keytip.\n * @returns String selector to use to query for the keytip target.\n */\nexport function ktpTargetFromSequences(keySequences: string[]): string {\n  return '[' + DATAKTP_TARGET + '=\"' + sequencesToID(keySequences) + '\"]';\n}\n\n/**\n * Constructs the data-ktp-execute-target attribute selector from a keytip ID.\n *\n * @param keytipId - ID of the Keytip.\n * @returns String selector to use to query for the keytip execute target.\n */\nexport function ktpTargetFromId(keytipId: string): string {\n  return '[' + DATAKTP_EXECUTE_TARGET + '=\"' + keytipId + '\"]';\n}\n\n/**\n * Gets the aria-describedby value to put on the component with this keytip.\n *\n * @param keySequences - KeySequences of the keytip.\n * @returns The aria-describedby value to set on the component with this keytip.\n */\nexport function getAriaDescribedBy(keySequences: string[]): string {\n  const describedby = ' ' + KTP_LAYER_ID;\n  if (!keySequences.length) {\n    // Return just the layer ID\n    return describedby;\n  }\n\n  return describedby + ' ' + sequencesToID(keySequences);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}