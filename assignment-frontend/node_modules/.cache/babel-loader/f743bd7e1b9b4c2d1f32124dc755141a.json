{"ast":null,"code":"var now = function () {\n  return typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n};\n\nvar RESET_INTERVAL = 3 * 60 * 1000; // auto reset every 3 minutes\n\n/**\n * Performance helper class for measuring things.\n *\n * @public\n * {@docCategory FabricPerformance}\n */\n\nvar FabricPerformance =\n/** @class */\nfunction () {\n  function FabricPerformance() {}\n  /**\n   * Measures execution time of the given syncronous function. If the same logic is executed multiple times,\n   * each individual measurement will be collected as well the overall numbers.\n   * @param name - The name of this measurement\n   * @param func - The logic to be measured for execution time\n   */\n\n\n  FabricPerformance.measure = function (name, func) {\n    if (FabricPerformance._timeoutId) {\n      FabricPerformance.setPeriodicReset();\n    }\n\n    var start = now();\n    func();\n    var end = now();\n    var measurement = FabricPerformance.summary[name] || {\n      totalDuration: 0,\n      count: 0,\n      all: []\n    };\n    var duration = end - start;\n    measurement.totalDuration += duration;\n    measurement.count++;\n    measurement.all.push({\n      duration: duration,\n      timeStamp: end\n    });\n    FabricPerformance.summary[name] = measurement;\n  };\n\n  FabricPerformance.reset = function () {\n    FabricPerformance.summary = {};\n    clearTimeout(FabricPerformance._timeoutId);\n    FabricPerformance._timeoutId = NaN;\n  };\n\n  FabricPerformance.setPeriodicReset = function () {\n    FabricPerformance._timeoutId = setTimeout(function () {\n      return FabricPerformance.reset();\n    }, RESET_INTERVAL);\n  };\n\n  FabricPerformance.summary = {};\n  return FabricPerformance;\n}();\n\nexport { FabricPerformance };","map":{"version":3,"sources":["FabricPerformance.ts"],"names":[],"mappings":"AAgCA,IAAM,GAAG,GAAiB,YAAA;AACxB,SAAA,OAAO,WAAP,KAAuB,WAAvB,IAAsC,CAAC,CAAC,WAAW,CAAC,GAApD,GAA0D,WAAW,CAAC,GAAZ,EAA1D,GAA8E,IAAI,CAAC,GAAL,EAA9E;AAAwF,CAD1F;;AAGA,IAAM,cAAc,GAAG,IAAI,EAAJ,GAAS,IAAhC,C,CAAsC;;AAEtC;;;;;AAKG;;AACH,IAAA,iBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,iBAAA,GAAA,CAyCC;AArCC;;;;;AAKG;;;AACW,EAAA,iBAAA,CAAA,OAAA,GAAd,UAAsB,IAAtB,EAAoC,IAApC,EAAoD;AAClD,QAAI,iBAAiB,CAAC,UAAtB,EAAkC;AAChC,MAAA,iBAAiB,CAAC,gBAAlB;AACD;;AACD,QAAM,KAAK,GAAG,GAAG,EAAjB;AACA,IAAA,IAAI;AACJ,QAAM,GAAG,GAAG,GAAG,EAAf;AACA,QAAM,WAAW,GAAqB,iBAAiB,CAAC,OAAlB,CAA0B,IAA1B,KAAmC;AACvE,MAAA,aAAa,EAAE,CADwD;AAEvE,MAAA,KAAK,EAAE,CAFgE;AAGvE,MAAA,GAAG,EAAE;AAHkE,KAAzE;AAKA,QAAM,QAAQ,GAAG,GAAG,GAAG,KAAvB;AACA,IAAA,WAAW,CAAC,aAAZ,IAA6B,QAA7B;AACA,IAAA,WAAW,CAAC,KAAZ;AACA,IAAA,WAAW,CAAC,GAAZ,CAAgB,IAAhB,CAAqB;AACnB,MAAA,QAAQ,EAAE,QADS;AAEnB,MAAA,SAAS,EAAE;AAFQ,KAArB;AAIA,IAAA,iBAAiB,CAAC,OAAlB,CAA0B,IAA1B,IAAkC,WAAlC;AACD,GApBa;;AAsBA,EAAA,iBAAA,CAAA,KAAA,GAAd,YAAA;AACE,IAAA,iBAAiB,CAAC,OAAlB,GAA4B,EAA5B;AACA,IAAA,YAAY,CAAC,iBAAiB,CAAC,UAAnB,CAAZ;AACA,IAAA,iBAAiB,CAAC,UAAlB,GAA+B,GAA/B;AACD,GAJa;;AAMA,EAAA,iBAAA,CAAA,gBAAA,GAAd,YAAA;AACE,IAAA,iBAAiB,CAAC,UAAlB,GAA+B,UAAU,CAAC,YAAA;AAAM,aAAA,iBAAiB,CAAjB,KAAA,EAAA;AAAyB,KAAhC,EAAkC,cAAlC,CAAzC;AACD,GAFa;;AArCA,EAAA,iBAAA,CAAA,OAAA,GAAwB,EAAxB;AAwChB,SAAA,iBAAA;AAAC,CAzCD,EAAA;;SAAa,iB","sourcesContent":["declare const setTimeout: (cb: () => void, delay: number) => number;\n\n/**\n * PerfData interface.\n *\n * @internal\n */\nexport interface IPerfData {\n  duration: number;\n  timeStamp: number;\n}\n\n/**\n * PerfMeasurement interface.\n *\n * @internal\n */\nexport interface IPerfMeasurement {\n  totalDuration: number;\n  count: number;\n  all: IPerfData[];\n}\n\n/**\n * PerfSummary interface.\n *\n * @internal\n */\nexport interface IPerfSummary {\n  [key: string]: IPerfMeasurement;\n}\n\nconst now: () => number = () =>\n  typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n\nconst RESET_INTERVAL = 3 * 60 * 1000; // auto reset every 3 minutes\n\n/**\n * Performance helper class for measuring things.\n *\n * @public\n * {@docCategory FabricPerformance}\n */\nexport class FabricPerformance {\n  public static summary: IPerfSummary = {};\n  private static _timeoutId: number;\n\n  /**\n   * Measures execution time of the given syncronous function. If the same logic is executed multiple times,\n   * each individual measurement will be collected as well the overall numbers.\n   * @param name - The name of this measurement\n   * @param func - The logic to be measured for execution time\n   */\n  public static measure(name: string, func: () => void): void {\n    if (FabricPerformance._timeoutId) {\n      FabricPerformance.setPeriodicReset();\n    }\n    const start = now();\n    func();\n    const end = now();\n    const measurement: IPerfMeasurement = FabricPerformance.summary[name] || {\n      totalDuration: 0,\n      count: 0,\n      all: [],\n    };\n    const duration = end - start;\n    measurement.totalDuration += duration;\n    measurement.count++;\n    measurement.all.push({\n      duration: duration,\n      timeStamp: end,\n    });\n    FabricPerformance.summary[name] = measurement;\n  }\n\n  public static reset(): void {\n    FabricPerformance.summary = {};\n    clearTimeout(FabricPerformance._timeoutId);\n    FabricPerformance._timeoutId = NaN;\n  }\n\n  public static setPeriodicReset(): void {\n    FabricPerformance._timeoutId = setTimeout(() => FabricPerformance.reset(), RESET_INTERVAL);\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}