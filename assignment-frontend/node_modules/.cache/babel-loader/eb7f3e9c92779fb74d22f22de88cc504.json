{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, KeyCodes, divProperties, doesElementContainFocus, getDocument, getNativeProps, on, getWindow, elementContains } from '../../Utilities';\n/**\n * This adds accessibility to Dialog and Panel controls\n */\n\nvar Popup =\n/** @class */\nfunction (_super) {\n  __extends(Popup, _super);\n\n  function Popup(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._disposables = [];\n\n    _this._onKeyDown = function (ev) {\n      switch (ev.which) {\n        case KeyCodes.escape:\n          if (_this.props.onDismiss) {\n            _this.props.onDismiss(ev);\n\n            ev.preventDefault();\n            ev.stopPropagation();\n          }\n\n          break;\n      }\n    };\n\n    _this._onFocus = function () {\n      _this._containsFocus = true;\n    };\n\n    _this._onBlur = function (ev) {\n      /** The popup should update this._containsFocus when:\n       * relatedTarget exists AND\n       * the relatedTarget is not contained within the popup.\n       * If the relatedTarget is within the popup, that means the popup still has focus\n       * and focused moved from one element to another within the popup.\n       * If relatedTarget is undefined or null that usually means that a\n       * keyboard event occured and focus didn't change\n       */\n      if (_this._root.current && ev.relatedTarget && !elementContains(_this._root.current, ev.relatedTarget)) {\n        _this._containsFocus = false;\n      }\n    };\n\n    _this._async = new Async(_this);\n    _this.state = {\n      needsVerticalScrollBar: false\n    };\n    return _this;\n  }\n\n  Popup.prototype.UNSAFE_componentWillMount = function () {\n    this._originalFocusedElement = getDocument().activeElement;\n  };\n\n  Popup.prototype.componentDidMount = function () {\n    if (this._root.current) {\n      this._disposables.push(on(this._root.current, 'focus', this._onFocus, true), on(this._root.current, 'blur', this._onBlur, true));\n\n      var currentWindow = getWindow(this._root.current);\n\n      if (currentWindow) {\n        this._disposables.push(on(currentWindow, 'keydown', this._onKeyDown));\n      }\n\n      if (doesElementContainFocus(this._root.current)) {\n        this._containsFocus = true;\n      }\n    }\n\n    this._updateScrollBarAsync();\n  };\n\n  Popup.prototype.componentDidUpdate = function () {\n    this._updateScrollBarAsync();\n\n    this._async.dispose();\n  };\n\n  Popup.prototype.componentWillUnmount = function () {\n    var _a;\n\n    this._disposables.forEach(function (dispose) {\n      return dispose();\n    }); // eslint-disable-next-line deprecation/deprecation\n\n\n    if (this.props.shouldRestoreFocus) {\n      var _b = this.props.onRestoreFocus,\n          onRestoreFocus = _b === void 0 ? defaultFocusRestorer : _b;\n      onRestoreFocus({\n        originalElement: this._originalFocusedElement,\n        containsFocus: this._containsFocus,\n        documentContainsFocus: ((_a = getDocument()) === null || _a === void 0 ? void 0 : _a.hasFocus()) || false\n      });\n    } // De-reference DOM Node to avoid retainment via transpiled closure of _onKeyDown\n\n\n    delete this._originalFocusedElement;\n  };\n\n  Popup.prototype.render = function () {\n    var _a = this.props,\n        role = _a.role,\n        className = _a.className,\n        ariaLabel = _a.ariaLabel,\n        ariaLabelledBy = _a.ariaLabelledBy,\n        ariaDescribedBy = _a.ariaDescribedBy,\n        style = _a.style;\n    return React.createElement(\"div\", __assign({\n      ref: this._root\n    }, getNativeProps(this.props, divProperties), {\n      className: className,\n      role: role,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": ariaDescribedBy,\n      onKeyDown: this._onKeyDown,\n      style: __assign({\n        overflowY: this.state.needsVerticalScrollBar ? 'scroll' : undefined,\n        outline: 'none'\n      }, style)\n    }), this.props.children);\n  };\n\n  Popup.prototype._updateScrollBarAsync = function () {\n    var _this = this;\n\n    this._async.requestAnimationFrame(function () {\n      _this._getScrollBar();\n    });\n  };\n\n  Popup.prototype._getScrollBar = function () {\n    // If overflowY is overriden, don't waste time calculating whether the scrollbar is necessary.\n    if (this.props.style && this.props.style.overflowY) {\n      return;\n    }\n\n    var needsVerticalScrollBar = false;\n\n    if (this._root && this._root.current && this._root.current.firstElementChild) {\n      // ClientHeight returns the client height of an element rounded to an\n      // integer. On some browsers at different zoom levels this rounding\n      // can generate different results for the root container and child even\n      // though they are the same height. This causes us to show a scroll bar\n      // when not needed. Ideally we would use BoundingClientRect().height\n      // instead however seems that the API is 90% slower than using ClientHeight.\n      // Therefore instead we will calculate the difference between heights and\n      // allow for a 1px difference to still be considered ok and not show the\n      // scroll bar.\n      var rootHeight = this._root.current.clientHeight;\n      var firstChildHeight = this._root.current.firstElementChild.clientHeight;\n\n      if (rootHeight > 0 && firstChildHeight > rootHeight) {\n        needsVerticalScrollBar = firstChildHeight - rootHeight > 1;\n      }\n    }\n\n    if (this.state.needsVerticalScrollBar !== needsVerticalScrollBar) {\n      this.setState({\n        needsVerticalScrollBar: needsVerticalScrollBar\n      });\n    }\n  };\n\n  Popup.defaultProps = {\n    shouldRestoreFocus: true\n  };\n  return Popup;\n}(React.Component);\n\nexport { Popup };\n\nfunction defaultFocusRestorer(options) {\n  var originalElement = options.originalElement,\n      containsFocus = options.containsFocus;\n\n  if (originalElement && containsFocus && originalElement !== window) {\n    // Make sure that the focus method actually exists\n    // In some cases the object might exist but not be a real element.\n    // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n    if (originalElement.focus) {\n      originalElement.focus();\n    }\n  }\n}","map":{"version":3,"sources":["components/Popup/Popup.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Async,\n  KeyCodes,\n  divProperties,\n  doesElementContainFocus,\n  getDocument,\n  getNativeProps,\n  on,\n  getWindow,\n  elementContains,\n} from '../../Utilities';\nimport { IPopupProps } from './Popup.types';\n\nexport interface IPopupState {\n  needsVerticalScrollBar?: boolean;\n}\n\n/**\n * This adds accessibility to Dialog and Panel controls\n */\nexport class Popup extends React.Component<IPopupProps, IPopupState> {\n  public static defaultProps: IPopupProps = {\n    shouldRestoreFocus: true,\n  };\n\n  public _root = React.createRef<HTMLDivElement>();\n  private _disposables: (() => void)[] = [];\n  private _originalFocusedElement: HTMLElement;\n  private _containsFocus: boolean;\n  private _async: Async;\n\n  public constructor(props: IPopupProps) {\n    super(props);\n    this._async = new Async(this);\n    this.state = { needsVerticalScrollBar: false };\n  }\n\n  public UNSAFE_componentWillMount(): void {\n    this._originalFocusedElement = getDocument()!.activeElement as HTMLElement;\n  }\n\n  public componentDidMount(): void {\n    if (this._root.current) {\n      this._disposables.push(\n        on(this._root.current, 'focus', this._onFocus, true),\n        on(this._root.current, 'blur', this._onBlur, true),\n      );\n      const currentWindow = getWindow(this._root.current);\n      if (currentWindow) {\n        this._disposables.push(on(currentWindow, 'keydown', this._onKeyDown as any));\n      }\n      if (doesElementContainFocus(this._root.current)) {\n        this._containsFocus = true;\n      }\n    }\n\n    this._updateScrollBarAsync();\n  }\n\n  public componentDidUpdate() {\n    this._updateScrollBarAsync();\n    this._async.dispose();\n  }\n\n  public componentWillUnmount(): void {\n    this._disposables.forEach((dispose: () => void) => dispose());\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.props.shouldRestoreFocus) {\n      const { onRestoreFocus = defaultFocusRestorer } = this.props;\n      onRestoreFocus({\n        originalElement: this._originalFocusedElement,\n        containsFocus: this._containsFocus,\n        documentContainsFocus: getDocument()?.hasFocus() || false,\n      });\n    }\n    // De-reference DOM Node to avoid retainment via transpiled closure of _onKeyDown\n    delete this._originalFocusedElement;\n  }\n\n  public render(): JSX.Element {\n    const { role, className, ariaLabel, ariaLabelledBy, ariaDescribedBy, style } = this.props;\n\n    return (\n      <div\n        ref={this._root}\n        {...getNativeProps(this.props, divProperties)}\n        className={className}\n        role={role}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={ariaDescribedBy}\n        onKeyDown={this._onKeyDown}\n        style={{ overflowY: this.state.needsVerticalScrollBar ? 'scroll' : undefined, outline: 'none', ...style }}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    switch (ev.which) {\n      case KeyCodes.escape:\n        if (this.props.onDismiss) {\n          this.props.onDismiss(ev);\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n\n        break;\n    }\n  };\n\n  private _updateScrollBarAsync(): void {\n    this._async.requestAnimationFrame(() => {\n      this._getScrollBar();\n    });\n  }\n\n  private _getScrollBar(): void {\n    // If overflowY is overriden, don't waste time calculating whether the scrollbar is necessary.\n    if (this.props.style && this.props.style.overflowY) {\n      return;\n    }\n\n    let needsVerticalScrollBar = false;\n    if (this._root && this._root.current && this._root.current.firstElementChild) {\n      // ClientHeight returns the client height of an element rounded to an\n      // integer. On some browsers at different zoom levels this rounding\n      // can generate different results for the root container and child even\n      // though they are the same height. This causes us to show a scroll bar\n      // when not needed. Ideally we would use BoundingClientRect().height\n      // instead however seems that the API is 90% slower than using ClientHeight.\n      // Therefore instead we will calculate the difference between heights and\n      // allow for a 1px difference to still be considered ok and not show the\n      // scroll bar.\n      const rootHeight = this._root.current.clientHeight;\n      const firstChildHeight = this._root.current.firstElementChild.clientHeight;\n      if (rootHeight > 0 && firstChildHeight > rootHeight) {\n        needsVerticalScrollBar = firstChildHeight - rootHeight > 1;\n      }\n    }\n    if (this.state.needsVerticalScrollBar !== needsVerticalScrollBar) {\n      this.setState({\n        needsVerticalScrollBar: needsVerticalScrollBar,\n      });\n    }\n  }\n\n  private _onFocus = (): void => {\n    this._containsFocus = true;\n  };\n\n  private _onBlur = (ev: FocusEvent): void => {\n    /** The popup should update this._containsFocus when:\n     * relatedTarget exists AND\n     * the relatedTarget is not contained within the popup.\n     * If the relatedTarget is within the popup, that means the popup still has focus\n     * and focused moved from one element to another within the popup.\n     * If relatedTarget is undefined or null that usually means that a\n     * keyboard event occured and focus didn't change\n     */\n    if (\n      this._root.current &&\n      ev.relatedTarget &&\n      !elementContains(this._root.current, ev.relatedTarget as HTMLElement)\n    ) {\n      this._containsFocus = false;\n    }\n  };\n}\n\nfunction defaultFocusRestorer(options: {\n  originalElement?: HTMLElement | Window;\n  containsFocus: boolean;\n  documentContainsFocus: boolean;\n}) {\n  const { originalElement, containsFocus } = options;\n\n  if (originalElement && containsFocus && originalElement !== window) {\n    // Make sure that the focus method actually exists\n    // In some cases the object might exist but not be a real element.\n    // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n    if (originalElement.focus) {\n      originalElement.focus();\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}