{"ast":null,"code":"import { getGlobalClassNames } from '../../Styling';\nvar inheritFont = {\n  fontFamily: 'inherit'\n};\nvar GlobalClassNames = {\n  root: 'ms-Fabric',\n  bodyThemed: 'ms-Fabric-bodyThemed'\n};\nexport var getStyles = function (props) {\n  var theme = props.theme,\n      className = props.className,\n      applyTheme = props.applyTheme;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  return {\n    root: [classNames.root, theme.fonts.medium, {\n      color: theme.palette.neutralPrimary,\n      selectors: {\n        '& button': inheritFont,\n        '& input': inheritFont,\n        '& textarea': inheritFont\n      }\n    }, // apply theme to only if applyTheme is true\n    applyTheme && {\n      color: theme.semanticColors.bodyText,\n      backgroundColor: theme.semanticColors.bodyBackground\n    }, className],\n    bodyThemed: [{\n      backgroundColor: theme.semanticColors.bodyBackground\n    }]\n  };\n};","map":{"version":3,"sources":["components/Fabric/Fabric.styles.ts"],"names":[],"mappings":"AAAA,SAAS,mBAAT,QAAoC,eAApC;AAGA,IAAM,WAAW,GAAG;AAAE,EAAA,UAAU,EAAE;AAAd,CAApB;AAEA,IAAM,gBAAgB,GAAG;AACvB,EAAA,IAAI,EAAE,WADiB;AAEvB,EAAA,UAAU,EAAE;AAFW,CAAzB;AAUA,OAAO,IAAM,SAAS,GAAG,UAAC,KAAD,EAAyB;AACxC,MAAA,KAAA,GAAA,KAAA,CAAA,KAAA;AAAA,MAAO,SAAA,GAAA,KAAA,CAAA,SAAP;AAAA,MAAkB,UAAA,GAAA,KAAA,CAAA,UAAlB;AACR,MAAM,UAAU,GAAG,mBAAmB,CAAC,gBAAD,EAAmB,KAAnB,CAAtC;AACA,SAAO;AACL,IAAA,IAAI,EAAE,CACJ,UAAU,CAAC,IADP,EAEJ,KAAK,CAAC,KAAN,CAAY,MAFR,EAGJ;AACE,MAAA,KAAK,EAAE,KAAK,CAAC,OAAN,CAAc,cADvB;AAEE,MAAA,SAAS,EAAE;AACT,oBAAY,WADH;AAET,mBAAW,WAFF;AAGT,sBAAc;AAHL;AAFb,KAHI,EAWJ;AACA,IAAA,UAAU,IAAI;AACZ,MAAA,KAAK,EAAE,KAAK,CAAC,cAAN,CAAqB,QADhB;AAEZ,MAAA,eAAe,EAAE,KAAK,CAAC,cAAN,CAAqB;AAF1B,KAZV,EAgBJ,SAhBI,CADD;AAmBL,IAAA,UAAU,EAAE,CACV;AACE,MAAA,eAAe,EAAE,KAAK,CAAC,cAAN,CAAqB;AADxC,KADU;AAnBP,GAAP;AAyBD,CA5BM","sourcesContent":["import { getGlobalClassNames } from '../../Styling';\nimport { IFabricStyleProps, IFabricStyles } from './Fabric.types';\n\nconst inheritFont = { fontFamily: 'inherit' };\n\nconst GlobalClassNames = {\n  root: 'ms-Fabric',\n  bodyThemed: 'ms-Fabric-bodyThemed',\n};\n\nexport interface IFabricClassNames {\n  root: string;\n  bodyThemed: string;\n}\n\nexport const getStyles = (props: IFabricStyleProps): IFabricStyles => {\n  const { theme, className, applyTheme } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        color: theme.palette.neutralPrimary,\n        selectors: {\n          '& button': inheritFont,\n          '& input': inheritFont,\n          '& textarea': inheritFont,\n        },\n      },\n      // apply theme to only if applyTheme is true\n      applyTheme && {\n        color: theme.semanticColors.bodyText,\n        backgroundColor: theme.semanticColors.bodyBackground,\n      },\n      className,\n    ],\n    bodyThemed: [\n      {\n        backgroundColor: theme.semanticColors.bodyBackground,\n      },\n    ],\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}