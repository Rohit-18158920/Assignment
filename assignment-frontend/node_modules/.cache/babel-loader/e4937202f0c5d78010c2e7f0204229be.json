{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { buttonProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { getIsChecked, isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\n\nvar ContextualMenuButton =\n/** @class */\nfunction (_super) {\n  __extends(ContextualMenuButton, _super);\n\n  function ContextualMenuButton() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._btn = React.createRef();\n    _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n      return __assign(__assign({}, keytipProps), {\n        hasMenu: true\n      });\n    });\n\n    _this._renderAriaDescription = function (ariaDescription, className) {\n      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n      return ariaDescription ? React.createElement(\"span\", {\n        id: _this._ariaDescriptionId,\n        className: className\n      }, ariaDescription) : null;\n    };\n\n    _this._getSubmenuTarget = function () {\n      return _this._btn.current ? _this._btn.current : undefined;\n    };\n\n    return _this;\n  }\n\n  ContextualMenuButton.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        item = _a.item,\n        classNames = _a.classNames,\n        index = _a.index,\n        focusableElementIndex = _a.focusableElementIndex,\n        totalItemCount = _a.totalItemCount,\n        hasCheckmarks = _a.hasCheckmarks,\n        hasIcons = _a.hasIcons,\n        _b = _a.contextualMenuItemAs,\n        ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n        expandedMenuItemKey = _a.expandedMenuItemKey,\n        onItemMouseDown = _a.onItemMouseDown,\n        onItemClick = _a.onItemClick,\n        openSubMenu = _a.openSubMenu,\n        dismissSubMenu = _a.dismissSubMenu,\n        dismissMenu = _a.dismissMenu;\n\n    var subMenuId = this._getSubMenuId(item);\n\n    var isChecked = getIsChecked(item);\n    var canCheck = isChecked !== null;\n    var defaultRole = getMenuItemAriaRole(item);\n    var itemHasSubmenu = hasSubmenu(item);\n    var itemProps = item.itemProps,\n        ariaLabel = item.ariaLabel,\n        ariaDescription = item.ariaDescription;\n    var buttonNativeProperties = getNativeProps(item, buttonProperties); // Do not add the disabled attribute to the button so that it is focusable\n\n    delete buttonNativeProperties.disabled;\n    var itemRole = item.role || defaultRole; // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    var ariaDescribedByIds = ariaDescription ? this._ariaDescriptionId : undefined;\n    var itemButtonProperties = {\n      className: classNames.root,\n      onClick: this._onItemClick,\n      onKeyDown: itemHasSubmenu ? this._onItemKeyDown : undefined,\n      onMouseEnter: this._onItemMouseEnter,\n      onMouseLeave: this._onItemMouseLeave,\n      onMouseDown: function (ev) {\n        return onItemMouseDown ? onItemMouseDown(item, ev) : undefined;\n      },\n      onMouseMove: this._onItemMouseMove,\n      href: item.href,\n      title: item.title,\n      'aria-label': ariaLabel,\n      'aria-describedby': ariaDescribedByIds,\n      'aria-haspopup': itemHasSubmenu || undefined,\n      'aria-owns': item.key === expandedMenuItemKey ? subMenuId : undefined,\n      'aria-expanded': itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n      'aria-posinset': focusableElementIndex + 1,\n      'aria-setsize': totalItemCount,\n      'aria-disabled': isItemDisabled(item),\n      'aria-checked': (itemRole === 'menuitemcheckbox' || itemRole === 'menuitemradio') && canCheck ? !!isChecked : undefined,\n      'aria-selected': itemRole === 'menuitem' && canCheck ? !!isChecked : undefined,\n      role: itemRole,\n      // eslint-disable-next-line deprecation/deprecation\n      style: item.style\n    };\n    var keytipProps = item.keytipProps;\n\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    return React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      ariaDescribedBy: buttonNativeProperties['aria-describedby'],\n      disabled: isItemDisabled(item)\n    }, function (keytipAttributes) {\n      return React.createElement(\"button\", __assign({\n        ref: _this._btn\n      }, buttonNativeProperties, itemButtonProperties, keytipAttributes, {\n        \"aria-describedby\": mergeAriaAttributeValues(itemButtonProperties['aria-describedby'], keytipAttributes ? keytipAttributes['aria-describedby'] : undefined)\n      }), React.createElement(ChildrenRenderer, __assign({\n        componentRef: item.componentRef,\n        item: item,\n        classNames: classNames,\n        index: index,\n        onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,\n        hasIcons: hasIcons,\n        openSubMenu: openSubMenu,\n        dismissSubMenu: dismissSubMenu,\n        dismissMenu: dismissMenu,\n        getSubmenuTarget: _this._getSubmenuTarget\n      }, itemProps)), _this._renderAriaDescription(ariaDescription, classNames.screenReaderText));\n    });\n  };\n\n  return ContextualMenuButton;\n}(ContextualMenuItemWrapper);\n\nexport { ContextualMenuButton };","map":{"version":3,"sources":["components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { buttonProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { getIsChecked, isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport { IKeytipProps } from '../../Keytip/Keytip.types';\n\nexport class ContextualMenuButton extends ContextualMenuItemWrapper {\n  private _btn = React.createRef<HTMLButtonElement>();\n  private _ariaDescriptionId: string;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  public render() {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      expandedMenuItemKey,\n      onItemMouseDown,\n      onItemClick,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    const subMenuId = this._getSubMenuId(item);\n\n    const isChecked: boolean | null | undefined = getIsChecked(item);\n    const canCheck: boolean = isChecked !== null;\n    const defaultRole = getMenuItemAriaRole(item);\n    const itemHasSubmenu = hasSubmenu(item);\n    const { itemProps, ariaLabel, ariaDescription } = item;\n\n    const buttonNativeProperties = getNativeProps<React.ButtonHTMLAttributes<HTMLButtonElement>>(\n      item,\n      buttonProperties,\n    );\n    // Do not add the disabled attribute to the button so that it is focusable\n    delete buttonNativeProperties.disabled;\n\n    const itemRole = item.role || defaultRole;\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n    const ariaDescribedByIds = ariaDescription ? this._ariaDescriptionId : undefined;\n\n    const itemButtonProperties = {\n      className: classNames.root,\n      onClick: this._onItemClick,\n      onKeyDown: itemHasSubmenu ? this._onItemKeyDown : undefined,\n      onMouseEnter: this._onItemMouseEnter,\n      onMouseLeave: this._onItemMouseLeave,\n      onMouseDown: (ev: React.MouseEvent<HTMLButtonElement>) =>\n        onItemMouseDown ? onItemMouseDown(item, ev) : undefined,\n      onMouseMove: this._onItemMouseMove,\n      href: item.href,\n      title: item.title,\n      'aria-label': ariaLabel,\n      'aria-describedby': ariaDescribedByIds,\n      'aria-haspopup': itemHasSubmenu || undefined,\n      'aria-owns': item.key === expandedMenuItemKey ? subMenuId : undefined,\n      'aria-expanded': itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n      'aria-posinset': focusableElementIndex + 1,\n      'aria-setsize': totalItemCount,\n      'aria-disabled': isItemDisabled(item),\n      'aria-checked':\n        (itemRole === 'menuitemcheckbox' || itemRole === 'menuitemradio') && canCheck ? !!isChecked : undefined,\n      'aria-selected': itemRole === 'menuitem' && canCheck ? !!isChecked : undefined,\n      role: itemRole,\n      // eslint-disable-next-line deprecation/deprecation\n      style: item.style,\n    };\n\n    let { keytipProps } = item;\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    return (\n      <KeytipData\n        keytipProps={keytipProps}\n        ariaDescribedBy={buttonNativeProperties['aria-describedby']}\n        disabled={isItemDisabled(item)}\n      >\n        {(keytipAttributes: any): JSX.Element => (\n          <button\n            ref={this._btn}\n            {...buttonNativeProperties}\n            {...itemButtonProperties}\n            {...keytipAttributes}\n            aria-describedby={mergeAriaAttributeValues(\n              itemButtonProperties['aria-describedby'],\n              keytipAttributes ? keytipAttributes['aria-describedby'] : undefined,\n            )}\n          >\n            <ChildrenRenderer\n              componentRef={item.componentRef}\n              item={item}\n              classNames={classNames}\n              index={index}\n              onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n              hasIcons={hasIcons}\n              openSubMenu={openSubMenu}\n              dismissSubMenu={dismissSubMenu}\n              dismissMenu={dismissMenu}\n              getSubmenuTarget={this._getSubmenuTarget}\n              {...itemProps}\n            />\n            {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n          </button>\n        )}\n      </KeytipData>\n    );\n  }\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._btn.current ? this._btn.current : undefined;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}