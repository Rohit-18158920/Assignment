{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { warn, warnControlledUsage, warnConditionallyRequiredProps, warnDeprecations, warnMutuallyExclusive } from '@uifabric/utilities/lib/warn';\nimport { usePrevious } from './usePrevious';\nimport { useConst } from './useConst';\nvar warningId = 0;\n/**\n * Only in development mode, display console warnings when certain conditions are met.\n * Note that all warnings except `controlledUsage` will only be shown on first render\n * (new `controlledUsage` warnings may be shown later due to prop changes).\n */\n\nexport function useWarnings(options) {\n  if (process.env.NODE_ENV !== 'production') {\n    var name_1 = options.name,\n        props = options.props,\n        _a = options.other,\n        other = _a === void 0 ? [] : _a,\n        conditionallyRequired = options.conditionallyRequired,\n        deprecations = options.deprecations,\n        mutuallyExclusive = options.mutuallyExclusive,\n        controlledUsage = options.controlledUsage;\n    /* eslint-disable react-hooks/rules-of-hooks -- build-time conditional */\n\n    var hasWarnedRef = React.useRef(false);\n    var componentId = useConst(function () {\n      return \"useWarnings_\" + warningId++;\n    });\n    var oldProps = usePrevious(props);\n    /* eslint-enable react-hooks/rules-of-hooks */\n    // Warn synchronously (not in useEffect) on first render to make debugging easier.\n\n    if (!hasWarnedRef.current) {\n      hasWarnedRef.current = true;\n\n      for (var _i = 0, other_1 = other; _i < other_1.length; _i++) {\n        var warning = other_1[_i];\n        warn(warning);\n      }\n\n      if (conditionallyRequired) {\n        for (var _b = 0, conditionallyRequired_1 = conditionallyRequired; _b < conditionallyRequired_1.length; _b++) {\n          var req = conditionallyRequired_1[_b];\n          warnConditionallyRequiredProps(name_1, props, req.requiredProps, req.conditionalPropName, req.condition);\n        }\n      }\n\n      deprecations && warnDeprecations(name_1, props, deprecations);\n      mutuallyExclusive && warnMutuallyExclusive(name_1, props, mutuallyExclusive);\n    } // Controlled usage warnings may be displayed on either first or subsequent renders due to\n    // prop changes. Note that it's safe to run this synchronously (not in useEffect) even in\n    // concurrent mode because `warnControlledUsage` internally tracks which warnings have been\n    // displayed for each component instance (so nothing will be displayed twice).\n\n\n    controlledUsage && warnControlledUsage(__assign(__assign({}, controlledUsage), {\n      componentId: componentId,\n      props: props,\n      componentName: name_1,\n      oldProps: oldProps\n    }));\n  }\n}","map":{"version":3,"sources":["useWarnings.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAGE,IAHF,EAIE,mBAJF,EAKE,8BALF,EAME,gBANF,EAOE,qBAPF,QAQO,8BARP;AASA,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,QAAT,QAAyB,YAAzB;AAkDA,IAAI,SAAS,GAAG,CAAhB;AAEA;;;;AAIG;;AACH,OAAM,SAAU,WAAV,CAAyB,OAAzB,EAAoD;AACxD,MAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AAEvC,QAAA,MAAA,GAAA,OAAA,CAAA,IAAA;AAAA,QACA,KAAA,GAAA,OAAA,CAAA,KADA;AAAA,QAEA,EAAA,GAAA,OAAA,CAAA,KAFA;AAAA,QAEA,KAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAFA;AAAA,QAGA,qBAAA,GAAA,OAAA,CAAA,qBAHA;AAAA,QAIA,YAAA,GAAA,OAAA,CAAA,YAJA;AAAA,QAKA,iBAAA,GAAA,OAAA,CAAA,iBALA;AAAA,QAMA,eAAA,GAAA,OAAA,CAAA,eANA;AASF;;AACA,QAAM,YAAY,GAAG,KAAK,CAAC,MAAN,CAAa,KAAb,CAArB;AACA,QAAM,WAAW,GAAG,QAAQ,CAAC,YAAA;AAAM,aAAA,iBAAe,SAAf,EAAA;AAA4B,KAAnC,CAA5B;AACA,QAAM,QAAQ,GAAG,WAAW,CAAC,KAAD,CAA5B;AACA;AAEA;;AACA,QAAI,CAAC,YAAY,CAAC,OAAlB,EAA2B;AACzB,MAAA,YAAY,CAAC,OAAb,GAAuB,IAAvB;;AAEA,WAAsB,IAAA,EAAA,GAAA,CAAA,EAAA,OAAA,GAAA,KAAtB,EAAsB,EAAA,GAAA,OAAA,CAAA,MAAtB,EAAsB,EAAA,EAAtB,EAA6B;AAAxB,YAAM,OAAO,GAAA,OAAA,CAAA,EAAA,CAAb;AACH,QAAA,IAAI,CAAC,OAAD,CAAJ;AACD;;AAED,UAAI,qBAAJ,EAA2B;AACzB,aAAkB,IAAA,EAAA,GAAA,CAAA,EAAA,uBAAA,GAAA,qBAAlB,EAAkB,EAAA,GAAA,uBAAA,CAAA,MAAlB,EAAkB,EAAA,EAAlB,EAAyC;AAApC,cAAM,GAAG,GAAA,uBAAA,CAAA,EAAA,CAAT;AACH,UAAA,8BAA8B,CAAC,MAAD,EAAO,KAAP,EAAc,GAAG,CAAC,aAAlB,EAAiC,GAAG,CAAC,mBAArC,EAA0D,GAAG,CAAC,SAA9D,CAA9B;AACD;AACF;;AAED,MAAA,YAAY,IAAI,gBAAgB,CAAC,MAAD,EAAO,KAAP,EAAc,YAAd,CAAhC;AAEA,MAAA,iBAAiB,IAAI,qBAAqB,CAAC,MAAD,EAAO,KAAP,EAAc,iBAAd,CAA1C;AACD,KAlCwC,CAoCzC;AACA;AACA;AACA;;;AACA,IAAA,eAAe,IAAI,mBAAmB,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAM,eAAN,CAAA,EAAqB;AAAE,MAAA,WAAW,EAAA,WAAb;AAAe,MAAA,KAAK,EAAA,KAApB;AAAsB,MAAA,aAAa,EAAE,MAArC;AAA2C,MAAA,QAAQ,EAAA;AAAnD,KAArB,CAAA,CAAtC;AACD;AACF","sourcesContent":["import * as React from 'react';\nimport {\n  ISettingsMap,\n  IWarnControlledUsageParams,\n  warn,\n  warnControlledUsage,\n  warnConditionallyRequiredProps,\n  warnDeprecations,\n  warnMutuallyExclusive,\n} from '@uifabric/utilities/lib/warn';\nimport { usePrevious } from './usePrevious';\nimport { useConst } from './useConst';\n\nexport interface IWarningOptions<P> {\n  /** Name of the component */\n  name: string;\n\n  /** Current component props */\n  props: P;\n\n  /** Generic messages */\n  other?: string[];\n\n  /** Warns when props are required if a condition is met */\n  conditionallyRequired?: {\n    /** Props required when the condition is met */\n    requiredProps: string[];\n    /** Name of the prop that the condition is based on */\n    conditionalPropName: string;\n    /** Whether the condition is met */\n    condition: boolean;\n  }[];\n\n  /**\n   * Warns when deprecated props are being used. Each key is a prop name and each value is\n   * either undefined or a replacement prop name.\n   */\n  deprecations?: ISettingsMap<P>;\n\n  /**\n   * Warns when two props which are mutually exclusive are both being used.\n   * The key is one prop name and the value is the other.\n   */\n  mutuallyExclusive?: ISettingsMap<P>;\n\n  /**\n   * Check for and warn on the following error conditions with a form component:\n   * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n   *    and the component is not read-only\n   * - Both the value and defaultValue props are provided\n   * - The component is attempting to switch between controlled and uncontrolled\n   *\n   * The messages mimic the warnings React gives for these error conditions on input elements.\n   * The warning will only be displayed once per component instance.\n   */\n  controlledUsage?: Pick<\n    IWarnControlledUsageParams<P>,\n    'valueProp' | 'defaultValueProp' | 'onChangeProp' | 'readOnlyProp'\n  >;\n}\n\nlet warningId = 0;\n\n/**\n * Only in development mode, display console warnings when certain conditions are met.\n * Note that all warnings except `controlledUsage` will only be shown on first render\n * (new `controlledUsage` warnings may be shown later due to prop changes).\n */\nexport function useWarnings<P>(options: IWarningOptions<P>) {\n  if (process.env.NODE_ENV !== 'production') {\n    const {\n      name,\n      props,\n      other = [],\n      conditionallyRequired,\n      deprecations,\n      mutuallyExclusive,\n      controlledUsage,\n    } = options;\n\n    /* eslint-disable react-hooks/rules-of-hooks -- build-time conditional */\n    const hasWarnedRef = React.useRef(false);\n    const componentId = useConst(() => `useWarnings_${warningId++}`);\n    const oldProps = usePrevious(props);\n    /* eslint-enable react-hooks/rules-of-hooks */\n\n    // Warn synchronously (not in useEffect) on first render to make debugging easier.\n    if (!hasWarnedRef.current) {\n      hasWarnedRef.current = true;\n\n      for (const warning of other) {\n        warn(warning);\n      }\n\n      if (conditionallyRequired) {\n        for (const req of conditionallyRequired) {\n          warnConditionallyRequiredProps(name, props, req.requiredProps, req.conditionalPropName, req.condition);\n        }\n      }\n\n      deprecations && warnDeprecations(name, props, deprecations);\n\n      mutuallyExclusive && warnMutuallyExclusive(name, props, mutuallyExclusive);\n    }\n\n    // Controlled usage warnings may be displayed on either first or subsequent renders due to\n    // prop changes. Note that it's safe to run this synchronously (not in useEffect) even in\n    // concurrent mode because `warnControlledUsage` internally tracks which warnings have been\n    // displayed for each component instance (so nothing will be displayed twice).\n    controlledUsage && warnControlledUsage({ ...controlledUsage, componentId, props, componentName: name, oldProps });\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}