{"ast":null,"code":"import { __assign, __extends, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, nullRender, getNativeProps, divProperties, composeComponentAs, initializeComponentRef } from '../../Utilities';\nimport { OverflowSet } from '../../OverflowSet';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { CommandBarButton } from '../../Button';\nimport { TooltipHost } from '../../Tooltip';\nimport { getCommandButtonStyles } from './CommandBar.styles';\nvar getClassNames = classNamesFunction();\n\nvar CommandBarBase =\n/** @class */\nfunction (_super) {\n  __extends(CommandBarBase, _super);\n\n  function CommandBarBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._overflowSet = React.createRef();\n    _this._resizeGroup = React.createRef();\n\n    _this._onRenderData = function (data) {\n      return React.createElement(FocusZone, {\n        className: css(_this._classNames.root),\n        direction: FocusZoneDirection.horizontal,\n        role: 'menubar',\n        \"aria-label\": _this.props.ariaLabel\n      }, React.createElement(OverflowSet, {\n        role: \"none\",\n        componentRef: _this._overflowSet,\n        className: css(_this._classNames.primarySet),\n        doNotContainWithinFocusZone: true,\n        items: data.primaryItems,\n        overflowItems: data.overflowItems.length ? data.overflowItems : undefined,\n        onRenderItem: _this._onRenderItem,\n        onRenderOverflowButton: _this._onRenderOverflowButton\n      }), data.farItems && data.farItems.length > 0 && React.createElement(OverflowSet, {\n        role: \"none\",\n        className: css(_this._classNames.secondarySet),\n        doNotContainWithinFocusZone: true,\n        items: data.farItems,\n        onRenderItem: _this._onRenderItem,\n        onRenderOverflowButton: nullRender\n      }));\n    };\n\n    _this._onRenderItem = function (item) {\n      if (item.onRender) {\n        // These are the top level items, there is no relevant menu dismissing function to\n        // provide for the IContextualMenuItem onRender function. Pass in a no op function instead.\n        return item.onRender(item, function () {\n          return undefined;\n        });\n      } // eslint-disable-next-line deprecation/deprecation\n\n\n      var itemText = item.text || item.name;\n\n      var commandButtonProps = __assign(__assign({\n        allowDisabledFocus: true,\n        role: 'menuitem'\n      }, item), {\n        styles: getCommandButtonStyles(item.buttonStyles),\n        className: css('ms-CommandBarItem-link', item.className),\n        text: !item.iconOnly ? itemText : undefined,\n        menuProps: item.subMenuProps,\n        onClick: _this._onButtonClick(item)\n      });\n\n      if (item.iconOnly && (itemText !== undefined || item.tooltipHostProps)) {\n        return React.createElement(TooltipHost, __assign({\n          content: itemText\n        }, item.tooltipHostProps), _this._commandButton(item, commandButtonProps));\n      }\n\n      return _this._commandButton(item, commandButtonProps);\n    };\n\n    _this._commandButton = function (item, props) {\n      var ButtonAs = _this.props.buttonAs;\n      var CommandBarButtonAs = item.commandBarButtonAs;\n      var DefaultButtonAs = CommandBarButton; // The prop types between these three possible implementations overlap enough that a force-cast is safe.\n\n      var Type = DefaultButtonAs;\n\n      if (CommandBarButtonAs) {\n        Type = composeComponentAs(CommandBarButtonAs, Type);\n      }\n\n      if (ButtonAs) {\n        Type = composeComponentAs(ButtonAs, Type);\n      } // Always pass the default implementation to the override so it may be composed.\n\n\n      return React.createElement(Type, __assign({}, props));\n    };\n\n    _this._onRenderOverflowButton = function (overflowItems) {\n      var _a = _this.props.overflowButtonProps,\n          overflowButtonProps = _a === void 0 ? {} : _a;\n\n      var combinedOverflowItems = __spreadArrays(overflowButtonProps.menuProps ? overflowButtonProps.menuProps.items : [], overflowItems);\n\n      var overflowProps = __assign(__assign({\n        role: 'menuitem'\n      }, overflowButtonProps), {\n        styles: __assign({\n          menuIcon: {\n            fontSize: '17px'\n          }\n        }, overflowButtonProps.styles),\n        className: css('ms-CommandBar-overflowButton', overflowButtonProps.className),\n        menuProps: __assign(__assign({}, overflowButtonProps.menuProps), {\n          items: combinedOverflowItems\n        }),\n        menuIconProps: __assign({\n          iconName: 'More'\n        }, overflowButtonProps.menuIconProps)\n      });\n\n      var OverflowButtonType = _this.props.overflowButtonAs ? composeComponentAs(_this.props.overflowButtonAs, CommandBarButton) : CommandBarButton;\n      return React.createElement(OverflowButtonType, __assign({}, overflowProps));\n    };\n\n    _this._onReduceData = function (data) {\n      var _a = _this.props,\n          shiftOnReduce = _a.shiftOnReduce,\n          onDataReduced = _a.onDataReduced;\n      var primaryItems = data.primaryItems,\n          overflowItems = data.overflowItems,\n          cacheKey = data.cacheKey; // Use first item if shiftOnReduce, otherwise use last item\n\n      var movedItem = primaryItems[shiftOnReduce ? 0 : primaryItems.length - 1];\n\n      if (movedItem !== undefined) {\n        movedItem.renderedInOverflow = true;\n        overflowItems = __spreadArrays([movedItem], overflowItems);\n        primaryItems = shiftOnReduce ? primaryItems.slice(1) : primaryItems.slice(0, -1);\n\n        var newData = __assign(__assign({}, data), {\n          primaryItems: primaryItems,\n          overflowItems: overflowItems\n        });\n\n        cacheKey = _this._computeCacheKey({\n          primaryItems: primaryItems,\n          overflow: overflowItems.length > 0\n        });\n\n        if (onDataReduced) {\n          onDataReduced(movedItem);\n        }\n\n        newData.cacheKey = cacheKey;\n        return newData;\n      }\n\n      return undefined;\n    };\n\n    _this._onGrowData = function (data) {\n      var _a = _this.props,\n          shiftOnReduce = _a.shiftOnReduce,\n          onDataGrown = _a.onDataGrown;\n      var minimumOverflowItems = data.minimumOverflowItems;\n      var primaryItems = data.primaryItems,\n          overflowItems = data.overflowItems,\n          cacheKey = data.cacheKey;\n      var movedItem = overflowItems[0]; // Make sure that moved item exists and is not one of the original overflow items\n\n      if (movedItem !== undefined && overflowItems.length > minimumOverflowItems) {\n        movedItem.renderedInOverflow = false;\n        overflowItems = overflowItems.slice(1); // if shiftOnReduce, movedItem goes first, otherwise, last.\n\n        primaryItems = shiftOnReduce ? __spreadArrays([movedItem], primaryItems) : __spreadArrays(primaryItems, [movedItem]);\n\n        var newData = __assign(__assign({}, data), {\n          primaryItems: primaryItems,\n          overflowItems: overflowItems\n        });\n\n        cacheKey = _this._computeCacheKey({\n          primaryItems: primaryItems,\n          overflow: overflowItems.length > 0\n        });\n\n        if (onDataGrown) {\n          onDataGrown(movedItem);\n        }\n\n        newData.cacheKey = cacheKey;\n        return newData;\n      }\n\n      return undefined;\n    };\n\n    initializeComponentRef(_this);\n    return _this;\n  }\n\n  CommandBarBase.prototype.render = function () {\n    var _a = this.props,\n        items = _a.items,\n        overflowItems = _a.overflowItems,\n        farItems = _a.farItems,\n        styles = _a.styles,\n        theme = _a.theme,\n        dataDidRender = _a.dataDidRender,\n        _b = _a.onReduceData,\n        onReduceData = _b === void 0 ? this._onReduceData : _b,\n        _c = _a.onGrowData,\n        onGrowData = _c === void 0 ? this._onGrowData : _c;\n    var commandBarData = {\n      primaryItems: __spreadArrays(items),\n      overflowItems: __spreadArrays(overflowItems),\n      minimumOverflowItems: __spreadArrays(overflowItems).length,\n      farItems: farItems,\n      cacheKey: this._computeCacheKey({\n        primaryItems: __spreadArrays(items),\n        overflow: overflowItems && overflowItems.length > 0\n      })\n    };\n    this._classNames = getClassNames(styles, {\n      theme: theme\n    }); // ResizeGroup will render these attributes to the root <div>.\n    // TODO We may need to elevate classNames from <FocusZone> into <ResizeGroup> ?\n\n    var nativeProps = getNativeProps(this.props, divProperties);\n    return React.createElement(ResizeGroup, __assign({}, nativeProps, {\n      componentRef: this._resizeGroup,\n      data: commandBarData,\n      onReduceData: onReduceData,\n      onGrowData: onGrowData,\n      onRenderData: this._onRenderData,\n      dataDidRender: dataDidRender\n    }));\n  };\n\n  CommandBarBase.prototype.focus = function () {\n    var overflowSet = this._overflowSet.current;\n    overflowSet && overflowSet.focus();\n  };\n\n  CommandBarBase.prototype.remeasure = function () {\n    this._resizeGroup.current && this._resizeGroup.current.remeasure();\n  };\n\n  CommandBarBase.prototype._onButtonClick = function (item) {\n    return function (ev) {\n      // inactive is deprecated. remove check in 7.0\n      // eslint-disable-next-line deprecation/deprecation\n      if (item.inactive) {\n        return;\n      }\n\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n  };\n\n  CommandBarBase.prototype._computeCacheKey = function (data) {\n    var primaryItems = data.primaryItems,\n        overflow = data.overflow;\n\n    var returnKey = function (acc, current) {\n      var _a = current.cacheKey,\n          cacheKey = _a === void 0 ? current.key : _a;\n      return acc + cacheKey;\n    };\n\n    var primaryKey = primaryItems && primaryItems.reduce(returnKey, '');\n    var overflowKey = overflow ? 'overflow' : '';\n    return [primaryKey, overflowKey].join('');\n  };\n\n  CommandBarBase.defaultProps = {\n    items: [],\n    overflowItems: []\n  };\n  return CommandBarBase;\n}(React.Component);\n\nexport { CommandBarBase };","map":{"version":3,"sources":["components/CommandBar/CommandBar.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  classNamesFunction,\n  css,\n  nullRender,\n  IComponentAs,\n  getNativeProps,\n  divProperties,\n  composeComponentAs,\n  initializeComponentRef,\n} from '../../Utilities';\nimport {\n  ICommandBar,\n  ICommandBarItemProps,\n  ICommandBarProps,\n  ICommandBarStyleProps,\n  ICommandBarStyles,\n} from './CommandBar.types';\nimport { IOverflowSet, OverflowSet } from '../../OverflowSet';\nimport { IResizeGroup, ResizeGroup } from '../../ResizeGroup';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { CommandBarButton, IButtonProps } from '../../Button';\nimport { TooltipHost } from '../../Tooltip';\nimport { getCommandButtonStyles } from './CommandBar.styles';\n\nconst getClassNames = classNamesFunction<ICommandBarStyleProps, ICommandBarStyles>();\n\nexport interface ICommandBarData {\n  /**\n   * Items being rendered in the primary region\n   */\n  primaryItems: ICommandBarItemProps[];\n  /**\n   * Items being rendered in the overflow\n   */\n  overflowItems: ICommandBarItemProps[];\n  /**\n   * Items being rendered on the far side\n   */\n  farItems: ICommandBarItemProps[] | undefined;\n  /**\n   * Length of original overflowItems to ensure that they are not moved into primary region on resize\n   */\n  minimumOverflowItems: number;\n  /**\n   * Unique string used to cache the width of the command bar\n   */\n  cacheKey: string;\n}\n\nexport class CommandBarBase extends React.Component<ICommandBarProps, {}> implements ICommandBar {\n  public static defaultProps: ICommandBarProps = {\n    items: [],\n    overflowItems: [],\n  };\n\n  private _overflowSet = React.createRef<IOverflowSet>();\n  private _resizeGroup = React.createRef<IResizeGroup>();\n  private _classNames: { [key in keyof ICommandBarStyles]: string };\n\n  constructor(props: ICommandBarProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      items,\n      overflowItems,\n      farItems,\n      styles,\n      theme,\n      dataDidRender,\n      onReduceData = this._onReduceData,\n      onGrowData = this._onGrowData,\n    } = this.props;\n\n    const commandBarData: ICommandBarData = {\n      primaryItems: [...items],\n      overflowItems: [...overflowItems!],\n      minimumOverflowItems: [...overflowItems!].length, // for tracking\n      farItems,\n      cacheKey: this._computeCacheKey({\n        primaryItems: [...items],\n        overflow: overflowItems && overflowItems.length > 0,\n      }),\n    };\n\n    this._classNames = getClassNames(styles!, { theme: theme! });\n\n    // ResizeGroup will render these attributes to the root <div>.\n    // TODO We may need to elevate classNames from <FocusZone> into <ResizeGroup> ?\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    return (\n      <ResizeGroup\n        {...nativeProps}\n        componentRef={this._resizeGroup}\n        data={commandBarData}\n        onReduceData={onReduceData}\n        onGrowData={onGrowData}\n        onRenderData={this._onRenderData}\n        dataDidRender={dataDidRender}\n      />\n    );\n  }\n\n  public focus(): void {\n    const { current: overflowSet } = this._overflowSet;\n\n    overflowSet && overflowSet.focus();\n  }\n\n  public remeasure(): void {\n    this._resizeGroup.current && this._resizeGroup.current.remeasure();\n  }\n\n  private _onRenderData = (data: ICommandBarData): JSX.Element => {\n    return (\n      <FocusZone\n        className={css(this._classNames.root)}\n        direction={FocusZoneDirection.horizontal}\n        role={'menubar'}\n        aria-label={this.props.ariaLabel}\n      >\n        {/*Primary Items*/}\n        <OverflowSet\n          role=\"none\"\n          componentRef={this._overflowSet}\n          className={css(this._classNames.primarySet)}\n          doNotContainWithinFocusZone={true}\n          items={data.primaryItems}\n          overflowItems={data.overflowItems.length ? data.overflowItems : undefined}\n          onRenderItem={this._onRenderItem}\n          onRenderOverflowButton={this._onRenderOverflowButton}\n        />\n\n        {/*Secondary Items*/}\n        {data.farItems && data.farItems.length > 0 && (\n          <OverflowSet\n            role=\"none\"\n            className={css(this._classNames.secondarySet)}\n            doNotContainWithinFocusZone={true}\n            items={data.farItems}\n            onRenderItem={this._onRenderItem}\n            onRenderOverflowButton={nullRender}\n          />\n        )}\n      </FocusZone>\n    );\n  };\n\n  private _onRenderItem = (item: ICommandBarItemProps): JSX.Element | React.ReactNode => {\n    if (item.onRender) {\n      // These are the top level items, there is no relevant menu dismissing function to\n      // provide for the IContextualMenuItem onRender function. Pass in a no op function instead.\n      return item.onRender(item, () => undefined);\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const itemText = item.text || item.name;\n    const commandButtonProps: ICommandBarItemProps = {\n      allowDisabledFocus: true,\n      role: 'menuitem',\n      ...item,\n      styles: getCommandButtonStyles(item.buttonStyles),\n      className: css('ms-CommandBarItem-link', item.className),\n      text: !item.iconOnly ? itemText : undefined,\n      menuProps: item.subMenuProps,\n      onClick: this._onButtonClick(item),\n    };\n\n    if (item.iconOnly && (itemText !== undefined || item.tooltipHostProps)) {\n      return (\n        <TooltipHost content={itemText} {...item.tooltipHostProps}>\n          {this._commandButton(item, commandButtonProps)}\n        </TooltipHost>\n      );\n    }\n\n    return this._commandButton(item, commandButtonProps);\n  };\n\n  private _commandButton = (item: ICommandBarItemProps, props: ICommandBarItemProps): JSX.Element => {\n    const ButtonAs = this.props.buttonAs as IComponentAs<ICommandBarItemProps> | undefined;\n    const CommandBarButtonAs = item.commandBarButtonAs as IComponentAs<ICommandBarItemProps> | undefined;\n    const DefaultButtonAs = (CommandBarButton as {}) as IComponentAs<ICommandBarItemProps>;\n\n    // The prop types between these three possible implementations overlap enough that a force-cast is safe.\n    let Type = DefaultButtonAs;\n\n    if (CommandBarButtonAs) {\n      Type = composeComponentAs(CommandBarButtonAs, Type);\n    }\n\n    if (ButtonAs) {\n      Type = composeComponentAs(ButtonAs, Type);\n    }\n\n    // Always pass the default implementation to the override so it may be composed.\n    return <Type {...(props as ICommandBarItemProps)} />;\n  };\n\n  private _onButtonClick(item: ICommandBarItemProps): (ev: React.MouseEvent<HTMLButtonElement>) => void {\n    return ev => {\n      // inactive is deprecated. remove check in 7.0\n      // eslint-disable-next-line deprecation/deprecation\n      if (item.inactive) {\n        return;\n      }\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n  }\n\n  private _onRenderOverflowButton = (overflowItems: ICommandBarItemProps[]): JSX.Element => {\n    const {\n      overflowButtonProps = {}, // assure that props is not empty\n    } = this.props;\n\n    const combinedOverflowItems: ICommandBarItemProps[] = [\n      ...(overflowButtonProps.menuProps ? overflowButtonProps.menuProps.items : []),\n      ...overflowItems,\n    ];\n\n    const overflowProps: IButtonProps = {\n      role: 'menuitem',\n      ...overflowButtonProps,\n      styles: { menuIcon: { fontSize: '17px' }, ...overflowButtonProps.styles },\n      className: css('ms-CommandBar-overflowButton', overflowButtonProps.className),\n      menuProps: { ...overflowButtonProps.menuProps, items: combinedOverflowItems },\n      menuIconProps: { iconName: 'More', ...overflowButtonProps.menuIconProps },\n    };\n\n    const OverflowButtonType = this.props.overflowButtonAs\n      ? composeComponentAs(this.props.overflowButtonAs, CommandBarButton)\n      : CommandBarButton;\n\n    return <OverflowButtonType {...(overflowProps as IButtonProps)} />;\n  };\n\n  private _computeCacheKey(data: { primaryItems?: ICommandBarItemProps[]; overflow?: boolean }): string {\n    const { primaryItems, overflow } = data;\n    const returnKey = (acc: string, current: ICommandBarItemProps): string => {\n      const { cacheKey = current.key } = current;\n      return acc + cacheKey;\n    };\n\n    const primaryKey = primaryItems && primaryItems.reduce(returnKey, '');\n    const overflowKey = overflow ? 'overflow' : '';\n\n    return [primaryKey, overflowKey].join('');\n  }\n\n  private _onReduceData = (data: ICommandBarData): ICommandBarData | undefined => {\n    const { shiftOnReduce, onDataReduced } = this.props;\n    let { primaryItems, overflowItems, cacheKey } = data;\n\n    // Use first item if shiftOnReduce, otherwise use last item\n    const movedItem = primaryItems[shiftOnReduce ? 0 : primaryItems.length - 1];\n\n    if (movedItem !== undefined) {\n      movedItem.renderedInOverflow = true;\n\n      overflowItems = [movedItem, ...overflowItems];\n      primaryItems = shiftOnReduce ? primaryItems.slice(1) : primaryItems.slice(0, -1);\n\n      const newData = { ...data, primaryItems, overflowItems };\n      cacheKey = this._computeCacheKey({ primaryItems, overflow: overflowItems.length > 0 });\n\n      if (onDataReduced) {\n        onDataReduced(movedItem);\n      }\n\n      newData.cacheKey = cacheKey;\n      return newData;\n    }\n\n    return undefined;\n  };\n\n  private _onGrowData = (data: ICommandBarData): ICommandBarData | undefined => {\n    const { shiftOnReduce, onDataGrown } = this.props;\n    const { minimumOverflowItems } = data;\n    let { primaryItems, overflowItems, cacheKey } = data;\n    const movedItem = overflowItems[0];\n\n    // Make sure that moved item exists and is not one of the original overflow items\n    if (movedItem !== undefined && overflowItems.length > minimumOverflowItems) {\n      movedItem.renderedInOverflow = false;\n\n      overflowItems = overflowItems.slice(1);\n      // if shiftOnReduce, movedItem goes first, otherwise, last.\n      primaryItems = shiftOnReduce ? [movedItem, ...primaryItems] : [...primaryItems, movedItem];\n\n      const newData = { ...data, primaryItems, overflowItems };\n      cacheKey = this._computeCacheKey({ primaryItems, overflow: overflowItems.length > 0 });\n\n      if (onDataGrown) {\n        onDataGrown(movedItem);\n      }\n\n      newData.cacheKey = cacheKey;\n      return newData;\n    }\n\n    return undefined;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}