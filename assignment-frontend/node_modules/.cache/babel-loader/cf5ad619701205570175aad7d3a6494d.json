{"ast":null,"code":"import { IsFocusVisibleClassName } from '../../Utilities';\nimport { HighContrastSelector, getFocusStyle } from '../../Styling'; // Size breakpoint when the default border width changes from 2px to 4px.\n\nvar CELL_BORDER_BREAKPOINT = 24;\nvar LARGE_BORDER = 4;\nvar SMALL_BORDER = 2;\nvar DIVIDING_PADDING = 2;\nvar DEFAULT_CELL_SIZE = 20;\nvar cellHighContrastFocus = {\n  left: -2,\n  top: -2,\n  bottom: -2,\n  right: -2,\n  border: 'none',\n  outlineColor: 'ButtonText'\n};\nexport var getStyles = function (props) {\n  var _a, _b, _c, _d, _e;\n\n  var theme = props.theme,\n      disabled = props.disabled,\n      selected = props.selected,\n      circle = props.circle,\n      isWhite = props.isWhite,\n      _f = props.height,\n      height = _f === void 0 ? DEFAULT_CELL_SIZE : _f,\n      _g = props.width,\n      width = _g === void 0 ? DEFAULT_CELL_SIZE : _g,\n      borderWidth = props.borderWidth;\n  var semanticColors = theme.semanticColors,\n      palette = theme.palette;\n  var buttonBorderHovered = palette.neutralLighter;\n  var buttonBorderChecked = palette.neutralLight;\n  var buttonBorderCheckedHovered = palette.neutralSecondary;\n  var buttonBorderIsWhite = palette.neutralTertiary; // If user provided a value, use it. If not, then we decide depending on the 24px size breakpoint.\n\n  var calculatedBorderWidth = borderWidth ? borderWidth : width < CELL_BORDER_BREAKPOINT ? SMALL_BORDER : LARGE_BORDER;\n  return {\n    // this is a button that wraps the color\n    colorCell: [getFocusStyle(theme, {\n      inset: -1,\n      position: 'relative',\n      highContrastStyle: cellHighContrastFocus\n    }), {\n      backgroundColor: semanticColors.bodyBackground,\n      padding: 0,\n      position: 'relative',\n      boxSizing: 'border-box',\n      display: 'inline-block',\n      cursor: 'pointer',\n      userSelect: 'none',\n      borderRadius: 0,\n      border: 'none',\n      height: height,\n      width: width\n    }, !circle && {\n      selectors: (_a = {}, _a[\".\" + IsFocusVisibleClassName + \" &:focus::after\"] = {\n        // -1px so that we don't increase visually the size of the cell.\n        outlineOffset: calculatedBorderWidth - 1 + \"px\"\n      }, _a)\n    }, // In focus state for circle we want a round border which is not possible with outline.\n    circle && {\n      borderRadius: '50%',\n      selectors: (_b = {}, _b[\".\" + IsFocusVisibleClassName + \" &:focus::after\"] = {\n        outline: 'none',\n        borderColor: semanticColors.focusBorder,\n        borderRadius: '50%',\n        left: -calculatedBorderWidth,\n        right: -calculatedBorderWidth,\n        top: -calculatedBorderWidth,\n        bottom: -calculatedBorderWidth,\n        selectors: (_c = {}, _c[HighContrastSelector] = {\n          outline: \"1px solid ButtonText\"\n        }, _c)\n      }, _b)\n    }, selected && {\n      padding: DIVIDING_PADDING,\n      border: calculatedBorderWidth + \"px solid \" + buttonBorderChecked,\n      selectors: (_d = {}, _d['&:hover::before'] = {\n        content: '\"\"',\n        height: height,\n        width: width,\n        position: 'absolute',\n        top: -calculatedBorderWidth,\n        left: -calculatedBorderWidth,\n        borderRadius: circle ? '50%' : 'default',\n        boxShadow: \"inset 0 0 0 1px \" + buttonBorderCheckedHovered\n      }, _d)\n    }, !selected && {\n      selectors: (_e = {}, _e['&:hover, &:active, &:focus'] = {\n        backgroundColor: semanticColors.bodyBackground,\n        padding: DIVIDING_PADDING,\n        border: calculatedBorderWidth + \"px solid \" + buttonBorderHovered\n      }, _e['&:focus'] = {\n        borderColor: semanticColors.bodyBackground,\n        padding: 0,\n        selectors: {\n          ':hover': {\n            borderColor: theme.palette.neutralLight,\n            padding: DIVIDING_PADDING\n          }\n        }\n      }, _e)\n    }, disabled && {\n      color: semanticColors.disabledBodyText,\n      pointerEvents: 'none',\n      opacity: 0.3\n    }, isWhite && !selected && {\n      // fake a border for white\n      backgroundColor: buttonBorderIsWhite,\n      padding: 1\n    }],\n    // the <svg> that holds the color\n    svg: [{\n      width: '100%',\n      height: '100%'\n    }, circle && {\n      borderRadius: '50%'\n    }]\n  };\n};","map":{"version":3,"sources":["components/SwatchColorPicker/ColorPickerGridCell.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { IsFocusVisibleClassName } from '../../Utilities';\nimport { HighContrastSelector, getFocusStyle } from '../../Styling';\nimport { IColorPickerGridCellStyleProps, IColorPickerGridCellStyles } from './ColorPickerGridCell.types';\n\n// Size breakpoint when the default border width changes from 2px to 4px.\nconst CELL_BORDER_BREAKPOINT = 24;\nconst LARGE_BORDER = 4;\nconst SMALL_BORDER = 2;\nconst DIVIDING_PADDING = 2;\nconst DEFAULT_CELL_SIZE = 20;\n\nconst cellHighContrastFocus = {\n  left: -2,\n  top: -2,\n  bottom: -2,\n  right: -2,\n  border: 'none',\n  outlineColor: 'ButtonText',\n};\n\nexport const getStyles = (props: IColorPickerGridCellStyleProps): IColorPickerGridCellStyles => {\n  const {\n    theme,\n    disabled,\n    selected,\n    circle,\n    isWhite,\n    height = DEFAULT_CELL_SIZE,\n    width = DEFAULT_CELL_SIZE,\n    borderWidth,\n  } = props;\n  const { semanticColors, palette } = theme;\n\n  const buttonBorderHovered = palette.neutralLighter;\n  const buttonBorderChecked = palette.neutralLight;\n  const buttonBorderCheckedHovered = palette.neutralSecondary;\n  const buttonBorderIsWhite = palette.neutralTertiary;\n\n  // If user provided a value, use it. If not, then we decide depending on the 24px size breakpoint.\n  const calculatedBorderWidth = borderWidth\n    ? borderWidth\n    : width < CELL_BORDER_BREAKPOINT\n    ? SMALL_BORDER\n    : LARGE_BORDER;\n\n  return {\n    // this is a button that wraps the color\n    colorCell: [\n      getFocusStyle(theme, { inset: -1, position: 'relative', highContrastStyle: cellHighContrastFocus }),\n      {\n        backgroundColor: semanticColors.bodyBackground,\n        padding: 0,\n        position: 'relative',\n        boxSizing: 'border-box',\n        display: 'inline-block',\n        cursor: 'pointer',\n        userSelect: 'none',\n        borderRadius: 0,\n        border: 'none',\n        height: height,\n        width: width,\n      },\n      !circle && {\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus::after`]: {\n            // -1px so that we don't increase visually the size of the cell.\n            outlineOffset: `${calculatedBorderWidth - 1}px`,\n          },\n        },\n      },\n      // In focus state for circle we want a round border which is not possible with outline.\n      circle && {\n        borderRadius: '50%',\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus::after`]: {\n            outline: 'none',\n            borderColor: semanticColors.focusBorder,\n            borderRadius: '50%',\n            left: -calculatedBorderWidth,\n            right: -calculatedBorderWidth,\n            top: -calculatedBorderWidth,\n            bottom: -calculatedBorderWidth,\n            selectors: {\n              [HighContrastSelector]: {\n                outline: `1px solid ButtonText`,\n              },\n            },\n          },\n        },\n      },\n      selected && {\n        padding: DIVIDING_PADDING,\n        border: `${calculatedBorderWidth}px solid ${buttonBorderChecked}`,\n        selectors: {\n          ['&:hover::before']: {\n            content: '\"\"',\n            height: height,\n            width: width,\n            position: 'absolute',\n            top: -calculatedBorderWidth,\n            left: -calculatedBorderWidth,\n            borderRadius: circle ? '50%' : 'default',\n            boxShadow: `inset 0 0 0 1px ${buttonBorderCheckedHovered}`,\n          },\n        },\n      },\n      !selected && {\n        selectors: {\n          ['&:hover, &:active, &:focus']: {\n            backgroundColor: semanticColors.bodyBackground, // overwrite white's override\n            padding: DIVIDING_PADDING,\n            border: `${calculatedBorderWidth}px solid ${buttonBorderHovered}`,\n          },\n          ['&:focus']: {\n            borderColor: semanticColors.bodyBackground,\n            padding: 0,\n            selectors: {\n              ':hover': {\n                borderColor: theme.palette.neutralLight,\n                padding: DIVIDING_PADDING,\n              },\n            },\n          },\n        },\n      },\n      disabled && {\n        color: semanticColors.disabledBodyText,\n        pointerEvents: 'none',\n        opacity: 0.3,\n      },\n      isWhite &&\n        !selected && {\n          // fake a border for white\n          backgroundColor: buttonBorderIsWhite,\n          padding: 1,\n        },\n    ],\n    // the <svg> that holds the color\n    svg: [\n      {\n        width: '100%',\n        height: '100%',\n      },\n      circle && {\n        borderRadius: '50%',\n      },\n    ],\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}