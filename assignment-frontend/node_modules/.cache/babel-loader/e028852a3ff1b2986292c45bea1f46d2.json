{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, KeyCodes, getNativeProps, divProperties, warnDeprecations, initializeComponentRef } from '../../Utilities';\nimport { DocumentCardType } from './DocumentCard.types';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'DocumentCard';\n/**\n * {@docCategory DocumentCard}\n */\n\nvar DocumentCardBase =\n/** @class */\nfunction (_super) {\n  __extends(DocumentCardBase, _super);\n\n  function DocumentCardBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._rootElement = React.createRef();\n\n    _this._onClick = function (ev) {\n      _this._onAction(ev);\n    };\n\n    _this._onKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n        _this._onAction(ev);\n      }\n    };\n\n    _this._onAction = function (ev) {\n      var _a = _this.props,\n          onClick = _a.onClick,\n          onClickHref = _a.onClickHref,\n          onClickTarget = _a.onClickTarget;\n\n      if (onClick) {\n        onClick(ev);\n      } else if (!onClick && onClickHref) {\n        // If no onClick Function was provided and we do have an onClickHref, redirect to the onClickHref\n        if (onClickTarget) {\n          window.open(onClickHref, onClickTarget, 'noreferrer noopener nofollow');\n        } else {\n          window.location.href = onClickHref;\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    };\n\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      accentColor: undefined\n    });\n    return _this;\n  }\n\n  DocumentCardBase.prototype.render = function () {\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n        onClick = _a.onClick,\n        onClickHref = _a.onClickHref,\n        children = _a.children,\n        type = _a.type,\n        accentColor = _a.accentColor,\n        styles = _a.styles,\n        theme = _a.theme,\n        className = _a.className;\n    var nativeProps = getNativeProps(this.props, divProperties, ['className', 'onClick', 'type', 'role']);\n    var actionable = onClick || onClickHref ? true : false;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      actionable: actionable,\n      compact: type === DocumentCardType.compact ? true : false\n    }); // Override the border color if an accent color was provided (compact card only)\n\n    var style;\n\n    if (type === DocumentCardType.compact && accentColor) {\n      style = {\n        borderBottomColor: accentColor\n      };\n    } // if this element is actionable it should have an aria role\n\n\n    var role = this.props.role || (actionable ? onClick ? 'button' : 'link' : undefined);\n    var tabIndex = actionable ? 0 : undefined;\n    return React.createElement(\"div\", __assign({\n      ref: this._rootElement,\n      tabIndex: tabIndex,\n      \"data-is-focusable\": actionable,\n      role: role,\n      className: this._classNames.root,\n      onKeyDown: actionable ? this._onKeyDown : undefined,\n      onClick: actionable ? this._onClick : undefined,\n      style: style\n    }, nativeProps), children);\n  };\n\n  DocumentCardBase.prototype.focus = function () {\n    if (this._rootElement.current) {\n      this._rootElement.current.focus();\n    }\n  };\n\n  DocumentCardBase.defaultProps = {\n    type: DocumentCardType.normal\n  };\n  return DocumentCardBase;\n}(React.Component);\n\nexport { DocumentCardBase };","map":{"version":3,"sources":["components/DocumentCard/DocumentCard.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport {\n  classNamesFunction,\n  KeyCodes,\n  getNativeProps,\n  divProperties,\n  warnDeprecations,\n  initializeComponentRef,\n} from '../../Utilities';\nimport {\n  DocumentCardType,\n  IDocumentCard,\n  IDocumentCardProps,\n  IDocumentCardStyleProps,\n  IDocumentCardStyles,\n} from './DocumentCard.types';\n\nconst getClassNames = classNamesFunction<IDocumentCardStyleProps, IDocumentCardStyles>();\n\nconst COMPONENT_NAME = 'DocumentCard';\n\n/**\n * {@docCategory DocumentCard}\n */\nexport class DocumentCardBase extends React.Component<IDocumentCardProps, any> implements IDocumentCard {\n  public static defaultProps: IDocumentCardProps = {\n    type: DocumentCardType.normal,\n  };\n\n  private _rootElement = React.createRef<HTMLDivElement>();\n  private _classNames: IProcessedStyleSet<IDocumentCardStyles>;\n\n  constructor(props: IDocumentCardProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      accentColor: undefined,\n    });\n  }\n\n  public render(): JSX.Element {\n    // eslint-disable-next-line deprecation/deprecation\n    const { onClick, onClickHref, children, type, accentColor, styles, theme, className } = this.props;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, [\n      'className',\n      'onClick',\n      'type',\n      'role',\n    ]);\n    const actionable = onClick || onClickHref ? true : false;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      actionable,\n      compact: type === DocumentCardType.compact ? true : false,\n    });\n\n    // Override the border color if an accent color was provided (compact card only)\n    let style;\n    if (type === DocumentCardType.compact && accentColor) {\n      style = {\n        borderBottomColor: accentColor,\n      };\n    }\n\n    // if this element is actionable it should have an aria role\n    const role = this.props.role || (actionable ? (onClick ? 'button' : 'link') : undefined);\n    const tabIndex = actionable ? 0 : undefined;\n\n    return (\n      <div\n        ref={this._rootElement}\n        tabIndex={tabIndex}\n        data-is-focusable={actionable}\n        role={role}\n        className={this._classNames.root}\n        onKeyDown={actionable ? this._onKeyDown : undefined}\n        onClick={actionable ? this._onClick : undefined}\n        style={style}\n        {...nativeProps}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  public focus(): void {\n    if (this._rootElement.current) {\n      this._rootElement.current.focus();\n    }\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._onAction(ev);\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n      this._onAction(ev);\n    }\n  };\n\n  private _onAction = (ev: React.SyntheticEvent<HTMLElement>): void => {\n    const { onClick, onClickHref, onClickTarget } = this.props;\n\n    if (onClick) {\n      onClick(ev);\n    } else if (!onClick && onClickHref) {\n      // If no onClick Function was provided and we do have an onClickHref, redirect to the onClickHref\n      if (onClickTarget) {\n        window.open(onClickHref, onClickTarget, 'noreferrer noopener nofollow');\n      } else {\n        window.location.href = onClickHref;\n      }\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}