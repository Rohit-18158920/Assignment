{"ast":null,"code":"import { getVirtualParent } from './getVirtualParent';\n/**\n * Gets the element which is the parent of a given element.\n * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over\n * real DOM parent when present.\n *\n * @public\n */\n\nexport function getParent(child, allowVirtualParents) {\n  if (allowVirtualParents === void 0) {\n    allowVirtualParents = true;\n  }\n\n  return child && (allowVirtualParents && getVirtualParent(child) || child.parentNode && child.parentNode);\n}","map":{"version":3,"sources":["getParent.ts"],"names":[],"mappings":"AAAA,SAAS,gBAAT,QAAiC,oBAAjC;AACA;;;;;;AAMG;;AACH,OAAM,SAAU,SAAV,CAAoB,KAApB,EAAwC,mBAAxC,EAA2E;AAAnC,MAAA,mBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,mBAAA,GAAA,IAAA;AAAmC;;AAC/E,SACE,KAAK,KACH,mBAAmB,IAAI,gBAAgB,CAAC,KAAD,CAAxC,IAAqD,KAAK,CAAC,UAAN,IAAqB,KAAK,CAAC,UAD5E,CADP;AAID","sourcesContent":["import { getVirtualParent } from './getVirtualParent';\n/**\n * Gets the element which is the parent of a given element.\n * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over\n * real DOM parent when present.\n *\n * @public\n */\nexport function getParent(child: HTMLElement, allowVirtualParents: boolean = true): HTMLElement | null {\n  return (\n    child &&\n    ((allowVirtualParents && getVirtualParent(child)) || (child.parentNode && (child.parentNode as HTMLElement)))\n  );\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}