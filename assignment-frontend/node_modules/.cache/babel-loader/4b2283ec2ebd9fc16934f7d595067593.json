{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { mergeStyles } from '@uifabric/merge-styles';\nimport { getTheme } from '@uifabric/styling';\nimport { KeyCodes, css, elementContains, getDocument, getElementIndexPath, getFocusableByIndexPath, getId, getNativeProps, getNextElement, getParent, getPreviousElement, getRTL, htmlElementProperties, initializeComponentRef, isElementFocusSubZone, isElementFocusZone, isElementTabbable, raiseClick, shouldWrapFocus, warnDeprecations, portalContainsElement, getWindow, findScrollableParent, createMergedRef } from '@uifabric/utilities';\nimport { FocusZoneDirection, FocusZoneTabbableElements } from './FocusZone.types';\nvar IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';\nvar IS_ENTER_DISABLED_ATTRIBUTE = 'data-disable-click-on-enter';\nvar FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';\nvar TABINDEX = 'tabindex';\nvar NO_VERTICAL_WRAP = 'data-no-vertical-wrap';\nvar NO_HORIZONTAL_WRAP = 'data-no-horizontal-wrap';\nvar LARGE_DISTANCE_FROM_CENTER = 999999999;\nvar LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;\nvar focusZoneStyles;\nvar focusZoneClass = 'ms-FocusZone'; // Helper function that will return a class for when the root is focused\n\nfunction getRootClass() {\n  if (!focusZoneStyles) {\n    focusZoneStyles = mergeStyles({\n      selectors: {\n        ':focus': {\n          outline: 'none'\n        }\n      }\n    }, focusZoneClass);\n  }\n\n  return focusZoneStyles;\n}\n\nvar _allInstances = {};\n\nvar _outerZones = new Set();\n\nvar ALLOWED_INPUT_TYPES = ['text', 'number', 'password', 'email', 'tel', 'url', 'search'];\nvar ALLOW_VIRTUAL_ELEMENTS = false;\n\nvar FocusZone =\n/** @class */\nfunction (_super) {\n  __extends(FocusZone, _super);\n\n  function FocusZone(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._mergedRef = createMergedRef();\n\n    _this._onFocus = function (ev) {\n      if (_this._portalContainsElement(ev.target)) {\n        // If the event target is inside a portal do not process the event.\n        return;\n      }\n\n      var _a = _this.props,\n          onActiveElementChanged = _a.onActiveElementChanged,\n          // eslint-disable-next-line deprecation/deprecation\n      doNotAllowFocusEventToPropagate = _a.doNotAllowFocusEventToPropagate,\n          stopFocusPropagation = _a.stopFocusPropagation,\n          // eslint-disable-next-line deprecation/deprecation\n      onFocusNotification = _a.onFocusNotification,\n          onFocus = _a.onFocus,\n          shouldFocusInnerElementWhenReceivedFocus = _a.shouldFocusInnerElementWhenReceivedFocus,\n          defaultTabbableElement = _a.defaultTabbableElement;\n\n      var isImmediateDescendant = _this._isImmediateDescendantOfZone(ev.target);\n\n      var newActiveElement;\n\n      if (isImmediateDescendant) {\n        newActiveElement = ev.target;\n      } else {\n        var parentElement = ev.target;\n\n        while (parentElement && parentElement !== _this._root.current) {\n          if (isElementTabbable(parentElement) && _this._isImmediateDescendantOfZone(parentElement)) {\n            newActiveElement = parentElement;\n            break;\n          }\n\n          parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n        }\n      } // If an inner focusable element should be focused when FocusZone container receives focus\n\n\n      if (shouldFocusInnerElementWhenReceivedFocus && ev.target === _this._root.current) {\n        var maybeElementToFocus = defaultTabbableElement && typeof defaultTabbableElement === 'function' && defaultTabbableElement(_this._root.current); // try to focus defaultTabbable element\n\n        if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {\n          newActiveElement = maybeElementToFocus;\n          maybeElementToFocus.focus();\n        } else {\n          // force focus on first focusable element\n          _this.focus(true);\n\n          if (_this._activeElement) {\n            // set to null as new active element was handled in method above\n            newActiveElement = null;\n          }\n        }\n      }\n\n      var initialElementFocused = !_this._activeElement; // If the new active element is a child of this zone and received focus,\n      // update alignment an immediate descendant\n\n      if (newActiveElement && newActiveElement !== _this._activeElement) {\n        if (isImmediateDescendant || initialElementFocused) {\n          _this._setFocusAlignment(newActiveElement, true, true);\n        }\n\n        _this._activeElement = newActiveElement;\n\n        if (initialElementFocused) {\n          _this._updateTabIndexes();\n        }\n      }\n\n      if (onActiveElementChanged) {\n        onActiveElementChanged(_this._activeElement, ev);\n      }\n\n      if (stopFocusPropagation || doNotAllowFocusEventToPropagate) {\n        ev.stopPropagation();\n      }\n\n      if (onFocus) {\n        onFocus(ev);\n      } else if (onFocusNotification) {\n        onFocusNotification();\n      }\n    };\n\n    _this._onBlur = function () {\n      _this._setParkedFocus(false);\n    };\n\n    _this._onMouseDown = function (ev) {\n      if (_this._portalContainsElement(ev.target)) {\n        // If the event target is inside a portal do not process the event.\n        return;\n      }\n\n      var disabled = _this.props.disabled;\n\n      if (disabled) {\n        return;\n      }\n\n      var target = ev.target;\n      var path = [];\n\n      while (target && target !== _this._root.current) {\n        path.push(target);\n        target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);\n      }\n\n      while (path.length) {\n        target = path.pop();\n\n        if (target && isElementTabbable(target)) {\n          _this._setActiveElement(target, true);\n        }\n\n        if (isElementFocusZone(target)) {\n          // Stop here since the focus zone will take care of its own children.\n          break;\n        }\n      }\n    };\n    /**\n     * Handle the keystrokes.\n     */\n\n\n    _this._onKeyDown = function (ev, theme) {\n      if (_this._portalContainsElement(ev.target)) {\n        // If the event target is inside a portal do not process the event.\n        return;\n      } // eslint-disable-next-line deprecation/deprecation\n\n\n      var _a = _this.props,\n          direction = _a.direction,\n          disabled = _a.disabled,\n          isInnerZoneKeystroke = _a.isInnerZoneKeystroke,\n          pagingSupportDisabled = _a.pagingSupportDisabled,\n          shouldEnterInnerZone = _a.shouldEnterInnerZone;\n\n      if (disabled) {\n        return;\n      }\n\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(ev);\n      } // If the default has been prevented, do not process keyboard events.\n\n\n      if (ev.isDefaultPrevented()) {\n        return;\n      }\n\n      if (_this._getDocument().activeElement === _this._root.current && _this._isInnerZone) {\n        // If this element has focus, it is being controlled by a parent.\n        // Ignore the keystroke.\n        return;\n      }\n\n      if ((shouldEnterInnerZone && shouldEnterInnerZone(ev) || isInnerZoneKeystroke && isInnerZoneKeystroke(ev)) && _this._isImmediateDescendantOfZone(ev.target)) {\n        // Try to focus\n        var innerZone = _this._getFirstInnerZone();\n\n        if (innerZone) {\n          if (!innerZone.focus(true)) {\n            return;\n          }\n        } else if (isElementFocusSubZone(ev.target)) {\n          if (!_this.focusElement(getNextElement(ev.target, ev.target.firstChild, true))) {\n            return;\n          }\n        } else {\n          return;\n        }\n      } else if (ev.altKey) {\n        return;\n      } else {\n        // eslint-disable-next-line @fluentui/deprecated-keyboard-event-props\n        switch (ev.which) {\n          case KeyCodes.space:\n            if (_this._tryInvokeClickForFocusable(ev.target)) {\n              break;\n            }\n\n            return;\n\n          case KeyCodes.left:\n            if (direction !== FocusZoneDirection.vertical) {\n              _this._preventDefaultWhenHandled(ev);\n\n              if (_this._moveFocusLeft(theme)) {\n                break;\n              }\n            }\n\n            return;\n\n          case KeyCodes.right:\n            if (direction !== FocusZoneDirection.vertical) {\n              _this._preventDefaultWhenHandled(ev);\n\n              if (_this._moveFocusRight(theme)) {\n                break;\n              }\n            }\n\n            return;\n\n          case KeyCodes.up:\n            if (direction !== FocusZoneDirection.horizontal) {\n              _this._preventDefaultWhenHandled(ev);\n\n              if (_this._moveFocusUp()) {\n                break;\n              }\n            }\n\n            return;\n\n          case KeyCodes.down:\n            if (direction !== FocusZoneDirection.horizontal) {\n              _this._preventDefaultWhenHandled(ev);\n\n              if (_this._moveFocusDown()) {\n                break;\n              }\n            }\n\n            return;\n\n          case KeyCodes.pageDown:\n            if (!pagingSupportDisabled && _this._moveFocusPaging(true)) {\n              break;\n            }\n\n            return;\n\n          case KeyCodes.pageUp:\n            if (!pagingSupportDisabled && _this._moveFocusPaging(false)) {\n              break;\n            }\n\n            return;\n\n          case KeyCodes.tab:\n            if ( // eslint-disable-next-line deprecation/deprecation\n            _this.props.allowTabKey || _this.props.handleTabKey === FocusZoneTabbableElements.all || _this.props.handleTabKey === FocusZoneTabbableElements.inputOnly && _this._isElementInput(ev.target)) {\n              var focusChanged = false;\n              _this._processingTabKey = true;\n\n              if (direction === FocusZoneDirection.vertical || !_this._shouldWrapFocus(_this._activeElement, NO_HORIZONTAL_WRAP)) {\n                focusChanged = ev.shiftKey ? _this._moveFocusUp() : _this._moveFocusDown();\n              } else {\n                var tabWithDirection = getRTL(theme) ? !ev.shiftKey : ev.shiftKey;\n                focusChanged = tabWithDirection ? _this._moveFocusLeft(theme) : _this._moveFocusRight(theme);\n              }\n\n              _this._processingTabKey = false;\n\n              if (focusChanged) {\n                break;\n              } else if (_this.props.shouldResetActiveElementWhenTabFromZone) {\n                _this._activeElement = null;\n              }\n            }\n\n            return;\n\n          case KeyCodes.home:\n            if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, false)) {\n              return false;\n            }\n\n            var firstChild = _this._root.current && _this._root.current.firstChild;\n\n            if (_this._root.current && firstChild && _this.focusElement(getNextElement(_this._root.current, firstChild, true))) {\n              break;\n            }\n\n            return;\n\n          case KeyCodes.end:\n            if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, true)) {\n              return false;\n            }\n\n            var lastChild = _this._root.current && _this._root.current.lastChild;\n\n            if (_this._root.current && _this.focusElement(getPreviousElement(_this._root.current, lastChild, true, true, true))) {\n              break;\n            }\n\n            return;\n\n          case KeyCodes.enter:\n            if (_this._tryInvokeClickForFocusable(ev.target)) {\n              break;\n            }\n\n            return;\n\n          default:\n            return;\n        }\n      }\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    _this._getHorizontalDistanceFromCenter = function (isForward, activeRect, targetRect) {\n      // eslint-disable-next-line deprecation/deprecation\n      var leftAlignment = _this._focusAlignment.left || _this._focusAlignment.x || 0; // ClientRect values can be floats that differ by very small fractions of a decimal.\n      // If the difference between top and bottom are within a pixel then we should treat\n      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n      // but without Math.Floor they will be handled incorrectly.\n\n      var targetRectTop = Math.floor(targetRect.top);\n      var activeRectBottom = Math.floor(activeRect.bottom);\n      var targetRectBottom = Math.floor(targetRect.bottom);\n      var activeRectTop = Math.floor(activeRect.top);\n      var isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;\n      var isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;\n\n      if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {\n        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n          return 0;\n        }\n\n        return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n      }\n\n      if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n        return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n      }\n\n      return LARGE_DISTANCE_FROM_CENTER;\n    }; // Manage componentRef resolution.\n\n\n    initializeComponentRef(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('FocusZone', props, {\n        rootProps: undefined,\n        allowTabKey: 'handleTabKey',\n        elementType: 'as',\n        ariaDescribedBy: 'aria-describedby',\n        ariaLabelledBy: 'aria-labelledby'\n      });\n    }\n\n    _this._id = getId('FocusZone');\n    _this._focusAlignment = {\n      left: 0,\n      top: 0\n    };\n    _this._processingTabKey = false;\n    return _this;\n  }\n  /** Used for testing purposes only. */\n\n\n  FocusZone.getOuterZones = function () {\n    return _outerZones.size;\n  };\n  /**\n   * Handle global tab presses so that we can patch tabindexes on the fly.\n   * HEADS UP: This must not be an arrow function in order to be referentially equal among instances\n   * for ref counting to work correctly!\n   */\n\n\n  FocusZone._onKeyDownCapture = function (ev) {\n    // eslint-disable-next-line deprecation/deprecation, @fluentui/deprecated-keyboard-event-props\n    if (ev.which === KeyCodes.tab) {\n      _outerZones.forEach(function (zone) {\n        return zone._updateTabIndexes();\n      });\n    }\n  };\n\n  FocusZone.prototype.componentDidMount = function () {\n    var root = this._root.current;\n    _allInstances[this._id] = this;\n\n    if (root) {\n      this._windowElement = getWindow(root);\n      var parentElement = getParent(root, ALLOW_VIRTUAL_ELEMENTS);\n\n      while (parentElement && parentElement !== this._getDocument().body && parentElement.nodeType === 1) {\n        if (isElementFocusZone(parentElement)) {\n          this._isInnerZone = true;\n          break;\n        }\n\n        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n      }\n\n      if (!this._isInnerZone) {\n        _outerZones.add(this);\n\n        if (this._windowElement && _outerZones.size === 1) {\n          this._windowElement.addEventListener('keydown', FocusZone._onKeyDownCapture, true);\n        }\n      }\n\n      this._root.current && this._root.current.addEventListener('blur', this._onBlur, true); // Assign initial tab indexes so that we can set initial focus as appropriate.\n\n      this._updateTabIndexes();\n\n      if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'string') {\n        this._activeElement = this._getDocument().querySelector(this.props.defaultTabbableElement); // eslint-disable-next-line deprecation/deprecation\n      } else if (this.props.defaultActiveElement) {\n        // eslint-disable-next-line deprecation/deprecation\n        this._activeElement = this._getDocument().querySelector(this.props.defaultActiveElement);\n      }\n\n      if (this.props.shouldFocusOnMount) {\n        this.focus();\n      }\n    }\n  };\n\n  FocusZone.prototype.componentDidUpdate = function () {\n    var root = this._root.current;\n\n    var doc = this._getDocument();\n\n    if (doc && this._lastIndexPath && (doc.activeElement === doc.body || doc.activeElement === null || !this.props.preventFocusRestoration && doc.activeElement === root)) {\n      // The element has been removed after the render, attempt to restore focus.\n      var elementToFocus = getFocusableByIndexPath(root, this._lastIndexPath);\n\n      if (elementToFocus) {\n        this._setActiveElement(elementToFocus, true);\n\n        elementToFocus.focus();\n\n        this._setParkedFocus(false);\n      } else {\n        // We had a focus path to restore, but now that path is unresolvable. Park focus\n        // on the container until we can try again.\n        this._setParkedFocus(true);\n      }\n    }\n  };\n\n  FocusZone.prototype.componentWillUnmount = function () {\n    delete _allInstances[this._id];\n\n    if (!this._isInnerZone) {\n      _outerZones.delete(this); // If this is the last outer zone, remove the keydown listener.\n\n\n      if (this._windowElement && _outerZones.size === 0) {\n        this._windowElement.removeEventListener('keydown', FocusZone._onKeyDownCapture, true);\n      }\n    }\n\n    if (this._root.current) {\n      this._root.current.removeEventListener('blur', this._onBlur, true);\n    }\n\n    this._activeElement = null;\n    this._defaultFocusElement = null;\n  };\n\n  FocusZone.prototype.render = function () {\n    var _this = this; // eslint-disable-next-line deprecation/deprecation\n\n\n    var _a = this.props,\n        tag = _a.as,\n        elementType = _a.elementType,\n        rootProps = _a.rootProps,\n        ariaDescribedBy = _a.ariaDescribedBy,\n        ariaLabelledBy = _a.ariaLabelledBy,\n        className = _a.className;\n    var divProps = getNativeProps(this.props, htmlElementProperties);\n    var Tag = tag || elementType || 'div'; // Note, right before rendering/reconciling proceeds, we need to record if focus\n    // was in the zone before the update. This helper will track this and, if focus\n    // was actually in the zone, what the index path to the element is at this time.\n    // Then, later in componentDidUpdate, we can evaluate if we need to restore it in\n    // the case the element was removed.\n\n    this._evaluateFocusBeforeRender(); // Only support RTL defined in global theme, not contextual theme/RTL.\n\n\n    var theme = getTheme();\n    return React.createElement(Tag, __assign({\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": ariaDescribedBy\n    }, divProps, rootProps, {\n      // Once the getClassName correctly memoizes inputs this should\n      // be replaced so that className is passed to getRootClass and is included there so\n      // the class names will always be in the same order.\n      className: css(getRootClass(), className),\n      // eslint-disable-next-line deprecation/deprecation\n      ref: this._mergedRef(this.props.elementRef, this._root),\n      \"data-focuszone-id\": this._id,\n      // eslint-disable-next-line react/jsx-no-bind\n      onKeyDown: function (ev) {\n        return _this._onKeyDown(ev, theme);\n      },\n      onFocus: this._onFocus,\n      onMouseDownCapture: this._onMouseDown\n    }), this.props.children);\n  };\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n   * if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n\n\n  FocusZone.prototype.focus = function (forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    if (this._root.current) {\n      if (!forceIntoFirstElement && this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' && this._isInnerZone) {\n        var ownerZoneElement = this._getOwnerZone(this._root.current);\n\n        if (ownerZoneElement !== this._root.current) {\n          var ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];\n\n          return !!ownerZone && ownerZone.focusElement(this._root.current);\n        }\n\n        return false;\n      } else if (!forceIntoFirstElement && this._activeElement && elementContains(this._root.current, this._activeElement) && isElementTabbable(this._activeElement)) {\n        this._activeElement.focus();\n\n        return true;\n      } else {\n        var firstChild = this._root.current.firstChild;\n        return this.focusElement(getNextElement(this._root.current, firstChild, true));\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Sets focus to the last tabbable item in the zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n\n\n  FocusZone.prototype.focusLast = function () {\n    if (this._root.current) {\n      var lastChild = this._root.current && this._root.current.lastChild;\n      return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true));\n    }\n\n    return false;\n  };\n  /**\n   * Sets focus to a specific child element within the zone. This can be used in conjunction with\n   * shouldReceiveFocus to create delayed focus scenarios (like animate the scroll position to the correct\n   * location and then focus.)\n   * @param element - The child element within the zone to focus.\n   * @param forceAlignment - If true, focus alignment will be set according to the element provided.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n\n\n  FocusZone.prototype.focusElement = function (element, forceAlignment) {\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n        onBeforeFocus = _a.onBeforeFocus,\n        shouldReceiveFocus = _a.shouldReceiveFocus;\n\n    if (shouldReceiveFocus && !shouldReceiveFocus(element) || onBeforeFocus && !onBeforeFocus(element)) {\n      return false;\n    }\n\n    if (element) {\n      // when we set focus to a specific child, we should recalculate the alignment depending on its position.\n      this._setActiveElement(element, forceAlignment);\n\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Forces horizontal alignment in the context of vertical arrowing to use specific point as the reference,\n   * rather than a center based on the last horizontal motion.\n   * @param point - the new reference point.\n   */\n\n\n  FocusZone.prototype.setFocusAlignment = function (point) {\n    this._focusAlignment = point;\n  };\n\n  FocusZone.prototype._evaluateFocusBeforeRender = function () {\n    var root = this._root.current;\n\n    var doc = this._getDocument();\n\n    if (doc) {\n      var focusedElement = doc.activeElement; // Only update the index path if we are not parked on the root.\n\n      if (focusedElement !== root) {\n        var shouldRestoreFocus = elementContains(root, focusedElement, false);\n        this._lastIndexPath = shouldRestoreFocus ? getElementIndexPath(root, focusedElement) : undefined;\n      }\n    }\n  };\n  /**\n   * When focus is in the zone at render time but then all focusable elements are removed,\n   * we \"park\" focus temporarily on the root. Once we update with focusable children, we restore\n   * focus to the closest path from previous. If the user tabs away from the parked container,\n   * we restore focusability to the pre-parked state.\n   */\n\n\n  FocusZone.prototype._setParkedFocus = function (isParked) {\n    var root = this._root.current;\n\n    if (root && this._isParked !== isParked) {\n      this._isParked = isParked;\n\n      if (isParked) {\n        if (!this.props.allowFocusRoot) {\n          this._parkedTabIndex = root.getAttribute('tabindex');\n          root.setAttribute('tabindex', '-1');\n        }\n\n        root.focus();\n      } else if (!this.props.allowFocusRoot) {\n        if (this._parkedTabIndex) {\n          root.setAttribute('tabindex', this._parkedTabIndex);\n          this._parkedTabIndex = undefined;\n        } else {\n          root.removeAttribute('tabindex');\n        }\n      }\n    }\n  };\n\n  FocusZone.prototype._setActiveElement = function (element, forceAlignment) {\n    var previousActiveElement = this._activeElement;\n    this._activeElement = element;\n\n    if (previousActiveElement) {\n      if (isElementFocusZone(previousActiveElement)) {\n        this._updateTabIndexes(previousActiveElement);\n      }\n\n      previousActiveElement.tabIndex = -1;\n    }\n\n    if (this._activeElement) {\n      if (!this._focusAlignment || forceAlignment) {\n        this._setFocusAlignment(element, true, true);\n      }\n\n      this._activeElement.tabIndex = 0;\n    }\n  };\n\n  FocusZone.prototype._preventDefaultWhenHandled = function (ev) {\n    this.props.preventDefaultWhenHandled && ev.preventDefault();\n  };\n  /**\n   * Walk up the dom try to find a focusable element.\n   */\n\n\n  FocusZone.prototype._tryInvokeClickForFocusable = function (target) {\n    if (target === this._root.current || !this.props.shouldRaiseClicks) {\n      return false;\n    }\n\n    do {\n      if (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {\n        return false;\n      }\n\n      if (this._isImmediateDescendantOfZone(target) && target.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' && target.getAttribute(IS_ENTER_DISABLED_ATTRIBUTE) !== 'true') {\n        raiseClick(target);\n        return true;\n      }\n\n      target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);\n    } while (target !== this._root.current);\n\n    return false;\n  };\n  /**\n   * Traverse to find first child zone.\n   */\n\n\n  FocusZone.prototype._getFirstInnerZone = function (rootElement) {\n    rootElement = rootElement || this._activeElement || this._root.current;\n\n    if (!rootElement) {\n      return null;\n    }\n\n    if (isElementFocusZone(rootElement)) {\n      return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];\n    }\n\n    var child = rootElement.firstElementChild;\n\n    while (child) {\n      if (isElementFocusZone(child)) {\n        return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];\n      }\n\n      var match = this._getFirstInnerZone(child);\n\n      if (match) {\n        return match;\n      }\n\n      child = child.nextElementSibling;\n    }\n\n    return null;\n  };\n\n  FocusZone.prototype._moveFocus = function (isForward, getDistanceFromCenter, ev, useDefaultWrap) {\n    if (useDefaultWrap === void 0) {\n      useDefaultWrap = true;\n    }\n\n    var element = this._activeElement;\n    var candidateDistance = -1;\n    var candidateElement = undefined;\n    var changedFocus = false;\n    var isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;\n\n    if (!element || !this._root.current) {\n      return false;\n    }\n\n    if (this._isElementInput(element)) {\n      if (!this._shouldInputLoseFocus(element, isForward)) {\n        return false;\n      }\n    }\n\n    var activeRect = isBidirectional ? element.getBoundingClientRect() : null;\n\n    do {\n      element = isForward ? getNextElement(this._root.current, element) : getPreviousElement(this._root.current, element);\n\n      if (isBidirectional) {\n        if (element) {\n          var targetRect = element.getBoundingClientRect();\n          var elementDistance = getDistanceFromCenter(activeRect, targetRect);\n\n          if (elementDistance === -1 && candidateDistance === -1) {\n            candidateElement = element;\n            break;\n          }\n\n          if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n\n          if (candidateDistance >= 0 && elementDistance < 0) {\n            break;\n          }\n        }\n      } else {\n        candidateElement = element;\n        break;\n      }\n    } while (element); // Focus the closest candidate\n\n\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));\n      } else {\n        return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));\n      }\n    }\n\n    return changedFocus;\n  };\n\n  FocusZone.prototype._moveFocusDown = function () {\n    var _this = this;\n\n    var targetTop = -1; // eslint-disable-next-line deprecation/deprecation\n\n    var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n\n    if (this._moveFocus(true, function (activeRect, targetRect) {\n      var distance = -1; // ClientRect values can be floats that differ by very small fractions of a decimal.\n      // If the difference between top and bottom are within a pixel then we should treat\n      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n      // but without Math.Floor they will be handled incorrectly.\n\n      var targetRectTop = Math.floor(targetRect.top);\n      var activeRectBottom = Math.floor(activeRect.bottom);\n\n      if (targetRectTop < activeRectBottom) {\n        if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n          return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n        }\n\n        return LARGE_DISTANCE_FROM_CENTER;\n      }\n\n      if (targetTop === -1 && targetRectTop >= activeRectBottom || targetRectTop === targetTop) {\n        targetTop = targetRectTop;\n\n        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n          distance = 0;\n        } else {\n          distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n        }\n      }\n\n      return distance;\n    })) {\n      this._setFocusAlignment(this._activeElement, false, true);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  FocusZone.prototype._moveFocusUp = function () {\n    var _this = this;\n\n    var targetTop = -1; // eslint-disable-next-line deprecation/deprecation\n\n    var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n\n    if (this._moveFocus(false, function (activeRect, targetRect) {\n      var distance = -1; // ClientRect values can be floats that differ by very small fractions of a decimal.\n      // If the difference between top and bottom are within a pixel then we should treat\n      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n      // but without Math.Floor they will be handled incorrectly.\n\n      var targetRectBottom = Math.floor(targetRect.bottom);\n      var targetRectTop = Math.floor(targetRect.top);\n      var activeRectTop = Math.floor(activeRect.top);\n\n      if (targetRectBottom > activeRectTop) {\n        if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n          return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n        }\n\n        return LARGE_DISTANCE_FROM_CENTER;\n      }\n\n      if (targetTop === -1 && targetRectBottom <= activeRectTop || targetRectTop === targetTop) {\n        targetTop = targetRectTop;\n\n        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n          distance = 0;\n        } else {\n          distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n        }\n      }\n\n      return distance;\n    })) {\n      this._setFocusAlignment(this._activeElement, false, true);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  FocusZone.prototype._moveFocusLeft = function (theme) {\n    var _this = this;\n\n    var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);\n\n    if (this._moveFocus(getRTL(theme), function (activeRect, targetRect) {\n      var distance = -1;\n      var topBottomComparison;\n\n      if (getRTL(theme)) {\n        // When in RTL, this comparison should be the same as the one in _moveFocusRight for LTR.\n        // Going left at a leftmost rectangle will go down a line instead of up a line like in LTR.\n        // This is important, because we want to be comparing the top of the target rect\n        // with the bottom of the active rect.\n        topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n      } else {\n        topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n      }\n\n      if (topBottomComparison && targetRect.right <= activeRect.right && _this.props.direction !== FocusZoneDirection.vertical) {\n        distance = activeRect.right - targetRect.right;\n      } else if (!shouldWrap) {\n        distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n      }\n\n      return distance;\n    }, undefined\n    /*ev*/\n    , shouldWrap)) {\n      this._setFocusAlignment(this._activeElement, true, false);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  FocusZone.prototype._moveFocusRight = function (theme) {\n    var _this = this;\n\n    var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);\n\n    if (this._moveFocus(!getRTL(theme), function (activeRect, targetRect) {\n      var distance = -1;\n      var topBottomComparison;\n\n      if (getRTL(theme)) {\n        // When in RTL, this comparison should be the same as the one in _moveFocusLeft for LTR.\n        // Going right at a rightmost rectangle will go up a line instead of down a line like in LTR.\n        // This is important, because we want to be comparing the bottom of the target rect\n        // with the top of the active rect.\n        topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n      } else {\n        topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n      }\n\n      if (topBottomComparison && targetRect.left >= activeRect.left && _this.props.direction !== FocusZoneDirection.vertical) {\n        distance = targetRect.left - activeRect.left;\n      } else if (!shouldWrap) {\n        distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n      }\n\n      return distance;\n    }, undefined\n    /*ev*/\n    , shouldWrap)) {\n      this._setFocusAlignment(this._activeElement, true, false);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  FocusZone.prototype._moveFocusPaging = function (isForward, useDefaultWrap) {\n    if (useDefaultWrap === void 0) {\n      useDefaultWrap = true;\n    }\n\n    var element = this._activeElement;\n\n    if (!element || !this._root.current) {\n      return false;\n    }\n\n    if (this._isElementInput(element)) {\n      if (!this._shouldInputLoseFocus(element, isForward)) {\n        return false;\n      }\n    }\n\n    var scrollableParent = findScrollableParent(element);\n\n    if (!scrollableParent) {\n      return false;\n    }\n\n    var candidateDistance = -1;\n    var candidateElement = undefined;\n    var targetTop = -1;\n    var targetBottom = -1;\n    var pagesize = scrollableParent.clientHeight;\n    var activeRect = element.getBoundingClientRect();\n\n    do {\n      element = isForward ? getNextElement(this._root.current, element) : getPreviousElement(this._root.current, element);\n\n      if (element) {\n        var targetRect = element.getBoundingClientRect();\n        var targetRectTop = Math.floor(targetRect.top);\n        var activeRectBottom = Math.floor(activeRect.bottom);\n        var targetRectBottom = Math.floor(targetRect.bottom);\n        var activeRectTop = Math.floor(activeRect.top);\n\n        var elementDistance = this._getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);\n\n        var isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;\n        var isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;\n\n        if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {\n          break;\n        }\n\n        if (elementDistance > -1) {\n          // for paging down\n          if (isForward && targetRectTop > targetTop) {\n            targetTop = targetRectTop;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (!isForward && targetRectBottom < targetBottom) {\n            // for paging up\n            targetBottom = targetRectBottom;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (candidateDistance === -1 || elementDistance <= candidateDistance) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n        }\n      }\n    } while (element);\n\n    var changedFocus = false; // Focus the closest candidate\n\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n\n      this._setFocusAlignment(candidateElement, false, true);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));\n      }\n\n      return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));\n    }\n\n    return changedFocus;\n  };\n\n  FocusZone.prototype._setFocusAlignment = function (element, isHorizontal, isVertical) {\n    if (this.props.direction === FocusZoneDirection.bidirectional && (!this._focusAlignment || isHorizontal || isVertical)) {\n      var rect = element.getBoundingClientRect();\n      var left = rect.left + rect.width / 2;\n      var top_1 = rect.top + rect.height / 2;\n\n      if (!this._focusAlignment) {\n        this._focusAlignment = {\n          left: left,\n          top: top_1\n        };\n      }\n\n      if (isHorizontal) {\n        this._focusAlignment.left = left;\n      }\n\n      if (isVertical) {\n        this._focusAlignment.top = top_1;\n      }\n    }\n  };\n\n  FocusZone.prototype._isImmediateDescendantOfZone = function (element) {\n    return this._getOwnerZone(element) === this._root.current;\n  };\n\n  FocusZone.prototype._getOwnerZone = function (element) {\n    var parentElement = getParent(element, ALLOW_VIRTUAL_ELEMENTS);\n\n    while (parentElement && parentElement !== this._root.current && parentElement !== this._getDocument().body) {\n      if (isElementFocusZone(parentElement)) {\n        return parentElement;\n      }\n\n      parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n    }\n\n    return parentElement;\n  };\n\n  FocusZone.prototype._updateTabIndexes = function (element) {\n    if (!this._activeElement && this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'function') {\n      this._activeElement = this.props.defaultTabbableElement(this._root.current);\n    }\n\n    if (!element && this._root.current) {\n      this._defaultFocusElement = null;\n      element = this._root.current;\n\n      if (this._activeElement && !elementContains(element, this._activeElement)) {\n        this._activeElement = null;\n      }\n    } // If active element changes state to disabled, set it to null.\n    // Otherwise, we lose keyboard accessibility to other elements in focus zone.\n\n\n    if (this._activeElement && !isElementTabbable(this._activeElement)) {\n      this._activeElement = null;\n    }\n\n    var childNodes = element && element.children;\n\n    for (var childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {\n      var child = childNodes[childIndex];\n\n      if (!isElementFocusZone(child)) {\n        // If the item is explicitly set to not be focusable then TABINDEX needs to be set to -1.\n        if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'false') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n\n        if (isElementTabbable(child)) {\n          if (this.props.disabled) {\n            child.setAttribute(TABINDEX, '-1');\n          } else if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {\n            this._defaultFocusElement = child;\n\n            if (child.getAttribute(TABINDEX) !== '0') {\n              child.setAttribute(TABINDEX, '0');\n            }\n          } else if (child.getAttribute(TABINDEX) !== '-1') {\n            child.setAttribute(TABINDEX, '-1');\n          }\n        } else if (child.tagName === 'svg' && child.getAttribute('focusable') !== 'false') {\n          // Disgusting IE hack. Sad face.\n          child.setAttribute('focusable', 'false');\n        }\n      } else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true') {\n        if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {\n          this._defaultFocusElement = child;\n\n          if (child.getAttribute(TABINDEX) !== '0') {\n            child.setAttribute(TABINDEX, '0');\n          }\n        } else if (child.getAttribute(TABINDEX) !== '-1') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n      }\n\n      this._updateTabIndexes(child);\n    }\n  };\n\n  FocusZone.prototype._isContentEditableElement = function (element) {\n    return element && element.getAttribute('contenteditable') === 'true';\n  };\n\n  FocusZone.prototype._isElementInput = function (element) {\n    if (element && element.tagName && (element.tagName.toLowerCase() === 'input' || element.tagName.toLowerCase() === 'textarea')) {\n      return true;\n    }\n\n    return false;\n  };\n\n  FocusZone.prototype._shouldInputLoseFocus = function (element, isForward) {\n    // If a tab was used, we want to focus on the next element.\n    if (!this._processingTabKey && element && element.type && ALLOWED_INPUT_TYPES.indexOf(element.type.toLowerCase()) > -1) {\n      var selectionStart = element.selectionStart;\n      var selectionEnd = element.selectionEnd;\n      var isRangeSelected = selectionStart !== selectionEnd;\n      var inputValue = element.value;\n      var isReadonly = element.readOnly; // We shouldn't lose focus in the following cases:\n      // 1. There is range selected.\n      // 2. When selection start is larger than 0 and it is backward and not readOnly.\n      // 3. when selection start is not the end of length, it is forward and not readOnly.\n      // 4. We press any of the arrow keys when our handleTabKey isn't none or undefined (only losing focus if we hit\n      // tab) and if shouldInputLoseFocusOnArrowKey is defined, if scenario prefers to not loose the focus which is\n      // determined by calling the callback shouldInputLoseFocusOnArrowKey\n\n      if (isRangeSelected || selectionStart > 0 && !isForward && !isReadonly || selectionStart !== inputValue.length && isForward && !isReadonly || !!this.props.handleTabKey && !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element))) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  FocusZone.prototype._shouldWrapFocus = function (element, noWrapDataAttribute) {\n    return this.props.checkForNoWrap ? shouldWrapFocus(element, noWrapDataAttribute) : true;\n  };\n  /**\n   * Returns true if the element is a descendant of the FocusZone through a React portal.\n   */\n\n\n  FocusZone.prototype._portalContainsElement = function (element) {\n    return element && !!this._root.current && portalContainsElement(element, this._root.current);\n  };\n\n  FocusZone.prototype._getDocument = function () {\n    return getDocument(this._root.current);\n  };\n\n  FocusZone.defaultProps = {\n    isCircularNavigation: false,\n    direction: FocusZoneDirection.bidirectional,\n    shouldRaiseClicks: true\n  };\n  return FocusZone;\n}(React.Component);\n\nexport { FocusZone };","map":{"version":3,"sources":["components/FocusZone/FocusZone.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { mergeStyles } from '@uifabric/merge-styles';\nimport { getTheme, ITheme } from '@uifabric/styling';\nimport {\n  KeyCodes,\n  css,\n  elementContains,\n  getDocument,\n  getElementIndexPath,\n  getFocusableByIndexPath,\n  getId,\n  getNativeProps,\n  getNextElement,\n  getParent,\n  getPreviousElement,\n  getRTL,\n  htmlElementProperties,\n  initializeComponentRef,\n  isElementFocusSubZone,\n  isElementFocusZone,\n  isElementTabbable,\n  raiseClick,\n  shouldWrapFocus,\n  warnDeprecations,\n  portalContainsElement,\n  Point,\n  getWindow,\n  findScrollableParent,\n  createMergedRef,\n} from '@uifabric/utilities';\nimport { FocusZoneDirection, FocusZoneTabbableElements, IFocusZone, IFocusZoneProps } from './FocusZone.types';\n\nconst IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';\nconst IS_ENTER_DISABLED_ATTRIBUTE = 'data-disable-click-on-enter';\nconst FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';\nconst TABINDEX = 'tabindex';\nconst NO_VERTICAL_WRAP = 'data-no-vertical-wrap';\nconst NO_HORIZONTAL_WRAP = 'data-no-horizontal-wrap';\nconst LARGE_DISTANCE_FROM_CENTER = 999999999;\nconst LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;\n\nlet focusZoneStyles: string;\n\nconst focusZoneClass: string = 'ms-FocusZone';\n\n// Helper function that will return a class for when the root is focused\nfunction getRootClass(): string {\n  if (!focusZoneStyles) {\n    focusZoneStyles = mergeStyles(\n      {\n        selectors: {\n          ':focus': {\n            outline: 'none',\n          },\n        },\n      },\n      focusZoneClass,\n    );\n  }\n  return focusZoneStyles;\n}\n\nconst _allInstances: {\n  [key: string]: FocusZone;\n} = {};\nconst _outerZones: Set<FocusZone> = new Set();\n\nconst ALLOWED_INPUT_TYPES = ['text', 'number', 'password', 'email', 'tel', 'url', 'search'];\n\nconst ALLOW_VIRTUAL_ELEMENTS = false;\n\nexport class FocusZone extends React.Component<IFocusZoneProps> implements IFocusZone {\n  public static defaultProps: IFocusZoneProps = {\n    isCircularNavigation: false,\n    direction: FocusZoneDirection.bidirectional,\n    shouldRaiseClicks: true,\n  };\n\n  private _root: React.RefObject<HTMLElement> = React.createRef();\n  private _mergedRef = createMergedRef<HTMLElement>();\n\n  private _id: string;\n\n  /** The most recently focused child element. */\n  private _activeElement: HTMLElement | null;\n\n  /**\n   * The index path to the last focused child element.\n   */\n  private _lastIndexPath: number[] | undefined;\n\n  /**\n   * Flag to define when we've intentionally parked focus on the root element to temporarily\n   * hold focus until items appear within the zone.\n   */\n  private _isParked: boolean;\n\n  /** The child element with tabindex=0. */\n  private _defaultFocusElement: HTMLElement | null;\n  private _focusAlignment: Point;\n  private _isInnerZone: boolean;\n  private _parkedTabIndex: string | null | undefined;\n\n  /** Used to allow moving to next focusable element even when we're focusing on a input element when pressing tab */\n  private _processingTabKey: boolean;\n\n  private _windowElement: Window | undefined;\n\n  /** Used for testing purposes only. */\n  public static getOuterZones(): number {\n    return _outerZones.size;\n  }\n\n  /**\n   * Handle global tab presses so that we can patch tabindexes on the fly.\n   * HEADS UP: This must not be an arrow function in order to be referentially equal among instances\n   * for ref counting to work correctly!\n   */\n  private static _onKeyDownCapture(ev: KeyboardEvent): void {\n    // eslint-disable-next-line deprecation/deprecation, @fluentui/deprecated-keyboard-event-props\n    if (ev.which === KeyCodes.tab) {\n      _outerZones.forEach((zone: FocusZone) => zone._updateTabIndexes());\n    }\n  }\n\n  constructor(props: IFocusZoneProps) {\n    super(props);\n    // Manage componentRef resolution.\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('FocusZone', props, {\n        rootProps: undefined,\n        allowTabKey: 'handleTabKey',\n        elementType: 'as',\n        ariaDescribedBy: 'aria-describedby',\n        ariaLabelledBy: 'aria-labelledby',\n      });\n    }\n\n    this._id = getId('FocusZone');\n\n    this._focusAlignment = {\n      left: 0,\n      top: 0,\n    };\n\n    this._processingTabKey = false;\n  }\n\n  public componentDidMount(): void {\n    const { current: root } = this._root;\n\n    _allInstances[this._id] = this;\n\n    if (root) {\n      this._windowElement = getWindow(root);\n      let parentElement = getParent(root, ALLOW_VIRTUAL_ELEMENTS);\n\n      while (parentElement && parentElement !== this._getDocument().body && parentElement.nodeType === 1) {\n        if (isElementFocusZone(parentElement)) {\n          this._isInnerZone = true;\n          break;\n        }\n        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n      }\n\n      if (!this._isInnerZone) {\n        _outerZones.add(this);\n\n        if (this._windowElement && _outerZones.size === 1) {\n          this._windowElement.addEventListener('keydown', FocusZone._onKeyDownCapture, true);\n        }\n      }\n\n      this._root.current && this._root.current.addEventListener('blur', this._onBlur, true);\n\n      // Assign initial tab indexes so that we can set initial focus as appropriate.\n      this._updateTabIndexes();\n\n      if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'string') {\n        this._activeElement = this._getDocument().querySelector(this.props.defaultTabbableElement) as HTMLElement;\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (this.props.defaultActiveElement) {\n        // eslint-disable-next-line deprecation/deprecation\n        this._activeElement = this._getDocument().querySelector(this.props.defaultActiveElement) as HTMLElement;\n      }\n\n      if (this.props.shouldFocusOnMount) {\n        this.focus();\n      }\n    }\n  }\n\n  public componentDidUpdate(): void {\n    const { current: root } = this._root;\n    const doc = this._getDocument();\n\n    if (\n      doc &&\n      this._lastIndexPath &&\n      (doc.activeElement === doc.body ||\n        doc.activeElement === null ||\n        (!this.props.preventFocusRestoration && doc.activeElement === root))\n    ) {\n      // The element has been removed after the render, attempt to restore focus.\n      const elementToFocus = getFocusableByIndexPath(root as HTMLElement, this._lastIndexPath);\n\n      if (elementToFocus) {\n        this._setActiveElement(elementToFocus, true);\n        elementToFocus.focus();\n        this._setParkedFocus(false);\n      } else {\n        // We had a focus path to restore, but now that path is unresolvable. Park focus\n        // on the container until we can try again.\n        this._setParkedFocus(true);\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    delete _allInstances[this._id];\n\n    if (!this._isInnerZone) {\n      _outerZones.delete(this);\n\n      // If this is the last outer zone, remove the keydown listener.\n      if (this._windowElement && _outerZones.size === 0) {\n        this._windowElement.removeEventListener('keydown', FocusZone._onKeyDownCapture, true);\n      }\n    }\n\n    if (this._root.current) {\n      this._root.current.removeEventListener('blur', this._onBlur, true);\n    }\n\n    this._activeElement = null;\n    this._defaultFocusElement = null;\n  }\n\n  public render(): React.ReactNode {\n    // eslint-disable-next-line deprecation/deprecation\n    const { as: tag, elementType, rootProps, ariaDescribedBy, ariaLabelledBy, className } = this.props;\n    const divProps = getNativeProps(this.props, htmlElementProperties);\n\n    const Tag = tag || elementType || 'div';\n\n    // Note, right before rendering/reconciling proceeds, we need to record if focus\n    // was in the zone before the update. This helper will track this and, if focus\n    // was actually in the zone, what the index path to the element is at this time.\n    // Then, later in componentDidUpdate, we can evaluate if we need to restore it in\n    // the case the element was removed.\n    this._evaluateFocusBeforeRender();\n\n    // Only support RTL defined in global theme, not contextual theme/RTL.\n    const theme: ITheme = getTheme();\n\n    return (\n      <Tag\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={ariaDescribedBy}\n        {...divProps}\n        {\n          // root props has been deprecated and should get removed.\n          // it needs to be marked as \"any\" since root props expects a div element, but really Tag can\n          // be any native element so typescript rightly flags this as a problem.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          ...(rootProps as any)\n        }\n        // Once the getClassName correctly memoizes inputs this should\n        // be replaced so that className is passed to getRootClass and is included there so\n        // the class names will always be in the same order.\n        className={css(getRootClass(), className)}\n        // eslint-disable-next-line deprecation/deprecation\n        ref={this._mergedRef(this.props.elementRef, this._root)}\n        data-focuszone-id={this._id}\n        // eslint-disable-next-line react/jsx-no-bind\n        onKeyDown={(ev: React.KeyboardEvent<HTMLElement>) => this._onKeyDown(ev, theme)}\n        onFocus={this._onFocus}\n        onMouseDownCapture={this._onMouseDown}\n      >\n        {this.props.children}\n      </Tag>\n    );\n  }\n\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n   * if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    if (this._root.current) {\n      if (\n        !forceIntoFirstElement &&\n        this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' &&\n        this._isInnerZone\n      ) {\n        const ownerZoneElement = this._getOwnerZone(this._root.current) as HTMLElement;\n\n        if (ownerZoneElement !== this._root.current) {\n          const ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE) as string];\n\n          return !!ownerZone && ownerZone.focusElement(this._root.current);\n        }\n\n        return false;\n      } else if (\n        !forceIntoFirstElement &&\n        this._activeElement &&\n        elementContains(this._root.current, this._activeElement) &&\n        isElementTabbable(this._activeElement)\n      ) {\n        this._activeElement.focus();\n        return true;\n      } else {\n        const firstChild = this._root.current.firstChild as HTMLElement;\n\n        return this.focusElement(getNextElement(this._root.current, firstChild, true) as HTMLElement);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Sets focus to the last tabbable item in the zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focusLast(): boolean {\n    if (this._root.current) {\n      const lastChild = this._root.current && (this._root.current.lastChild as HTMLElement | null);\n\n      return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true) as HTMLElement);\n    }\n\n    return false;\n  }\n\n  /**\n   * Sets focus to a specific child element within the zone. This can be used in conjunction with\n   * shouldReceiveFocus to create delayed focus scenarios (like animate the scroll position to the correct\n   * location and then focus.)\n   * @param element - The child element within the zone to focus.\n   * @param forceAlignment - If true, focus alignment will be set according to the element provided.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focusElement(element: HTMLElement, forceAlignment?: boolean): boolean {\n    // eslint-disable-next-line deprecation/deprecation\n    const { onBeforeFocus, shouldReceiveFocus } = this.props;\n\n    if ((shouldReceiveFocus && !shouldReceiveFocus(element)) || (onBeforeFocus && !onBeforeFocus(element))) {\n      return false;\n    }\n\n    if (element) {\n      // when we set focus to a specific child, we should recalculate the alignment depending on its position.\n      this._setActiveElement(element, forceAlignment);\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Forces horizontal alignment in the context of vertical arrowing to use specific point as the reference,\n   * rather than a center based on the last horizontal motion.\n   * @param point - the new reference point.\n   */\n  public setFocusAlignment(point: Point): void {\n    this._focusAlignment = point;\n  }\n\n  private _evaluateFocusBeforeRender(): void {\n    const { current: root } = this._root;\n\n    const doc = this._getDocument();\n    if (doc) {\n      const focusedElement = doc.activeElement as HTMLElement;\n\n      // Only update the index path if we are not parked on the root.\n      if (focusedElement !== root) {\n        const shouldRestoreFocus = elementContains(root, focusedElement, false);\n        this._lastIndexPath = shouldRestoreFocus ? getElementIndexPath(root as HTMLElement, focusedElement) : undefined;\n      }\n    }\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    if (this._portalContainsElement(ev.target as HTMLElement)) {\n      // If the event target is inside a portal do not process the event.\n      return;\n    }\n\n    const {\n      onActiveElementChanged,\n      // eslint-disable-next-line deprecation/deprecation\n      doNotAllowFocusEventToPropagate,\n      stopFocusPropagation,\n      // eslint-disable-next-line deprecation/deprecation\n      onFocusNotification,\n      onFocus,\n      shouldFocusInnerElementWhenReceivedFocus,\n      defaultTabbableElement,\n    } = this.props;\n    const isImmediateDescendant = this._isImmediateDescendantOfZone(ev.target as HTMLElement);\n    let newActiveElement: HTMLElement | null | undefined;\n\n    if (isImmediateDescendant) {\n      newActiveElement = ev.target as HTMLElement;\n    } else {\n      let parentElement = ev.target as HTMLElement;\n\n      while (parentElement && parentElement !== this._root.current) {\n        if (isElementTabbable(parentElement) && this._isImmediateDescendantOfZone(parentElement)) {\n          newActiveElement = parentElement;\n          break;\n        }\n        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS) as HTMLElement;\n      }\n    }\n\n    // If an inner focusable element should be focused when FocusZone container receives focus\n    if (shouldFocusInnerElementWhenReceivedFocus && ev.target === this._root.current) {\n      const maybeElementToFocus =\n        defaultTabbableElement &&\n        typeof defaultTabbableElement === 'function' &&\n        defaultTabbableElement(this._root.current);\n\n      // try to focus defaultTabbable element\n      if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {\n        newActiveElement = maybeElementToFocus;\n        maybeElementToFocus.focus();\n      } else {\n        // force focus on first focusable element\n        this.focus(true);\n        if (this._activeElement) {\n          // set to null as new active element was handled in method above\n          newActiveElement = null;\n        }\n      }\n    }\n\n    const initialElementFocused = !this._activeElement;\n\n    // If the new active element is a child of this zone and received focus,\n    // update alignment an immediate descendant\n    if (newActiveElement && newActiveElement !== this._activeElement) {\n      if (isImmediateDescendant || initialElementFocused) {\n        this._setFocusAlignment(newActiveElement, true, true);\n      }\n\n      this._activeElement = newActiveElement;\n\n      if (initialElementFocused) {\n        this._updateTabIndexes();\n      }\n    }\n\n    if (onActiveElementChanged) {\n      onActiveElementChanged(this._activeElement as HTMLElement, ev);\n    }\n\n    if (stopFocusPropagation || doNotAllowFocusEventToPropagate) {\n      ev.stopPropagation();\n    }\n\n    if (onFocus) {\n      onFocus(ev);\n    } else if (onFocusNotification) {\n      onFocusNotification();\n    }\n  };\n\n  /**\n   * When focus is in the zone at render time but then all focusable elements are removed,\n   * we \"park\" focus temporarily on the root. Once we update with focusable children, we restore\n   * focus to the closest path from previous. If the user tabs away from the parked container,\n   * we restore focusability to the pre-parked state.\n   */\n  private _setParkedFocus(isParked: boolean): void {\n    const { current: root } = this._root;\n\n    if (root && this._isParked !== isParked) {\n      this._isParked = isParked;\n\n      if (isParked) {\n        if (!this.props.allowFocusRoot) {\n          this._parkedTabIndex = root.getAttribute('tabindex');\n          root.setAttribute('tabindex', '-1');\n        }\n        root.focus();\n      } else if (!this.props.allowFocusRoot) {\n        if (this._parkedTabIndex) {\n          root.setAttribute('tabindex', this._parkedTabIndex);\n          this._parkedTabIndex = undefined;\n        } else {\n          root.removeAttribute('tabindex');\n        }\n      }\n    }\n  }\n\n  private _onBlur = (): void => {\n    this._setParkedFocus(false);\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    if (this._portalContainsElement(ev.target as HTMLElement)) {\n      // If the event target is inside a portal do not process the event.\n      return;\n    }\n\n    const { disabled } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    let target = ev.target as HTMLElement;\n    const path = [];\n\n    while (target && target !== this._root.current) {\n      path.push(target);\n      target = getParent(target, ALLOW_VIRTUAL_ELEMENTS) as HTMLElement;\n    }\n\n    while (path.length) {\n      target = path.pop() as HTMLElement;\n\n      if (target && isElementTabbable(target)) {\n        this._setActiveElement(target, true);\n      }\n\n      if (isElementFocusZone(target)) {\n        // Stop here since the focus zone will take care of its own children.\n        break;\n      }\n    }\n  };\n\n  private _setActiveElement(element: HTMLElement, forceAlignment?: boolean): void {\n    const previousActiveElement = this._activeElement;\n\n    this._activeElement = element;\n\n    if (previousActiveElement) {\n      if (isElementFocusZone(previousActiveElement)) {\n        this._updateTabIndexes(previousActiveElement);\n      }\n\n      previousActiveElement.tabIndex = -1;\n    }\n\n    if (this._activeElement) {\n      if (!this._focusAlignment || forceAlignment) {\n        this._setFocusAlignment(element, true, true);\n      }\n\n      this._activeElement.tabIndex = 0;\n    }\n  }\n\n  private _preventDefaultWhenHandled(ev: React.KeyboardEvent<HTMLElement>): void {\n    this.props.preventDefaultWhenHandled && ev.preventDefault();\n  }\n\n  /**\n   * Handle the keystrokes.\n   */\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>, theme: ITheme): boolean | undefined => {\n    if (this._portalContainsElement(ev.target as HTMLElement)) {\n      // If the event target is inside a portal do not process the event.\n      return;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const { direction, disabled, isInnerZoneKeystroke, pagingSupportDisabled, shouldEnterInnerZone } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n    }\n\n    // If the default has been prevented, do not process keyboard events.\n    if (ev.isDefaultPrevented()) {\n      return;\n    }\n\n    if (this._getDocument().activeElement === this._root.current && this._isInnerZone) {\n      // If this element has focus, it is being controlled by a parent.\n      // Ignore the keystroke.\n      return;\n    }\n\n    if (\n      ((shouldEnterInnerZone && shouldEnterInnerZone(ev)) || (isInnerZoneKeystroke && isInnerZoneKeystroke(ev))) &&\n      this._isImmediateDescendantOfZone(ev.target as HTMLElement)\n    ) {\n      // Try to focus\n      const innerZone = this._getFirstInnerZone();\n\n      if (innerZone) {\n        if (!innerZone.focus(true)) {\n          return;\n        }\n      } else if (isElementFocusSubZone(ev.target as HTMLElement)) {\n        if (\n          !this.focusElement(\n            getNextElement(\n              ev.target as HTMLElement,\n              (ev.target as HTMLElement).firstChild as HTMLElement,\n              true,\n            ) as HTMLElement,\n          )\n        ) {\n          return;\n        }\n      } else {\n        return;\n      }\n    } else if (ev.altKey) {\n      return;\n    } else {\n      // eslint-disable-next-line @fluentui/deprecated-keyboard-event-props\n      switch (ev.which) {\n        case KeyCodes.space:\n          if (this._tryInvokeClickForFocusable(ev.target as HTMLElement)) {\n            break;\n          }\n          return;\n\n        case KeyCodes.left:\n          if (direction !== FocusZoneDirection.vertical) {\n            this._preventDefaultWhenHandled(ev);\n            if (this._moveFocusLeft(theme)) {\n              break;\n            }\n          }\n          return;\n\n        case KeyCodes.right:\n          if (direction !== FocusZoneDirection.vertical) {\n            this._preventDefaultWhenHandled(ev);\n            if (this._moveFocusRight(theme)) {\n              break;\n            }\n          }\n          return;\n\n        case KeyCodes.up:\n          if (direction !== FocusZoneDirection.horizontal) {\n            this._preventDefaultWhenHandled(ev);\n            if (this._moveFocusUp()) {\n              break;\n            }\n          }\n          return;\n\n        case KeyCodes.down:\n          if (direction !== FocusZoneDirection.horizontal) {\n            this._preventDefaultWhenHandled(ev);\n            if (this._moveFocusDown()) {\n              break;\n            }\n          }\n          return;\n        case KeyCodes.pageDown:\n          if (!pagingSupportDisabled && this._moveFocusPaging(true)) {\n            break;\n          }\n          return;\n        case KeyCodes.pageUp:\n          if (!pagingSupportDisabled && this._moveFocusPaging(false)) {\n            break;\n          }\n          return;\n\n        case KeyCodes.tab:\n          if (\n            // eslint-disable-next-line deprecation/deprecation\n            this.props.allowTabKey ||\n            this.props.handleTabKey === FocusZoneTabbableElements.all ||\n            (this.props.handleTabKey === FocusZoneTabbableElements.inputOnly &&\n              this._isElementInput(ev.target as HTMLElement))\n          ) {\n            let focusChanged = false;\n            this._processingTabKey = true;\n            if (\n              direction === FocusZoneDirection.vertical ||\n              !this._shouldWrapFocus(this._activeElement as HTMLElement, NO_HORIZONTAL_WRAP)\n            ) {\n              focusChanged = ev.shiftKey ? this._moveFocusUp() : this._moveFocusDown();\n            } else {\n              const tabWithDirection = getRTL(theme) ? !ev.shiftKey : ev.shiftKey;\n              focusChanged = tabWithDirection ? this._moveFocusLeft(theme) : this._moveFocusRight(theme);\n            }\n            this._processingTabKey = false;\n            if (focusChanged) {\n              break;\n            } else if (this.props.shouldResetActiveElementWhenTabFromZone) {\n              this._activeElement = null;\n            }\n          }\n          return;\n\n        case KeyCodes.home:\n          if (\n            this._isContentEditableElement(ev.target as HTMLElement) ||\n            (this._isElementInput(ev.target as HTMLElement) &&\n              !this._shouldInputLoseFocus(ev.target as HTMLInputElement, false))\n          ) {\n            return false;\n          }\n          const firstChild = this._root.current && (this._root.current.firstChild as HTMLElement | null);\n          if (\n            this._root.current &&\n            firstChild &&\n            this.focusElement(getNextElement(this._root.current, firstChild, true) as HTMLElement)\n          ) {\n            break;\n          }\n          return;\n\n        case KeyCodes.end:\n          if (\n            this._isContentEditableElement(ev.target as HTMLElement) ||\n            (this._isElementInput(ev.target as HTMLElement) &&\n              !this._shouldInputLoseFocus(ev.target as HTMLInputElement, true))\n          ) {\n            return false;\n          }\n\n          const lastChild = this._root.current && (this._root.current.lastChild as HTMLElement | null);\n          if (\n            this._root.current &&\n            this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true) as HTMLElement)\n          ) {\n            break;\n          }\n          return;\n\n        case KeyCodes.enter:\n          if (this._tryInvokeClickForFocusable(ev.target as HTMLElement)) {\n            break;\n          }\n          return;\n\n        default:\n          return;\n      }\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  /**\n   * Walk up the dom try to find a focusable element.\n   */\n  private _tryInvokeClickForFocusable(target: HTMLElement): boolean {\n    if (target === this._root.current || !this.props.shouldRaiseClicks) {\n      return false;\n    }\n\n    do {\n      if (\n        target.tagName === 'BUTTON' ||\n        target.tagName === 'A' ||\n        target.tagName === 'INPUT' ||\n        target.tagName === 'TEXTAREA'\n      ) {\n        return false;\n      }\n\n      if (\n        this._isImmediateDescendantOfZone(target) &&\n        target.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' &&\n        target.getAttribute(IS_ENTER_DISABLED_ATTRIBUTE) !== 'true'\n      ) {\n        raiseClick(target);\n        return true;\n      }\n\n      target = getParent(target, ALLOW_VIRTUAL_ELEMENTS) as HTMLElement;\n    } while (target !== this._root.current);\n\n    return false;\n  }\n\n  /**\n   * Traverse to find first child zone.\n   */\n  private _getFirstInnerZone(rootElement?: HTMLElement | null): FocusZone | null {\n    rootElement = rootElement || this._activeElement || this._root.current;\n\n    if (!rootElement) {\n      return null;\n    }\n\n    if (isElementFocusZone(rootElement)) {\n      return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE) as string];\n    }\n\n    let child = rootElement.firstElementChild as HTMLElement | null;\n\n    while (child) {\n      if (isElementFocusZone(child)) {\n        return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE) as string];\n      }\n      const match = this._getFirstInnerZone(child);\n\n      if (match) {\n        return match;\n      }\n\n      child = child.nextElementSibling as HTMLElement | null;\n    }\n\n    return null;\n  }\n\n  private _moveFocus(\n    isForward: boolean,\n    getDistanceFromCenter: (activeRect: ClientRect, targetRect: ClientRect) => number,\n    ev?: Event,\n    useDefaultWrap: boolean = true,\n  ): boolean {\n    let element = this._activeElement;\n    let candidateDistance = -1;\n    let candidateElement: HTMLElement | undefined = undefined;\n    let changedFocus = false;\n    const isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;\n\n    if (!element || !this._root.current) {\n      return false;\n    }\n\n    if (this._isElementInput(element)) {\n      if (!this._shouldInputLoseFocus(element as HTMLInputElement, isForward)) {\n        return false;\n      }\n    }\n\n    const activeRect = isBidirectional ? element.getBoundingClientRect() : null;\n\n    do {\n      element = (isForward\n        ? getNextElement(this._root.current, element)\n        : getPreviousElement(this._root.current, element)) as HTMLElement;\n\n      if (isBidirectional) {\n        if (element) {\n          const targetRect = element.getBoundingClientRect();\n          const elementDistance = getDistanceFromCenter(activeRect as ClientRect, targetRect);\n\n          if (elementDistance === -1 && candidateDistance === -1) {\n            candidateElement = element;\n            break;\n          }\n\n          if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n\n          if (candidateDistance >= 0 && elementDistance < 0) {\n            break;\n          }\n        }\n      } else {\n        candidateElement = element;\n        break;\n      }\n    } while (element);\n\n    // Focus the closest candidate\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(\n          getNextElement(this._root.current, this._root.current.firstElementChild as HTMLElement, true) as HTMLElement,\n        );\n      } else {\n        return this.focusElement(\n          getPreviousElement(\n            this._root.current,\n            this._root.current.lastElementChild as HTMLElement,\n            true,\n            true,\n            true,\n          ) as HTMLElement,\n        );\n      }\n    }\n\n    return changedFocus;\n  }\n\n  private _moveFocusDown(): boolean {\n    let targetTop = -1;\n    // eslint-disable-next-line deprecation/deprecation\n    const leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n\n    if (\n      this._moveFocus(true, (activeRect: ClientRect, targetRect: ClientRect) => {\n        let distance = -1;\n        // ClientRect values can be floats that differ by very small fractions of a decimal.\n        // If the difference between top and bottom are within a pixel then we should treat\n        // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n        // but without Math.Floor they will be handled incorrectly.\n        const targetRectTop = Math.floor(targetRect.top);\n        const activeRectBottom = Math.floor(activeRect.bottom);\n\n        if (targetRectTop < activeRectBottom) {\n          if (!this._shouldWrapFocus(this._activeElement as HTMLElement, NO_VERTICAL_WRAP)) {\n            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return LARGE_DISTANCE_FROM_CENTER;\n        }\n\n        if ((targetTop === -1 && targetRectTop >= activeRectBottom) || targetRectTop === targetTop) {\n          targetTop = targetRectTop;\n          if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n            distance = 0;\n          } else {\n            distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n          }\n        }\n\n        return distance;\n      })\n    ) {\n      this._setFocusAlignment(this._activeElement as HTMLElement, false, true);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _moveFocusUp(): boolean {\n    let targetTop = -1;\n    // eslint-disable-next-line deprecation/deprecation\n    const leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n\n    if (\n      this._moveFocus(false, (activeRect: ClientRect, targetRect: ClientRect) => {\n        let distance = -1;\n        // ClientRect values can be floats that differ by very small fractions of a decimal.\n        // If the difference between top and bottom are within a pixel then we should treat\n        // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n        // but without Math.Floor they will be handled incorrectly.\n        const targetRectBottom = Math.floor(targetRect.bottom);\n        const targetRectTop = Math.floor(targetRect.top);\n        const activeRectTop = Math.floor(activeRect.top);\n\n        if (targetRectBottom > activeRectTop) {\n          if (!this._shouldWrapFocus(this._activeElement as HTMLElement, NO_VERTICAL_WRAP)) {\n            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n          return LARGE_DISTANCE_FROM_CENTER;\n        }\n\n        if ((targetTop === -1 && targetRectBottom <= activeRectTop) || targetRectTop === targetTop) {\n          targetTop = targetRectTop;\n          if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n            distance = 0;\n          } else {\n            distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n          }\n        }\n\n        return distance;\n      })\n    ) {\n      this._setFocusAlignment(this._activeElement as HTMLElement, false, true);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _moveFocusLeft(theme: ITheme): boolean {\n    const shouldWrap = this._shouldWrapFocus(this._activeElement as HTMLElement, NO_HORIZONTAL_WRAP);\n    if (\n      this._moveFocus(\n        getRTL(theme),\n        (activeRect: ClientRect, targetRect: ClientRect) => {\n          let distance = -1;\n          let topBottomComparison;\n\n          if (getRTL(theme)) {\n            // When in RTL, this comparison should be the same as the one in _moveFocusRight for LTR.\n            // Going left at a leftmost rectangle will go down a line instead of up a line like in LTR.\n            // This is important, because we want to be comparing the top of the target rect\n            // with the bottom of the active rect.\n            topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n          } else {\n            topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n          }\n\n          if (\n            topBottomComparison &&\n            targetRect.right <= activeRect.right &&\n            this.props.direction !== FocusZoneDirection.vertical\n          ) {\n            distance = activeRect.right - targetRect.right;\n          } else if (!shouldWrap) {\n            distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return distance;\n        },\n        undefined /*ev*/,\n        shouldWrap,\n      )\n    ) {\n      this._setFocusAlignment(this._activeElement as HTMLElement, true, false);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _moveFocusRight(theme: ITheme): boolean {\n    const shouldWrap = this._shouldWrapFocus(this._activeElement as HTMLElement, NO_HORIZONTAL_WRAP);\n    if (\n      this._moveFocus(\n        !getRTL(theme),\n        (activeRect: ClientRect, targetRect: ClientRect) => {\n          let distance = -1;\n          let topBottomComparison;\n\n          if (getRTL(theme)) {\n            // When in RTL, this comparison should be the same as the one in _moveFocusLeft for LTR.\n            // Going right at a rightmost rectangle will go up a line instead of down a line like in LTR.\n            // This is important, because we want to be comparing the bottom of the target rect\n            // with the top of the active rect.\n            topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n          } else {\n            topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n          }\n\n          if (\n            topBottomComparison &&\n            targetRect.left >= activeRect.left &&\n            this.props.direction !== FocusZoneDirection.vertical\n          ) {\n            distance = targetRect.left - activeRect.left;\n          } else if (!shouldWrap) {\n            distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return distance;\n        },\n        undefined /*ev*/,\n        shouldWrap,\n      )\n    ) {\n      this._setFocusAlignment(this._activeElement as HTMLElement, true, false);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _getHorizontalDistanceFromCenter = (\n    isForward: boolean,\n    activeRect: ClientRect,\n    targetRect: ClientRect,\n  ): number => {\n    // eslint-disable-next-line deprecation/deprecation\n    const leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n    // ClientRect values can be floats that differ by very small fractions of a decimal.\n    // If the difference between top and bottom are within a pixel then we should treat\n    // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n    // but without Math.Floor they will be handled incorrectly.\n    const targetRectTop = Math.floor(targetRect.top);\n    const activeRectBottom = Math.floor(activeRect.bottom);\n    const targetRectBottom = Math.floor(targetRect.bottom);\n    const activeRectTop = Math.floor(activeRect.top);\n    const isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;\n    const isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;\n\n    if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {\n      if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n        return 0;\n      }\n      return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n    }\n\n    if (!this._shouldWrapFocus(this._activeElement as HTMLElement, NO_VERTICAL_WRAP)) {\n      return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n    }\n    return LARGE_DISTANCE_FROM_CENTER;\n  };\n\n  private _moveFocusPaging(isForward: boolean, useDefaultWrap: boolean = true): boolean {\n    let element = this._activeElement;\n    if (!element || !this._root.current) {\n      return false;\n    }\n    if (this._isElementInput(element)) {\n      if (!this._shouldInputLoseFocus(element as HTMLInputElement, isForward)) {\n        return false;\n      }\n    }\n    const scrollableParent = findScrollableParent(element);\n    if (!scrollableParent) {\n      return false;\n    }\n    let candidateDistance = -1;\n    let candidateElement = undefined;\n    let targetTop = -1;\n    let targetBottom = -1;\n    const pagesize = (scrollableParent as HTMLElement).clientHeight;\n    const activeRect = element.getBoundingClientRect();\n    do {\n      element = isForward\n        ? getNextElement(this._root.current, element)\n        : getPreviousElement(this._root.current, element);\n      if (element) {\n        const targetRect = element.getBoundingClientRect();\n        const targetRectTop = Math.floor(targetRect.top);\n        const activeRectBottom = Math.floor(activeRect.bottom);\n        const targetRectBottom = Math.floor(targetRect.bottom);\n        const activeRectTop = Math.floor(activeRect.top);\n        const elementDistance = this._getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);\n        const isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;\n        const isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;\n\n        if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {\n          break;\n        }\n        if (elementDistance > -1) {\n          // for paging down\n          if (isForward && targetRectTop > targetTop) {\n            targetTop = targetRectTop;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (!isForward && targetRectBottom < targetBottom) {\n            // for paging up\n            targetBottom = targetRectBottom;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (candidateDistance === -1 || elementDistance <= candidateDistance) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n        }\n      }\n    } while (element);\n\n    let changedFocus = false;\n    // Focus the closest candidate\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n      this._setFocusAlignment(candidateElement as HTMLElement, false, true);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(\n          getNextElement(this._root.current, this._root.current.firstElementChild as HTMLElement, true) as HTMLElement,\n        );\n      }\n      return this.focusElement(\n        getPreviousElement(\n          this._root.current,\n          this._root.current.lastElementChild as HTMLElement,\n          true,\n          true,\n          true,\n        ) as HTMLElement,\n      );\n    }\n    return changedFocus;\n  }\n\n  private _setFocusAlignment(element: HTMLElement, isHorizontal?: boolean, isVertical?: boolean): void {\n    if (\n      this.props.direction === FocusZoneDirection.bidirectional &&\n      (!this._focusAlignment || isHorizontal || isVertical)\n    ) {\n      const rect = element.getBoundingClientRect();\n      const left = rect.left + rect.width / 2;\n      const top = rect.top + rect.height / 2;\n\n      if (!this._focusAlignment) {\n        this._focusAlignment = { left, top };\n      }\n\n      if (isHorizontal) {\n        this._focusAlignment.left = left;\n      }\n\n      if (isVertical) {\n        this._focusAlignment.top = top;\n      }\n    }\n  }\n\n  private _isImmediateDescendantOfZone(element?: HTMLElement): boolean {\n    return this._getOwnerZone(element) === this._root.current;\n  }\n\n  private _getOwnerZone(element?: HTMLElement): HTMLElement | null {\n    let parentElement = getParent(element as HTMLElement, ALLOW_VIRTUAL_ELEMENTS);\n\n    while (parentElement && parentElement !== this._root.current && parentElement !== this._getDocument().body) {\n      if (isElementFocusZone(parentElement)) {\n        return parentElement;\n      }\n\n      parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n    }\n\n    return parentElement;\n  }\n\n  private _updateTabIndexes(element?: HTMLElement): void {\n    if (\n      !this._activeElement &&\n      this.props.defaultTabbableElement &&\n      typeof this.props.defaultTabbableElement === 'function'\n    ) {\n      this._activeElement = this.props.defaultTabbableElement(this._root.current as HTMLElement);\n    }\n\n    if (!element && this._root.current) {\n      this._defaultFocusElement = null;\n      element = this._root.current;\n      if (this._activeElement && !elementContains(element, this._activeElement)) {\n        this._activeElement = null;\n      }\n    }\n\n    // If active element changes state to disabled, set it to null.\n    // Otherwise, we lose keyboard accessibility to other elements in focus zone.\n    if (this._activeElement && !isElementTabbable(this._activeElement)) {\n      this._activeElement = null;\n    }\n\n    const childNodes = element && element.children;\n\n    for (let childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {\n      const child = childNodes[childIndex] as HTMLElement;\n\n      if (!isElementFocusZone(child)) {\n        // If the item is explicitly set to not be focusable then TABINDEX needs to be set to -1.\n        if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'false') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n\n        if (isElementTabbable(child)) {\n          if (this.props.disabled) {\n            child.setAttribute(TABINDEX, '-1');\n          } else if (\n            !this._isInnerZone &&\n            ((!this._activeElement && !this._defaultFocusElement) || this._activeElement === child)\n          ) {\n            this._defaultFocusElement = child;\n            if (child.getAttribute(TABINDEX) !== '0') {\n              child.setAttribute(TABINDEX, '0');\n            }\n          } else if (child.getAttribute(TABINDEX) !== '-1') {\n            child.setAttribute(TABINDEX, '-1');\n          }\n        } else if (child.tagName === 'svg' && child.getAttribute('focusable') !== 'false') {\n          // Disgusting IE hack. Sad face.\n          child.setAttribute('focusable', 'false');\n        }\n      } else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true') {\n        if (\n          !this._isInnerZone &&\n          ((!this._activeElement && !this._defaultFocusElement) || this._activeElement === child)\n        ) {\n          this._defaultFocusElement = child;\n          if (child.getAttribute(TABINDEX) !== '0') {\n            child.setAttribute(TABINDEX, '0');\n          }\n        } else if (child.getAttribute(TABINDEX) !== '-1') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n      }\n\n      this._updateTabIndexes(child);\n    }\n  }\n\n  private _isContentEditableElement(element: HTMLElement): boolean {\n    return element && element.getAttribute('contenteditable') === 'true';\n  }\n\n  private _isElementInput(element: HTMLElement): boolean {\n    if (\n      element &&\n      element.tagName &&\n      (element.tagName.toLowerCase() === 'input' || element.tagName.toLowerCase() === 'textarea')\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  private _shouldInputLoseFocus(element: HTMLInputElement, isForward?: boolean): boolean {\n    // If a tab was used, we want to focus on the next element.\n    if (\n      !this._processingTabKey &&\n      element &&\n      element.type &&\n      ALLOWED_INPUT_TYPES.indexOf(element.type.toLowerCase()) > -1\n    ) {\n      const selectionStart = element.selectionStart;\n      const selectionEnd = element.selectionEnd;\n      const isRangeSelected = selectionStart !== selectionEnd;\n      const inputValue = element.value;\n      const isReadonly = element.readOnly;\n\n      // We shouldn't lose focus in the following cases:\n      // 1. There is range selected.\n      // 2. When selection start is larger than 0 and it is backward and not readOnly.\n      // 3. when selection start is not the end of length, it is forward and not readOnly.\n      // 4. We press any of the arrow keys when our handleTabKey isn't none or undefined (only losing focus if we hit\n      // tab) and if shouldInputLoseFocusOnArrowKey is defined, if scenario prefers to not loose the focus which is\n      // determined by calling the callback shouldInputLoseFocusOnArrowKey\n      if (\n        isRangeSelected ||\n        (selectionStart! > 0 && !isForward && !isReadonly) ||\n        (selectionStart !== inputValue.length && isForward && !isReadonly) ||\n        (!!this.props.handleTabKey &&\n          !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element)))\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private _shouldWrapFocus(\n    element: HTMLElement,\n    noWrapDataAttribute: 'data-no-vertical-wrap' | 'data-no-horizontal-wrap',\n  ): boolean {\n    return this.props.checkForNoWrap ? shouldWrapFocus(element, noWrapDataAttribute) : true;\n  }\n\n  /**\n   * Returns true if the element is a descendant of the FocusZone through a React portal.\n   */\n  private _portalContainsElement(element: HTMLElement): boolean {\n    return element && !!this._root.current && portalContainsElement(element, this._root.current);\n  }\n\n  private _getDocument(): Document {\n    return getDocument(this._root.current)!;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}