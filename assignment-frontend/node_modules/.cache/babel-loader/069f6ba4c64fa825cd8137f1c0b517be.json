{"ast":null,"code":"import { MAX_COLOR_ALPHA } from './consts';\n/**\n * @internal\n * Get a CSS color string from some color components.\n * If `a` is specified and not 100, returns an `rgba()` string.\n * Otherwise returns `hex` prefixed with #.\n */\n\nexport function _rgbaOrHexString(r, g, b, a, hex) {\n  return a === MAX_COLOR_ALPHA || typeof a !== 'number' ? \"#\" + hex : \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a / MAX_COLOR_ALPHA + \")\";\n}","map":{"version":3,"sources":["utilities/color/_rgbaOrHexString.ts"],"names":[],"mappings":"AAAA,SAAS,eAAT,QAAgC,UAAhC;AAEA;;;;;AAKG;;AACH,OAAM,SAAU,gBAAV,CAA2B,CAA3B,EAAsC,CAAtC,EAAiD,CAAjD,EAA4D,CAA5D,EAAmF,GAAnF,EAA8F;AAClG,SAAO,CAAC,KAAK,eAAN,IAAyB,OAAO,CAAP,KAAa,QAAtC,GAAiD,MAAI,GAArD,GAA6D,UAAQ,CAAR,GAAS,IAAT,GAAc,CAAd,GAAe,IAAf,GAAoB,CAApB,GAAqB,IAArB,GAA0B,CAAC,GAAG,eAA9B,GAA6C,GAAjH;AACD","sourcesContent":["import { MAX_COLOR_ALPHA } from './consts';\n\n/**\n * @internal\n * Get a CSS color string from some color components.\n * If `a` is specified and not 100, returns an `rgba()` string.\n * Otherwise returns `hex` prefixed with #.\n */\nexport function _rgbaOrHexString(r: number, g: number, b: number, a: number | undefined, hex: string): string {\n  return a === MAX_COLOR_ALPHA || typeof a !== 'number' ? `#${hex}` : `rgba(${r}, ${g}, ${b}, ${a / MAX_COLOR_ALPHA})`;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}