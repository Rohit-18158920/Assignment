{"ast":null,"code":"/**\n * Functions used by Stack components to simplify style-related computations\n */\n// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.\nvar _getThemedSpacing = function (space, theme) {\n  if (theme.spacing.hasOwnProperty(space)) {\n    return theme.spacing[space];\n  }\n\n  return space;\n}; // Helper function that takes a gap as a string and converts it into a { value, unit } representation.\n\n\nvar _getValueUnitGap = function (gap) {\n  var numericalPart = parseFloat(gap);\n  var numericalValue = isNaN(numericalPart) ? 0 : numericalPart;\n  var numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();\n  var unitPart = gap.substring(numericalString.toString().length);\n  return {\n    value: numericalValue,\n    unit: unitPart || 'px'\n  };\n};\n/**\n * Takes in a gap size in either a CSS-style format (e.g. 10 or \"10px\")\n *  or a key of a themed spacing value (e.g. \"s1\").\n * Returns the separate numerical value of the padding (e.g. 10)\n *  and the CSS unit (e.g. \"px\").\n */\n\n\nexport var parseGap = function (gap, theme) {\n  if (gap === undefined || gap === '') {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px'\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px'\n      }\n    };\n  }\n\n  if (typeof gap === 'number') {\n    return {\n      rowGap: {\n        value: gap,\n        unit: 'px'\n      },\n      columnGap: {\n        value: gap,\n        unit: 'px'\n      }\n    };\n  }\n\n  var splitGap = gap.split(' '); // If the array has more than two values, then return 0px.\n\n  if (splitGap.length > 2) {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px'\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px'\n      }\n    };\n  } // If the array has two values, then parse each one.\n\n\n  if (splitGap.length === 2) {\n    return {\n      rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),\n      columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme))\n    };\n  } // Else, parse the numerical value and pass it as both the vertical and horizontal gap.\n\n\n  var calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));\n\n  return {\n    rowGap: calculatedGap,\n    columnGap: calculatedGap\n  };\n};\n/**\n * Takes in a padding in a CSS-style format (e.g. 10, \"10px\", \"10px 10px\", etc.)\n *  where the separate padding values can also be the key of a themed spacing value\n *  (e.g. \"s1 m\", \"10px l1 20px l2\", etc.).\n * Returns a CSS-style padding.\n */\n\nexport var parsePadding = function (padding, theme) {\n  if (padding === undefined || typeof padding === 'number' || padding === '') {\n    return padding;\n  }\n\n  var paddingValues = padding.split(' ');\n\n  if (paddingValues.length < 2) {\n    return _getThemedSpacing(padding, theme);\n  }\n\n  return paddingValues.reduce(function (padding1, padding2) {\n    return _getThemedSpacing(padding1, theme) + ' ' + _getThemedSpacing(padding2, theme);\n  });\n};","map":{"version":3,"sources":["components/Stack/StackUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Functions used by Stack components to simplify style-related computations\n */\n\nimport { ITheme } from '../../Styling';\nimport { IStackProps } from './Stack.types';\n\n// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.\nconst _getThemedSpacing = (space: string, theme: ITheme): string => {\n  if (theme.spacing.hasOwnProperty(space)) {\n    return theme.spacing[space as keyof typeof theme.spacing];\n  }\n  return space;\n};\n\n// Helper function that takes a gap as a string and converts it into a { value, unit } representation.\nconst _getValueUnitGap = (gap: string): { value: number; unit: string } => {\n  const numericalPart = parseFloat(gap);\n  const numericalValue = isNaN(numericalPart) ? 0 : numericalPart;\n  const numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();\n\n  const unitPart = gap.substring(numericalString.toString().length);\n\n  return {\n    value: numericalValue,\n    unit: unitPart || 'px',\n  };\n};\n\n/**\n * Takes in a gap size in either a CSS-style format (e.g. 10 or \"10px\")\n *  or a key of a themed spacing value (e.g. \"s1\").\n * Returns the separate numerical value of the padding (e.g. 10)\n *  and the CSS unit (e.g. \"px\").\n */\nexport const parseGap = (\n  gap: IStackProps['gap'],\n  theme: ITheme,\n): { rowGap: { value: number; unit: string }; columnGap: { value: number; unit: string } } => {\n  if (gap === undefined || gap === '') {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  if (typeof gap === 'number') {\n    return {\n      rowGap: {\n        value: gap,\n        unit: 'px',\n      },\n      columnGap: {\n        value: gap,\n        unit: 'px',\n      },\n    };\n  }\n\n  const splitGap = gap.split(' ');\n\n  // If the array has more than two values, then return 0px.\n  if (splitGap.length > 2) {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  // If the array has two values, then parse each one.\n  if (splitGap.length === 2) {\n    return {\n      rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),\n      columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme)),\n    };\n  }\n\n  // Else, parse the numerical value and pass it as both the vertical and horizontal gap.\n  const calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));\n\n  return {\n    rowGap: calculatedGap,\n    columnGap: calculatedGap,\n  };\n};\n\n/**\n * Takes in a padding in a CSS-style format (e.g. 10, \"10px\", \"10px 10px\", etc.)\n *  where the separate padding values can also be the key of a themed spacing value\n *  (e.g. \"s1 m\", \"10px l1 20px l2\", etc.).\n * Returns a CSS-style padding.\n */\nexport const parsePadding = (padding: number | string | undefined, theme: ITheme): number | string | undefined => {\n  if (padding === undefined || typeof padding === 'number' || padding === '') {\n    return padding;\n  }\n\n  const paddingValues = padding.split(' ');\n  if (paddingValues.length < 2) {\n    return _getThemedSpacing(padding, theme);\n  }\n\n  return paddingValues.reduce((padding1: string, padding2: string) => {\n    return _getThemedSpacing(padding1, theme) + ' ' + _getThemedSpacing(padding2, theme);\n  });\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}