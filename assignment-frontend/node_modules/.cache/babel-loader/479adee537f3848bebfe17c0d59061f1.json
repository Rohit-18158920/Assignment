{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, css, getRTL, initializeComponentRef, format } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport { addYears, setMonth, getYearStart, getYearEnd, getMonthStart, getMonthEnd, compareDatePart } from '../../utilities/dateMath/DateMath';\nimport { Icon } from '../../Icon';\nimport * as stylesImport from './Calendar.scss';\nimport { CalendarYear } from './CalendarYear';\nvar styles = stylesImport;\nvar MONTHS_PER_ROW = 4;\n\nvar CalendarMonth =\n/** @class */\nfunction (_super) {\n  __extends(CalendarMonth, _super);\n\n  function CalendarMonth(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._navigatedMonthRef = React.createRef();\n\n    _this._onCalendarYearRef = function (ref) {\n      _this._calendarYearRef = ref;\n    };\n\n    _this._onKeyDown = function (callback, ev) {\n      if (ev.which === KeyCodes.enter) {\n        callback();\n      }\n    };\n\n    _this._onSelectYear = function (selectedYear) {\n      _this._focusOnUpdate = true;\n      var _a = _this.props,\n          navigatedDate = _a.navigatedDate,\n          onNavigateDate = _a.onNavigateDate,\n          maxDate = _a.maxDate,\n          minDate = _a.minDate;\n      var navYear = navigatedDate.getFullYear();\n\n      if (navYear !== selectedYear) {\n        var newNavigationDate = new Date(navigatedDate.getTime());\n        newNavigationDate.setFullYear(selectedYear); // for min and max dates, adjust the new navigation date - perhaps this should be\n        // checked on the master navigation date handler (i.e. in Calendar)\n\n        if (maxDate && newNavigationDate > maxDate) {\n          newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());\n        } else if (minDate && newNavigationDate < minDate) {\n          newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());\n        }\n\n        onNavigateDate(newNavigationDate, true);\n      }\n\n      _this.setState({\n        isYearPickerVisible: false\n      });\n    };\n\n    _this._yearToString = function (year) {\n      var _a = _this.props,\n          navigatedDate = _a.navigatedDate,\n          dateTimeFormatter = _a.dateTimeFormatter;\n\n      if (dateTimeFormatter) {\n        // create a date based on the current nav date\n        var yearFormattingDate = new Date(navigatedDate.getTime());\n        yearFormattingDate.setFullYear(year);\n        return dateTimeFormatter.formatYear(yearFormattingDate);\n      }\n\n      return String(year);\n    };\n\n    _this._yearRangeToString = function (yearRange) {\n      return _this._yearToString(yearRange.fromYear) + \" - \" + _this._yearToString(yearRange.toYear);\n    };\n\n    _this._yearRangeToNextDecadeLabel = function (yearRange) {\n      var strings = _this.props.strings;\n      return strings.nextYearRangeAriaLabel ? strings.nextYearRangeAriaLabel + \" \" + _this._yearRangeToString(yearRange) : '';\n    };\n\n    _this._yearRangeToPrevDecadeLabel = function (yearRange) {\n      var strings = _this.props.strings;\n      return strings.prevYearRangeAriaLabel ? strings.prevYearRangeAriaLabel + \" \" + _this._yearRangeToString(yearRange) : '';\n    };\n\n    _this._onRenderYear = function (year) {\n      return _this._yearToString(year);\n    };\n\n    _this._onSelectNextYear = function () {\n      var _a = _this.props,\n          navigatedDate = _a.navigatedDate,\n          onNavigateDate = _a.onNavigateDate;\n      onNavigateDate(addYears(navigatedDate, 1), false);\n    };\n\n    _this._onSelectNextYearKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onSelectNextYear, ev);\n      }\n    };\n\n    _this._onSelectPrevYear = function () {\n      var _a = _this.props,\n          navigatedDate = _a.navigatedDate,\n          onNavigateDate = _a.onNavigateDate;\n      onNavigateDate(addYears(navigatedDate, -1), false);\n    };\n\n    _this._onSelectPrevYearKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onSelectPrevYear, ev);\n      }\n    };\n\n    _this._onSelectMonthKeyDown = function (index) {\n      return function (ev) {\n        return _this._onKeyDown(function () {\n          return _this._onSelectMonth(index);\n        }, ev);\n      };\n    };\n\n    _this._onSelectMonth = function (newMonth) {\n      var _a = _this.props,\n          navigatedDate = _a.navigatedDate,\n          onNavigateDate = _a.onNavigateDate,\n          onHeaderSelect = _a.onHeaderSelect; // If header is clickable the calendars are overlayed, switch back to day picker when month is clicked\n\n      if (onHeaderSelect) {\n        onHeaderSelect(true);\n      }\n\n      onNavigateDate(setMonth(navigatedDate, newMonth), true);\n    };\n\n    _this._onHeaderSelect = function () {\n      var _a = _this.props,\n          onHeaderSelect = _a.onHeaderSelect,\n          yearPickerHidden = _a.yearPickerHidden;\n\n      if (!yearPickerHidden) {\n        _this._focusOnUpdate = true;\n\n        _this.setState({\n          isYearPickerVisible: true\n        });\n      } else if (onHeaderSelect) {\n        onHeaderSelect(true);\n      }\n    };\n\n    _this._onYearPickerHeaderSelect = function (focus) {\n      _this._focusOnUpdate = focus;\n\n      _this.setState({\n        isYearPickerVisible: false\n      });\n    };\n\n    _this._onHeaderKeyDown = function (ev) {\n      if (_this._onHeaderSelect && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n        _this._onHeaderSelect();\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._selectMonthCallbacks = [];\n    props.strings.shortMonths.forEach(function (month, index) {\n      _this._selectMonthCallbacks[index] = _this._onSelectMonth.bind(_this, index);\n    });\n    _this._isCurrentMonth = _this._isCurrentMonth.bind(_this);\n    _this._onSelectNextYear = _this._onSelectNextYear.bind(_this);\n    _this._onSelectPrevYear = _this._onSelectPrevYear.bind(_this);\n    _this._onSelectMonth = _this._onSelectMonth.bind(_this);\n    _this.state = {\n      isYearPickerVisible: false\n    };\n    return _this;\n  }\n\n  CalendarMonth.prototype.componentDidUpdate = function () {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  };\n\n  CalendarMonth.prototype.render = function () {\n    var _a, _b;\n\n    var _this = this;\n\n    var _c = this.props,\n        navigatedDate = _c.navigatedDate,\n        selectedDate = _c.selectedDate,\n        strings = _c.strings,\n        today = _c.today,\n        highlightCurrentMonth = _c.highlightCurrentMonth,\n        highlightSelectedMonth = _c.highlightSelectedMonth,\n        navigationIcons = _c.navigationIcons,\n        dateTimeFormatter = _c.dateTimeFormatter,\n        minDate = _c.minDate,\n        maxDate = _c.maxDate,\n        yearPickerHidden = _c.yearPickerHidden;\n\n    if (this.state.isYearPickerVisible) {\n      // default the year picker to the current navigated date\n      var currentSelectedDate = navigatedDate ? navigatedDate.getFullYear() : undefined;\n      return React.createElement(CalendarYear, {\n        key: 'calendarYear_' + (currentSelectedDate && currentSelectedDate.toString()),\n        minYear: minDate ? minDate.getFullYear() : undefined,\n        maxYear: maxDate ? maxDate.getFullYear() : undefined,\n        onSelectYear: this._onSelectYear,\n        navigationIcons: navigationIcons,\n        onHeaderSelect: this._onYearPickerHeaderSelect,\n        selectedYear: currentSelectedDate,\n        onRenderYear: this._onRenderYear,\n        strings: {\n          rangeAriaLabel: this._yearRangeToString,\n          prevRangeAriaLabel: this._yearRangeToPrevDecadeLabel,\n          nextRangeAriaLabel: this._yearRangeToNextDecadeLabel,\n          headerAriaLabelFormatString: strings.yearPickerHeaderAriaLabel\n        },\n        ref: this._onCalendarYearRef\n      });\n    }\n\n    var rowIndexes = [];\n\n    for (var i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++) {\n      rowIndexes.push(i);\n    }\n\n    var leftNavigationIcon = navigationIcons.leftNavigation;\n    var rightNavigationIcon = navigationIcons.rightNavigation; // determine if previous/next years are in bounds\n\n    var isPrevYearInBounds = minDate ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0 : true;\n    var isNextYearInBounds = maxDate ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0 : true;\n    var yearString = dateTimeFormatter.formatYear(navigatedDate);\n    var headerAriaLabel = strings.monthPickerHeaderAriaLabel ? format(strings.monthPickerHeaderAriaLabel, yearString) : yearString;\n    return React.createElement(\"div\", {\n      className: css('ms-DatePicker-monthPicker', styles.monthPicker)\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-header', styles.header)\n    }, this.props.onHeaderSelect || !yearPickerHidden ? React.createElement(\"div\", {\n      className: css('ms-DatePicker-currentYear js-showYearPicker', styles.currentYear, styles.headerToggleView),\n      onClick: this._onHeaderSelect,\n      onKeyDown: this._onHeaderKeyDown,\n      \"aria-label\": headerAriaLabel,\n      role: \"button\",\n      \"aria-atomic\": true,\n      \"aria-live\": \"polite\",\n      tabIndex: 0\n    }, dateTimeFormatter.formatYear(navigatedDate)) : React.createElement(\"div\", {\n      className: css('ms-DatePicker-currentYear js-showYearPicker', styles.currentYear)\n    }, dateTimeFormatter.formatYear(navigatedDate)), React.createElement(\"div\", {\n      className: css('ms-DatePicker-yearComponents', styles.yearComponents)\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-navContainer', styles.navContainer)\n    }, React.createElement(\"button\", {\n      className: css('ms-DatePicker-prevYear js-prevYear', styles.prevYear, (_a = {}, _a['ms-DatePicker-prevYear--disabled ' + styles.prevYearIsDisabled] = !isPrevYearInBounds, _a)),\n      disabled: !isPrevYearInBounds,\n      onClick: isPrevYearInBounds ? this._onSelectPrevYear : undefined,\n      onKeyDown: isPrevYearInBounds ? this._onSelectPrevYearKeyDown : undefined,\n      title: strings.prevYearAriaLabel ? strings.prevYearAriaLabel + ' ' + dateTimeFormatter.formatYear(addYears(navigatedDate, -1)) : undefined,\n      role: \"button\",\n      type: \"button\"\n    }, React.createElement(Icon, {\n      iconName: getRTL() ? rightNavigationIcon : leftNavigationIcon\n    })), React.createElement(\"button\", {\n      className: css('ms-DatePicker-nextYear js-nextYear', styles.nextYear, (_b = {}, _b['ms-DatePicker-nextYear--disabled ' + styles.nextYearIsDisabled] = !isNextYearInBounds, _b)),\n      disabled: !isNextYearInBounds,\n      onClick: isNextYearInBounds ? this._onSelectNextYear : undefined,\n      onKeyDown: isNextYearInBounds ? this._onSelectNextYearKeyDown : undefined,\n      title: strings.nextYearAriaLabel ? strings.nextYearAriaLabel + ' ' + dateTimeFormatter.formatYear(addYears(navigatedDate, 1)) : undefined,\n      role: \"button\",\n      type: \"button\"\n    }, React.createElement(Icon, {\n      iconName: getRTL() ? leftNavigationIcon : rightNavigationIcon\n    }))))), React.createElement(FocusZone, null, React.createElement(\"div\", {\n      className: css('ms-DatePicker-optionGrid', styles.optionGrid),\n      role: \"grid\",\n      \"aria-readonly\": \"true\"\n    }, rowIndexes.map(function (rowNum) {\n      var monthsForRow = strings.shortMonths.slice(rowNum * MONTHS_PER_ROW, (rowNum + 1) * MONTHS_PER_ROW);\n      return React.createElement(\"div\", {\n        key: 'monthRow_' + rowNum,\n        role: \"row\"\n      }, monthsForRow.map(function (month, index) {\n        var _a;\n\n        var monthIndex = rowNum * MONTHS_PER_ROW + index;\n        var indexedMonth = setMonth(navigatedDate, monthIndex);\n\n        var isCurrentMonth = _this._isCurrentMonth(monthIndex, navigatedDate.getFullYear(), today);\n\n        var isNavigatedMonth = navigatedDate.getMonth() === monthIndex;\n        var isSelectedMonth = selectedDate.getMonth() === monthIndex;\n        var isSelectedYear = selectedDate.getFullYear() === navigatedDate.getFullYear();\n        var isInBounds = (minDate ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1 : true) && (maxDate ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1 : true);\n        return React.createElement(\"button\", {\n          role: 'gridcell',\n          className: css('ms-DatePicker-monthOption', styles.monthOption, (_a = {}, _a['ms-DatePicker-day--today ' + styles.monthIsCurrentMonth] = highlightCurrentMonth && isCurrentMonth, _a['ms-DatePicker-day--highlighted ' + styles.monthIsHighlighted] = (highlightCurrentMonth || highlightSelectedMonth) && isSelectedMonth && isSelectedYear, _a['ms-DatePicker-monthOption--disabled ' + styles.monthOptionIsDisabled] = !isInBounds, _a)),\n          disabled: !isInBounds,\n          key: monthIndex,\n          onClick: isInBounds ? _this._selectMonthCallbacks[monthIndex] : undefined,\n          onKeyDown: isInBounds ? _this._onSelectMonthKeyDown(monthIndex) : undefined,\n          \"aria-label\": dateTimeFormatter.formatMonthYear(indexedMonth, strings),\n          \"aria-selected\": isNavigatedMonth,\n          \"data-is-focusable\": isInBounds ? true : undefined,\n          ref: isNavigatedMonth ? _this._navigatedMonthRef : undefined,\n          type: \"button\"\n        }, month);\n      }));\n    }))));\n  };\n\n  CalendarMonth.prototype.focus = function () {\n    if (this._calendarYearRef) {\n      this._calendarYearRef.focus();\n    } else if (this._navigatedMonthRef.current) {\n      this._navigatedMonthRef.current.tabIndex = 0;\n\n      this._navigatedMonthRef.current.focus();\n    }\n  };\n\n  CalendarMonth.prototype._isCurrentMonth = function (month, year, today) {\n    return today.getFullYear() === year && today.getMonth() === month;\n  };\n\n  return CalendarMonth;\n}(React.Component);\n\nexport { CalendarMonth };","map":{"version":3,"sources":["components/Calendar/CalendarMonth.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { KeyCodes, css, getRTL, IRefObject, initializeComponentRef, format } from '../../Utilities';\nimport { ICalendarStrings, ICalendarIconStrings, ICalendarFormatDateCallbacks } from './Calendar.types';\nimport { FocusZone } from '../../FocusZone';\nimport {\n  addYears,\n  setMonth,\n  getYearStart,\n  getYearEnd,\n  getMonthStart,\n  getMonthEnd,\n  compareDatePart,\n} from '../../utilities/dateMath/DateMath';\nimport { Icon } from '../../Icon';\nimport * as stylesImport from './Calendar.scss';\nimport { CalendarYear, ICalendarYearRange } from './CalendarYear';\nconst styles: any = stylesImport;\nconst MONTHS_PER_ROW: number = 4;\n\nexport interface ICalendarMonth {\n  focus(): void;\n}\n\nexport interface ICalendarMonthProps extends React.ClassAttributes<CalendarMonth> {\n  componentRef?: IRefObject<ICalendarMonth>;\n  navigatedDate: Date;\n  selectedDate: Date;\n  strings: ICalendarStrings;\n  onNavigateDate: (date: Date, focusOnNavigatedDay: boolean) => void;\n  today?: Date;\n  highlightCurrentMonth: boolean;\n  highlightSelectedMonth: boolean;\n  onHeaderSelect?: (focus: boolean) => void;\n  navigationIcons: ICalendarIconStrings;\n  dateTimeFormatter: ICalendarFormatDateCallbacks;\n  minDate?: Date;\n  maxDate?: Date;\n  yearPickerHidden?: boolean;\n}\n\nexport interface ICalendarMonthState {\n  /** State used to show/hide month picker */\n  isYearPickerVisible?: boolean;\n}\n\nexport class CalendarMonth extends React.Component<ICalendarMonthProps, ICalendarMonthState> {\n  /**\n   * @deprecated unused, prefer 'ref' and 'componentRef' of ICalendarMonthProps.\n   */\n  public refs: {\n    [key: string]: React.ReactInstance;\n    navigatedMonth: HTMLElement;\n  };\n\n  private _selectMonthCallbacks: (() => void)[];\n  private _calendarYearRef: CalendarYear;\n  private _navigatedMonthRef: React.RefObject<HTMLButtonElement> = React.createRef<HTMLButtonElement>();\n  private _focusOnUpdate: boolean;\n\n  public constructor(props: ICalendarMonthProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._selectMonthCallbacks = [];\n    props.strings.shortMonths.forEach((month, index) => {\n      this._selectMonthCallbacks[index] = this._onSelectMonth.bind(this, index);\n    });\n\n    this._isCurrentMonth = this._isCurrentMonth.bind(this);\n    this._onSelectNextYear = this._onSelectNextYear.bind(this);\n    this._onSelectPrevYear = this._onSelectPrevYear.bind(this);\n    this._onSelectMonth = this._onSelectMonth.bind(this);\n\n    this.state = { isYearPickerVisible: false };\n  }\n\n  public componentDidUpdate(): void {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      navigatedDate,\n      selectedDate,\n      strings,\n      today,\n      highlightCurrentMonth,\n      highlightSelectedMonth,\n      navigationIcons,\n      dateTimeFormatter,\n      minDate,\n      maxDate,\n      yearPickerHidden,\n    } = this.props;\n\n    if (this.state.isYearPickerVisible) {\n      // default the year picker to the current navigated date\n      const currentSelectedDate = navigatedDate ? navigatedDate.getFullYear() : undefined;\n      return (\n        <CalendarYear\n          key={'calendarYear_' + (currentSelectedDate && currentSelectedDate.toString())}\n          minYear={minDate ? minDate.getFullYear() : undefined}\n          maxYear={maxDate ? maxDate.getFullYear() : undefined}\n          onSelectYear={this._onSelectYear}\n          navigationIcons={navigationIcons}\n          onHeaderSelect={this._onYearPickerHeaderSelect}\n          selectedYear={currentSelectedDate}\n          onRenderYear={this._onRenderYear}\n          strings={{\n            rangeAriaLabel: this._yearRangeToString,\n            prevRangeAriaLabel: this._yearRangeToPrevDecadeLabel,\n            nextRangeAriaLabel: this._yearRangeToNextDecadeLabel,\n            headerAriaLabelFormatString: strings.yearPickerHeaderAriaLabel,\n          }}\n          ref={this._onCalendarYearRef}\n        />\n      );\n    }\n\n    const rowIndexes = [];\n    for (let i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++) {\n      rowIndexes.push(i);\n    }\n\n    const leftNavigationIcon = navigationIcons.leftNavigation;\n    const rightNavigationIcon = navigationIcons.rightNavigation;\n\n    // determine if previous/next years are in bounds\n    const isPrevYearInBounds = minDate ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0 : true;\n    const isNextYearInBounds = maxDate ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0 : true;\n\n    const yearString = dateTimeFormatter.formatYear(navigatedDate);\n    const headerAriaLabel = strings.monthPickerHeaderAriaLabel\n      ? format(strings.monthPickerHeaderAriaLabel, yearString)\n      : yearString;\n\n    return (\n      <div className={css('ms-DatePicker-monthPicker', styles.monthPicker)}>\n        <div className={css('ms-DatePicker-header', styles.header)}>\n          {this.props.onHeaderSelect || !yearPickerHidden ? (\n            <div\n              className={css(\n                'ms-DatePicker-currentYear js-showYearPicker',\n                styles.currentYear,\n                styles.headerToggleView,\n              )}\n              onClick={this._onHeaderSelect}\n              onKeyDown={this._onHeaderKeyDown}\n              aria-label={headerAriaLabel}\n              role=\"button\"\n              aria-atomic={true}\n              aria-live=\"polite\"\n              tabIndex={0}\n            >\n              {dateTimeFormatter.formatYear(navigatedDate)}\n            </div>\n          ) : (\n            <div className={css('ms-DatePicker-currentYear js-showYearPicker', styles.currentYear)}>\n              {dateTimeFormatter.formatYear(navigatedDate)}\n            </div>\n          )}\n          <div className={css('ms-DatePicker-yearComponents', styles.yearComponents)}>\n            <div className={css('ms-DatePicker-navContainer', styles.navContainer)}>\n              <button\n                className={css('ms-DatePicker-prevYear js-prevYear', styles.prevYear, {\n                  ['ms-DatePicker-prevYear--disabled ' + styles.prevYearIsDisabled]: !isPrevYearInBounds,\n                })}\n                disabled={!isPrevYearInBounds}\n                onClick={isPrevYearInBounds ? this._onSelectPrevYear : undefined}\n                onKeyDown={isPrevYearInBounds ? this._onSelectPrevYearKeyDown : undefined}\n                title={\n                  strings.prevYearAriaLabel\n                    ? strings.prevYearAriaLabel + ' ' + dateTimeFormatter.formatYear(addYears(navigatedDate, -1))\n                    : undefined\n                }\n                role=\"button\"\n                type=\"button\"\n              >\n                <Icon iconName={getRTL() ? rightNavigationIcon : leftNavigationIcon} />\n              </button>\n              <button\n                className={css('ms-DatePicker-nextYear js-nextYear', styles.nextYear, {\n                  ['ms-DatePicker-nextYear--disabled ' + styles.nextYearIsDisabled]: !isNextYearInBounds,\n                })}\n                disabled={!isNextYearInBounds}\n                onClick={isNextYearInBounds ? this._onSelectNextYear : undefined}\n                onKeyDown={isNextYearInBounds ? this._onSelectNextYearKeyDown : undefined}\n                title={\n                  strings.nextYearAriaLabel\n                    ? strings.nextYearAriaLabel + ' ' + dateTimeFormatter.formatYear(addYears(navigatedDate, 1))\n                    : undefined\n                }\n                role=\"button\"\n                type=\"button\"\n              >\n                <Icon iconName={getRTL() ? leftNavigationIcon : rightNavigationIcon} />\n              </button>\n            </div>\n          </div>\n        </div>\n        <FocusZone>\n          <div className={css('ms-DatePicker-optionGrid', styles.optionGrid)} role=\"grid\" aria-readonly=\"true\">\n            {rowIndexes.map((rowNum: number) => {\n              const monthsForRow = strings.shortMonths.slice(rowNum * MONTHS_PER_ROW, (rowNum + 1) * MONTHS_PER_ROW);\n              return (\n                <div key={'monthRow_' + rowNum} role=\"row\">\n                  {monthsForRow.map((month: string, index: number) => {\n                    const monthIndex = rowNum * MONTHS_PER_ROW + index;\n                    const indexedMonth = setMonth(navigatedDate, monthIndex);\n                    const isCurrentMonth = this._isCurrentMonth(monthIndex, navigatedDate.getFullYear(), today!);\n                    const isNavigatedMonth = navigatedDate.getMonth() === monthIndex;\n                    const isSelectedMonth = selectedDate.getMonth() === monthIndex;\n                    const isSelectedYear = selectedDate.getFullYear() === navigatedDate.getFullYear();\n                    const isInBounds =\n                      (minDate ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1 : true) &&\n                      (maxDate ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1 : true);\n\n                    return (\n                      <button\n                        role={'gridcell'}\n                        className={css('ms-DatePicker-monthOption', styles.monthOption, {\n                          ['ms-DatePicker-day--today ' + styles.monthIsCurrentMonth]:\n                            highlightCurrentMonth && isCurrentMonth!,\n                          ['ms-DatePicker-day--highlighted ' + styles.monthIsHighlighted]:\n                            (highlightCurrentMonth || highlightSelectedMonth) && isSelectedMonth && isSelectedYear,\n                          ['ms-DatePicker-monthOption--disabled ' + styles.monthOptionIsDisabled]: !isInBounds,\n                        })}\n                        disabled={!isInBounds}\n                        key={monthIndex}\n                        onClick={isInBounds ? this._selectMonthCallbacks[monthIndex] : undefined}\n                        onKeyDown={isInBounds ? this._onSelectMonthKeyDown(monthIndex) : undefined}\n                        aria-label={dateTimeFormatter.formatMonthYear(indexedMonth, strings)}\n                        aria-selected={isNavigatedMonth}\n                        data-is-focusable={isInBounds ? true : undefined}\n                        ref={isNavigatedMonth ? this._navigatedMonthRef : undefined}\n                        type=\"button\"\n                      >\n                        {month}\n                      </button>\n                    );\n                  })}\n                </div>\n              );\n            })}\n          </div>\n        </FocusZone>\n      </div>\n    );\n  }\n\n  public focus() {\n    if (this._calendarYearRef) {\n      this._calendarYearRef.focus();\n    } else if (this._navigatedMonthRef.current) {\n      this._navigatedMonthRef.current.tabIndex = 0;\n      this._navigatedMonthRef.current.focus();\n    }\n  }\n\n  private _onCalendarYearRef = (ref: CalendarYear) => {\n    this._calendarYearRef = ref;\n  };\n\n  private _isCurrentMonth(month: number, year: number, today: Date): boolean {\n    return today.getFullYear() === year && today.getMonth() === month;\n  }\n\n  private _onKeyDown = (callback: () => void, ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.enter) {\n      callback();\n    }\n  };\n\n  private _onSelectYear = (selectedYear: number) => {\n    this._focusOnUpdate = true;\n    const { navigatedDate, onNavigateDate, maxDate, minDate } = this.props;\n    const navYear = navigatedDate.getFullYear();\n    if (navYear !== selectedYear) {\n      let newNavigationDate = new Date(navigatedDate.getTime());\n      newNavigationDate.setFullYear(selectedYear);\n      // for min and max dates, adjust the new navigation date - perhaps this should be\n      // checked on the master navigation date handler (i.e. in Calendar)\n      if (maxDate && newNavigationDate > maxDate) {\n        newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());\n      } else if (minDate && newNavigationDate < minDate) {\n        newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());\n      }\n      onNavigateDate(newNavigationDate, true);\n    }\n    this.setState({ isYearPickerVisible: false });\n  };\n\n  private _yearToString = (year: number) => {\n    const { navigatedDate, dateTimeFormatter } = this.props;\n    if (dateTimeFormatter) {\n      // create a date based on the current nav date\n      const yearFormattingDate = new Date(navigatedDate.getTime());\n      yearFormattingDate.setFullYear(year);\n      return dateTimeFormatter.formatYear(yearFormattingDate);\n    }\n    return String(year);\n  };\n\n  private _yearRangeToString = (yearRange: ICalendarYearRange) => {\n    return `${this._yearToString(yearRange.fromYear)} - ${this._yearToString(yearRange.toYear)}`;\n  };\n\n  private _yearRangeToNextDecadeLabel = (yearRange: ICalendarYearRange) => {\n    const { strings } = this.props;\n    return strings.nextYearRangeAriaLabel\n      ? `${strings.nextYearRangeAriaLabel} ${this._yearRangeToString(yearRange)}`\n      : '';\n  };\n\n  private _yearRangeToPrevDecadeLabel = (yearRange: ICalendarYearRange) => {\n    const { strings } = this.props;\n    return strings.prevYearRangeAriaLabel\n      ? `${strings.prevYearRangeAriaLabel} ${this._yearRangeToString(yearRange)}`\n      : '';\n  };\n\n  private _onRenderYear = (year: number) => {\n    return this._yearToString(year);\n  };\n\n  private _onSelectNextYear = (): void => {\n    const { navigatedDate, onNavigateDate } = this.props;\n    onNavigateDate(addYears(navigatedDate, 1), false);\n  };\n\n  private _onSelectNextYearKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.enter) {\n      this._onKeyDown(this._onSelectNextYear, ev);\n    }\n  };\n\n  private _onSelectPrevYear = (): void => {\n    const { navigatedDate, onNavigateDate } = this.props;\n    onNavigateDate(addYears(navigatedDate, -1), false);\n  };\n\n  private _onSelectPrevYearKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.enter) {\n      this._onKeyDown(this._onSelectPrevYear, ev);\n    }\n  };\n\n  private _onSelectMonthKeyDown = (index: number): ((ev: React.KeyboardEvent<HTMLElement>) => void) => {\n    return (ev: React.KeyboardEvent<HTMLElement>) => this._onKeyDown(() => this._onSelectMonth(index), ev);\n  };\n\n  private _onSelectMonth = (newMonth: number): void => {\n    const { navigatedDate, onNavigateDate, onHeaderSelect } = this.props;\n\n    // If header is clickable the calendars are overlayed, switch back to day picker when month is clicked\n    if (onHeaderSelect) {\n      onHeaderSelect(true);\n    }\n    onNavigateDate(setMonth(navigatedDate, newMonth), true);\n  };\n\n  private _onHeaderSelect = (): void => {\n    const { onHeaderSelect, yearPickerHidden } = this.props;\n    if (!yearPickerHidden) {\n      this._focusOnUpdate = true;\n      this.setState({ isYearPickerVisible: true });\n    } else if (onHeaderSelect) {\n      onHeaderSelect(true);\n    }\n  };\n\n  private _onYearPickerHeaderSelect = (focus: boolean): void => {\n    this._focusOnUpdate = focus;\n    this.setState({ isYearPickerVisible: false });\n  };\n\n  private _onHeaderKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (this._onHeaderSelect && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n      this._onHeaderSelect();\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}