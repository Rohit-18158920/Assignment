{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\n\nvar DelayedRender =\n/** @class */\nfunction (_super) {\n  __extends(DelayedRender, _super);\n\n  function DelayedRender(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      isRendered: false\n    };\n    return _this;\n  }\n\n  DelayedRender.prototype.componentDidMount = function () {\n    var _this = this;\n\n    var delay = this.props.delay;\n    this._timeoutId = window.setTimeout(function () {\n      _this.setState({\n        isRendered: true\n      });\n    }, delay);\n  };\n\n  DelayedRender.prototype.componentWillUnmount = function () {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  };\n\n  DelayedRender.prototype.render = function () {\n    return this.state.isRendered ? React.Children.only(this.props.children) : null;\n  };\n\n  DelayedRender.defaultProps = {\n    delay: 0\n  };\n  return DelayedRender;\n}(React.Component);\n\nexport { DelayedRender };","map":{"version":3,"sources":["DelayedRender.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AA2BA;;;;;;;AAOG;;AACH,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;;AAOjC,WAAA,aAAA,CAAY,KAAZ,EAAsC;AAAtC,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADd;;AAEE,IAAA,KAAI,CAAC,KAAL,GAAa;AACX,MAAA,UAAU,EAAE;AADD,KAAb;;AAGD;;AAEM,EAAA,aAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACQ,QAAA,KAAA,GAAA,KAAA,KAAA,CAAA,KAAA;AACN,SAAK,UAAL,GAAkB,MAAM,CAAC,UAAP,CAAkB,YAAA;AAClC,MAAA,KAAI,CAAC,QAAL,CAAc;AACZ,QAAA,UAAU,EAAE;AADA,OAAd;AAGD,KAJiB,EAIf,KAJe,CAAlB;AAKD,GAPM;;AASA,EAAA,aAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,YAAA;AACE,QAAI,KAAK,UAAT,EAAqB;AACnB,MAAA,YAAY,CAAC,KAAK,UAAN,CAAZ;AACD;AACF,GAJM;;AAMA,EAAA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACE,WAAO,KAAK,KAAL,CAAW,UAAX,GAAyB,KAAK,CAAC,QAAN,CAAe,IAAf,CAAoB,KAAK,KAAL,CAAW,QAA/B,CAAzB,GAA+F,IAAtG;AACD,GAFM;;AA5BO,EAAA,aAAA,CAAA,YAAA,GAAe;AAC3B,IAAA,KAAK,EAAE;AADoB,GAAf;AA+BhB,SAAA,aAAA;AAAC,CAhCD,CAAmC,KAAK,CAAC,SAAzC,CAAA;;SAAa,a","sourcesContent":["import * as React from 'react';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// eslint-disable-next-line deprecation/deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}