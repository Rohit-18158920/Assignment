{"ast":null,"code":"import { concatStyleSets, HighContrastSelector, IconFontSizes, getInputFocusStyle } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nvar ARROW_BUTTON_WIDTH = 23;\nvar ARROW_BUTTON_ICON_SIZE = 8;\nvar DEFAULT_HEIGHT = 32;\nvar DEFAULT_MIN_WIDTH = 86;\nvar LABEL_MARGIN = 10;\n\nvar _getDisabledStyles = memoizeFunction(function (theme) {\n  var _a;\n\n  var semanticColors = theme.semanticColors;\n  var SpinButtonTextColorDisabled = semanticColors.disabledText;\n  var SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\n  return {\n    backgroundColor: SpinButtonBackgroundColorDisabled,\n    pointerEvents: 'none',\n    cursor: 'default',\n    color: SpinButtonTextColorDisabled,\n    selectors: (_a = {\n      ':after': {\n        borderColor: SpinButtonBackgroundColorDisabled\n      }\n    }, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  };\n});\n\nexport var getArrowButtonStyles = memoizeFunction(function (theme, isUpArrow, customSpecificArrowStyles) {\n  var _a, _b, _c;\n\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      effects = theme.effects; // TODO: after updating the semanticColor slots all this need to be reevaluated.\n\n  var ArrowButtonTextColor = palette.neutralSecondary;\n  var ArrowButtonTextColorHovered = semanticColors.buttonText;\n  var ArrowButtonTextColorPressed = semanticColors.buttonText;\n  var ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\n  var ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\n  var defaultArrowButtonStyles = {\n    root: {\n      outline: 'none',\n      display: 'block',\n      height: '50%',\n      width: ARROW_BUTTON_WIDTH,\n      padding: 0,\n      backgroundColor: 'transparent',\n      textAlign: 'center',\n      cursor: 'default',\n      color: ArrowButtonTextColor,\n      selectors: {\n        '&.ms-DownButton': {\n          borderRadius: \"0 0 \" + effects.roundedCorner2 + \" 0\"\n        },\n        '&.ms-UpButton': {\n          borderRadius: \"0 \" + effects.roundedCorner2 + \" 0 0\"\n        }\n      }\n    },\n    rootHovered: {\n      backgroundColor: ArrowButtonBackgroundHovered,\n      color: ArrowButtonTextColorHovered\n    },\n    rootChecked: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _a)\n    },\n    rootPressed: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _b)\n    },\n    rootDisabled: {\n      opacity: 0.5,\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        color: 'GrayText',\n        opacity: 1\n      }, _c)\n    },\n    icon: {\n      fontSize: ARROW_BUTTON_ICON_SIZE,\n      marginTop: 0,\n      marginRight: 0,\n      marginBottom: 0,\n      marginLeft: 0\n    }\n  }; // No specific styles needed as of now.\n\n  var defaultUpArrowButtonStyles = {};\n  var defaultDownArrowButtonStyles = {};\n  return concatStyleSets(defaultArrowButtonStyles, isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles, customSpecificArrowStyles);\n});\nexport var getStyles = memoizeFunction(function (theme, customStyles) {\n  var _a, _b;\n\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      fonts = theme.fonts;\n  var SpinButtonRootBorderColor = semanticColors.inputBorder;\n  var SpinButtonRootBackgroundColor = semanticColors.inputBackground;\n  var SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\n  var SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\n  var SpinButtonInputTextColor = semanticColors.inputText;\n  var SpinButtonInputTextColorSelected = palette.white;\n  var SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\n  var SpinButtonIconDisabledColor = semanticColors.disabledText;\n  var defaultStyles = {\n    root: [fonts.medium, {\n      outline: 'none',\n      width: '100%',\n      minWidth: DEFAULT_MIN_WIDTH\n    }],\n    labelWrapper: {\n      display: 'inline-flex',\n      alignItems: 'center'\n    },\n    labelWrapperStart: {\n      height: DEFAULT_HEIGHT,\n      float: 'left',\n      marginRight: LABEL_MARGIN\n    },\n    labelWrapperEnd: {\n      height: DEFAULT_HEIGHT,\n      float: 'right',\n      marginLeft: LABEL_MARGIN\n    },\n    labelWrapperTop: {\n      // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\n      // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\n      // the SpinButton is displayed with the label on top next to other form fields.\n      // Decrease the wrapper's effective height slightly to compensate.\n      marginBottom: -1\n    },\n    labelWrapperBottom: {},\n    icon: {\n      padding: '0 5px',\n      fontSize: IconFontSizes.large\n    },\n    iconDisabled: {\n      color: SpinButtonIconDisabledColor\n    },\n    label: {\n      pointerEvents: 'none',\n      // centering the label with the icon by forcing the exact same height as the icon.\n      lineHeight: IconFontSizes.large\n    },\n    labelDisabled: {},\n    spinButtonWrapper: {\n      display: 'flex',\n      position: 'relative',\n      boxSizing: 'border-box',\n      height: DEFAULT_HEIGHT,\n      minWidth: DEFAULT_MIN_WIDTH,\n      selectors: {\n        // setting border using pseudo-element here in order to prevent:\n        // input and chevron buttons to overlap border under certain resolutions\n        ':after': {\n          pointerEvents: 'none',\n          content: \"''\",\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: SpinButtonRootBorderColor,\n          borderRadius: effects.roundedCorner2\n        }\n      }\n    },\n    spinButtonWrapperTopBottom: {\n      width: '100%'\n    },\n    spinButtonWrapperHovered: {\n      selectors: (_a = {\n        ':after': {\n          borderColor: SpinButtonRootBorderColorHovered\n        }\n      }, _a[HighContrastSelector] = {\n        selectors: {\n          ':after': {\n            borderColor: 'Highlight'\n          }\n        }\n      }, _a)\n    },\n    spinButtonWrapperFocused: getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2),\n    spinButtonWrapperDisabled: _getDisabledStyles(theme),\n    input: {\n      boxSizing: 'border-box',\n      boxShadow: 'none',\n      borderStyle: 'none',\n      flex: 1,\n      margin: 0,\n      fontSize: fonts.medium.fontSize,\n      fontFamily: 'inherit',\n      color: SpinButtonInputTextColor,\n      backgroundColor: SpinButtonRootBackgroundColor,\n      height: '100%',\n      padding: '0 8px 0 9px',\n      outline: 0,\n      display: 'block',\n      minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      cursor: 'text',\n      userSelect: 'text',\n      borderRadius: effects.roundedCorner2 + \" 0 0 \" + effects.roundedCorner2\n    },\n    inputTextSelected: {\n      backgroundColor: SpinButtonInputBackgroundColorSelected,\n      color: SpinButtonInputTextColorSelected,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        borderColor: 'Highlight',\n        color: 'HighlightText'\n      }, _b)\n    },\n    inputDisabled: _getDisabledStyles(theme),\n    arrowButtonsContainer: {\n      display: 'block',\n      height: '100%',\n      cursor: 'default'\n    },\n    arrowButtonsContainerDisabled: _getDisabledStyles(theme)\n  };\n  return concatStyleSets(defaultStyles, customStyles);\n});","map":{"version":3,"sources":["components/SpinButton/SpinButton.styles.ts"],"names":[],"mappings":"AAAA,SAGE,eAHF,EAIE,oBAJF,EAKE,aALF,EAME,kBANF,QAOO,eAPP;AAUA,SAAS,eAAT,QAAgC,iBAAhC;AAEA,IAAM,kBAAkB,GAAG,EAA3B;AACA,IAAM,sBAAsB,GAAG,CAA/B;AACA,IAAM,cAAc,GAAG,EAAvB;AACA,IAAM,iBAAiB,GAAG,EAA1B;AACA,IAAM,YAAY,GAAG,EAArB;;AAEA,IAAM,kBAAkB,GAAG,eAAe,CACxC,UAAC,KAAD,EAAc;;;AACJ,MAAA,cAAA,GAAA,KAAA,CAAA,cAAA;AAER,MAAM,2BAA2B,GAAG,cAAc,CAAC,YAAnD;AACA,MAAM,iCAAiC,GAAG,cAAc,CAAC,kBAAzD;AAEA,SAAO;AACL,IAAA,eAAe,EAAE,iCADZ;AAEL,IAAA,aAAa,EAAE,MAFV;AAGL,IAAA,MAAM,EAAE,SAHH;AAIL,IAAA,KAAK,EAAE,2BAJF;AAKL,IAAA,SAAS,GAAA,EAAA,GAAA;AACP,gBAAU;AACR,QAAA,WAAW,EAAE;AADL;AADH,KAAA,EAIP,EAAA,CAAC,oBAAD,CAAA,GAAwB;AACtB,MAAA,KAAK,EAAE;AADe,KAJjB,EAOR,EAPQ;AALJ,GAAP;AAcD,CArBuC,CAA1C;;AAwBA,OAAO,IAAM,oBAAoB,GAAG,eAAe,CACjD,UAAC,KAAD,EAAgB,SAAhB,EAAoC,yBAApC,EAAsF;;;AAC5E,MAAA,OAAA,GAAA,KAAA,CAAA,OAAA;AAAA,MAAS,cAAA,GAAA,KAAA,CAAA,cAAT;AAAA,MAAyB,OAAA,GAAA,KAAA,CAAA,OAAzB,CAD4E,CAGpF;;AACA,MAAM,oBAAoB,GAAG,OAAO,CAAC,gBAArC;AACA,MAAM,2BAA2B,GAAG,cAAc,CAAC,UAAnD;AACA,MAAM,2BAA2B,GAAG,cAAc,CAAC,UAAnD;AAEA,MAAM,4BAA4B,GAAG,cAAc,CAAC,uBAApD;AACA,MAAM,4BAA4B,GAAG,cAAc,CAAC,uBAApD;AAEA,MAAM,wBAAwB,GAAkB;AAC9C,IAAA,IAAI,EAAE;AACJ,MAAA,OAAO,EAAE,MADL;AAEJ,MAAA,OAAO,EAAE,OAFL;AAGJ,MAAA,MAAM,EAAE,KAHJ;AAIJ,MAAA,KAAK,EAAE,kBAJH;AAKJ,MAAA,OAAO,EAAE,CALL;AAMJ,MAAA,eAAe,EAAE,aANb;AAOJ,MAAA,SAAS,EAAE,QAPP;AAQJ,MAAA,MAAM,EAAE,SARJ;AASJ,MAAA,KAAK,EAAE,oBATH;AAUJ,MAAA,SAAS,EAAE;AACT,2BAAmB;AACjB,UAAA,YAAY,EAAE,SAAO,OAAO,CAAC,cAAf,GAA6B;AAD1B,SADV;AAIT,yBAAiB;AACf,UAAA,YAAY,EAAE,OAAK,OAAO,CAAC,cAAb,GAA2B;AAD1B;AAJR;AAVP,KADwC;AAoB9C,IAAA,WAAW,EAAE;AACX,MAAA,eAAe,EAAE,4BADN;AAEX,MAAA,KAAK,EAAE;AAFI,KApBiC;AAwB9C,IAAA,WAAW,EAAE;AACX,MAAA,eAAe,EAAE,4BADN;AAEX,MAAA,KAAK,EAAE,2BAFI;AAGX,MAAA,SAAS,GAAA,EAAA,GAAA,EAAA,EACP,EAAA,CAAC,oBAAD,CAAA,GAAwB;AACtB,QAAA,eAAe,EAAE,WADK;AAEtB,QAAA,KAAK,EAAE;AAFe,OADjB,EAKR,EALQ;AAHE,KAxBiC;AAkC9C,IAAA,WAAW,EAAE;AACX,MAAA,eAAe,EAAE,4BADN;AAEX,MAAA,KAAK,EAAE,2BAFI;AAGX,MAAA,SAAS,GAAA,EAAA,GAAA,EAAA,EACP,EAAA,CAAC,oBAAD,CAAA,GAAwB;AACtB,QAAA,eAAe,EAAE,WADK;AAEtB,QAAA,KAAK,EAAE;AAFe,OADjB,EAKR,EALQ;AAHE,KAlCiC;AA4C9C,IAAA,YAAY,EAAE;AACZ,MAAA,OAAO,EAAE,GADG;AAEZ,MAAA,SAAS,GAAA,EAAA,GAAA,EAAA,EACP,EAAA,CAAC,oBAAD,CAAA,GAAwB;AACtB,QAAA,KAAK,EAAE,UADe;AAEtB,QAAA,OAAO,EAAE;AAFa,OADjB,EAKR,EALQ;AAFG,KA5CgC;AAqD9C,IAAA,IAAI,EAAE;AACJ,MAAA,QAAQ,EAAE,sBADN;AAEJ,MAAA,SAAS,EAAE,CAFP;AAGJ,MAAA,WAAW,EAAE,CAHT;AAIJ,MAAA,YAAY,EAAE,CAJV;AAKJ,MAAA,UAAU,EAAE;AALR;AArDwC,GAAhD,CAXoF,CAyEpF;;AACA,MAAM,0BAA0B,GAA2B,EAA3D;AAEA,MAAM,4BAA4B,GAA2B,EAA7D;AAEA,SAAO,eAAe,CACpB,wBADoB,EAEpB,SAAS,GAAG,0BAAH,GAAgC,4BAFrB,EAGpB,yBAHoB,CAAtB;AAKD,CApFgD,CAA5C;AAuFP,OAAO,IAAM,SAAS,GAAG,eAAe,CACtC,UAAC,KAAD,EAAgB,YAAhB,EAAyD;;;AAC/C,MAAA,OAAA,GAAA,KAAA,CAAA,OAAA;AAAA,MAAS,cAAA,GAAA,KAAA,CAAA,cAAT;AAAA,MAAyB,OAAA,GAAA,KAAA,CAAA,OAAzB;AAAA,MAAkC,KAAA,GAAA,KAAA,CAAA,KAAlC;AAER,MAAM,yBAAyB,GAAG,cAAc,CAAC,WAAjD;AACA,MAAM,6BAA6B,GAAG,cAAc,CAAC,eAArD;AACA,MAAM,gCAAgC,GAAG,cAAc,CAAC,kBAAxD;AACA,MAAM,gCAAgC,GAAG,cAAc,CAAC,mBAAxD;AAEA,MAAM,wBAAwB,GAAG,cAAc,CAAC,SAAhD;AACA,MAAM,gCAAgC,GAAG,OAAO,CAAC,KAAjD;AACA,MAAM,sCAAsC,GAAG,cAAc,CAAC,sBAA9D;AAEA,MAAM,2BAA2B,GAAG,cAAc,CAAC,YAAnD;AAEA,MAAM,aAAa,GAAsB;AACvC,IAAA,IAAI,EAAE,CACJ,KAAK,CAAC,MADF,EAEJ;AACE,MAAA,OAAO,EAAE,MADX;AAEE,MAAA,KAAK,EAAE,MAFT;AAGE,MAAA,QAAQ,EAAE;AAHZ,KAFI,CADiC;AASvC,IAAA,YAAY,EAAE;AACZ,MAAA,OAAO,EAAE,aADG;AAEZ,MAAA,UAAU,EAAE;AAFA,KATyB;AAavC,IAAA,iBAAiB,EAAE;AACjB,MAAA,MAAM,EAAE,cADS;AAEjB,MAAA,KAAK,EAAE,MAFU;AAGjB,MAAA,WAAW,EAAE;AAHI,KAboB;AAkBvC,IAAA,eAAe,EAAE;AACf,MAAA,MAAM,EAAE,cADO;AAEf,MAAA,KAAK,EAAE,OAFQ;AAGf,MAAA,UAAU,EAAE;AAHG,KAlBsB;AAuBvC,IAAA,eAAe,EAAE;AACf;AACA;AACA;AACA;AACA,MAAA,YAAY,EAAE,CAAC;AALA,KAvBsB;AA8BvC,IAAA,kBAAkB,EAAE,EA9BmB;AA+BvC,IAAA,IAAI,EAAE;AACJ,MAAA,OAAO,EAAE,OADL;AAEJ,MAAA,QAAQ,EAAE,aAAa,CAAC;AAFpB,KA/BiC;AAmCvC,IAAA,YAAY,EAAE;AACZ,MAAA,KAAK,EAAE;AADK,KAnCyB;AAsCvC,IAAA,KAAK,EAAE;AACL,MAAA,aAAa,EAAE,MADV;AAEL;AACA,MAAA,UAAU,EAAE,aAAa,CAAC;AAHrB,KAtCgC;AA2CvC,IAAA,aAAa,EAAE,EA3CwB;AA4CvC,IAAA,iBAAiB,EAAE;AACjB,MAAA,OAAO,EAAE,MADQ;AAEjB,MAAA,QAAQ,EAAE,UAFO;AAGjB,MAAA,SAAS,EAAE,YAHM;AAIjB,MAAA,MAAM,EAAE,cAJS;AAKjB,MAAA,QAAQ,EAAE,iBALO;AAMjB,MAAA,SAAS,EAAE;AACT;AACA;AACA,kBAAU;AACR,UAAA,aAAa,EAAE,MADP;AAER,UAAA,OAAO,EAAE,IAFD;AAGR,UAAA,QAAQ,EAAE,UAHF;AAIR,UAAA,IAAI,EAAE,CAJE;AAKR,UAAA,GAAG,EAAE,CALG;AAMR,UAAA,MAAM,EAAE,CANA;AAOR,UAAA,KAAK,EAAE,CAPC;AAQR,UAAA,WAAW,EAAE,KARL;AASR,UAAA,WAAW,EAAE,OATL;AAUR,UAAA,WAAW,EAAE,yBAVL;AAWR,UAAA,YAAY,EAAE,OAAO,CAAC;AAXd;AAHD;AANM,KA5CoB;AAoEvC,IAAA,0BAA0B,EAAE;AAC1B,MAAA,KAAK,EAAE;AADmB,KApEW;AAuEvC,IAAA,wBAAwB,EAAE;AACxB,MAAA,SAAS,GAAA,EAAA,GAAA;AACP,kBAAU;AACR,UAAA,WAAW,EAAE;AADL;AADH,OAAA,EAIP,EAAA,CAAC,oBAAD,CAAA,GAAwB;AACtB,QAAA,SAAS,EAAE;AACT,oBAAU;AACR,YAAA,WAAW,EAAE;AADL;AADD;AADW,OAJjB,EAWR,EAXQ;AADe,KAvEa;AAqFvC,IAAA,wBAAwB,EAAE,kBAAkB,CAAC,gCAAD,EAAmC,OAAO,CAAC,cAA3C,CArFL;AAsFvC,IAAA,yBAAyB,EAAE,kBAAkB,CAAC,KAAD,CAtFN;AAuFvC,IAAA,KAAK,EAAE;AACL,MAAA,SAAS,EAAE,YADN;AAEL,MAAA,SAAS,EAAE,MAFN;AAGL,MAAA,WAAW,EAAE,MAHR;AAIL,MAAA,IAAI,EAAE,CAJD;AAKL,MAAA,MAAM,EAAE,CALH;AAML,MAAA,QAAQ,EAAE,KAAK,CAAC,MAAN,CAAa,QANlB;AAOL,MAAA,UAAU,EAAE,SAPP;AAQL,MAAA,KAAK,EAAE,wBARF;AASL,MAAA,eAAe,EAAE,6BATZ;AAUL,MAAA,MAAM,EAAE,MAVH;AAWL,MAAA,OAAO,EAAE,aAXJ;AAYL,MAAA,OAAO,EAAE,CAZJ;AAaL,MAAA,OAAO,EAAE,OAbJ;AAcL,MAAA,QAAQ,EAAE,iBAAiB,GAAG,kBAApB,GAAyC,CAd9C;AAeL,MAAA,UAAU,EAAE,QAfP;AAgBL,MAAA,YAAY,EAAE,UAhBT;AAiBL,MAAA,QAAQ,EAAE,QAjBL;AAkBL,MAAA,MAAM,EAAE,MAlBH;AAmBL,MAAA,UAAU,EAAE,MAnBP;AAoBL,MAAA,YAAY,EAAK,OAAO,CAAC,cAAR,GAAsB,OAAtB,GAA8B,OAAO,CAAC;AApBlD,KAvFgC;AA6GvC,IAAA,iBAAiB,EAAE;AACjB,MAAA,eAAe,EAAE,sCADA;AAEjB,MAAA,KAAK,EAAE,gCAFU;AAGjB,MAAA,SAAS,GAAA,EAAA,GAAA,EAAA,EACP,EAAA,CAAC,oBAAD,CAAA,GAAwB;AACtB,QAAA,eAAe,EAAE,WADK;AAEtB,QAAA,WAAW,EAAE,WAFS;AAGtB,QAAA,KAAK,EAAE;AAHe,OADjB,EAMR,EANQ;AAHQ,KA7GoB;AAwHvC,IAAA,aAAa,EAAE,kBAAkB,CAAC,KAAD,CAxHM;AAyHvC,IAAA,qBAAqB,EAAE;AACrB,MAAA,OAAO,EAAE,OADY;AAErB,MAAA,MAAM,EAAE,MAFa;AAGrB,MAAA,MAAM,EAAE;AAHa,KAzHgB;AA8HvC,IAAA,6BAA6B,EAAE,kBAAkB,CAAC,KAAD;AA9HV,GAAzC;AAgIA,SAAO,eAAe,CAAC,aAAD,EAAgB,YAAhB,CAAtB;AACD,CAhJqC,CAAjC","sourcesContent":["import {\r\n  IRawStyle,\r\n  ITheme,\r\n  concatStyleSets,\r\n  HighContrastSelector,\r\n  IconFontSizes,\r\n  getInputFocusStyle,\r\n} from '../../Styling';\r\nimport { IButtonStyles } from '../../Button';\r\nimport { ISpinButtonStyles } from './SpinButton.types';\r\nimport { memoizeFunction } from '../../Utilities';\r\n\r\nconst ARROW_BUTTON_WIDTH = 23;\r\nconst ARROW_BUTTON_ICON_SIZE = 8;\r\nconst DEFAULT_HEIGHT = 32;\r\nconst DEFAULT_MIN_WIDTH = 86;\r\nconst LABEL_MARGIN = 10;\r\n\r\nconst _getDisabledStyles = memoizeFunction(\r\n  (theme: ITheme): IRawStyle => {\r\n    const { semanticColors } = theme;\r\n\r\n    const SpinButtonTextColorDisabled = semanticColors.disabledText;\r\n    const SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\r\n\r\n    return {\r\n      backgroundColor: SpinButtonBackgroundColorDisabled,\r\n      pointerEvents: 'none',\r\n      cursor: 'default',\r\n      color: SpinButtonTextColorDisabled,\r\n      selectors: {\r\n        ':after': {\r\n          borderColor: SpinButtonBackgroundColorDisabled,\r\n        },\r\n        [HighContrastSelector]: {\r\n          color: 'GrayText',\r\n        },\r\n      },\r\n    };\r\n  },\r\n);\r\n\r\nexport const getArrowButtonStyles = memoizeFunction(\r\n  (theme: ITheme, isUpArrow: boolean, customSpecificArrowStyles?: Partial<IButtonStyles>): IButtonStyles => {\r\n    const { palette, semanticColors, effects } = theme;\r\n\r\n    // TODO: after updating the semanticColor slots all this need to be reevaluated.\r\n    const ArrowButtonTextColor = palette.neutralSecondary;\r\n    const ArrowButtonTextColorHovered = semanticColors.buttonText;\r\n    const ArrowButtonTextColorPressed = semanticColors.buttonText;\r\n\r\n    const ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\r\n    const ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\r\n\r\n    const defaultArrowButtonStyles: IButtonStyles = {\r\n      root: {\r\n        outline: 'none',\r\n        display: 'block',\r\n        height: '50%',\r\n        width: ARROW_BUTTON_WIDTH,\r\n        padding: 0,\r\n        backgroundColor: 'transparent',\r\n        textAlign: 'center',\r\n        cursor: 'default',\r\n        color: ArrowButtonTextColor,\r\n        selectors: {\r\n          '&.ms-DownButton': {\r\n            borderRadius: `0 0 ${effects.roundedCorner2} 0`,\r\n          },\r\n          '&.ms-UpButton': {\r\n            borderRadius: `0 ${effects.roundedCorner2} 0 0`,\r\n          },\r\n        },\r\n      },\r\n      rootHovered: {\r\n        backgroundColor: ArrowButtonBackgroundHovered,\r\n        color: ArrowButtonTextColorHovered,\r\n      },\r\n      rootChecked: {\r\n        backgroundColor: ArrowButtonBackgroundPressed,\r\n        color: ArrowButtonTextColorPressed,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'Highlight',\r\n            color: 'HighlightText',\r\n          },\r\n        },\r\n      },\r\n      rootPressed: {\r\n        backgroundColor: ArrowButtonBackgroundPressed,\r\n        color: ArrowButtonTextColorPressed,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'Highlight',\r\n            color: 'HighlightText',\r\n          },\r\n        },\r\n      },\r\n      rootDisabled: {\r\n        opacity: 0.5,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            color: 'GrayText',\r\n            opacity: 1,\r\n          },\r\n        },\r\n      },\r\n      icon: {\r\n        fontSize: ARROW_BUTTON_ICON_SIZE,\r\n        marginTop: 0,\r\n        marginRight: 0,\r\n        marginBottom: 0,\r\n        marginLeft: 0,\r\n      },\r\n    };\r\n\r\n    // No specific styles needed as of now.\r\n    const defaultUpArrowButtonStyles: Partial<IButtonStyles> = {};\r\n\r\n    const defaultDownArrowButtonStyles: Partial<IButtonStyles> = {};\r\n\r\n    return concatStyleSets(\r\n      defaultArrowButtonStyles,\r\n      isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles,\r\n      customSpecificArrowStyles,\r\n    ) as IButtonStyles;\r\n  },\r\n);\r\n\r\nexport const getStyles = memoizeFunction(\r\n  (theme: ITheme, customStyles?: Partial<ISpinButtonStyles>): ISpinButtonStyles => {\r\n    const { palette, semanticColors, effects, fonts } = theme;\r\n\r\n    const SpinButtonRootBorderColor = semanticColors.inputBorder;\r\n    const SpinButtonRootBackgroundColor = semanticColors.inputBackground;\r\n    const SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\r\n    const SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\r\n\r\n    const SpinButtonInputTextColor = semanticColors.inputText;\r\n    const SpinButtonInputTextColorSelected = palette.white;\r\n    const SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\r\n\r\n    const SpinButtonIconDisabledColor = semanticColors.disabledText;\r\n\r\n    const defaultStyles: ISpinButtonStyles = {\r\n      root: [\r\n        fonts.medium,\r\n        {\r\n          outline: 'none',\r\n          width: '100%',\r\n          minWidth: DEFAULT_MIN_WIDTH,\r\n        },\r\n      ],\r\n      labelWrapper: {\r\n        display: 'inline-flex',\r\n        alignItems: 'center',\r\n      },\r\n      labelWrapperStart: {\r\n        height: DEFAULT_HEIGHT,\r\n        float: 'left',\r\n        marginRight: LABEL_MARGIN,\r\n      },\r\n      labelWrapperEnd: {\r\n        height: DEFAULT_HEIGHT,\r\n        float: 'right',\r\n        marginLeft: LABEL_MARGIN,\r\n      },\r\n      labelWrapperTop: {\r\n        // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\r\n        // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\r\n        // the SpinButton is displayed with the label on top next to other form fields.\r\n        // Decrease the wrapper's effective height slightly to compensate.\r\n        marginBottom: -1,\r\n      },\r\n      labelWrapperBottom: {},\r\n      icon: {\r\n        padding: '0 5px',\r\n        fontSize: IconFontSizes.large,\r\n      },\r\n      iconDisabled: {\r\n        color: SpinButtonIconDisabledColor,\r\n      },\r\n      label: {\r\n        pointerEvents: 'none',\r\n        // centering the label with the icon by forcing the exact same height as the icon.\r\n        lineHeight: IconFontSizes.large,\r\n      },\r\n      labelDisabled: {},\r\n      spinButtonWrapper: {\r\n        display: 'flex',\r\n        position: 'relative',\r\n        boxSizing: 'border-box',\r\n        height: DEFAULT_HEIGHT,\r\n        minWidth: DEFAULT_MIN_WIDTH,\r\n        selectors: {\r\n          // setting border using pseudo-element here in order to prevent:\r\n          // input and chevron buttons to overlap border under certain resolutions\r\n          ':after': {\r\n            pointerEvents: 'none',\r\n            content: \"''\",\r\n            position: 'absolute',\r\n            left: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n            right: 0,\r\n            borderWidth: '1px',\r\n            borderStyle: 'solid',\r\n            borderColor: SpinButtonRootBorderColor,\r\n            borderRadius: effects.roundedCorner2,\r\n          },\r\n        },\r\n      },\r\n      spinButtonWrapperTopBottom: {\r\n        width: '100%',\r\n      },\r\n      spinButtonWrapperHovered: {\r\n        selectors: {\r\n          ':after': {\r\n            borderColor: SpinButtonRootBorderColorHovered,\r\n          },\r\n          [HighContrastSelector]: {\r\n            selectors: {\r\n              ':after': {\r\n                borderColor: 'Highlight',\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      spinButtonWrapperFocused: getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2),\r\n      spinButtonWrapperDisabled: _getDisabledStyles(theme),\r\n      input: {\r\n        boxSizing: 'border-box',\r\n        boxShadow: 'none',\r\n        borderStyle: 'none',\r\n        flex: 1,\r\n        margin: 0,\r\n        fontSize: fonts.medium.fontSize,\r\n        fontFamily: 'inherit',\r\n        color: SpinButtonInputTextColor,\r\n        backgroundColor: SpinButtonRootBackgroundColor,\r\n        height: '100%',\r\n        padding: '0 8px 0 9px',\r\n        outline: 0,\r\n        display: 'block',\r\n        minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\r\n        whiteSpace: 'nowrap',\r\n        textOverflow: 'ellipsis',\r\n        overflow: 'hidden',\r\n        cursor: 'text',\r\n        userSelect: 'text',\r\n        borderRadius: `${effects.roundedCorner2} 0 0 ${effects.roundedCorner2}`,\r\n      },\r\n      inputTextSelected: {\r\n        backgroundColor: SpinButtonInputBackgroundColorSelected,\r\n        color: SpinButtonInputTextColorSelected,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'Highlight',\r\n            borderColor: 'Highlight',\r\n            color: 'HighlightText',\r\n          },\r\n        },\r\n      },\r\n      inputDisabled: _getDisabledStyles(theme),\r\n      arrowButtonsContainer: {\r\n        display: 'block',\r\n        height: '100%',\r\n        cursor: 'default',\r\n      },\r\n      arrowButtonsContainerDisabled: _getDisabledStyles(theme),\r\n    };\r\n    return concatStyleSets(defaultStyles, customStyles) as ISpinButtonStyles;\r\n  },\r\n);\r\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}