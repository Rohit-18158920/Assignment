{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, KeyCodes, Async, initializeComponentRef } from '../../Utilities';\nimport { ExpandingCardMode } from './ExpandingCard.types';\nimport { CardCallout } from './CardCallout/CardCallout';\nvar getClassNames = classNamesFunction();\n\nvar ExpandingCardBase =\n/** @class */\nfunction (_super) {\n  __extends(ExpandingCardBase, _super);\n\n  function ExpandingCardBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._expandedElem = React.createRef();\n\n    _this._onKeyDown = function (ev) {\n      if (ev.which === KeyCodes.escape) {\n        _this.props.onLeave && _this.props.onLeave(ev);\n      }\n    };\n\n    _this._onRenderCompactCard = function () {\n      return React.createElement(\"div\", {\n        className: _this._classNames.compactCard\n      }, _this.props.onRenderCompactCard(_this.props.renderData));\n    };\n\n    _this._onRenderExpandedCard = function () {\n      // firstFrameRendered helps in initially setting height of expanded card to 1px, even if mode prop is set to\n      // ExpandingCardMode.expanded on first render. This is to make sure transition animation takes place.\n      !_this.state.firstFrameRendered && _this._async.requestAnimationFrame(function () {\n        _this.setState({\n          firstFrameRendered: true\n        });\n      });\n      return React.createElement(\"div\", {\n        className: _this._classNames.expandedCard,\n        ref: _this._expandedElem\n      }, React.createElement(\"div\", {\n        className: _this._classNames.expandedCardScroll\n      }, _this.props.onRenderExpandedCard && _this.props.onRenderExpandedCard(_this.props.renderData)));\n    };\n\n    _this._checkNeedsScroll = function () {\n      var expandedCardHeight = _this.props.expandedCardHeight;\n\n      _this._async.requestAnimationFrame(function () {\n        if (_this._expandedElem.current && _this._expandedElem.current.scrollHeight >= expandedCardHeight) {\n          _this.setState({\n            needsScroll: true\n          });\n        }\n      });\n    };\n\n    _this._async = new Async(_this);\n    initializeComponentRef(_this);\n    _this.state = {\n      firstFrameRendered: false,\n      needsScroll: false\n    };\n    return _this;\n  }\n\n  ExpandingCardBase.prototype.componentDidMount = function () {\n    this._checkNeedsScroll();\n  };\n\n  ExpandingCardBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n\n  ExpandingCardBase.prototype.render = function () {\n    var _a = this.props,\n        styles = _a.styles,\n        compactCardHeight = _a.compactCardHeight,\n        expandedCardHeight = _a.expandedCardHeight,\n        theme = _a.theme,\n        mode = _a.mode,\n        className = _a.className;\n    var _b = this.state,\n        needsScroll = _b.needsScroll,\n        firstFrameRendered = _b.firstFrameRendered;\n    var finalHeight = compactCardHeight + expandedCardHeight;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      compactCardHeight: compactCardHeight,\n      className: className,\n      expandedCardHeight: expandedCardHeight,\n      needsScroll: needsScroll,\n      expandedCardFirstFrameRendered: mode === ExpandingCardMode.expanded && firstFrameRendered\n    });\n    var content = React.createElement(\"div\", {\n      onMouseEnter: this.props.onEnter,\n      onMouseLeave: this.props.onLeave,\n      onKeyDown: this._onKeyDown\n    }, this._onRenderCompactCard(), this._onRenderExpandedCard());\n    return React.createElement(CardCallout, __assign({}, this.props, {\n      content: content,\n      finalHeight: finalHeight,\n      className: this._classNames.root\n    }));\n  };\n\n  ExpandingCardBase.defaultProps = {\n    compactCardHeight: 156,\n    expandedCardHeight: 384,\n    directionalHintFixed: true\n  };\n  return ExpandingCardBase;\n}(React.Component);\n\nexport { ExpandingCardBase };","map":{"version":3,"sources":["components/HoverCard/ExpandingCard.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, KeyCodes, Async, initializeComponentRef } from '../../Utilities';\nimport {\n  ExpandingCardMode,\n  IExpandingCardProps,\n  IExpandingCardStyles,\n  IExpandingCardStyleProps,\n} from './ExpandingCard.types';\nimport { CardCallout } from './CardCallout/CardCallout';\n\nconst getClassNames = classNamesFunction<IExpandingCardStyleProps, IExpandingCardStyles>();\n\nexport interface IExpandingCardState {\n  firstFrameRendered: boolean;\n  needsScroll: boolean;\n}\n\nexport class ExpandingCardBase extends React.Component<IExpandingCardProps, IExpandingCardState> {\n  public static defaultProps = {\n    compactCardHeight: 156,\n    expandedCardHeight: 384,\n    directionalHintFixed: true,\n  };\n\n  private _classNames: { [key in keyof IExpandingCardStyles]: string };\n  private _expandedElem = React.createRef<HTMLDivElement>();\n  private _async: Async;\n\n  constructor(props: IExpandingCardProps) {\n    super(props);\n\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    this.state = {\n      firstFrameRendered: false,\n      needsScroll: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    this._checkNeedsScroll();\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { styles, compactCardHeight, expandedCardHeight, theme, mode, className } = this.props;\n    const { needsScroll, firstFrameRendered } = this.state;\n\n    const finalHeight = compactCardHeight! + expandedCardHeight!;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      compactCardHeight,\n      className,\n      expandedCardHeight,\n      needsScroll: needsScroll,\n      expandedCardFirstFrameRendered: mode === ExpandingCardMode.expanded && firstFrameRendered,\n    });\n\n    const content: JSX.Element = (\n      <div onMouseEnter={this.props.onEnter} onMouseLeave={this.props.onLeave} onKeyDown={this._onKeyDown}>\n        {this._onRenderCompactCard()}\n        {this._onRenderExpandedCard()}\n      </div>\n    );\n\n    return (\n      <CardCallout {...this.props} content={content} finalHeight={finalHeight} className={this._classNames.root} />\n    );\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.escape) {\n      this.props.onLeave && this.props.onLeave(ev);\n    }\n  };\n\n  private _onRenderCompactCard = (): JSX.Element => {\n    return <div className={this._classNames.compactCard}>{this.props.onRenderCompactCard!(this.props.renderData)}</div>;\n  };\n\n  private _onRenderExpandedCard = (): JSX.Element => {\n    // firstFrameRendered helps in initially setting height of expanded card to 1px, even if mode prop is set to\n    // ExpandingCardMode.expanded on first render. This is to make sure transition animation takes place.\n    !this.state.firstFrameRendered &&\n      this._async.requestAnimationFrame(() => {\n        this.setState({\n          firstFrameRendered: true,\n        });\n      });\n\n    return (\n      <div className={this._classNames.expandedCard} ref={this._expandedElem}>\n        <div className={this._classNames.expandedCardScroll}>\n          {this.props.onRenderExpandedCard && this.props.onRenderExpandedCard(this.props.renderData)}\n        </div>\n      </div>\n    );\n  };\n\n  private _checkNeedsScroll = (): void => {\n    const { expandedCardHeight } = this.props;\n    this._async.requestAnimationFrame(() => {\n      if (this._expandedElem.current && this._expandedElem.current.scrollHeight >= expandedCardHeight!) {\n        this.setState({\n          needsScroll: true,\n        });\n      }\n    });\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}