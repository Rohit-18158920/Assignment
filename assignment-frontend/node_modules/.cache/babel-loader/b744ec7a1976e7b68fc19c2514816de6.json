{"ast":null,"code":"import { KeyCodes } from './KeyCodes';\nimport { getDocument } from './dom/getDocument';\nimport { getItem, setItem } from './sessionStorage';\nimport { setRTL as mergeStylesSetRTL } from '@uifabric/merge-styles';\nvar RTL_LOCAL_STORAGE_KEY = 'isRTL'; // Default to undefined so that we initialize on first read.\n\nvar _isRTL;\n/**\n * Gets the rtl state of the page (returns true if in rtl.)\n */\n\n\nexport function getRTL(theme) {\n  if (theme === void 0) {\n    theme = {};\n  }\n\n  if (theme.rtl !== undefined) {\n    return theme.rtl;\n  }\n\n  if (_isRTL === undefined) {\n    // Fabric supports persisting the RTL setting between page refreshes via session storage\n    var savedRTL = getItem(RTL_LOCAL_STORAGE_KEY);\n\n    if (savedRTL !== null) {\n      _isRTL = savedRTL === '1';\n      setRTL(_isRTL);\n    }\n\n    var doc = getDocument();\n\n    if (_isRTL === undefined && doc) {\n      _isRTL = (doc.body && doc.body.getAttribute('dir') || doc.documentElement.getAttribute('dir')) === 'rtl';\n      mergeStylesSetRTL(_isRTL);\n    }\n  }\n\n  return !!_isRTL;\n}\n/**\n * Sets the rtl state of the page (by adjusting the dir attribute of the html element.)\n */\n\nexport function setRTL(isRTL, persistSetting) {\n  if (persistSetting === void 0) {\n    persistSetting = false;\n  }\n\n  var doc = getDocument();\n\n  if (doc) {\n    doc.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');\n  }\n\n  if (persistSetting) {\n    setItem(RTL_LOCAL_STORAGE_KEY, isRTL ? '1' : '0');\n  }\n\n  _isRTL = isRTL;\n  mergeStylesSetRTL(_isRTL);\n}\n/**\n * Returns the given key, but flips right/left arrows if necessary.\n */\n\nexport function getRTLSafeKeyCode(key, theme) {\n  if (theme === void 0) {\n    theme = {};\n  }\n\n  if (getRTL(theme)) {\n    if (key === KeyCodes.left) {\n      key = KeyCodes.right;\n    } else if (key === KeyCodes.right) {\n      key = KeyCodes.left;\n    }\n  }\n\n  return key;\n}","map":{"version":3,"sources":["rtl.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,QAAyB,YAAzB;AACA,SAAS,WAAT,QAA4B,mBAA5B;AACA,SAAS,OAAT,EAAkB,OAAlB,QAAiC,kBAAjC;AACA,SAAS,MAAM,IAAI,iBAAnB,QAA4C,wBAA5C;AAEA,IAAM,qBAAqB,GAAG,OAA9B,C,CAEA;;AACA,IAAI,MAAJ;AAEA;;AAEG;;;AACH,OAAM,SAAU,MAAV,CAAiB,KAAjB,EAA8C;AAA7B,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,EAAA;AAA6B;;AAClD,MAAI,KAAK,CAAC,GAAN,KAAc,SAAlB,EAA6B;AAC3B,WAAO,KAAK,CAAC,GAAb;AACD;;AACD,MAAI,MAAM,KAAK,SAAf,EAA0B;AACxB;AACA,QAAI,QAAQ,GAAG,OAAO,CAAC,qBAAD,CAAtB;;AACA,QAAI,QAAQ,KAAK,IAAjB,EAAuB;AACrB,MAAA,MAAM,GAAG,QAAQ,KAAK,GAAtB;AACA,MAAA,MAAM,CAAC,MAAD,CAAN;AACD;;AAED,QAAI,GAAG,GAAG,WAAW,EAArB;;AACA,QAAI,MAAM,KAAK,SAAX,IAAwB,GAA5B,EAAiC;AAC/B,MAAA,MAAM,GAAG,CAAE,GAAG,CAAC,IAAJ,IAAY,GAAG,CAAC,IAAJ,CAAS,YAAT,CAAsB,KAAtB,CAAb,IAA8C,GAAG,CAAC,eAAJ,CAAoB,YAApB,CAAiC,KAAjC,CAA/C,MAA4F,KAArG;AACA,MAAA,iBAAiB,CAAC,MAAD,CAAjB;AACD;AACF;;AAED,SAAO,CAAC,CAAC,MAAT;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,MAAV,CAAiB,KAAjB,EAAiC,cAAjC,EAAgE;AAA/B,MAAA,cAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,KAAA;AAA+B;;AACpE,MAAI,GAAG,GAAG,WAAW,EAArB;;AACA,MAAI,GAAJ,EAAS;AACP,IAAA,GAAG,CAAC,eAAJ,CAAoB,YAApB,CAAiC,KAAjC,EAAwC,KAAK,GAAG,KAAH,GAAW,KAAxD;AACD;;AAED,MAAI,cAAJ,EAAoB;AAClB,IAAA,OAAO,CAAC,qBAAD,EAAwB,KAAK,GAAG,GAAH,GAAS,GAAtC,CAAP;AACD;;AAED,EAAA,MAAM,GAAG,KAAT;AACA,EAAA,iBAAiB,CAAC,MAAD,CAAjB;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,iBAAV,CAA4B,GAA5B,EAAyC,KAAzC,EAAsE;AAA7B,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,EAAA;AAA6B;;AAC1E,MAAI,MAAM,CAAC,KAAD,CAAV,EAAmB;AACjB,QAAI,GAAG,KAAK,QAAQ,CAAC,IAArB,EAA2B;AACzB,MAAA,GAAG,GAAG,QAAQ,CAAC,KAAf;AACD,KAFD,MAEO,IAAI,GAAG,KAAK,QAAQ,CAAC,KAArB,EAA4B;AACjC,MAAA,GAAG,GAAG,QAAQ,CAAC,IAAf;AACD;AACF;;AAED,SAAO,GAAP;AACD","sourcesContent":["import { KeyCodes } from './KeyCodes';\nimport { getDocument } from './dom/getDocument';\nimport { getItem, setItem } from './sessionStorage';\nimport { setRTL as mergeStylesSetRTL } from '@uifabric/merge-styles';\n\nconst RTL_LOCAL_STORAGE_KEY = 'isRTL';\n\n// Default to undefined so that we initialize on first read.\nlet _isRTL: boolean | undefined;\n\n/**\n * Gets the rtl state of the page (returns true if in rtl.)\n */\nexport function getRTL(theme: { rtl?: boolean } = {}): boolean {\n  if (theme.rtl !== undefined) {\n    return theme.rtl;\n  }\n  if (_isRTL === undefined) {\n    // Fabric supports persisting the RTL setting between page refreshes via session storage\n    let savedRTL = getItem(RTL_LOCAL_STORAGE_KEY);\n    if (savedRTL !== null) {\n      _isRTL = savedRTL === '1';\n      setRTL(_isRTL);\n    }\n\n    let doc = getDocument();\n    if (_isRTL === undefined && doc) {\n      _isRTL = ((doc.body && doc.body.getAttribute('dir')) || doc.documentElement.getAttribute('dir')) === 'rtl';\n      mergeStylesSetRTL(_isRTL);\n    }\n  }\n\n  return !!_isRTL;\n}\n\n/**\n * Sets the rtl state of the page (by adjusting the dir attribute of the html element.)\n */\nexport function setRTL(isRTL: boolean, persistSetting: boolean = false): void {\n  let doc = getDocument();\n  if (doc) {\n    doc.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');\n  }\n\n  if (persistSetting) {\n    setItem(RTL_LOCAL_STORAGE_KEY, isRTL ? '1' : '0');\n  }\n\n  _isRTL = isRTL;\n  mergeStylesSetRTL(_isRTL);\n}\n\n/**\n * Returns the given key, but flips right/left arrows if necessary.\n */\nexport function getRTLSafeKeyCode(key: number, theme: { rtl?: boolean } = {}): number {\n  if (getRTL(theme)) {\n    if (key === KeyCodes.left) {\n      key = KeyCodes.right;\n    } else if (key === KeyCodes.right) {\n      key = KeyCodes.left;\n    }\n  }\n\n  return key;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}