{"ast":null,"code":"import { DayOfWeek, MonthOfYear, FirstWeekOfYear, DateRangeType } from '../dateValues/dateValues';\nimport TimeConstants from '../dateValues/timeConstants';\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param date - The origin date\n * @param days - The number of days to offset. 'days' can be negative.\n * @returns A new Date object offset from the origin date by the given number of days\n */\n\nexport function addDays(date, days) {\n  var result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param date - The origin date\n * @param weeks - The number of weeks to offset. 'weeks' can be negative.\n * @returns A new Date object offset from the origin date by the given number of weeks\n */\n\nexport function addWeeks(date, weeks) {\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\n}\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param months - The number of months to offset. 'months' can be negative.\n * @returns A new Date object offset from the origin date by the given number of months\n */\n\nexport function addMonths(date, months) {\n  var result = new Date(date.getTime());\n  var newMonth = result.getMonth() + months;\n  result.setMonth(newMonth); // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n\n  if (result.getMonth() !== (newMonth % TimeConstants.MonthInOneYear + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {\n    result = addDays(result, -result.getDate());\n  }\n\n  return result;\n}\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param years - The number of years to offset. 'years' can be negative.\n * @returns A new Date object offset from the origin date by the given number of years\n */\n\nexport function addYears(date, years) {\n  var result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years); // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n\n  if (result.getMonth() !== (date.getMonth() % TimeConstants.MonthInOneYear + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {\n    result = addDays(result, -result.getDate());\n  }\n\n  return result;\n}\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the month.\n */\n\nexport function getMonthStart(date) {\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the month.\n */\n\nexport function getMonthEnd(date) {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the year.\n */\n\nexport function getYearStart(date) {\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the year.\n */\n\nexport function getYearEnd(date) {\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param month - The 0-based index of the month to set on the date.\n * @returns A new Date object with the given month set.\n */\n\nexport function setMonth(date, month) {\n  return addMonths(date, month - date.getMonth());\n}\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\n\nexport function compareDates(date1, date2) {\n  if (!date1 && !date2) {\n    return true;\n  } else if (!date1 || !date2) {\n    return false;\n  } else {\n    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\n  }\n}\n/**\n * Compare the date parts of two dates\n * @param date1 - The first date to compare\n * @param date2 - The second date to compare\n * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\n\nexport function compareDatePart(date1, date2) {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param date - The input date\n * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param firstDayOfWeek - The first day of the week.\n * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day\n * for multiday view. Defaults to 1\n * @returns An array of dates representing the date range containing the specified date.\n */\n\nexport function getDateRangeArray(date, dateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView) {\n  if (daysToSelectInDayView === void 0) {\n    daysToSelectInDayView = 1;\n  }\n\n  var datesArray = new Array();\n  var startDate;\n  var endDate = null;\n\n  if (!workWeekDays) {\n    workWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\n  }\n\n  daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);\n\n  switch (dateRangeType) {\n    case DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, daysToSelectInDayView);\n      break;\n\n    case DateRangeType.Week:\n    case DateRangeType.WorkWeek:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\n      break;\n\n    case DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n\n    default:\n      throw new Error('Unexpected object: ' + dateRangeType);\n  } // Populate the dates array with the dates in range\n\n\n  var nextDate = startDate;\n\n  do {\n    if (dateRangeType !== DateRangeType.WorkWeek) {\n      // push all days not in work week view\n      datesArray.push(nextDate);\n    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n      datesArray.push(nextDate);\n    }\n\n    nextDate = addDays(nextDate, 1);\n  } while (!compareDates(nextDate, endDate));\n\n  return datesArray;\n}\n/**\n * Checks whether the specified date is in the given date range.\n * @param date - The origin date\n * @param dateRange - An array of dates to do the lookup on\n * @returns True if the date matches one of the dates in the specified array, false otherwise.\n */\n\nexport function isInDateRangeArray(date, dateRange) {\n  for (var _i = 0, dateRange_1 = dateRange; _i < dateRange_1.length; _i++) {\n    var dateInRange = dateRange_1[_i];\n\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param navigatedDate - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The weeks number array for the current month.\n */\n\nexport function getWeekNumbersInMonth(weeksInMonth, firstDayOfWeek, firstWeekOfYear, navigatedDate) {\n  var selectedYear = navigatedDate.getFullYear();\n  var selectedMonth = navigatedDate.getMonth();\n  var dayOfMonth = 1;\n  var fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n  var endOfFirstWeek = dayOfMonth + (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) - adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n  var endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n  dayOfMonth = endOfWeekRange.getDate();\n  var weeksArray = [];\n\n  for (var i = 0; i < weeksInMonth; i++) {\n    // Get week number for end of week\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n    dayOfMonth += TimeConstants.DaysInOneWeek;\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n  }\n\n  return weeksArray;\n}\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param date - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The week's number in the year.\n */\n\nexport function getWeekNumber(date, firstDayOfWeek, firstWeekOfYear) {\n  // First four-day week of the year - minumum days count\n  var fourDayWeek = 4;\n\n  switch (firstWeekOfYear) {\n    case FirstWeekOfYear.FirstFullWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\n\n    case FirstWeekOfYear.FirstFourDayWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n\n    default:\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\n  }\n}\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\n\nexport function getStartDateOfWeek(date, firstDayOfWeek) {\n  var daysOffset = firstDayOfWeek - date.getDay();\n\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= TimeConstants.DaysInOneWeek;\n  }\n\n  return addDays(date, daysOffset);\n}\n/**\n * Gets the date for the last day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\n\nexport function getEndDateOfWeek(date, firstDayOfWeek) {\n  var lastDayOfWeek = firstDayOfWeek - 1 >= 0 ? firstDayOfWeek - 1 : TimeConstants.DaysInOneWeek - 1;\n  var daysOffset = lastDayOfWeek - date.getDay();\n\n  if (daysOffset < 0) {\n    // If last day of week is < date, go 1 week forward, to ensure resulting date is in the future.\n    daysOffset += TimeConstants.DaysInOneWeek;\n  }\n\n  return addDays(date, daysOffset);\n}\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param date - The origin date\n * @returns A new date with the time set to midnight\n */\n\nfunction getDatePart(date) {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n/**\n * Helper function to assist in date comparisons\n */\n\n\nexport function getDatePartHashValue(date) {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n}\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param numberOfFullDays - week settings.\n * @returns The week's number in the year.\n */\n\nfunction getWeekOfYearFullDays(date, firstDayOfWeek, numberOfFullDays) {\n  var dayOfYear = getDayOfYear(date) - 1;\n  var num = date.getDay() - dayOfYear % TimeConstants.DaysInOneWeek;\n  var lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\n  var daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n  var num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\n    num2 -= TimeConstants.DaysInOneWeek;\n  }\n\n  var num3 = dayOfYear - num2;\n\n  if (num3 < 0) {\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n      num2 -= TimeConstants.DaysInOneWeek;\n    }\n\n    num3 = daysInYear - num2;\n  }\n\n  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\n}\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @returns The week's number in the year.\n */\n\n\nfunction getFirstDayWeekOfYear(date, firstDayOfWeek) {\n  var num = getDayOfYear(date) - 1;\n  var num2 = date.getDay() - num % TimeConstants.DaysInOneWeek;\n  var num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\n}\n/**\n * Helper function for getWeekNumber.\n * Returns adjusted week day number when firstDayOfWeek is other than Sunday\n * For Week Day Number comparison checks\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param dateWeekDay - shifts number forward to 1 week in case passed as true\n * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),\n * Sunday becomes 7.\n */\n\n\nfunction adjustWeekDay(firstDayOfWeek, dateWeekDay) {\n  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek ? dateWeekDay + TimeConstants.DaysInOneWeek : dateWeekDay;\n}\n/**\n * Returns the day number for a date in a year\n * The number of days since January 1st in the particular year.\n * @param date - A date to find the day number for.\n * @returns The day's number in the year.\n */\n\n\nfunction getDayOfYear(date) {\n  var month = date.getMonth();\n  var year = date.getFullYear();\n  var daysUntilDate = 0;\n\n  for (var i = 0; i < month; i++) {\n    daysUntilDate += daysInMonth(i + 1, year);\n  }\n\n  daysUntilDate += date.getDate();\n  return daysUntilDate;\n}\n/**\n * Returns the number of days in the month\n * @param month - The month number to target (months 1-12).\n * @param year - The year to target.\n * @returns The number of days in the month.\n */\n\n\nfunction daysInMonth(month, year) {\n  return new Date(year, month, 0).getDate();\n}","map":{"version":3,"sources":["dateMath/dateMath.ts"],"names":[],"mappings":"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","sourcesContent":["import { DayOfWeek, MonthOfYear, FirstWeekOfYear, DateRangeType } from '../dateValues/dateValues';\nimport TimeConstants from '../dateValues/timeConstants';\n\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param date - The origin date\n * @param days - The number of days to offset. 'days' can be negative.\n * @returns A new Date object offset from the origin date by the given number of days\n */\nexport function addDays(date: Date, days: number): Date {\n  const result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param date - The origin date\n * @param weeks - The number of weeks to offset. 'weeks' can be negative.\n * @returns A new Date object offset from the origin date by the given number of weeks\n */\nexport function addWeeks(date: Date, weeks: number): Date {\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\n}\n\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param months - The number of months to offset. 'months' can be negative.\n * @returns A new Date object offset from the origin date by the given number of months\n */\nexport function addMonths(date: Date, months: number): Date {\n  let result = new Date(date.getTime());\n  const newMonth = result.getMonth() + months;\n  result.setMonth(newMonth);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((newMonth % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param years - The number of years to offset. 'years' can be negative.\n * @returns A new Date object offset from the origin date by the given number of years\n */\nexport function addYears(date: Date, years: number): Date {\n  let result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((date.getMonth() % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the month.\n */\nexport function getMonthStart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the month.\n */\nexport function getMonthEnd(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the year.\n */\nexport function getYearStart(date: Date): Date {\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the year.\n */\nexport function getYearEnd(date: Date): Date {\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param month - The 0-based index of the month to set on the date.\n * @returns A new Date object with the given month set.\n */\nexport function setMonth(date: Date, month: number): Date {\n  return addMonths(date, month - date.getMonth());\n}\n\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\nexport function compareDates(date1: Date, date2: Date): boolean {\n  if (!date1 && !date2) {\n    return true;\n  } else if (!date1 || !date2) {\n    return false;\n  } else {\n    return (\n      date1.getFullYear() === date2.getFullYear() &&\n      date1.getMonth() === date2.getMonth() &&\n      date1.getDate() === date2.getDate()\n    );\n  }\n}\n\n/**\n * Compare the date parts of two dates\n * @param date1 - The first date to compare\n * @param date2 - The second date to compare\n * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\nexport function compareDatePart(date1: Date, date2: Date): Number {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param date - The input date\n * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param firstDayOfWeek - The first day of the week.\n * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day\n * for multiday view. Defaults to 1\n * @returns An array of dates representing the date range containing the specified date.\n */\nexport function getDateRangeArray(\n  date: Date,\n  dateRangeType: DateRangeType,\n  firstDayOfWeek: DayOfWeek,\n  workWeekDays?: DayOfWeek[],\n  daysToSelectInDayView: number = 1,\n): Date[] {\n  const datesArray = new Array<Date>();\n  let startDate: Date;\n  let endDate = null;\n\n  if (!workWeekDays) {\n    workWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\n  }\n\n  daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);\n\n  switch (dateRangeType) {\n    case DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, daysToSelectInDayView);\n      break;\n\n    case DateRangeType.Week:\n    case DateRangeType.WorkWeek:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\n      break;\n\n    case DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n\n    default:\n      throw new Error('Unexpected object: ' + dateRangeType);\n  }\n\n  // Populate the dates array with the dates in range\n  let nextDate = startDate;\n\n  do {\n    if (dateRangeType !== DateRangeType.WorkWeek) {\n      // push all days not in work week view\n      datesArray.push(nextDate);\n    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n      datesArray.push(nextDate);\n    }\n    nextDate = addDays(nextDate, 1);\n  } while (!compareDates(nextDate, endDate));\n\n  return datesArray;\n}\n\n/**\n * Checks whether the specified date is in the given date range.\n * @param date - The origin date\n * @param dateRange - An array of dates to do the lookup on\n * @returns True if the date matches one of the dates in the specified array, false otherwise.\n */\nexport function isInDateRangeArray(date: Date, dateRange: Date[]): boolean {\n  for (const dateInRange of dateRange) {\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param navigatedDate - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The weeks number array for the current month.\n */\nexport function getWeekNumbersInMonth(\n  weeksInMonth: number,\n  firstDayOfWeek: DayOfWeek,\n  firstWeekOfYear: FirstWeekOfYear,\n  navigatedDate: Date,\n): number[] {\n  const selectedYear = navigatedDate.getFullYear();\n  const selectedMonth = navigatedDate.getMonth();\n  let dayOfMonth = 1;\n  const fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n  const endOfFirstWeek =\n    dayOfMonth +\n    (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) -\n    adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n  let endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n  dayOfMonth = endOfWeekRange.getDate();\n\n  const weeksArray = [];\n  for (let i = 0; i < weeksInMonth; i++) {\n    // Get week number for end of week\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n    dayOfMonth += TimeConstants.DaysInOneWeek;\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n  }\n  return weeksArray;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param date - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The week's number in the year.\n */\nexport function getWeekNumber(date: Date, firstDayOfWeek: DayOfWeek, firstWeekOfYear: FirstWeekOfYear): number {\n  // First four-day week of the year - minumum days count\n  const fourDayWeek = 4;\n\n  switch (firstWeekOfYear) {\n    case FirstWeekOfYear.FirstFullWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\n\n    case FirstWeekOfYear.FirstFourDayWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n\n    default:\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\n  }\n}\n\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getStartDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  let daysOffset = firstDayOfWeek - date.getDay();\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets the date for the last day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getEndDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  const lastDayOfWeek = firstDayOfWeek - 1 >= 0 ? firstDayOfWeek - 1 : TimeConstants.DaysInOneWeek - 1;\n  let daysOffset = lastDayOfWeek - date.getDay();\n  if (daysOffset < 0) {\n    // If last day of week is < date, go 1 week forward, to ensure resulting date is in the future.\n    daysOffset += TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param date - The origin date\n * @returns A new date with the time set to midnight\n */\nfunction getDatePart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n\n/**\n * Helper function to assist in date comparisons\n */\nexport function getDatePartHashValue(date: Date): number {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param numberOfFullDays - week settings.\n * @returns The week's number in the year.\n */\nfunction getWeekOfYearFullDays(date: Date, firstDayOfWeek: DayOfWeek, numberOfFullDays: number): number {\n  const dayOfYear = getDayOfYear(date) - 1;\n  let num = date.getDay() - (dayOfYear % TimeConstants.DaysInOneWeek);\n\n  const lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\n  const daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n\n  let num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\n    num2 -= TimeConstants.DaysInOneWeek;\n  }\n\n  let num3 = dayOfYear - num2;\n  if (num3 < 0) {\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n      num2 -= TimeConstants.DaysInOneWeek;\n    }\n\n    num3 = daysInYear - num2;\n  }\n\n  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @returns The week's number in the year.\n */\nfunction getFirstDayWeekOfYear(date: Date, firstDayOfWeek: number): number {\n  const num = getDayOfYear(date) - 1;\n  const num2 = date.getDay() - (num % TimeConstants.DaysInOneWeek);\n  const num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns adjusted week day number when firstDayOfWeek is other than Sunday\n * For Week Day Number comparison checks\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param dateWeekDay - shifts number forward to 1 week in case passed as true\n * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),\n * Sunday becomes 7.\n */\nfunction adjustWeekDay(firstDayOfWeek: DayOfWeek, dateWeekDay: DayOfWeek): number {\n  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek\n    ? dateWeekDay + TimeConstants.DaysInOneWeek\n    : dateWeekDay;\n}\n\n/**\n * Returns the day number for a date in a year\n * The number of days since January 1st in the particular year.\n * @param date - A date to find the day number for.\n * @returns The day's number in the year.\n */\nfunction getDayOfYear(date: Date): number {\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  let daysUntilDate = 0;\n\n  for (let i = 0; i < month; i++) {\n    daysUntilDate += daysInMonth(i + 1, year);\n  }\n\n  daysUntilDate += date.getDate();\n\n  return daysUntilDate;\n}\n\n/**\n * Returns the number of days in the month\n * @param month - The month number to target (months 1-12).\n * @param year - The year to target.\n * @returns The number of days in the month.\n */\nfunction daysInMonth(month: number, year: number): number {\n  return new Date(year, month, 0).getDate();\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}