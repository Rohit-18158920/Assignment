{"ast":null,"code":"import { Shade } from '../../utilities/color/shades';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { mapEnumByName } from '../../Utilities';\n/* This is the set of rules for our default theme.\n   We start with three base slots, defining the background, foreground (text), and\n   primary color (sometimes called theme color). Each Fabric slot is generated from\n   shades (or tints) of one of those three, creating the Fabric palette.\n   Then, we have semantic slots, the new thing intended to eventually replace the\n   Fabric palette. The semantic slots inherit from the Fabric palette. */\n\n/* The most minimal set of slots we start with. All other ones can be generated based on rules.\n * This is not so much an enum as it is a list. The enum is used to insure \"type\"-safety.\n * For now, we are only dealing with color. */\n\nexport var BaseSlots;\n\n(function (BaseSlots) {\n  BaseSlots[BaseSlots[\"primaryColor\"] = 0] = \"primaryColor\";\n  BaseSlots[BaseSlots[\"backgroundColor\"] = 1] = \"backgroundColor\";\n  BaseSlots[BaseSlots[\"foregroundColor\"] = 2] = \"foregroundColor\";\n})(BaseSlots || (BaseSlots = {}));\n/* The original Fabric palette, only for back-compat. */\n\n\nexport var FabricSlots;\n\n(function (FabricSlots) {\n  FabricSlots[FabricSlots[\"themePrimary\"] = 0] = \"themePrimary\";\n  FabricSlots[FabricSlots[\"themeLighterAlt\"] = 1] = \"themeLighterAlt\";\n  FabricSlots[FabricSlots[\"themeLighter\"] = 2] = \"themeLighter\";\n  FabricSlots[FabricSlots[\"themeLight\"] = 3] = \"themeLight\";\n  FabricSlots[FabricSlots[\"themeTertiary\"] = 4] = \"themeTertiary\";\n  FabricSlots[FabricSlots[\"themeSecondary\"] = 5] = \"themeSecondary\";\n  FabricSlots[FabricSlots[\"themeDarkAlt\"] = 6] = \"themeDarkAlt\";\n  FabricSlots[FabricSlots[\"themeDark\"] = 7] = \"themeDark\";\n  FabricSlots[FabricSlots[\"themeDarker\"] = 8] = \"themeDarker\";\n  FabricSlots[FabricSlots[\"neutralLighterAlt\"] = 9] = \"neutralLighterAlt\";\n  FabricSlots[FabricSlots[\"neutralLighter\"] = 10] = \"neutralLighter\";\n  FabricSlots[FabricSlots[\"neutralLight\"] = 11] = \"neutralLight\";\n  FabricSlots[FabricSlots[\"neutralQuaternaryAlt\"] = 12] = \"neutralQuaternaryAlt\";\n  FabricSlots[FabricSlots[\"neutralQuaternary\"] = 13] = \"neutralQuaternary\";\n  FabricSlots[FabricSlots[\"neutralTertiaryAlt\"] = 14] = \"neutralTertiaryAlt\";\n  FabricSlots[FabricSlots[\"neutralTertiary\"] = 15] = \"neutralTertiary\"; // deprecated: neutralSecondaryAlt, // BaseSlots.foregroundColor, Shade[Shade.Shade4]);\n\n  FabricSlots[FabricSlots[\"neutralSecondary\"] = 16] = \"neutralSecondary\";\n  FabricSlots[FabricSlots[\"neutralPrimaryAlt\"] = 17] = \"neutralPrimaryAlt\";\n  FabricSlots[FabricSlots[\"neutralPrimary\"] = 18] = \"neutralPrimary\";\n  FabricSlots[FabricSlots[\"neutralDark\"] = 19] = \"neutralDark\";\n  FabricSlots[FabricSlots[\"black\"] = 20] = \"black\";\n  FabricSlots[FabricSlots[\"white\"] = 21] = \"white\";\n})(FabricSlots || (FabricSlots = {}));\n/* List of all the semantic color slots for this theme.\n * This is not so much an enum as it is a list. The enum is used to insure \"type\"-safety. */\n\n\nexport var SemanticColorSlots;\n\n(function (SemanticColorSlots) {\n  SemanticColorSlots[SemanticColorSlots[\"bodyBackground\"] = 0] = \"bodyBackground\";\n  SemanticColorSlots[SemanticColorSlots[\"bodyText\"] = 1] = \"bodyText\";\n  SemanticColorSlots[SemanticColorSlots[\"disabledBackground\"] = 2] = \"disabledBackground\";\n  SemanticColorSlots[SemanticColorSlots[\"disabledText\"] = 3] = \"disabledText\";\n})(SemanticColorSlots || (SemanticColorSlots = {}));\n\nexport function themeRulesStandardCreator() {\n  var slotRules = {};\n  /*** BASE COLORS and their SHADES */\n  // iterate through each base slot and make the SlotRules for those\n\n  mapEnumByName(BaseSlots, function (baseSlot) {\n    // first make the SlotRule for the unshaded base Color\n    slotRules[baseSlot] = {\n      name: baseSlot,\n      isCustomized: true,\n      dependentRules: []\n    }; // then make a rule for each shade of this base color, but skip unshaded\n\n    mapEnumByName(Shade, function (shadeName, shadeValue) {\n      if (shadeName === Shade[Shade.Unshaded]) {\n        return;\n      }\n\n      var inherits = slotRules[baseSlot];\n      var thisSlotRule = {\n        name: baseSlot + shadeName,\n        inherits: slotRules[baseSlot],\n        asShade: shadeValue,\n        isCustomized: false,\n        isBackgroundShade: baseSlot === BaseSlots[BaseSlots.backgroundColor] ? true : false,\n        dependentRules: []\n      };\n      slotRules[baseSlot + shadeName] = thisSlotRule;\n      inherits.dependentRules.push(thisSlotRule);\n      return undefined;\n    });\n    return undefined;\n  }); // set default colors for the base colors\n\n  slotRules[BaseSlots[BaseSlots.primaryColor]].color = getColorFromString('#0078d4');\n  slotRules[BaseSlots[BaseSlots.backgroundColor]].color = getColorFromString('#ffffff');\n  slotRules[BaseSlots[BaseSlots.foregroundColor]].color = getColorFromString('#323130');\n\n  function _makeFabricSlotRule(slotName, inheritedBase, inheritedShade, isBackgroundShade) {\n    if (isBackgroundShade === void 0) {\n      isBackgroundShade = false;\n    }\n\n    var inherits = slotRules[BaseSlots[inheritedBase]];\n    var thisSlotRule = {\n      name: slotName,\n      inherits: inherits,\n      asShade: inheritedShade,\n      isCustomized: false,\n      isBackgroundShade: isBackgroundShade,\n      dependentRules: []\n    };\n    slotRules[slotName] = thisSlotRule;\n    inherits.dependentRules.push(thisSlotRule);\n  }\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themePrimary], BaseSlots.primaryColor, Shade.Unshaded);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLighterAlt], BaseSlots.primaryColor, Shade.Shade1);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLighter], BaseSlots.primaryColor, Shade.Shade2);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLight], BaseSlots.primaryColor, Shade.Shade3);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeTertiary], BaseSlots.primaryColor, Shade.Shade4);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeSecondary], BaseSlots.primaryColor, Shade.Shade5);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDarkAlt], BaseSlots.primaryColor, Shade.Shade6);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDark], BaseSlots.primaryColor, Shade.Shade7);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDarker], BaseSlots.primaryColor, Shade.Shade8);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLighterAlt], BaseSlots.backgroundColor, Shade.Shade1, true);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLighter], BaseSlots.backgroundColor, Shade.Shade2, true);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLight], BaseSlots.backgroundColor, Shade.Shade3, true);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralQuaternaryAlt], BaseSlots.backgroundColor, Shade.Shade4, true);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralQuaternary], BaseSlots.backgroundColor, Shade.Shade5, true); // bg6 or fg2\n\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralTertiaryAlt], BaseSlots.backgroundColor, Shade.Shade6, true);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralTertiary], BaseSlots.foregroundColor, Shade.Shade3);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralSecondary], BaseSlots.foregroundColor, Shade.Shade4);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralPrimaryAlt], BaseSlots.foregroundColor, Shade.Shade5);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralPrimary], BaseSlots.foregroundColor, Shade.Unshaded);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralDark], BaseSlots.foregroundColor, Shade.Shade7);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.black], BaseSlots.foregroundColor, Shade.Shade8);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.white], BaseSlots.backgroundColor, Shade.Unshaded, true);\n\n  slotRules[FabricSlots[FabricSlots.neutralLighterAlt]].color = getColorFromString('#faf9f8');\n  slotRules[FabricSlots[FabricSlots.neutralLighter]].color = getColorFromString('#f3f2f1');\n  slotRules[FabricSlots[FabricSlots.neutralLight]].color = getColorFromString('#edebe9');\n  slotRules[FabricSlots[FabricSlots.neutralQuaternaryAlt]].color = getColorFromString('#e1dfdd');\n  slotRules[FabricSlots[FabricSlots.neutralDark]].color = getColorFromString('#201f1e');\n  slotRules[FabricSlots[FabricSlots.neutralTertiaryAlt]].color = getColorFromString('#c8c6c4');\n  slotRules[FabricSlots[FabricSlots.black]].color = getColorFromString('#000000');\n  slotRules[FabricSlots[FabricSlots.neutralDark]].color = getColorFromString('#201f1e');\n  slotRules[FabricSlots[FabricSlots.neutralPrimaryAlt]].color = getColorFromString('#3b3a39');\n  slotRules[FabricSlots[FabricSlots.neutralSecondary]].color = getColorFromString('#605e5c');\n  slotRules[FabricSlots[FabricSlots.neutralTertiary]].color = getColorFromString('#a19f9d');\n  slotRules[FabricSlots[FabricSlots.white]].color = getColorFromString('#ffffff');\n  slotRules[FabricSlots[FabricSlots.themeDarker]].color = getColorFromString('#004578');\n  slotRules[FabricSlots[FabricSlots.themeDark]].color = getColorFromString('#005a9e');\n  slotRules[FabricSlots[FabricSlots.themeDarkAlt]].color = getColorFromString('#106ebe');\n  slotRules[FabricSlots[FabricSlots.themeSecondary]].color = getColorFromString('#2b88d8');\n  slotRules[FabricSlots[FabricSlots.themeTertiary]].color = getColorFromString('#71afe5');\n  slotRules[FabricSlots[FabricSlots.themeLight]].color = getColorFromString('#c7e0f4');\n  slotRules[FabricSlots[FabricSlots.themeLighter]].color = getColorFromString('#deecf9');\n  slotRules[FabricSlots[FabricSlots.themeLighterAlt]].color = getColorFromString('#eff6fc');\n  slotRules[FabricSlots[FabricSlots.neutralLighterAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralLighter]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralLight]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralQuaternaryAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralDark]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralTertiaryAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.black]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralDark]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralPrimaryAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralSecondary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralTertiary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.white]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeDarker]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeDark]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeDarkAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themePrimary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeSecondary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeTertiary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeLight]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeLighter]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeLighterAlt]].isCustomized = true;\n  return slotRules;\n}","map":{"version":3,"sources":["components/ThemeGenerator/ThemeRulesStandard.ts"],"names":[],"mappings":"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","sourcesContent":["import { Shade } from '../../utilities/color/shades';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { mapEnumByName } from '../../Utilities';\n\nimport { IThemeRules } from './IThemeRules';\n\n/* This is the set of rules for our default theme.\n   We start with three base slots, defining the background, foreground (text), and\n   primary color (sometimes called theme color). Each Fabric slot is generated from\n   shades (or tints) of one of those three, creating the Fabric palette.\n   Then, we have semantic slots, the new thing intended to eventually replace the\n   Fabric palette. The semantic slots inherit from the Fabric palette. */\n\n/* The most minimal set of slots we start with. All other ones can be generated based on rules.\n * This is not so much an enum as it is a list. The enum is used to insure \"type\"-safety.\n * For now, we are only dealing with color. */\nexport enum BaseSlots {\n  primaryColor,\n  backgroundColor,\n  foregroundColor,\n}\n\n/* The original Fabric palette, only for back-compat. */\nexport enum FabricSlots {\n  themePrimary, // BaseSlots.primaryColor, Shade[Shade.Unshaded]);\n  themeLighterAlt, // BaseSlots.primaryColor, Shade[Shade.Shade1]);\n  themeLighter, // BaseSlots.primaryColor, Shade[Shade.Shade2]);\n  themeLight, // BaseSlots.primaryColor, Shade[Shade.Shade3]);\n  themeTertiary, // BaseSlots.primaryColor, Shade[Shade.Shade4]);\n  themeSecondary, // BaseSlots.primaryColor, Shade[Shade.Shade5]);\n  themeDarkAlt, // BaseSlots.primaryColor, Shade[Shade.Shade6]);\n  themeDark, // BaseSlots.primaryColor, Shade[Shade.Shade7]);\n  themeDarker, // BaseSlots.primaryColor, Shade[Shade.Shade8]);\n\n  neutralLighterAlt, // BaseSlots.backgroundColor, Shade[Shade.Shade1]);\n  neutralLighter, // BaseSlots.backgroundColor, Shade[Shade.Shade2]);\n  neutralLight, // BaseSlots.backgroundColor, Shade[Shade.Shade3]);\n  neutralQuaternaryAlt, // BaseSlots.backgroundColor, Shade[Shade.Shade4]);\n  neutralQuaternary, // BaseSlots.backgroundColor, Shade[Shade.Shade5]);\n  neutralTertiaryAlt, // BaseSlots.backgroundColor, Shade[Shade.Shade6]); // bg6 or fg2\n  neutralTertiary, // BaseSlots.foregroundColor, Shade[Shade.Shade3]);\n  // deprecated: neutralSecondaryAlt, // BaseSlots.foregroundColor, Shade[Shade.Shade4]);\n  neutralSecondary, // BaseSlots.foregroundColor, Shade[Shade.Shade5]);\n  neutralPrimaryAlt, // BaseSlots.foregroundColor, Shade[Shade.Shade6]);\n  neutralPrimary, // BaseSlots.foregroundColor, Shade[Shade.Unshaded]);\n  neutralDark, // BaseSlots.foregroundColor, Shade[Shade.Shade7]);\n\n  black, // BaseSlots.foregroundColor, Shade[Shade.Shade8]);\n  white, // BaseSlots.backgroundColor, Shade[Shade.Unshaded]);\n}\n\n/* List of all the semantic color slots for this theme.\n * This is not so much an enum as it is a list. The enum is used to insure \"type\"-safety. */\nexport enum SemanticColorSlots {\n  bodyBackground,\n  bodyText,\n  disabledBackground,\n  disabledText,\n}\n\nexport function themeRulesStandardCreator(): IThemeRules {\n  const slotRules: IThemeRules = {};\n\n  /*** BASE COLORS and their SHADES */\n  // iterate through each base slot and make the SlotRules for those\n  mapEnumByName(BaseSlots, (baseSlot: string) => {\n    // first make the SlotRule for the unshaded base Color\n    slotRules[baseSlot] = {\n      name: baseSlot,\n      isCustomized: true,\n      dependentRules: [],\n    };\n\n    // then make a rule for each shade of this base color, but skip unshaded\n    mapEnumByName(Shade, (shadeName: string, shadeValue: Shade) => {\n      if (shadeName === Shade[Shade.Unshaded]) {\n        return;\n      }\n      const inherits = slotRules[baseSlot];\n      const thisSlotRule = {\n        name: baseSlot + shadeName,\n        inherits: slotRules[baseSlot],\n        asShade: shadeValue,\n        isCustomized: false,\n        isBackgroundShade: baseSlot === BaseSlots[BaseSlots.backgroundColor] ? true : false,\n        dependentRules: [],\n      };\n      slotRules[baseSlot + shadeName] = thisSlotRule;\n      inherits.dependentRules.push(thisSlotRule);\n\n      return undefined;\n    });\n\n    return undefined;\n  });\n\n  // set default colors for the base colors\n  slotRules[BaseSlots[BaseSlots.primaryColor]].color = getColorFromString('#0078d4');\n  slotRules[BaseSlots[BaseSlots.backgroundColor]].color = getColorFromString('#ffffff');\n  slotRules[BaseSlots[BaseSlots.foregroundColor]].color = getColorFromString('#323130');\n\n  function _makeFabricSlotRule(\n    slotName: string,\n    inheritedBase: BaseSlots,\n    inheritedShade: Shade,\n    isBackgroundShade = false,\n  ): void {\n    const inherits = slotRules[BaseSlots[inheritedBase]];\n    const thisSlotRule = {\n      name: slotName,\n      inherits: inherits,\n      asShade: inheritedShade,\n      isCustomized: false,\n      isBackgroundShade: isBackgroundShade,\n      dependentRules: [],\n    };\n    slotRules[slotName] = thisSlotRule;\n    inherits.dependentRules.push(thisSlotRule);\n  }\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themePrimary], BaseSlots.primaryColor, Shade.Unshaded);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLighterAlt], BaseSlots.primaryColor, Shade.Shade1);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLighter], BaseSlots.primaryColor, Shade.Shade2);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLight], BaseSlots.primaryColor, Shade.Shade3);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeTertiary], BaseSlots.primaryColor, Shade.Shade4);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeSecondary], BaseSlots.primaryColor, Shade.Shade5);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDarkAlt], BaseSlots.primaryColor, Shade.Shade6);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDark], BaseSlots.primaryColor, Shade.Shade7);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDarker], BaseSlots.primaryColor, Shade.Shade8);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLighterAlt], BaseSlots.backgroundColor, Shade.Shade1, true);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLighter], BaseSlots.backgroundColor, Shade.Shade2, true);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLight], BaseSlots.backgroundColor, Shade.Shade3, true);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralQuaternaryAlt], BaseSlots.backgroundColor, Shade.Shade4, true);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralQuaternary], BaseSlots.backgroundColor, Shade.Shade5, true);\n  // bg6 or fg2\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralTertiaryAlt], BaseSlots.backgroundColor, Shade.Shade6, true);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralTertiary], BaseSlots.foregroundColor, Shade.Shade3);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralSecondary], BaseSlots.foregroundColor, Shade.Shade4);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralPrimaryAlt], BaseSlots.foregroundColor, Shade.Shade5);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralPrimary], BaseSlots.foregroundColor, Shade.Unshaded);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralDark], BaseSlots.foregroundColor, Shade.Shade7);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.black], BaseSlots.foregroundColor, Shade.Shade8);\n  _makeFabricSlotRule(FabricSlots[FabricSlots.white], BaseSlots.backgroundColor, Shade.Unshaded, true);\n\n  slotRules[FabricSlots[FabricSlots.neutralLighterAlt]].color = getColorFromString('#faf9f8');\n  slotRules[FabricSlots[FabricSlots.neutralLighter]].color = getColorFromString('#f3f2f1');\n  slotRules[FabricSlots[FabricSlots.neutralLight]].color = getColorFromString('#edebe9');\n  slotRules[FabricSlots[FabricSlots.neutralQuaternaryAlt]].color = getColorFromString('#e1dfdd');\n  slotRules[FabricSlots[FabricSlots.neutralDark]].color = getColorFromString('#201f1e');\n  slotRules[FabricSlots[FabricSlots.neutralTertiaryAlt]].color = getColorFromString('#c8c6c4');\n\n  slotRules[FabricSlots[FabricSlots.black]].color = getColorFromString('#000000');\n  slotRules[FabricSlots[FabricSlots.neutralDark]].color = getColorFromString('#201f1e');\n  slotRules[FabricSlots[FabricSlots.neutralPrimaryAlt]].color = getColorFromString('#3b3a39');\n  slotRules[FabricSlots[FabricSlots.neutralSecondary]].color = getColorFromString('#605e5c');\n  slotRules[FabricSlots[FabricSlots.neutralTertiary]].color = getColorFromString('#a19f9d');\n  slotRules[FabricSlots[FabricSlots.white]].color = getColorFromString('#ffffff');\n\n  slotRules[FabricSlots[FabricSlots.themeDarker]].color = getColorFromString('#004578');\n  slotRules[FabricSlots[FabricSlots.themeDark]].color = getColorFromString('#005a9e');\n  slotRules[FabricSlots[FabricSlots.themeDarkAlt]].color = getColorFromString('#106ebe');\n  slotRules[FabricSlots[FabricSlots.themeSecondary]].color = getColorFromString('#2b88d8');\n  slotRules[FabricSlots[FabricSlots.themeTertiary]].color = getColorFromString('#71afe5');\n  slotRules[FabricSlots[FabricSlots.themeLight]].color = getColorFromString('#c7e0f4');\n  slotRules[FabricSlots[FabricSlots.themeLighter]].color = getColorFromString('#deecf9');\n  slotRules[FabricSlots[FabricSlots.themeLighterAlt]].color = getColorFromString('#eff6fc');\n\n  slotRules[FabricSlots[FabricSlots.neutralLighterAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralLighter]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralLight]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralQuaternaryAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralDark]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralTertiaryAlt]].isCustomized = true;\n\n  slotRules[FabricSlots[FabricSlots.black]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralDark]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralPrimaryAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralSecondary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.neutralTertiary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.white]].isCustomized = true;\n\n  slotRules[FabricSlots[FabricSlots.themeDarker]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeDark]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeDarkAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themePrimary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeSecondary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeTertiary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeLight]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeLighter]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeLighterAlt]].isCustomized = true;\n\n  return slotRules;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}