{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, warnDeprecations, getId, KeyCodes, classNamesFunction, getNativeProps, inputProperties } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'SearchBox';\n\nvar SearchBoxBase =\n/** @class */\nfunction (_super) {\n  __extends(SearchBoxBase, _super);\n\n  function SearchBoxBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._rootElement = React.createRef();\n    _this._inputElement = React.createRef();\n\n    _this._onClickFocus = function () {\n      var inputElement = _this._inputElement.current;\n\n      if (inputElement) {\n        _this.focus();\n\n        inputElement.selectionStart = inputElement.selectionEnd = 0;\n      }\n    };\n\n    _this._onFocusCapture = function (ev) {\n      _this.setState({\n        hasFocus: true\n      });\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(ev);\n      }\n    };\n\n    _this._onClearClick = function (ev) {\n      var clearButtonProps = _this.props.clearButtonProps;\n\n      if (clearButtonProps && clearButtonProps.onClick) {\n        clearButtonProps.onClick(ev);\n      }\n\n      if (!ev.defaultPrevented) {\n        _this._onClear(ev);\n      }\n    };\n\n    _this._onKeyDown = function (ev) {\n      switch (ev.which) {\n        case KeyCodes.escape:\n          _this.props.onEscape && _this.props.onEscape(ev); // Only call onClear if the search box has a value to clear. Otherwise, allow the Esc key\n          // to propagate from the empty search box to a parent element such as a dialog, etc.\n\n          if (_this.state.value && !ev.defaultPrevented) {\n            _this._onClear(ev);\n          }\n\n          break;\n\n        case KeyCodes.enter:\n          if (_this.props.onSearch) {\n            _this.props.onSearch(_this.state.value);\n\n            ev.preventDefault();\n            ev.stopPropagation();\n          }\n\n          break;\n\n        default:\n          _this.props.onKeyDown && _this.props.onKeyDown(ev);\n\n          if (ev.defaultPrevented) {\n            ev.stopPropagation();\n          }\n\n          break;\n      }\n    };\n\n    _this._onBlur = function (ev) {\n      _this.setState({\n        hasFocus: false\n      });\n\n      if (_this.props.onBlur) {\n        _this.props.onBlur(ev);\n      }\n    };\n\n    _this._onInputChange = function (ev) {\n      var value = ev.target.value;\n\n      if (value === _this._latestValue) {\n        return;\n      }\n\n      _this._latestValue = value;\n\n      _this.setState({\n        value: value\n      });\n\n      _this._callOnChange(ev, value);\n    };\n\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      labelText: 'placeholder',\n      defaultValue: 'value'\n    });\n    _this._latestValue = props.value || '';\n    _this._fallbackId = getId(COMPONENT_NAME);\n    _this.state = {\n      value: _this._latestValue,\n      hasFocus: false\n    };\n    return _this;\n  }\n\n  SearchBoxBase.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    if (newProps.value !== undefined) {\n      this._latestValue = newProps.value; // If the user passes in null, substitute an empty string\n      // (passing null is not allowed per typings, but users might do it anyway)\n\n      this.setState({\n        value: newProps.value || ''\n      });\n    }\n  };\n\n  SearchBoxBase.prototype.render = function () {\n    var _a = this.props,\n        ariaLabel = _a.ariaLabel,\n        placeholder = _a.placeholder,\n        className = _a.className,\n        disabled = _a.disabled,\n        underlined = _a.underlined,\n        styles = _a.styles,\n        // eslint-disable-next-line deprecation/deprecation\n    labelText = _a.labelText,\n        theme = _a.theme,\n        clearButtonProps = _a.clearButtonProps,\n        disableAnimation = _a.disableAnimation,\n        iconProps = _a.iconProps,\n        role = _a.role,\n        _b = _a.id,\n        id = _b === void 0 ? this._fallbackId : _b;\n    var _c = this.state,\n        value = _c.value,\n        hasFocus = _c.hasFocus;\n    var placeholderValue = placeholder !== undefined ? placeholder : labelText;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      underlined: underlined,\n      hasFocus: hasFocus,\n      disabled: disabled,\n      hasInput: value.length > 0,\n      disableAnimation: disableAnimation\n    });\n    var nativeProps = getNativeProps(this.props, inputProperties, ['className', 'placeholder', 'onFocus', 'onBlur', 'value', 'role']);\n    return React.createElement(\"div\", {\n      role: role,\n      ref: this._rootElement,\n      className: classNames.root,\n      onFocusCapture: this._onFocusCapture\n    }, React.createElement(\"div\", {\n      className: classNames.iconContainer,\n      onClick: this._onClickFocus,\n      \"aria-hidden\": true\n    }, React.createElement(Icon, __assign({\n      iconName: \"Search\"\n    }, iconProps, {\n      className: classNames.icon\n    }))), React.createElement(\"input\", __assign({}, nativeProps, {\n      id: id,\n      className: classNames.field,\n      placeholder: placeholderValue,\n      onChange: this._onInputChange,\n      onInput: this._onInputChange,\n      onBlur: this._onBlur,\n      onKeyDown: this._onKeyDown,\n      value: value,\n      disabled: disabled,\n      role: \"searchbox\",\n      \"aria-label\": ariaLabel,\n      ref: this._inputElement\n    })), value.length > 0 && React.createElement(\"div\", {\n      className: classNames.clearButton\n    }, React.createElement(IconButton, __assign({\n      onBlur: this._onBlur,\n      styles: {\n        root: {\n          height: 'auto'\n        },\n        icon: {\n          fontSize: '12px'\n        }\n      },\n      iconProps: {\n        iconName: 'Clear'\n      }\n    }, clearButtonProps, {\n      onClick: this._onClearClick\n    }))));\n  };\n  /**\n   * Sets focus to the search box input field\n   */\n\n\n  SearchBoxBase.prototype.focus = function () {\n    if (this._inputElement.current) {\n      this._inputElement.current.focus();\n    }\n  };\n  /**\n   * Returns whether or not the SearchBox has focus\n   */\n\n\n  SearchBoxBase.prototype.hasFocus = function () {\n    return !!this.state.hasFocus;\n  };\n\n  SearchBoxBase.prototype._onClear = function (ev) {\n    this.props.onClear && this.props.onClear(ev);\n\n    if (!ev.defaultPrevented) {\n      this._latestValue = '';\n      this.setState({\n        value: ''\n      });\n\n      this._callOnChange(undefined, '');\n\n      ev.stopPropagation();\n      ev.preventDefault();\n      this.focus();\n    }\n  };\n\n  SearchBoxBase.prototype._callOnChange = function (ev, newValue) {\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n        onChange = _a.onChange,\n        onChanged = _a.onChanged; // Call @deprecated method.\n\n    if (onChanged) {\n      onChanged(newValue);\n    }\n\n    if (onChange) {\n      onChange(ev, newValue);\n    }\n  };\n\n  SearchBoxBase.defaultProps = {\n    disableAnimation: false,\n    clearButtonProps: {\n      ariaLabel: 'Clear text'\n    }\n  };\n  return SearchBoxBase;\n}(React.Component);\n\nexport { SearchBoxBase };","map":{"version":3,"sources":["components/SearchBox/SearchBox.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ISearchBoxProps, ISearchBoxStyleProps, ISearchBoxStyles } from './SearchBox.types';\nimport {\n  initializeComponentRef,\n  warnDeprecations,\n  getId,\n  KeyCodes,\n  classNamesFunction,\n  getNativeProps,\n  inputProperties,\n} from '../../Utilities';\n\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\n\nconst getClassNames = classNamesFunction<ISearchBoxStyleProps, ISearchBoxStyles>();\nconst COMPONENT_NAME = 'SearchBox';\n\nexport interface ISearchBoxState {\n  value?: string;\n  hasFocus?: boolean;\n}\n\nexport class SearchBoxBase extends React.Component<ISearchBoxProps, ISearchBoxState> {\n  public static defaultProps: Pick<ISearchBoxProps, 'disableAnimation' | 'clearButtonProps'> = {\n    disableAnimation: false,\n    clearButtonProps: { ariaLabel: 'Clear text' },\n  };\n\n  private _rootElement = React.createRef<HTMLDivElement>();\n  private _inputElement = React.createRef<HTMLInputElement>();\n  private _latestValue: string;\n  private _fallbackId: string;\n\n  public constructor(props: ISearchBoxProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      labelText: 'placeholder',\n      defaultValue: 'value',\n    });\n\n    this._latestValue = props.value || '';\n    this._fallbackId = getId(COMPONENT_NAME);\n\n    this.state = {\n      value: this._latestValue,\n      hasFocus: false,\n    };\n  }\n\n  public UNSAFE_componentWillReceiveProps(newProps: ISearchBoxProps): void {\n    if (newProps.value !== undefined) {\n      this._latestValue = newProps.value;\n      // If the user passes in null, substitute an empty string\n      // (passing null is not allowed per typings, but users might do it anyway)\n      this.setState({\n        value: newProps.value || '',\n      });\n    }\n  }\n\n  public render() {\n    const {\n      ariaLabel,\n      placeholder,\n      className,\n      disabled,\n      underlined,\n      styles,\n      // eslint-disable-next-line deprecation/deprecation\n      labelText,\n      theme,\n      clearButtonProps,\n      disableAnimation,\n      iconProps,\n      role,\n      id = this._fallbackId,\n    } = this.props;\n    const { value, hasFocus } = this.state;\n    const placeholderValue = placeholder !== undefined ? placeholder : labelText;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      underlined,\n      hasFocus,\n      disabled,\n      hasInput: value!.length > 0,\n      disableAnimation,\n    });\n\n    const nativeProps = getNativeProps<React.InputHTMLAttributes<HTMLInputElement>>(this.props, inputProperties, [\n      'className',\n      'placeholder',\n      'onFocus',\n      'onBlur',\n      'value',\n      'role',\n    ]);\n\n    return (\n      <div role={role} ref={this._rootElement} className={classNames.root} onFocusCapture={this._onFocusCapture}>\n        <div className={classNames.iconContainer} onClick={this._onClickFocus} aria-hidden={true}>\n          <Icon iconName=\"Search\" {...iconProps} className={classNames.icon} />\n        </div>\n        <input\n          {...nativeProps}\n          id={id}\n          className={classNames.field}\n          placeholder={placeholderValue}\n          onChange={this._onInputChange}\n          onInput={this._onInputChange}\n          onBlur={this._onBlur}\n          onKeyDown={this._onKeyDown}\n          value={value}\n          disabled={disabled}\n          role=\"searchbox\"\n          aria-label={ariaLabel}\n          ref={this._inputElement}\n        />\n        {value!.length > 0 && (\n          <div className={classNames.clearButton}>\n            <IconButton\n              onBlur={this._onBlur}\n              styles={{ root: { height: 'auto' }, icon: { fontSize: '12px' } }}\n              iconProps={{ iconName: 'Clear' }}\n              {...clearButtonProps}\n              onClick={this._onClearClick}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus to the search box input field\n   */\n  public focus() {\n    if (this._inputElement.current) {\n      this._inputElement.current.focus();\n    }\n  }\n\n  /**\n   * Returns whether or not the SearchBox has focus\n   */\n  public hasFocus(): boolean {\n    return !!this.state.hasFocus;\n  }\n\n  private _onClear(ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement> | React.KeyboardEvent<HTMLElement>) {\n    this.props.onClear && this.props.onClear(ev);\n    if (!ev.defaultPrevented) {\n      this._latestValue = '';\n      this.setState({\n        value: '',\n      });\n      this._callOnChange(undefined, '');\n      ev.stopPropagation();\n      ev.preventDefault();\n\n      this.focus();\n    }\n  }\n\n  private _onClickFocus = () => {\n    const inputElement = this._inputElement.current;\n    if (inputElement) {\n      this.focus();\n      inputElement.selectionStart = inputElement.selectionEnd = 0;\n    }\n  };\n\n  private _onFocusCapture = (ev: React.FocusEvent<HTMLElement>) => {\n    this.setState({\n      hasFocus: true,\n    });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(ev as React.FocusEvent<HTMLInputElement>);\n    }\n  };\n\n  private _onClearClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    const { clearButtonProps } = this.props;\n\n    if (clearButtonProps && clearButtonProps.onClick) {\n      clearButtonProps.onClick(ev);\n    }\n\n    if (!ev.defaultPrevented) {\n      this._onClear(ev);\n    }\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    switch (ev.which) {\n      case KeyCodes.escape:\n        this.props.onEscape && this.props.onEscape(ev);\n        // Only call onClear if the search box has a value to clear. Otherwise, allow the Esc key\n        // to propagate from the empty search box to a parent element such as a dialog, etc.\n        if (this.state.value && !ev.defaultPrevented) {\n          this._onClear(ev);\n        }\n        break;\n\n      case KeyCodes.enter:\n        if (this.props.onSearch) {\n          this.props.onSearch(this.state.value);\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n        break;\n\n      default:\n        this.props.onKeyDown && this.props.onKeyDown(ev);\n        if (ev.defaultPrevented) {\n          ev.stopPropagation();\n        }\n        break;\n    }\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement>): void => {\n    this.setState({\n      hasFocus: false,\n    });\n\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n  };\n\n  private _onInputChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    const value = ev.target.value;\n\n    if (value === this._latestValue) {\n      return;\n    }\n    this._latestValue = value;\n\n    this.setState({ value });\n    this._callOnChange(ev, value);\n  };\n\n  private _callOnChange(ev?: React.ChangeEvent<HTMLInputElement>, newValue?: string): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const { onChange, onChanged } = this.props;\n\n    // Call @deprecated method.\n    if (onChanged) {\n      onChanged(newValue);\n    }\n\n    if (onChange) {\n      onChange(ev, newValue);\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}