{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport invariant from 'invariant';\nimport uncontrollable from 'uncontrollable';\nimport chainFunction from './utils/createChainedFunction';\nimport ValidChildren from './utils/ValidComponentChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nvar propTypes = {\n  /**\n   * An HTML `<input>` name for each child button.\n   *\n   * __Required if `type` is set to `'radio'`__\n   */\n  name: PropTypes.string,\n\n  /**\n   * The value, or array of values, of the active (pressed) buttons\n   *\n   * @controllable onChange\n   */\n  value: PropTypes.any,\n\n  /**\n   * Callback fired when a button is pressed, depending on whether the `type`\n   * is `'radio'` or `'checkbox'`, `onChange` will be called with the value or\n   * array of active values\n   *\n   * @controllable values\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The input `type` of the rendered buttons, determines the toggle behavior\n   * of the buttons\n   */\n  type: PropTypes.oneOf(['checkbox', 'radio']).isRequired\n};\nvar defaultProps = {\n  type: 'radio'\n};\n\nvar ToggleButtonGroup = function (_React$Component) {\n  _inherits(ToggleButtonGroup, _React$Component);\n\n  function ToggleButtonGroup() {\n    _classCallCheck(this, ToggleButtonGroup);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  ToggleButtonGroup.prototype.getValues = function getValues() {\n    var value = this.props.value;\n    return value == null ? [] : [].concat(value);\n  };\n\n  ToggleButtonGroup.prototype.handleToggle = function handleToggle(value) {\n    var _props = this.props,\n        type = _props.type,\n        onChange = _props.onChange;\n    var values = this.getValues();\n    var isActive = values.indexOf(value) !== -1;\n\n    if (type === 'radio') {\n      if (!isActive) {\n        onChange(value);\n      }\n\n      return;\n    }\n\n    if (isActive) {\n      onChange(values.filter(function (n) {\n        return n !== value;\n      }));\n    } else {\n      onChange([].concat(values, [value]));\n    }\n  };\n\n  ToggleButtonGroup.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props2 = this.props,\n        children = _props2.children,\n        type = _props2.type,\n        name = _props2.name,\n        props = _objectWithoutProperties(_props2, ['children', 'type', 'name']);\n\n    var values = this.getValues();\n    !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n    delete props.onChange;\n    delete props.value; // the data attribute is required b/c twbs css uses it in the selector\n\n    return React.createElement(ButtonGroup, _extends({}, props, {\n      'data-toggle': 'buttons'\n    }), ValidChildren.map(children, function (child) {\n      var _child$props = child.props,\n          value = _child$props.value,\n          onChange = _child$props.onChange;\n\n      var handler = function handler() {\n        return _this2.handleToggle(value);\n      };\n\n      return React.cloneElement(child, {\n        type: type,\n        name: child.name || name,\n        checked: values.indexOf(value) !== -1,\n        onChange: chainFunction(onChange, handler)\n      });\n    }));\n  };\n\n  return ToggleButtonGroup;\n}(React.Component);\n\nToggleButtonGroup.propTypes = propTypes;\nToggleButtonGroup.defaultProps = defaultProps;\nvar UncontrolledToggleButtonGroup = uncontrollable(ToggleButtonGroup, {\n  value: 'onChange'\n});\nUncontrolledToggleButtonGroup.Button = ToggleButton;\nexport default UncontrolledToggleButtonGroup;","map":{"version":3,"sources":["D:/personalWork/assignment-frontend/node_modules/react-bootstrap/es/ToggleButtonGroup.js"],"names":["_extends","_objectWithoutProperties","_classCallCheck","_possibleConstructorReturn","_inherits","PropTypes","React","invariant","uncontrollable","chainFunction","ValidChildren","ButtonGroup","ToggleButton","propTypes","name","string","value","any","onChange","func","type","oneOf","isRequired","defaultProps","ToggleButtonGroup","_React$Component","apply","arguments","prototype","getValues","props","concat","handleToggle","_props","values","isActive","indexOf","filter","n","render","_this2","_props2","children","process","env","NODE_ENV","createElement","map","child","_child$props","handler","cloneElement","checked","Component","UncontrolledToggleButtonGroup","Button"],"mappings":"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","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport invariant from 'invariant';\nimport uncontrollable from 'uncontrollable';\n\nimport chainFunction from './utils/createChainedFunction';\nimport ValidChildren from './utils/ValidComponentChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\n\nvar propTypes = {\n  /**\n   * An HTML `<input>` name for each child button.\n   *\n   * __Required if `type` is set to `'radio'`__\n   */\n  name: PropTypes.string,\n\n  /**\n   * The value, or array of values, of the active (pressed) buttons\n   *\n   * @controllable onChange\n   */\n  value: PropTypes.any,\n\n  /**\n   * Callback fired when a button is pressed, depending on whether the `type`\n   * is `'radio'` or `'checkbox'`, `onChange` will be called with the value or\n   * array of active values\n   *\n   * @controllable values\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The input `type` of the rendered buttons, determines the toggle behavior\n   * of the buttons\n   */\n  type: PropTypes.oneOf(['checkbox', 'radio']).isRequired\n};\n\nvar defaultProps = {\n  type: 'radio'\n};\n\nvar ToggleButtonGroup = function (_React$Component) {\n  _inherits(ToggleButtonGroup, _React$Component);\n\n  function ToggleButtonGroup() {\n    _classCallCheck(this, ToggleButtonGroup);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  ToggleButtonGroup.prototype.getValues = function getValues() {\n    var value = this.props.value;\n\n    return value == null ? [] : [].concat(value);\n  };\n\n  ToggleButtonGroup.prototype.handleToggle = function handleToggle(value) {\n    var _props = this.props,\n        type = _props.type,\n        onChange = _props.onChange;\n\n    var values = this.getValues();\n    var isActive = values.indexOf(value) !== -1;\n\n    if (type === 'radio') {\n      if (!isActive) {\n        onChange(value);\n      }\n      return;\n    }\n\n    if (isActive) {\n      onChange(values.filter(function (n) {\n        return n !== value;\n      }));\n    } else {\n      onChange([].concat(values, [value]));\n    }\n  };\n\n  ToggleButtonGroup.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props2 = this.props,\n        children = _props2.children,\n        type = _props2.type,\n        name = _props2.name,\n        props = _objectWithoutProperties(_props2, ['children', 'type', 'name']);\n\n    var values = this.getValues();\n\n    !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n\n    delete props.onChange;\n    delete props.value;\n\n    // the data attribute is required b/c twbs css uses it in the selector\n    return React.createElement(\n      ButtonGroup,\n      _extends({}, props, { 'data-toggle': 'buttons' }),\n      ValidChildren.map(children, function (child) {\n        var _child$props = child.props,\n            value = _child$props.value,\n            onChange = _child$props.onChange;\n\n        var handler = function handler() {\n          return _this2.handleToggle(value);\n        };\n\n        return React.cloneElement(child, {\n          type: type,\n          name: child.name || name,\n          checked: values.indexOf(value) !== -1,\n          onChange: chainFunction(onChange, handler)\n        });\n      })\n    );\n  };\n\n  return ToggleButtonGroup;\n}(React.Component);\n\nToggleButtonGroup.propTypes = propTypes;\nToggleButtonGroup.defaultProps = defaultProps;\n\nvar UncontrolledToggleButtonGroup = uncontrollable(ToggleButtonGroup, {\n  value: 'onChange'\n});\n\nUncontrolledToggleButtonGroup.Button = ToggleButton;\n\nexport default UncontrolledToggleButtonGroup;"]},"metadata":{},"sourceType":"module"}