{"ast":null,"code":"import { MAX_COLOR_RGB } from './consts';\n/** Converts RGB components to an HSV color. */\n\nexport function rgb2hsv(r, g, b) {\n  var h = NaN;\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var delta = max - min; // hue\n\n  if (delta === 0) {\n    h = 0;\n  } else if (r === max) {\n    h = (g - b) / delta % 6;\n  } else if (g === max) {\n    h = (b - r) / delta + 2;\n  } else if (b === max) {\n    h = (r - g) / delta + 4;\n  }\n\n  h = Math.round(h * 60);\n\n  if (h < 0) {\n    h += 360;\n  } // saturation\n\n\n  var s = Math.round((max === 0 ? 0 : delta / max) * 100); // value\n\n  var v = Math.round(max / MAX_COLOR_RGB * 100);\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n}","map":{"version":3,"sources":["utilities/color/rgb2hsv.ts"],"names":[],"mappings":"AACA,SAAS,aAAT,QAA8B,UAA9B;AAEA;;AACA,OAAM,SAAU,OAAV,CAAkB,CAAlB,EAA6B,CAA7B,EAAwC,CAAxC,EAAiD;AACrD,MAAI,CAAC,GAAG,GAAR;AACA,MAAM,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAZ;AACA,MAAM,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAZ;AACA,MAAM,KAAK,GAAG,GAAG,GAAG,GAApB,CAJqD,CAMrD;;AACA,MAAI,KAAK,KAAK,CAAd,EAAiB;AACf,IAAA,CAAC,GAAG,CAAJ;AACD,GAFD,MAEO,IAAI,CAAC,KAAK,GAAV,EAAe;AACpB,IAAA,CAAC,GAAI,CAAC,CAAC,GAAG,CAAL,IAAU,KAAX,GAAoB,CAAxB;AACD,GAFM,MAEA,IAAI,CAAC,KAAK,GAAV,EAAe;AACpB,IAAA,CAAC,GAAG,CAAC,CAAC,GAAG,CAAL,IAAU,KAAV,GAAkB,CAAtB;AACD,GAFM,MAEA,IAAI,CAAC,KAAK,GAAV,EAAe;AACpB,IAAA,CAAC,GAAG,CAAC,CAAC,GAAG,CAAL,IAAU,KAAV,GAAkB,CAAtB;AACD;;AAED,EAAA,CAAC,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,GAAG,EAAf,CAAJ;;AAEA,MAAI,CAAC,GAAG,CAAR,EAAW;AACT,IAAA,CAAC,IAAI,GAAL;AACD,GArBoD,CAuBrD;;;AACA,MAAM,CAAC,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,GAAG,KAAK,CAAR,GAAY,CAAZ,GAAgB,KAAK,GAAG,GAAzB,IAAgC,GAA3C,CAAV,CAxBqD,CA0BrD;;AACA,MAAM,CAAC,GAAG,IAAI,CAAC,KAAL,CAAY,GAAG,GAAG,aAAP,GAAwB,GAAnC,CAAV;AAEA,SAAO;AAAE,IAAA,CAAC,EAAA,CAAH;AAAK,IAAA,CAAC,EAAA,CAAN;AAAQ,IAAA,CAAC,EAAA;AAAT,GAAP;AACD","sourcesContent":["import { IHSV } from './interfaces';\nimport { MAX_COLOR_RGB } from './consts';\n\n/** Converts RGB components to an HSV color. */\nexport function rgb2hsv(r: number, g: number, b: number): IHSV {\n  let h = NaN;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const delta = max - min;\n\n  // hue\n  if (delta === 0) {\n    h = 0;\n  } else if (r === max) {\n    h = ((g - b) / delta) % 6;\n  } else if (g === max) {\n    h = (b - r) / delta + 2;\n  } else if (b === max) {\n    h = (r - g) / delta + 4;\n  }\n\n  h = Math.round(h * 60);\n\n  if (h < 0) {\n    h += 360;\n  }\n\n  // saturation\n  const s = Math.round((max === 0 ? 0 : delta / max) * 100);\n\n  // value\n  const v = Math.round((max / MAX_COLOR_RGB) * 100);\n\n  return { h, s, v };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}