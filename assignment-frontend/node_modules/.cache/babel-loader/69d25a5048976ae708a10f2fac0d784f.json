{"ast":null,"code":"import { EventGroup } from './EventGroup';\nimport { findScrollableParent } from './scroll';\nimport { getRect } from './dom/getRect';\nvar SCROLL_ITERATION_DELAY = 16;\nvar SCROLL_GUTTER = 100;\nvar MAX_SCROLL_VELOCITY = 15;\n/**\n * AutoScroll simply hooks up mouse events given a parent element, and scrolls the container\n * up/down depending on how close the mouse is to the top/bottom of the container.\n *\n * Once you don't want autoscroll any more, just dispose the helper and it will unhook events.\n *\n * @public\n * {@docCategory AutoScroll}\n */\n\nvar AutoScroll =\n/** @class */\nfunction () {\n  function AutoScroll(element) {\n    this._events = new EventGroup(this);\n    this._scrollableParent = findScrollableParent(element);\n    this._incrementScroll = this._incrementScroll.bind(this);\n    this._scrollRect = getRect(this._scrollableParent); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    if (this._scrollableParent === window) {\n      this._scrollableParent = document.body;\n    }\n\n    if (this._scrollableParent) {\n      this._events.on(window, 'mousemove', this._onMouseMove, true);\n\n      this._events.on(window, 'touchmove', this._onTouchMove, true);\n    }\n  }\n\n  AutoScroll.prototype.dispose = function () {\n    this._events.dispose();\n\n    this._stopScroll();\n  };\n\n  AutoScroll.prototype._onMouseMove = function (ev) {\n    this._computeScrollVelocity(ev);\n  };\n\n  AutoScroll.prototype._onTouchMove = function (ev) {\n    if (ev.touches.length > 0) {\n      this._computeScrollVelocity(ev);\n    }\n  };\n\n  AutoScroll.prototype._computeScrollVelocity = function (ev) {\n    if (!this._scrollRect) {\n      return;\n    }\n\n    var clientX;\n    var clientY;\n\n    if ('clientX' in ev) {\n      clientX = ev.clientX;\n      clientY = ev.clientY;\n    } else {\n      clientX = ev.touches[0].clientX;\n      clientY = ev.touches[0].clientY;\n    }\n\n    var scrollRectTop = this._scrollRect.top;\n    var scrollRectLeft = this._scrollRect.left;\n    var scrollClientBottom = scrollRectTop + this._scrollRect.height - SCROLL_GUTTER;\n    var scrollClientRight = scrollRectLeft + this._scrollRect.width - SCROLL_GUTTER; // variables to use for alternating scroll direction\n\n    var scrollRect;\n    var clientDirection;\n    var scrollClient; // if either of these conditions are met we are scrolling vertically else horizontally\n\n    if (clientY < scrollRectTop + SCROLL_GUTTER || clientY > scrollClientBottom) {\n      clientDirection = clientY;\n      scrollRect = scrollRectTop;\n      scrollClient = scrollClientBottom;\n      this._isVerticalScroll = true;\n    } else {\n      clientDirection = clientX;\n      scrollRect = scrollRectLeft;\n      scrollClient = scrollClientRight;\n      this._isVerticalScroll = false;\n    } // calculate scroll velocity and direction\n\n\n    if (clientDirection < scrollRect + SCROLL_GUTTER) {\n      this._scrollVelocity = Math.max(-MAX_SCROLL_VELOCITY, -MAX_SCROLL_VELOCITY * ((SCROLL_GUTTER - (clientDirection - scrollRect)) / SCROLL_GUTTER));\n    } else if (clientDirection > scrollClient) {\n      this._scrollVelocity = Math.min(MAX_SCROLL_VELOCITY, MAX_SCROLL_VELOCITY * ((clientDirection - scrollClient) / SCROLL_GUTTER));\n    } else {\n      this._scrollVelocity = 0;\n    }\n\n    if (this._scrollVelocity) {\n      this._startScroll();\n    } else {\n      this._stopScroll();\n    }\n  };\n\n  AutoScroll.prototype._startScroll = function () {\n    if (!this._timeoutId) {\n      this._incrementScroll();\n    }\n  };\n\n  AutoScroll.prototype._incrementScroll = function () {\n    if (this._scrollableParent) {\n      if (this._isVerticalScroll) {\n        this._scrollableParent.scrollTop += Math.round(this._scrollVelocity);\n      } else {\n        this._scrollableParent.scrollLeft += Math.round(this._scrollVelocity);\n      }\n    }\n\n    this._timeoutId = setTimeout(this._incrementScroll, SCROLL_ITERATION_DELAY);\n  };\n\n  AutoScroll.prototype._stopScroll = function () {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n      delete this._timeoutId;\n    }\n  };\n\n  return AutoScroll;\n}();\n\nexport { AutoScroll };","map":{"version":3,"sources":["AutoScroll.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventGroup } from './EventGroup';\nimport { findScrollableParent } from './scroll';\nimport { getRect } from './dom/getRect';\nimport { IRectangle } from './IRectangle';\n\ndeclare function setTimeout(cb: Function, delay: number): number;\n\nconst SCROLL_ITERATION_DELAY = 16;\nconst SCROLL_GUTTER = 100;\nconst MAX_SCROLL_VELOCITY = 15;\n\n/**\n * AutoScroll simply hooks up mouse events given a parent element, and scrolls the container\n * up/down depending on how close the mouse is to the top/bottom of the container.\n *\n * Once you don't want autoscroll any more, just dispose the helper and it will unhook events.\n *\n * @public\n * {@docCategory AutoScroll}\n */\nexport class AutoScroll {\n  private _events: EventGroup;\n  private _scrollableParent: HTMLElement | null;\n  private _scrollRect: IRectangle | undefined;\n  private _scrollVelocity: number;\n  private _isVerticalScroll: boolean;\n  private _timeoutId: number;\n\n  constructor(element: HTMLElement) {\n    this._events = new EventGroup(this);\n    this._scrollableParent = findScrollableParent(element) as HTMLElement;\n\n    this._incrementScroll = this._incrementScroll.bind(this);\n    this._scrollRect = getRect(this._scrollableParent);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (this._scrollableParent === (window as any)) {\n      this._scrollableParent = document.body;\n    }\n\n    if (this._scrollableParent) {\n      this._events.on(window, 'mousemove', this._onMouseMove, true);\n      this._events.on(window, 'touchmove', this._onTouchMove, true);\n    }\n  }\n\n  public dispose(): void {\n    this._events.dispose();\n    this._stopScroll();\n  }\n\n  private _onMouseMove(ev: MouseEvent): void {\n    this._computeScrollVelocity(ev);\n  }\n\n  private _onTouchMove(ev: TouchEvent): void {\n    if (ev.touches.length > 0) {\n      this._computeScrollVelocity(ev);\n    }\n  }\n\n  private _computeScrollVelocity(ev: MouseEvent | TouchEvent): void {\n    if (!this._scrollRect) {\n      return;\n    }\n\n    let clientX: number;\n    let clientY: number;\n    if ('clientX' in ev) {\n      clientX = ev.clientX;\n      clientY = ev.clientY;\n    } else {\n      clientX = ev.touches[0].clientX;\n      clientY = ev.touches[0].clientY;\n    }\n\n    let scrollRectTop = this._scrollRect.top;\n    let scrollRectLeft = this._scrollRect.left;\n    let scrollClientBottom = scrollRectTop + this._scrollRect.height - SCROLL_GUTTER;\n    let scrollClientRight = scrollRectLeft + this._scrollRect.width - SCROLL_GUTTER;\n\n    // variables to use for alternating scroll direction\n    let scrollRect;\n    let clientDirection;\n    let scrollClient;\n\n    // if either of these conditions are met we are scrolling vertically else horizontally\n    if (clientY < scrollRectTop + SCROLL_GUTTER || clientY > scrollClientBottom) {\n      clientDirection = clientY;\n      scrollRect = scrollRectTop;\n      scrollClient = scrollClientBottom;\n      this._isVerticalScroll = true;\n    } else {\n      clientDirection = clientX;\n      scrollRect = scrollRectLeft;\n      scrollClient = scrollClientRight;\n      this._isVerticalScroll = false;\n    }\n\n    // calculate scroll velocity and direction\n    if (clientDirection! < scrollRect + SCROLL_GUTTER) {\n      this._scrollVelocity = Math.max(\n        -MAX_SCROLL_VELOCITY,\n        -MAX_SCROLL_VELOCITY * ((SCROLL_GUTTER - (clientDirection - scrollRect)) / SCROLL_GUTTER),\n      );\n    } else if (clientDirection > scrollClient) {\n      this._scrollVelocity = Math.min(\n        MAX_SCROLL_VELOCITY,\n        MAX_SCROLL_VELOCITY * ((clientDirection - scrollClient) / SCROLL_GUTTER),\n      );\n    } else {\n      this._scrollVelocity = 0;\n    }\n\n    if (this._scrollVelocity) {\n      this._startScroll();\n    } else {\n      this._stopScroll();\n    }\n  }\n\n  private _startScroll(): void {\n    if (!this._timeoutId) {\n      this._incrementScroll();\n    }\n  }\n\n  private _incrementScroll(): void {\n    if (this._scrollableParent) {\n      if (this._isVerticalScroll) {\n        this._scrollableParent.scrollTop += Math.round(this._scrollVelocity);\n      } else {\n        this._scrollableParent.scrollLeft += Math.round(this._scrollVelocity);\n      }\n    }\n\n    this._timeoutId = setTimeout(this._incrementScroll, SCROLL_ITERATION_DELAY);\n  }\n\n  private _stopScroll(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n      delete this._timeoutId;\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}