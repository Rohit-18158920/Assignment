{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport elementType from 'react-prop-types/lib/elementType';\nimport SafeAnchor from './SafeAnchor';\nimport createChainedFunction from './utils/createChainedFunction';\nvar propTypes = {\n  /**\n   * only here to satisfy linting, just the html onClick handler.\n   *\n   * @private\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * You can use a custom element for this component\n   */\n  componentClass: elementType\n};\nvar defaultProps = {\n  componentClass: SafeAnchor\n};\nvar contextTypes = {\n  $bs_panel: PropTypes.shape({\n    bodyId: PropTypes.string,\n    onToggle: PropTypes.func,\n    expanded: PropTypes.bool\n  })\n};\n\nvar PanelToggle = function (_React$Component) {\n  _inherits(PanelToggle, _React$Component);\n\n  function PanelToggle() {\n    _classCallCheck(this, PanelToggle);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args)));\n\n    _this.handleToggle = _this.handleToggle.bind(_this);\n    return _this;\n  }\n\n  PanelToggle.prototype.handleToggle = function handleToggle(event) {\n    var _ref = this.context.$bs_panel || {},\n        onToggle = _ref.onToggle;\n\n    if (onToggle) {\n      onToggle(event);\n    }\n  };\n\n  PanelToggle.prototype.render = function render() {\n    var _props = this.props,\n        onClick = _props.onClick,\n        className = _props.className,\n        componentClass = _props.componentClass,\n        props = _objectWithoutProperties(_props, ['onClick', 'className', 'componentClass']);\n\n    var _ref2 = this.context.$bs_panel || {},\n        expanded = _ref2.expanded,\n        bodyId = _ref2.bodyId;\n\n    var Component = componentClass;\n    props.onClick = createChainedFunction(onClick, this.handleToggle);\n    props['aria-expanded'] = expanded;\n    props.className = classNames(className, !expanded && 'collapsed');\n\n    if (bodyId) {\n      props['aria-controls'] = bodyId;\n    }\n\n    return React.createElement(Component, props);\n  };\n\n  return PanelToggle;\n}(React.Component);\n\nPanelToggle.propTypes = propTypes;\nPanelToggle.defaultProps = defaultProps;\nPanelToggle.contextTypes = contextTypes;\nexport default PanelToggle;","map":{"version":3,"sources":["D:/personalWork/assignment-frontend/node_modules/react-bootstrap/es/PanelToggle.js"],"names":["_objectWithoutProperties","_classCallCheck","_possibleConstructorReturn","_inherits","PropTypes","React","classNames","elementType","SafeAnchor","createChainedFunction","propTypes","onClick","func","componentClass","defaultProps","contextTypes","$bs_panel","shape","bodyId","string","onToggle","expanded","bool","PanelToggle","_React$Component","_len","arguments","length","args","Array","_key","_this","call","apply","concat","handleToggle","bind","prototype","event","_ref","context","render","_props","props","className","_ref2","Component","createElement"],"mappings":"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","sourcesContent":["import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport elementType from 'react-prop-types/lib/elementType';\nimport SafeAnchor from './SafeAnchor';\nimport createChainedFunction from './utils/createChainedFunction';\n\nvar propTypes = {\n  /**\n   * only here to satisfy linting, just the html onClick handler.\n   *\n   * @private\n   */\n  onClick: PropTypes.func,\n  /**\n   * You can use a custom element for this component\n   */\n  componentClass: elementType\n};\n\nvar defaultProps = {\n  componentClass: SafeAnchor\n};\n\nvar contextTypes = {\n  $bs_panel: PropTypes.shape({\n    bodyId: PropTypes.string,\n    onToggle: PropTypes.func,\n    expanded: PropTypes.bool\n  })\n};\n\nvar PanelToggle = function (_React$Component) {\n  _inherits(PanelToggle, _React$Component);\n\n  function PanelToggle() {\n    _classCallCheck(this, PanelToggle);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args)));\n\n    _this.handleToggle = _this.handleToggle.bind(_this);\n    return _this;\n  }\n\n  PanelToggle.prototype.handleToggle = function handleToggle(event) {\n    var _ref = this.context.$bs_panel || {},\n        onToggle = _ref.onToggle;\n\n    if (onToggle) {\n      onToggle(event);\n    }\n  };\n\n  PanelToggle.prototype.render = function render() {\n    var _props = this.props,\n        onClick = _props.onClick,\n        className = _props.className,\n        componentClass = _props.componentClass,\n        props = _objectWithoutProperties(_props, ['onClick', 'className', 'componentClass']);\n\n    var _ref2 = this.context.$bs_panel || {},\n        expanded = _ref2.expanded,\n        bodyId = _ref2.bodyId;\n\n    var Component = componentClass;\n\n    props.onClick = createChainedFunction(onClick, this.handleToggle);\n\n    props['aria-expanded'] = expanded;\n    props.className = classNames(className, !expanded && 'collapsed');\n\n    if (bodyId) {\n      props['aria-controls'] = bodyId;\n    }\n\n    return React.createElement(Component, props);\n  };\n\n  return PanelToggle;\n}(React.Component);\n\nPanelToggle.propTypes = propTypes;\nPanelToggle.defaultProps = defaultProps;\nPanelToggle.contextTypes = contextTypes;\n\nexport default PanelToggle;"]},"metadata":{},"sourceType":"module"}