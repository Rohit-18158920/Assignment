{"ast":null,"code":"import { DefaultPalette } from './colors/index';\nimport { DefaultEffects } from './effects/index';\nimport { DefaultFontStyles } from './fonts/index';\nimport { mergeThemes } from './mergeThemes';\nimport { DefaultSpacing } from './spacing/index';\nimport { makeSemanticColors } from './utilities/makeSemanticColors';\n/**\n * Creates a custom theme definition.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\n\nexport function createTheme(theme, depComments) {\n  if (theme === void 0) {\n    theme = {};\n  }\n\n  if (depComments === void 0) {\n    depComments = false;\n  }\n\n  var isInverted = !!theme.isInverted;\n  var baseTheme = {\n    palette: DefaultPalette,\n    effects: DefaultEffects,\n    fonts: DefaultFontStyles,\n    spacing: DefaultSpacing,\n    isInverted: isInverted,\n    disableGlobalClassNames: false,\n    semanticColors: makeSemanticColors(DefaultPalette, DefaultEffects, undefined, isInverted, depComments),\n    rtl: undefined\n  };\n  return mergeThemes(baseTheme, theme);\n}","map":{"version":3,"sources":["createTheme.ts"],"names":[],"mappings":"AAAA,SAAS,cAAT,QAA+B,gBAA/B;AACA,SAAS,cAAT,QAA+B,iBAA/B;AACA,SAAS,iBAAT,QAAkC,eAAlC;AACA,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,cAAT,QAA+B,iBAA/B;AAEA,SAAS,kBAAT,QAAmC,gCAAnC;AAEA;;;;AAIG;;AACH,OAAM,SAAU,WAAV,CAAsB,KAAtB,EAAgD,WAAhD,EAA4E;AAAtD,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,EAAA;AAAwB;;AAAE,MAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,KAAA;AAA4B;;AAChF,MAAM,UAAU,GAAG,CAAC,CAAC,KAAK,CAAC,UAA3B;AACA,MAAM,SAAS,GAAU;AACvB,IAAA,OAAO,EAAE,cADc;AAEvB,IAAA,OAAO,EAAE,cAFc;AAGvB,IAAA,KAAK,EAAE,iBAHgB;AAIvB,IAAA,OAAO,EAAE,cAJc;AAKvB,IAAA,UAAU,EAAA,UALa;AAMvB,IAAA,uBAAuB,EAAE,KANF;AAOvB,IAAA,cAAc,EAAE,kBAAkB,CAAC,cAAD,EAAiB,cAAjB,EAAiC,SAAjC,EAA4C,UAA5C,EAAwD,WAAxD,CAPX;AAQvB,IAAA,GAAG,EAAE;AARkB,GAAzB;AAWA,SAAO,WAAW,CAAC,SAAD,EAAY,KAAZ,CAAlB;AACD","sourcesContent":["import { DefaultPalette } from './colors/index';\nimport { DefaultEffects } from './effects/index';\nimport { DefaultFontStyles } from './fonts/index';\nimport { mergeThemes } from './mergeThemes';\nimport { DefaultSpacing } from './spacing/index';\nimport { PartialTheme, Theme } from './types/index';\nimport { makeSemanticColors } from './utilities/makeSemanticColors';\n\n/**\n * Creates a custom theme definition.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function createTheme(theme: PartialTheme = {}, depComments: boolean = false): Theme {\n  const isInverted = !!theme.isInverted;\n  const baseTheme: Theme = {\n    palette: DefaultPalette,\n    effects: DefaultEffects,\n    fonts: DefaultFontStyles,\n    spacing: DefaultSpacing,\n    isInverted,\n    disableGlobalClassNames: false,\n    semanticColors: makeSemanticColors(DefaultPalette, DefaultEffects, undefined, isInverted, depComments),\n    rtl: undefined,\n  };\n\n  return mergeThemes(baseTheme, theme);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}