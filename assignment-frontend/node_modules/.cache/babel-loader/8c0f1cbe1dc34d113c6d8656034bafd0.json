{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nvar getClassNames = classNamesFunction(); // if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\n\nvar ZERO_THRESHOLD = 0.01;\n/**\n * ProgressIndicator with no default styles.\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\n\nvar ProgressIndicatorBase =\n/** @class */\nfunction (_super) {\n  __extends(ProgressIndicatorBase, _super);\n\n  function ProgressIndicatorBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._onRenderProgress = function (props) {\n      var _a = _this.props,\n          ariaValueText = _a.ariaValueText,\n          barHeight = _a.barHeight,\n          className = _a.className,\n          styles = _a.styles,\n          theme = _a.theme;\n      var percentComplete = typeof _this.props.percentComplete === 'number' ? Math.min(100, Math.max(0, _this.props.percentComplete * 100)) : undefined;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        className: className,\n        barHeight: barHeight,\n        indeterminate: percentComplete === undefined ? true : false\n      });\n      var progressBarStyles = {\n        width: percentComplete !== undefined ? percentComplete + '%' : undefined,\n        transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined\n      };\n      var ariaValueMin = percentComplete !== undefined ? 0 : undefined;\n      var ariaValueMax = percentComplete !== undefined ? 100 : undefined;\n      var ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete) : undefined;\n      return React.createElement(\"div\", {\n        className: classNames.itemProgress\n      }, React.createElement(\"div\", {\n        className: classNames.progressTrack\n      }), React.createElement(\"div\", {\n        className: classNames.progressBar,\n        style: progressBarStyles,\n        role: \"progressbar\",\n        \"aria-valuemin\": ariaValueMin,\n        \"aria-valuemax\": ariaValueMax,\n        \"aria-valuenow\": ariaValueNow,\n        \"aria-valuetext\": ariaValueText\n      }));\n    };\n\n    return _this;\n  }\n\n  ProgressIndicatorBase.prototype.render = function () {\n    var _a = this.props,\n        barHeight = _a.barHeight,\n        className = _a.className,\n        // eslint-disable-next-line deprecation/deprecation\n    _b = _a.label,\n        // eslint-disable-next-line deprecation/deprecation\n    label = _b === void 0 ? this.props.title : _b,\n        // Fall back to deprecated value.\n    description = _a.description,\n        styles = _a.styles,\n        theme = _a.theme,\n        progressHidden = _a.progressHidden,\n        _c = _a.onRenderProgress,\n        onRenderProgress = _c === void 0 ? this._onRenderProgress : _c;\n    var percentComplete = typeof this.props.percentComplete === 'number' ? Math.min(100, Math.max(0, this.props.percentComplete * 100)) : undefined;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      barHeight: barHeight,\n      indeterminate: percentComplete === undefined ? true : false\n    });\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, label ? React.createElement(\"div\", {\n      className: classNames.itemName\n    }, label) : null, !progressHidden ? onRenderProgress(__assign(__assign({}, this.props), {\n      percentComplete: percentComplete\n    }), this._onRenderProgress) : null, description ? React.createElement(\"div\", {\n      className: classNames.itemDescription\n    }, description) : null);\n  };\n\n  ProgressIndicatorBase.defaultProps = {\n    label: '',\n    description: '',\n    width: 180\n  };\n  return ProgressIndicatorBase;\n}(React.Component);\n\nexport { ProgressIndicatorBase };","map":{"version":3,"sources":["components/ProgressIndicator/ProgressIndicator.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,kBAAT,QAAmC,iBAAnC;AAOA,IAAM,aAAa,GAAG,kBAAkB,EAAxC,C,CAEA;AACA;;AACA,IAAM,cAAc,GAAG,IAAvB;AAEA;;;AAGG;;AACH,IAAA,qBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2C,EAAA,SAAA,CAAA,qBAAA,EAAA,MAAA,CAAA;;AAA3C,WAAA,qBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAiDU,IAAA,KAAA,CAAA,iBAAA,GAAoB,UAAC,KAAD,EAA+B;AACnD,UAAA,EAAA,GAAA,KAAA,CAAA,KAAA;AAAA,UAAE,aAAA,GAAA,EAAA,CAAA,aAAF;AAAA,UAAiB,SAAA,GAAA,EAAA,CAAA,SAAjB;AAAA,UAA4B,SAAA,GAAA,EAAA,CAAA,SAA5B;AAAA,UAAuC,MAAA,GAAA,EAAA,CAAA,MAAvC;AAAA,UAA+C,KAAA,GAAA,EAAA,CAAA,KAA/C;AAEN,UAAM,eAAe,GACnB,OAAO,KAAI,CAAC,KAAL,CAAW,eAAlB,KAAsC,QAAtC,GACI,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,KAAI,CAAC,KAAL,CAAW,eAAX,GAA6B,GAAzC,CAAd,CADJ,GAEI,SAHN;AAKA,UAAM,UAAU,GAAG,aAAa,CAAC,MAAD,EAAS;AACvC,QAAA,KAAK,EAAE,KADgC;AAEvC,QAAA,SAAS,EAAA,SAF8B;AAGvC,QAAA,SAAS,EAAA,SAH8B;AAIvC,QAAA,aAAa,EAAE,eAAe,KAAK,SAApB,GAAgC,IAAhC,GAAuC;AAJf,OAAT,CAAhC;AAOA,UAAM,iBAAiB,GAAG;AACxB,QAAA,KAAK,EAAE,eAAe,KAAK,SAApB,GAAgC,eAAe,GAAG,GAAlD,GAAwD,SADvC;AAExB,QAAA,UAAU,EAAE,eAAe,KAAK,SAApB,IAAiC,eAAe,GAAG,cAAnD,GAAoE,MAApE,GAA6E;AAFjE,OAA1B;AAKA,UAAM,YAAY,GAAG,eAAe,KAAK,SAApB,GAAgC,CAAhC,GAAoC,SAAzD;AACA,UAAM,YAAY,GAAG,eAAe,KAAK,SAApB,GAAgC,GAAhC,GAAsC,SAA3D;AACA,UAAM,YAAY,GAAG,eAAe,KAAK,SAApB,GAAgC,IAAI,CAAC,KAAL,CAAW,eAAX,CAAhC,GAA+D,SAApF;AAEA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAE,UAAU,CAAC;AAA3B,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAE,UAAU,CAAC;AAA3B,OAAA,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,QAAA,SAAS,EAAE,UAAU,CAAC,WADxB;AAEE,QAAA,KAAK,EAAE,iBAFT;AAGE,QAAA,IAAI,EAAC,aAHP;AAGoB,yBACH,YAJjB;AAI6B,yBACZ,YALjB;AAK6B,yBACZ,YANjB;AAM6B,0BACX;AAPlB,OAAA,CAFF,CADF;AAcD,KAtCO;;;AAuCT;;AAjFQ,EAAA,qBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACQ,QAAA,EAAA,GAAA,KAAA,KAAA;AAAA,QACJ,SAAA,GAAA,EAAA,CAAA,SADI;AAAA,QAEJ,SAAA,GAAA,EAAA,CAAA,SAFI;AAAA,QAGJ;AACA,IAAA,EAAA,GAAA,EAAA,CAAA,KAJI;AAAA,QAGJ;AACA,IAAA,KAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,KAAA,CAAA,KAAA,GAAA,EAJI;AAAA,QAIsB;AAC1B,IAAA,WAAA,GAAA,EAAA,CAAA,WALI;AAAA,QAMJ,MAAA,GAAA,EAAA,CAAA,MANI;AAAA,QAOJ,KAAA,GAAA,EAAA,CAAA,KAPI;AAAA,QAQJ,cAAA,GAAA,EAAA,CAAA,cARI;AAAA,QASJ,EAAA,GAAA,EAAA,CAAA,gBATI;AAAA,QASJ,gBAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,iBAAA,GAAA,EATI;AAYN,QAAM,eAAe,GACnB,OAAO,KAAK,KAAL,CAAW,eAAlB,KAAsC,QAAtC,GACI,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,KAAK,KAAL,CAAW,eAAX,GAA6B,GAAzC,CAAd,CADJ,GAEI,SAHN;AAKA,QAAM,UAAU,GAAG,aAAa,CAAC,MAAD,EAAS;AACvC,MAAA,KAAK,EAAE,KADgC;AAEvC,MAAA,SAAS,EAAA,SAF8B;AAGvC,MAAA,SAAS,EAAA,SAH8B;AAIvC,MAAA,aAAa,EAAE,eAAe,KAAK,SAApB,GAAgC,IAAhC,GAAuC;AAJf,KAAT,CAAhC;AAOA,WACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAE,UAAU,CAAC;AAA3B,KAAA,EACG,KAAK,GAAG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAE,UAAU,CAAC;AAA3B,KAAA,EAAsC,KAAtC,CAAH,GAAwD,IADhE,EAEG,CAAC,cAAD,GACG,gBAAgB,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAER,KAAK,KAFG,CAAA,EAE8B;AAC1C,MAAA,eAAe,EAAE;AADyB,KAF9B,CAAA,EAKd,KAAK,iBALS,CADnB,GAQG,IAVN,EAWG,WAAW,GAAG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAE,UAAU,CAAC;AAA3B,KAAA,EAA6C,WAA7C,CAAH,GAAqE,IAXnF,CADF;AAeD,GAxCM;;AANO,EAAA,qBAAA,CAAA,YAAA,GAAe;AAC3B,IAAA,KAAK,EAAE,EADoB;AAE3B,IAAA,WAAW,EAAE,EAFc;AAG3B,IAAA,KAAK,EAAE;AAHoB,GAAf;AAuFhB,SAAA,qBAAA;AAAC,CAxFD,CAA2C,KAAK,CAAC,SAAjD,CAAA;;SAAa,qB","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport {\n  IProgressIndicatorProps,\n  IProgressIndicatorStyleProps,\n  IProgressIndicatorStyles,\n} from './ProgressIndicator.types';\n\nconst getClassNames = classNamesFunction<IProgressIndicatorStyleProps, IProgressIndicatorStyles>();\n\n// if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\nconst ZERO_THRESHOLD = 0.01;\n\n/**\n * ProgressIndicator with no default styles.\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\nexport class ProgressIndicatorBase extends React.Component<IProgressIndicatorProps, {}> {\n  public static defaultProps = {\n    label: '',\n    description: '',\n    width: 180,\n  };\n\n  public render() {\n    const {\n      barHeight,\n      className,\n      // eslint-disable-next-line deprecation/deprecation\n      label = this.props.title, // Fall back to deprecated value.\n      description,\n      styles,\n      theme,\n      progressHidden,\n      onRenderProgress = this._onRenderProgress,\n    } = this.props;\n\n    const percentComplete =\n      typeof this.props.percentComplete === 'number'\n        ? Math.min(100, Math.max(0, this.props.percentComplete * 100))\n        : undefined;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      barHeight,\n      indeterminate: percentComplete === undefined ? true : false,\n    });\n\n    return (\n      <div className={classNames.root}>\n        {label ? <div className={classNames.itemName}>{label}</div> : null}\n        {!progressHidden\n          ? onRenderProgress(\n              {\n                ...(this.props as IProgressIndicatorProps),\n                percentComplete: percentComplete,\n              },\n              this._onRenderProgress,\n            )\n          : null}\n        {description ? <div className={classNames.itemDescription}>{description}</div> : null}\n      </div>\n    );\n  }\n\n  private _onRenderProgress = (props: IProgressIndicatorProps): JSX.Element => {\n    const { ariaValueText, barHeight, className, styles, theme } = this.props;\n\n    const percentComplete =\n      typeof this.props.percentComplete === 'number'\n        ? Math.min(100, Math.max(0, this.props.percentComplete * 100))\n        : undefined;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      barHeight,\n      indeterminate: percentComplete === undefined ? true : false,\n    });\n\n    const progressBarStyles = {\n      width: percentComplete !== undefined ? percentComplete + '%' : undefined,\n      transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined,\n    };\n\n    const ariaValueMin = percentComplete !== undefined ? 0 : undefined;\n    const ariaValueMax = percentComplete !== undefined ? 100 : undefined;\n    const ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete!) : undefined;\n\n    return (\n      <div className={classNames.itemProgress}>\n        <div className={classNames.progressTrack} />\n        <div\n          className={classNames.progressBar}\n          style={progressBarStyles}\n          role=\"progressbar\"\n          aria-valuemin={ariaValueMin}\n          aria-valuemax={ariaValueMax}\n          aria-valuenow={ariaValueNow}\n          aria-valuetext={ariaValueText}\n        />\n      </div>\n    );\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}