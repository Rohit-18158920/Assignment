{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Customizer, getNativeProps, divProperties, classNamesFunction, getDocument, memoizeFunction, getRTL, FocusRects } from '../../Utilities';\nimport { createTheme } from '../../Styling';\nvar getClassNames = classNamesFunction();\nvar getFabricTheme = memoizeFunction(function (theme, isRTL) {\n  return createTheme(__assign(__assign({}, theme), {\n    rtl: isRTL\n  }));\n});\n\nvar getDir = function (theme, dir) {\n  var contextDir = getRTL(theme) ? 'rtl' : 'ltr';\n  var pageDir = getRTL() ? 'rtl' : 'ltr';\n  var componentDir = dir ? dir : contextDir;\n  return {\n    // If Fabric dir !== contextDir\n    // Or If contextDir !== pageDir\n    // Then we need to set dir of the Fabric root\n    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,\n    // If dir !== contextDir || pageDir\n    // then set contextual theme around content\n    needsTheme: componentDir !== contextDir\n  };\n};\n\nvar FabricBase =\n/** @class */\nfunction (_super) {\n  __extends(FabricBase, _super);\n\n  function FabricBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._rootElement = React.createRef();\n    _this._removeClassNameFromBody = undefined;\n    return _this;\n  }\n\n  FabricBase.prototype.render = function () {\n    var _a = this.props,\n        _b = _a.as,\n        Root = _b === void 0 ? 'div' : _b,\n        theme = _a.theme,\n        dir = _a.dir;\n\n    var classNames = this._getClassNames();\n\n    var divProps = getNativeProps(this.props, divProperties, ['dir']);\n\n    var _c = getDir(theme, dir),\n        rootDir = _c.rootDir,\n        needsTheme = _c.needsTheme;\n\n    var renderedContent = React.createElement(Root, __assign({\n      dir: rootDir\n    }, divProps, {\n      className: classNames.root,\n      ref: this._rootElement\n    }));\n\n    if (needsTheme) {\n      renderedContent = React.createElement(Customizer, {\n        settings: {\n          theme: getFabricTheme(theme, dir === 'rtl')\n        }\n      }, renderedContent);\n    }\n\n    return React.createElement(React.Fragment, null, renderedContent, React.createElement(FocusRects, {\n      rootRef: this._rootElement\n    }));\n  };\n\n  FabricBase.prototype.componentDidMount = function () {\n    this._addClassNameToBody();\n  };\n\n  FabricBase.prototype.componentWillUnmount = function () {\n    if (this._removeClassNameFromBody) {\n      this._removeClassNameFromBody();\n    }\n  };\n\n  FabricBase.prototype._getClassNames = function () {\n    var _a = this.props,\n        className = _a.className,\n        theme = _a.theme,\n        applyTheme = _a.applyTheme,\n        styles = _a.styles;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      applyTheme: applyTheme,\n      className: className\n    });\n    return classNames;\n  };\n\n  FabricBase.prototype._addClassNameToBody = function () {\n    if (this.props.applyThemeToBody) {\n      var classNames_1 = this._getClassNames();\n\n      var currentDoc_1 = getDocument(this._rootElement.current);\n\n      if (currentDoc_1) {\n        currentDoc_1.body.classList.add(classNames_1.bodyThemed);\n\n        this._removeClassNameFromBody = function () {\n          currentDoc_1.body.classList.remove(classNames_1.bodyThemed);\n        };\n      }\n    }\n  };\n\n  return FabricBase;\n}(React.Component);\n\nexport { FabricBase };","map":{"version":3,"sources":["components/Fabric/Fabric.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Customizer,\n  getNativeProps,\n  divProperties,\n  classNamesFunction,\n  getDocument,\n  memoizeFunction,\n  getRTL,\n  FocusRects,\n} from '../../Utilities';\nimport { IFabricProps, IFabricStyleProps, IFabricStyles } from './Fabric.types';\nimport { IProcessedStyleSet } from '@uifabric/merge-styles';\nimport { ITheme, createTheme } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IFabricStyleProps, IFabricStyles>();\nconst getFabricTheme = memoizeFunction((theme?: ITheme, isRTL?: boolean) => createTheme({ ...theme, rtl: isRTL }));\n\nconst getDir = (theme?: ITheme, dir?: IFabricProps['dir']) => {\n  const contextDir = getRTL(theme) ? 'rtl' : 'ltr';\n  const pageDir = getRTL() ? 'rtl' : 'ltr';\n  const componentDir = dir ? dir : contextDir;\n  return {\n    // If Fabric dir !== contextDir\n    // Or If contextDir !== pageDir\n    // Then we need to set dir of the Fabric root\n    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,\n    // If dir !== contextDir || pageDir\n    // then set contextual theme around content\n    needsTheme: componentDir !== contextDir,\n  };\n};\n\nexport class FabricBase extends React.Component<IFabricProps> {\n  private _rootElement = React.createRef<HTMLDivElement>();\n  private _removeClassNameFromBody?: () => void = undefined;\n\n  public render() {\n    const { as: Root = 'div', theme, dir } = this.props;\n    const classNames = this._getClassNames();\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['dir']);\n    const { rootDir, needsTheme } = getDir(theme, dir);\n\n    let renderedContent = <Root dir={rootDir} {...divProps} className={classNames.root} ref={this._rootElement} />;\n\n    if (needsTheme) {\n      renderedContent = (\n        <Customizer settings={{ theme: getFabricTheme(theme, dir === 'rtl') }}>{renderedContent}</Customizer>\n      );\n    }\n\n    return (\n      <>\n        {renderedContent}\n        <FocusRects rootRef={this._rootElement} />\n      </>\n    );\n  }\n\n  public componentDidMount(): void {\n    this._addClassNameToBody();\n  }\n\n  public componentWillUnmount(): void {\n    if (this._removeClassNameFromBody) {\n      this._removeClassNameFromBody();\n    }\n  }\n\n  private _getClassNames(): IProcessedStyleSet<IFabricStyles> {\n    const { className, theme, applyTheme, styles } = this.props;\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      applyTheme: applyTheme,\n      className,\n    });\n    return classNames;\n  }\n\n  private _addClassNameToBody(): void {\n    if (this.props.applyThemeToBody) {\n      const classNames = this._getClassNames();\n      const currentDoc = getDocument(this._rootElement.current);\n      if (currentDoc) {\n        currentDoc.body.classList.add(classNames.bodyThemed);\n        this._removeClassNameFromBody = () => {\n          currentDoc.body.classList.remove(classNames.bodyThemed);\n        };\n      }\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}